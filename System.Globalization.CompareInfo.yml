### YamlMime:ManagedReference
items:
- uid: System.Globalization.CompareInfo
  commentId: T:System.Globalization.CompareInfo
  id: CompareInfo
  parent: System.Globalization
  children:
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)
  - System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Compare(System.String,System.String)
  - System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Equals(System.Object)
  - System.Globalization.CompareInfo.GetCompareInfo(System.String)
  - System.Globalization.CompareInfo.GetHashCode
  - System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String)
  - System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String)
  - System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  - System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  - System.Globalization.CompareInfo.Name
  - System.Globalization.CompareInfo.ToString
  langs:
  - csharp
  - vb
  name: CompareInfo
  nameWithType: CompareInfo
  fullName: System.Globalization.CompareInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareInfo
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 66
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Implements a set of methods for culture-sensitive string comparisons.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public class CompareInfo : IDeserializationCallback
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Class CompareInfo
          Implements IDeserializationCallback
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.CompareInfo.Name
  commentId: P:System.Globalization.CompareInfo.Name
  id: Name
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: CompareInfo.Name
  fullName: System.Globalization.CompareInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 318
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the name of the culture used for sorting operations by this <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public virtual string Name { get; }
    content.vb: >-
      <ComVisible(False)>

      Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of a culture.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, Int32, String, Int32, Int32)
  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 452
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares a section of one string with a section of another string.</p>\n"
  syntax:
    content: public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: length1
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string1</em> to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    - id: length2
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string2</em> to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\n<p>-or- </p>\n<p>\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: Compare(System.String,System.Int32,System.Int32,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)
  nameWithType: CompareInfo.Compare(String, Int32, Int32, String, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.Int32, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 471
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares a section of one string with a section of another string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int Compare(string string1, int offset1, int length1, string string2, int offset2, int length2, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function Compare(string1 As String, offset1 As Integer, length1 As Integer, string2 As String, offset2 As Integer, length2 As Integer, options As CompareOptions) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: length1
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string1</em> to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    - id: length2
      type: System.Int32
      description: "\n<p>The number of consecutive characters in <em>string2</em> to compare. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>length1</em> or <em>offset2</em> or <em>length2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>.</p>\n<p>-or- </p>\n<p>\n<em>length1</em> is greater than the number of characters from <em>offset1</em> to the end of <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>length2</em> is greater than the number of characters from <em>offset2</em> to the end of <em>string2</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32)
  id: Compare(System.String,System.Int32,System.String,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32)
  nameWithType: CompareInfo.Compare(String, Int32, String, Int32)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 465
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares the end section of a string with the end section of another string.</p>\n"
  syntax:
    content: public virtual int Compare(string string1, int offset1, string string2, int offset2)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, string2 As String, offset2 As Integer) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32, CompareOptions)
  nameWithType: CompareInfo.Compare(String, Int32, String, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.Int32, System.String, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 458
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares the end section of a string with the end section of another string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int Compare(string string1, int offset1, string string2, int offset2, CompareOptions options)
    content.vb: Public Overridable Function Compare(string1 As String, offset1 As Integer, string2 As String, offset2 As Integer, options As CompareOptions) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: offset1
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string1</em> at which to start comparing. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: offset2
      type: System.Int32
      description: "\n<p>The zero-based index of the character in <em>string2</em> at which to start comparing. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is less than the specified section of <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>The specified section of <em>string1</em> is greater than the specified section of <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset1</em> or <em>offset2</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>offset1</em> is greater than or equal to the number of characters in <em>string1</em>.</p>\n<p>-or- </p>\n<p>\n<em>offset2</em> is greater than or equal to the number of characters in <em>string2</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  nameWithType: CompareInfo.Compare(String, String)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 395
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares two strings. </p>\n"
  syntax:
    content: public virtual int Compare(string string1, string string2)
    content.vb: Public Overridable Function Compare(string1 As String, string2 As String) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>\n<em>string1</em> is less than <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>\n<em>string1</em> is greater than <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.Compare(System.String,System.String,System.Globalization.CompareOptions)
  id: Compare(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Compare(String, String, CompareOptions)
  nameWithType: CompareInfo.Compare(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.Compare(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 400
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Compares two strings using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int Compare(string string1, string string2, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function Compare(string1 As String, string2 As String, options As CompareOptions) As Integer
    parameters:
    - id: string1
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: string2
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>string1</em> and <em>string2</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.StringSort\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>zero </p>\n</td><td>\n<p>The two strings are equal. </p>\n</td></tr><tr><td>\n<p>less than zero </p>\n</td><td>\n<p>\n<em>string1</em> is less than <em>string2</em>. </p>\n</td></tr><tr><td>\n<p>greater than zero </p>\n</td><td>\n<p>\n<em>string1</em> is greater than <em>string2</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.Equals(System.Object)
  commentId: M:System.Globalization.CompareInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CompareInfo.Equals(Object)
  fullName: System.Globalization.CompareInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 1135
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to compare with the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified object is equal to the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - linkId: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.CompareInfo.GetCompareInfo(System.String)
  commentId: M:System.Globalization.CompareInfo.GetCompareInfo(System.String)
  id: GetCompareInfo(System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: GetCompareInfo(String)
  nameWithType: CompareInfo.GetCompareInfo(String)
  fullName: System.Globalization.CompareInfo.GetCompareInfo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCompareInfo
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 207
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Initializes a new <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object that is associated with the culture with the specified name.</p>\n"
  syntax:
    content: public static CompareInfo GetCompareInfo(string name)
    content.vb: Public Shared Function GetCompareInfo(name As String) As CompareInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>A string representing the culture name. </p>\n"
    return:
      type: System.Globalization.CompareInfo
      description: "\n<p>A new <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object associated with the culture with the specified identifier and using string comparison methods in the current <xref href=\"System.Reflection.Assembly\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is an invalid culture name. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Globalization.CompareInfo.GetHashCode
  commentId: M:System.Globalization.CompareInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CompareInfo.GetHashCode()
  fullName: System.Globalization.CompareInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 1159
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> for hashing algorithms and data structures, such as a hash table.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.GetHashCode
  seealso:
  - linkId: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - linkId: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - linkId: System.Globalization.CompareInfo.Equals(System.Object)
    commentId: M:System.Globalization.CompareInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.GetHashCode(System.String,System.Globalization.CompareOptions)
  id: GetHashCode(System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: GetHashCode(String, CompareOptions)
  nameWithType: CompareInfo.GetHashCode(String, CompareOptions)
  fullName: System.Globalization.CompareInfo.GetHashCode(System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 1168
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the hash code for a string based on specified comparison options. </p>\n"
  syntax:
    content: public virtual int GetHashCode(string source, CompareOptions options)
    content.vb: Public Overridable Function GetHashCode(source As String, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string whose hash code is to be returned. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that determines how strings are compared. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  id: IndexOf(System.String,System.Char)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char)
  nameWithType: CompareInfo.IndexOf(String, Char)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 671
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, char value)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, CompareOptions)
  nameWithType: CompareInfo.IndexOf(String, Char, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 691
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, char value, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how the strings should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, Int32, CompareOptions)
  nameWithType: CompareInfo.IndexOf(String, Char, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 731
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, char value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32)
  id: IndexOf(System.String,System.Char,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, Int32, Int32)
  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 751
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, char value, int startIndex, int count)
    content.vb: Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, Char, Int32, Int32, CompareOptions)
  nameWithType: CompareInfo.IndexOf(String, Char, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 762
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int IndexOf(string source, char value, int startIndex, int count, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function IndexOf(source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String)
  id: IndexOf(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String)
  nameWithType: CompareInfo.IndexOf(String, String)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 681
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, string value)
    content.vb: Public Overridable Function IndexOf(source As String, value As String) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, CompareOptions)
  nameWithType: CompareInfo.IndexOf(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 701
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, string value, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1. Returns 0 (zero) if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, Int32, CompareOptions)
  nameWithType: CompareInfo.IndexOf(String, String, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 741
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that extends from the specified index to the end of the string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, string value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from <em>startIndex</em> to the end of <em>source</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32)
  id: IndexOf(System.String,System.String,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, Int32, Int32)
  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 757
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements.</p>\n"
  syntax:
    content: public virtual int IndexOf(string source, string value, int startIndex, int count)
    content.vb: Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: IndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IndexOf(String, String, Int32, Int32, CompareOptions)
  nameWithType: CompareInfo.IndexOf(String, String, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.IndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 795
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the first occurrence within the section of the source string that starts at the specified index and contains the specified number of elements using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int IndexOf(string source, string value, int startIndex, int count, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function IndexOf(source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em>, if found, within the section of <em>source</em> that starts at <em>startIndex</em> and contains the number of elements specified by <em>count</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String)
  id: IsPrefix(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsPrefix(String, String)
  nameWithType: CompareInfo.IsPrefix(String, String)
  fullName: System.Globalization.CompareInfo.IsPrefix(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPrefix
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 600
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string starts with the specified prefix.</p>\n"
  syntax:
    content: public virtual bool IsPrefix(string source, string prefix)
    content.vb: Public Overridable Function IsPrefix(source As String, prefix As String) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: prefix
      type: System.String
      description: "\n<p>The string to compare with the beginning of <em>source</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>prefix</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  id: IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsPrefix(String, String, CompareOptions)
  nameWithType: CompareInfo.IsPrefix(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.IsPrefix(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPrefix
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 561
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string starts with the specified prefix using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual bool IsPrefix(string source, string prefix, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function IsPrefix(source As String, prefix As String, options As CompareOptions) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: prefix
      type: System.String
      description: "\n<p>The string to compare with the beginning of <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>prefix</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>prefix</em> is less than or equal to the length of <em>source</em> and <em>source</em> starts with <em>prefix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>prefix</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String)
  id: IsSuffix(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsSuffix(String, String)
  nameWithType: CompareInfo.IsSuffix(String, String)
  fullName: System.Globalization.CompareInfo.IsSuffix(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSuffix
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 652
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string ends with the specified suffix.</p>\n"
  syntax:
    content: public virtual bool IsSuffix(string source, string suffix)
    content.vb: Public Overridable Function IsSuffix(source As String, suffix As String) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: suffix
      type: System.String
      description: "\n<p>The string to compare with the end of <em>source</em>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>suffix</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  id: IsSuffix(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: IsSuffix(String, String, CompareOptions)
  nameWithType: CompareInfo.IsSuffix(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.IsSuffix(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSuffix
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 616
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified source string ends with the specified suffix using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual bool IsSuffix(string source, string suffix, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function IsSuffix(source As String, suffix As String, options As CompareOptions) As Boolean
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search in. </p>\n"
    - id: suffix
      type: System.String
      description: "\n<p>The string to compare with the end of <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>suffix</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref> used by itself, or the bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the length of <em>suffix</em> is less than or equal to the length of <em>source</em> and <em>source</em> ends with <em>suffix</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>suffix</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char)
  id: LastIndexOf(System.String,System.Char)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char)
  nameWithType: CompareInfo.LastIndexOf(String, Char)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 861
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, char value)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.Char,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, CompareOptions)
  nameWithType: CompareInfo.LastIndexOf(String, Char, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 885
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.Char,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, Int32, CompareOptions)
  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 920
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, Int32, Int32)
  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 932
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, char value, int startIndex, int count)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.Char,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Char, Int32, Int32, CompareOptions)
  nameWithType: CompareInfo.LastIndexOf(String, Char, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.Char, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 944
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified character and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int LastIndexOf(string source, char value, int startIndex, int count, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function LastIndexOf(source As String, value As Char, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String)
  id: LastIndexOf(System.String,System.String)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String)
  nameWithType: CompareInfo.LastIndexOf(String, String)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 873
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, string value)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.String,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, CompareOptions)
  nameWithType: CompareInfo.LastIndexOf(String, String, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 896
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the entire source string using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within <em>source</em>, using the specified comparison options; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.String,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, Int32, CompareOptions)
  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 926
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that extends from the beginning of the string to the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, int startIndex, CompareOptions options)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that extends from the beginning of <em>source</em> to <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, Int32, Int32)
  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 938
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(string source, string value, int startIndex, int count)
    content.vb: Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  commentId: M:System.Globalization.CompareInfo.LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  id: LastIndexOf(System.String,System.String,System.Int32,System.Int32,System.Globalization.CompareOptions)
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, String, Int32, Int32, CompareOptions)
  nameWithType: CompareInfo.LastIndexOf(String, String, Int32, Int32, CompareOptions)
  fullName: System.Globalization.CompareInfo.LastIndexOf(System.String, System.String, System.Int32, System.Int32, System.Globalization.CompareOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 993
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Searches for the specified substring and returns the zero-based index of the last occurrence within the section of the source string that contains the specified number of elements and ends at the specified index using the specified <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual int LastIndexOf(string source, string value, int startIndex, int count, CompareOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function LastIndexOf(source As String, value As String, startIndex As Integer, count As Integer, options As CompareOptions) As Integer
    parameters:
    - id: source
      type: System.String
      description: "\n<p>The string to search. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to locate within <em>source</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    - id: options
      type: System.Globalization.CompareOptions
      description: "\n<p>A value that defines how <em>source</em> and <em>value</em> should be compared. <em>options</em> is either the enumeration value <xref href=\"System.Globalization.CompareOptions.Ordinal\" data-throw-if-not-resolved=\"false\"></xref>, or a bitwise combination of one or more of the following values: <xref href=\"System.Globalization.CompareOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreSymbols\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreNonSpace\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Globalization.CompareOptions.IgnoreWidth\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Globalization.CompareOptions.IgnoreKanaType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em>, if found, within the section of <em>source</em> that contains the number of elements specified by <em>count</em> and that ends at <em>startIndex</em>, using the specified comparison options; otherwise, -1. Returns <em>startIndex</em> if <em>value</em> is an ignorable character. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>source</em>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>source</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> contains an invalid <xref href=\"System.Globalization.CompareOptions\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - linkId: System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
    commentId: M:System.Globalization.CompareInfo.IndexOf(System.String,System.Char)
  - linkId: System.Globalization.CompareOptions
    commentId: T:System.Globalization.CompareOptions
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.CompareInfo.ToString
  commentId: M:System.Globalization.CompareInfo.ToString
  id: ToString
  parent: System.Globalization.CompareInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CompareInfo.ToString()
  fullName: System.Globalization.CompareInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/CompareInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Globalization/CompareInfo.cs
    startLine: 1259
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents the current <xref href=\"System.Globalization.CompareInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  seealso:
  - linkId: System.Object.ToString
    commentId: M:System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.CompareOptions
  commentId: T:System.Globalization.CompareOptions
  parent: System.Globalization
  isExternal: false
  name: CompareOptions
  nameWithType: CompareOptions
  fullName: System.Globalization.CompareOptions
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.CompareInfo
  commentId: T:System.Globalization.CompareInfo
  parent: System.Globalization
  isExternal: false
  name: CompareInfo
  nameWithType: CompareInfo
  fullName: System.Globalization.CompareInfo
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
