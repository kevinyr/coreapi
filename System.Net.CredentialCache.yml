### YamlMime:ManagedReference
items:
- uid: System.Net.CredentialCache
  commentId: T:System.Net.CredentialCache
  id: CredentialCache
  parent: System.Net
  children:
  - System.Net.CredentialCache.#ctor
  - System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  - System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)
  - System.Net.CredentialCache.DefaultCredentials
  - System.Net.CredentialCache.DefaultNetworkCredentials
  - System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)
  - System.Net.CredentialCache.GetCredential(System.Uri,System.String)
  - System.Net.CredentialCache.GetEnumerator
  - System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)
  - System.Net.CredentialCache.Remove(System.Uri,System.String)
  langs:
  - csharp
  - vb
  name: CredentialCache
  nameWithType: CredentialCache
  fullName: System.Net.CredentialCache
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CredentialCache
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 77
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides storage for multiple credentials.</p>\n"
  syntax:
    content: 'public class CredentialCache : IEnumerable, ICredentials, ICredentialsByHost'
    content.vb: >-
      Public Class CredentialCache
          Implements IEnumerable, ICredentials, ICredentialsByHost
  seealso:
  - linkId: System.Net.ICredentials
    commentId: T:System.Net.ICredentials
  - linkId: System.Net.WebRequest.Credentials
    commentId: P:System.Net.WebRequest.Credentials
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Net.ICredentials
  - System.Net.ICredentialsByHost
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.CredentialCache.#ctor
  commentId: M:System.Net.CredentialCache.#ctor
  id: '#ctor'
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: CredentialCache()
  nameWithType: CredentialCache.CredentialCache()
  fullName: System.Net.CredentialCache.CredentialCache()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 79
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CredentialCache()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.DefaultCredentials
  commentId: P:System.Net.CredentialCache.DefaultCredentials
  id: DefaultCredentials
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: DefaultCredentials
  nameWithType: CredentialCache.DefaultCredentials
  fullName: System.Net.CredentialCache.DefaultCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultCredentials
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 80
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the system credentials of the application.</p>\n"
  syntax:
    content: public static ICredentials DefaultCredentials { get; }
    content.vb: Public Shared ReadOnly Property DefaultCredentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
      description: "\n<p>An <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref> that represents the system credentials of the application.</p>\n"
  see:
  - linkId: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.CredentialCache.DefaultNetworkCredentials
  commentId: P:System.Net.CredentialCache.DefaultNetworkCredentials
  id: DefaultNetworkCredentials
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: DefaultNetworkCredentials
  nameWithType: CredentialCache.DefaultNetworkCredentials
  fullName: System.Net.CredentialCache.DefaultNetworkCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultNetworkCredentials
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 81
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the network credentials of the current security context.</p>\n"
  syntax:
    content: public static NetworkCredential DefaultNetworkCredentials { get; }
    content.vb: Public Shared ReadOnly Property DefaultNetworkCredentials As NetworkCredential
    parameters: []
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>An <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> that represents the network credentials of the current user or application.</p>\n"
  see:
  - linkId: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  commentId: M:System.Net.CredentialCache.Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  id: Add(System.String,System.Int32,System.String,System.Net.NetworkCredential)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Add(String, Int32, String, NetworkCredential)
  nameWithType: CredentialCache.Add(String, Int32, String, NetworkCredential)
  fullName: System.Net.CredentialCache.Add(System.String, System.Int32, System.String, System.Net.NetworkCredential)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 82
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Adds a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance for use with SMTP to the credential cache and associates it with a host computer, port, and authentication protocol. Credentials added using this method are valid for SMTP only. This method does not work for HTTP or FTP requests.</p>\n"
  syntax:
    content: public void Add(string host, int port, string authenticationType, NetworkCredential credential)
    content.vb: Public Sub Add(host As String, port As Integer, authenticationType As String, credential As NetworkCredential)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the host computer.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the port to connect to on <em>host</em>.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the authentication scheme used when connecting to <em>host</em> using <em>cred</em>. See Remarks.</p>\n"
    - id: credential
      type: System.Net.NetworkCredential
      description: "\n<p>The <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> to add to the credential cache. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>host</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>authType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>authType</em> not an accepted value. See Remarks. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)
  commentId: M:System.Net.CredentialCache.Add(System.Uri,System.String,System.Net.NetworkCredential)
  id: Add(System.Uri,System.String,System.Net.NetworkCredential)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Add(Uri, String, NetworkCredential)
  nameWithType: CredentialCache.Add(Uri, String, NetworkCredential)
  fullName: System.Net.CredentialCache.Add(System.Uri, System.String, System.Net.NetworkCredential)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 83
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Adds a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance to the credential cache for use with protocols other than SMTP and associates it with a Uniform Resource Identifier (URI) prefix and authentication protocol. </p>\n"
  syntax:
    content: public void Add(Uri uriPrefix, string authType, NetworkCredential cred)
    content.vb: Public Sub Add(uriPrefix As Uri, authType As String, cred As NetworkCredential)
    parameters:
    - id: uriPrefix
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that specifies the URI prefix of the resources that the credential grants access to. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>. </p>\n"
    - id: cred
      type: System.Net.NetworkCredential
      description: "\n<p>The <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> to add to the credential cache. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>uriPrefix</em> is <strong>null</strong>. </p>\n<p>-or- </p>\n<p>\n<em>authType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The same credentials are added more than once. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)
  commentId: M:System.Net.CredentialCache.GetCredential(System.String,System.Int32,System.String)
  id: GetCredential(System.String,System.Int32,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: GetCredential(String, Int32, String)
  nameWithType: CredentialCache.GetCredential(String, Int32, String)
  fullName: System.Net.CredentialCache.GetCredential(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 84
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the specified host, port, and authentication protocol.</p>\n"
  syntax:
    content: public NetworkCredential GetCredential(string host, int port, string authenticationType)
    content.vb: Public Function GetCredential(host As String, port As Integer, authenticationType As String) As NetworkCredential
    parameters:
    - id: host
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the host computer.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the port to connect to on <em>host</em>.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the authentication scheme used when connecting to <em>host</em>. See Remarks.</p>\n"
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>A <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> or, if there is no matching credential in the cache, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>host</em> is <strong>null</strong>. </p>\n<p>-or- </p>\n<p>\n<em>authType</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>authType</em> not an accepted value. See Remarks. </p>\n<p>-or-</p>\n<p>\n<em>host</em> is equal to the empty string (\"\").</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is less than zero.</p>\n"
  implements:
  - System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.GetCredential(System.Uri,System.String)
  commentId: M:System.Net.CredentialCache.GetCredential(System.Uri,System.String)
  id: GetCredential(System.Uri,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: GetCredential(Uri, String)
  nameWithType: CredentialCache.GetCredential(Uri, String)
  fullName: System.Net.CredentialCache.GetCredential(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCredential
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 85
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns the <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance associated with the specified Uniform Resource Identifier (URI) and authentication type.</p>\n"
  syntax:
    content: public NetworkCredential GetCredential(Uri uriPrefix, string authType)
    content.vb: Public Function GetCredential(uriPrefix As Uri, authType As String) As NetworkCredential
    parameters:
    - id: uriPrefix
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that specifies the URI prefix of the resources that the credential grants access to. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The authentication scheme used by the resource named in <em>uriPrefix</em>. </p>\n"
    return:
      type: System.Net.NetworkCredential
      description: "\n<p>A <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> or, if there is no matching credential in the cache, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>uriPrefix</em> or <em>authType</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Net.ICredentials.GetCredential(System.Uri,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.GetEnumerator
  commentId: M:System.Net.CredentialCache.GetEnumerator
  id: GetEnumerator
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: CredentialCache.GetEnumerator()
  fullName: System.Net.CredentialCache.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 86
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns an enumerator that can iterate through the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Net.CredentialCache\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)
  commentId: M:System.Net.CredentialCache.Remove(System.String,System.Int32,System.String)
  id: Remove(System.String,System.Int32,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Remove(String, Int32, String)
  nameWithType: CredentialCache.Remove(String, Int32, String)
  fullName: System.Net.CredentialCache.Remove(System.String, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 87
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Deletes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the cache if it is associated with the specified host, port, and authentication protocol.</p>\n"
  syntax:
    content: public void Remove(string host, int port, string authenticationType)
    content.vb: Public Sub Remove(host As String, port As Integer, authenticationType As String)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the host computer.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that specifies the port to connect to on <em>host</em>.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that identifies the authentication scheme used when connecting to <em>host</em>. See Remarks.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.CredentialCache.Remove(System.Uri,System.String)
  commentId: M:System.Net.CredentialCache.Remove(System.Uri,System.String)
  id: Remove(System.Uri,System.String)
  parent: System.Net.CredentialCache
  langs:
  - csharp
  - vb
  name: Remove(Uri, String)
  nameWithType: CredentialCache.Remove(Uri, String)
  fullName: System.Net.CredentialCache.Remove(System.Uri, System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.Net.Primitives/ref/System.Net.Primitives.cs
    startLine: 88
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Deletes a <xref href=\"System.Net.NetworkCredential\" data-throw-if-not-resolved=\"false\"></xref> instance from the cache if it is associated with the specified Uniform Resource Identifier (URI) prefix and authentication protocol.</p>\n"
  syntax:
    content: public void Remove(Uri uriPrefix, string authType)
    content.vb: Public Sub Remove(uriPrefix As Uri, authType As String)
    parameters:
    - id: uriPrefix
      type: System.Uri
      description: "\n<p>A <xref href=\"System.Uri\" data-throw-if-not-resolved=\"false\"></xref> that specifies the URI prefix of the resources that the credential is used for. </p>\n"
    - id: authType
      type: System.String
      description: "\n<p>The authentication scheme used by the host named in <em>uriPrefix</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Net.ICredentials
  commentId: T:System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Net.ICredentialsByHost
  commentId: T:System.Net.ICredentialsByHost
  parent: System.Net
  isExternal: false
  name: ICredentialsByHost
  nameWithType: ICredentialsByHost
  fullName: System.Net.ICredentialsByHost
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Net.NetworkCredential
  commentId: T:System.Net.NetworkCredential
  parent: System.Net
  isExternal: false
  name: NetworkCredential
  nameWithType: NetworkCredential
  fullName: System.Net.NetworkCredential
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: false
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  commentId: M:System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
  parent: System.Net.ICredentialsByHost
  isExternal: true
  name: GetCredential(String, Int32, String)
  nameWithType: ICredentialsByHost.GetCredential(String, Int32, String)
  fullName: System.Net.ICredentialsByHost.GetCredential(System.String, System.Int32, System.String)
  spec.csharp:
  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
    name: GetCredential
    nameWithType: ICredentialsByHost.GetCredential
    fullName: System.Net.ICredentialsByHost.GetCredential
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.ICredentialsByHost.GetCredential(System.String,System.Int32,System.String)
    name: GetCredential
    nameWithType: ICredentialsByHost.GetCredential
    fullName: System.Net.ICredentialsByHost.GetCredential
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
  commentId: M:System.Net.ICredentials.GetCredential(System.Uri,System.String)
  parent: System.Net.ICredentials
  isExternal: true
  name: GetCredential(Uri, String)
  nameWithType: ICredentials.GetCredential(Uri, String)
  fullName: System.Net.ICredentials.GetCredential(System.Uri, System.String)
  spec.csharp:
  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
    name: GetCredential
    nameWithType: ICredentials.GetCredential
    fullName: System.Net.ICredentials.GetCredential
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.ICredentials.GetCredential(System.Uri,System.String)
    name: GetCredential
    nameWithType: ICredentials.GetCredential
    fullName: System.Net.ICredentials.GetCredential
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Uri
    name: Uri
    nameWithType: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
