### YamlMime:ManagedReference
items:
- uid: System.Collections.Generic.Comparer`1
  commentId: T:System.Collections.Generic.Comparer`1
  id: Comparer`1
  parent: System.Collections.Generic
  children:
  - System.Collections.Generic.Comparer`1.#ctor
  - System.Collections.Generic.Comparer`1.Compare(`0,`0)
  - System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
  - System.Collections.Generic.Comparer`1.Default
  - System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)
  langs:
  - csharp
  - vb
  name: Comparer<T>
  nameWithType: Comparer<T>
  fullName: System.Collections.Generic.Comparer<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Comparer
    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
    startLine: 17
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Provides a base class for implementations of the <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [TypeDependency("System.Collections.Generic.ObjectComparer`1")]

      public abstract class Comparer<T> : IComparer, IComparer<T>
    content.vb: >-
      <Serializable>

      <TypeDependency("System.Collections.Generic.ObjectComparer`1")>

      Public MustInherit Class Comparer(Of T)
          Implements IComparer, IComparer(Of T)
    typeParameters:
    - id: T
      description: "\n<p>The type of objects to compare.</p>\n"
  seealso:
  - linkId: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - linkId: System.IComparable`1
    commentId: T:System.IComparable`1
  - linkId: System.StringComparer
    commentId: T:System.StringComparer
  - linkId: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IComparer{{T}}
  - System.Collections.IComparer
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Comparer(Of T)
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: System.Collections.Generic.Comparer(Of T)
  name.vb: Comparer(Of T)
- uid: System.Collections.Generic.Comparer`1.#ctor
  commentId: M:System.Collections.Generic.Comparer`1.#ctor
  id: '#ctor'
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Comparer()
  nameWithType: Comparer<T>.Comparer()
  fullName: System.Collections.Generic.Comparer<T>.Comparer()
  type: Constructor
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 43
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected Comparer()
    content.vb: Protected Sub New
  nameWithType.vb: Comparer(Of T).Comparer()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Collections.Generic.Comparer(Of T).Comparer()
- uid: System.Collections.Generic.Comparer`1.Default
  commentId: P:System.Collections.Generic.Comparer`1.Default
  id: Default
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: Comparer<T>.Default
  fullName: System.Collections.Generic.Comparer<T>.Default
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Default
    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
    startLine: 23
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Returns a default sort order comparer for the type specified by the generic argument.</p>\n"
  syntax:
    content: public static Comparer<T> Default { get; }
    content.vb: Public Shared ReadOnly Property Default As Comparer(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.Comparer`1
      description: "\n<p>An object that inherits <xref href=\"System.Collections.Generic.Comparer`1\" data-throw-if-not-resolved=\"false\"></xref> and serves as a sort order comparer for type <em>T</em>.</p>\n"
  seealso:
  - linkId: System.IComparable`1
    commentId: T:System.IComparable`1
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.StringComparer
    commentId: T:System.StringComparer
  - linkId: System.Object
    commentId: T:System.Object
  nameWithType.vb: Comparer(Of T).Default
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  fullName.vb: System.Collections.Generic.Comparer(Of T).Default
- uid: System.Collections.Generic.Comparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.Comparer`1.Compare(`0,`0)
  id: Compare(`0,`0)
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Compare(T, T)
  nameWithType: Comparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.Comparer<T>.Compare(T, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
    startLine: 101
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.</p>\n"
  syntax:
    content: public abstract int Compare(T x, T y)
    content.vb: Public MustOverride Function Compare(x As T, y As T) As Integer
    parameters:
    - id: x
      type: '{T}'
      description: "\n<p>The first object to compare.</p>\n"
    - id: y
      type: '{T}'
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>x</em> is less than <em>y</em>.</p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>x</em> equals <em>y</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>x</em> is greater than <em>y</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Type <em>T</em> does not implement either the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - linkId: System.IComparable`1
    commentId: T:System.IComparable`1
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.StringComparer
    commentId: T:System.StringComparer
  - linkId: System.Object
    commentId: T:System.Object
  - linkId: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  implements:
  - System.Collections.Generic.IComparer{{T}}.Compare({T},{T})
  nameWithType.vb: Comparer(Of T).Compare(T, T)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Collections.Generic.Comparer(Of T).Compare(T, T)
- uid: System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
  commentId: M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})
  id: Create(System.Comparison{`0})
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: Create(Comparison<T>)
  nameWithType: Comparer<T>.Create(Comparison<T>)
  fullName: System.Collections.Generic.Comparer<T>.Create(System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
    startLine: 30
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Creates a comparer by using the specified comparison.</p>\n"
  syntax:
    content: public static Comparer<T> Create(Comparison<T> comparison)
    content.vb: Public Shared Function Create(comparison As Comparison(Of T)) As Comparer(Of T)
    parameters:
    - id: comparison
      type: System.Comparison{{T}}
      description: "\n<p>The comparison to use.</p>\n"
    return:
      type: System.Collections.Generic.Comparer`1
      description: "\n<p>The new comparer.</p>\n"
  nameWithType.vb: Comparer(Of T).Create(Comparison(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Generic.Comparer(Of T).Create(System.Comparison(Of T))
  name.vb: Create(Comparison(Of T))
- uid: System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)
  commentId: M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)
  id: System#Collections#IComparer#Compare(System.Object,System.Object)
  isEii: true
  parent: System.Collections.Generic.Comparer`1
  langs:
  - csharp
  - vb
  name: IComparer.Compare(Object, Object)
  nameWithType: Comparer<T>.IComparer.Compare(Object, Object)
  fullName: System.Collections.Generic.Comparer<T>.System.Collections.IComparer.Compare(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IComparer.Compare
    path: src/mscorlib/src/System/Collections/Generic/Comparer.cs
    startLine: 103
  assemblies:
  - System.Collections
  namespace: System.Collections.Generic
  summary: "\n<p>Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.</p>\n"
  syntax:
    content: int IComparer.Compare(object x, object y)
    content.vb: Function System.Collections.IComparer.Compare(x As Object, y As Object) As Integer Implements IComparer.Compare
    parameters:
    - id: x
      type: System.Object
      description: "\n<p>The first object to compare.</p>\n"
    - id: y
      type: System.Object
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of <em>x</em> and <em>y</em>, as shown in the following table.</p>\n<p>Value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero</p>\n</td><td>\n<p>\n<em>x</em> is less than <em>y</em>.</p>\n</td></tr><tr><td>\n<p>Zero</p>\n</td><td>\n<p>\n<em>x</em> equals <em>y</em>.</p>\n</td></tr><tr><td>\n<p>Greater than zero</p>\n</td><td>\n<p>\n<em>x</em> is greater than <em>y</em>.</p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>x</em> or <em>y</em> is of a type that cannot be cast to type <em>T</em>.</p>\n<p>-or-</p>\n<p>\n<em>x</em> and <em>y</em> do not implement either the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface or the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - linkId: System.StringComparer
    commentId: T:System.StringComparer
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.IComparable
    commentId: T:System.IComparable
  - linkId: System.Threading.Thread.CurrentCulture
    commentId: P:System.Threading.Thread.CurrentCulture
  - linkId: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  implements:
  - System.Collections.IComparer.Compare(System.Object,System.Object)
  nameWithType.vb: Comparer(Of T).System.Collections.IComparer.Compare(Object, Object)
  fullName.vb: System.Collections.Generic.Comparer(Of T).System.Collections.IComparer.Compare(System.Object, System.Object)
  name.vb: System.Collections.IComparer.Compare(Object, Object)
references:
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Generic.IComparer{{T}}
  commentId: T:System.Collections.Generic.IComparer{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IComparer
  commentId: T:System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IComparer`1
  commentId: T:System.Collections.Generic.IComparer`1
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  nameWithType.vb: IComparer(Of T)
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Collections.Generic.Comparer`1
  commentId: T:System.Collections.Generic.Comparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: Comparer<T>
  nameWithType: Comparer<T>
  fullName: System.Collections.Generic.Comparer<T>
  nameWithType.vb: Comparer(Of T)
  fullname.vb: System.Collections.Generic.Comparer(Of T)
  name.vb: Comparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.Comparer`1
    name: Comparer
    nameWithType: Comparer
    fullName: System.Collections.Generic.Comparer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Comparer`1
    name: Comparer
    nameWithType: Comparer
    fullName: System.Collections.Generic.Comparer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IComparer{{T}}.Compare({T},{T})
  commentId: M:System.Collections.Generic.IComparer{`0}.Compare(`0,`0)
  parent: System.Collections.Generic.IComparer{{T}}
  definition: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
  commentId: M:System.Collections.Generic.IComparer`1.Compare(`0,`0)
  isExternal: true
  name: Compare(T, T)
  nameWithType: IComparer<T>.Compare(T, T)
  fullName: System.Collections.Generic.IComparer<T>.Compare(T, T)
  nameWithType.vb: IComparer(Of T).Compare(T, T)
  fullname.vb: System.Collections.Generic.IComparer(Of T).Compare(T, T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer<T>.Compare
    fullName: System.Collections.Generic.IComparer<T>.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1.Compare(`0,`0)
    name: Compare
    nameWithType: IComparer(Of T).Compare
    fullName: System.Collections.Generic.IComparer(Of T).Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Comparison{{T}}
  commentId: T:System.Comparison{``0}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Comparison`1
  commentId: T:System.Comparison`1
  isExternal: false
  name: Comparison<T>
  nameWithType: Comparison<T>
  fullName: System.Comparison<T>
  nameWithType.vb: Comparison(Of T)
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    nameWithType: Comparison
    fullName: System.Comparison
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IComparer.Compare(System.Object,System.Object)
  commentId: M:System.Collections.IComparer.Compare(System.Object,System.Object)
  parent: System.Collections.IComparer
  isExternal: true
  name: Compare(Object, Object)
  nameWithType: IComparer.Compare(Object, Object)
  fullName: System.Collections.IComparer.Compare(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)
    name: Compare
    nameWithType: IComparer.Compare
    fullName: System.Collections.IComparer.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IComparer.Compare(System.Object,System.Object)
    name: Compare
    nameWithType: IComparer.Compare
    fullName: System.Collections.IComparer.Compare
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
