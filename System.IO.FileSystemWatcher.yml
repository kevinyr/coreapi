items:
- uid: System.IO.FileSystemWatcher
  commentId: T:System.IO.FileSystemWatcher
  id: FileSystemWatcher
  parent: System.IO
  children:
  - System.IO.FileSystemWatcher.#ctor
  - System.IO.FileSystemWatcher.#ctor(System.String)
  - System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  - System.IO.FileSystemWatcher.Changed
  - System.IO.FileSystemWatcher.Created
  - System.IO.FileSystemWatcher.Deleted
  - System.IO.FileSystemWatcher.Dispose
  - System.IO.FileSystemWatcher.Dispose(System.Boolean)
  - System.IO.FileSystemWatcher.EnableRaisingEvents
  - System.IO.FileSystemWatcher.Error
  - System.IO.FileSystemWatcher.Filter
  - System.IO.FileSystemWatcher.IncludeSubdirectories
  - System.IO.FileSystemWatcher.InternalBufferSize
  - System.IO.FileSystemWatcher.NotifyFilter
  - System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - System.IO.FileSystemWatcher.Path
  - System.IO.FileSystemWatcher.Renamed
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  - System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  langs:
  - csharp
  - vb
  name: FileSystemWatcher
  fullName: System.IO.FileSystemWatcher
  type: Class
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileSystemWatcher
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
    startLine: 10
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Listens to the file system change notifications and raises events when a directory, or file in a directory, changes.</p>\n"
  syntax:
    content: 'public class FileSystemWatcher : IDisposable'
    content.vb: >-
      Public Class FileSystemWatcher
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: FileSystemWatcher
- uid: System.IO.FileSystemWatcher.#ctor
  commentId: M:System.IO.FileSystemWatcher.#ctor
  id: '#ctor'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: FileSystemWatcher()
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher()
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 26
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public FileSystemWatcher()
    content.vb: Public Sub New
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.FileSystemWatcher()
- uid: System.IO.FileSystemWatcher.#ctor(System.String)
  commentId: M:System.IO.FileSystemWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: FileSystemWatcher(String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 27
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class, given the specified directory to monitor.</p>\n"
  syntax:
    content: public FileSystemWatcher(string path)
    content.vb: Public Sub New(path As String)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The directory to monitor, in standard or Universal Naming Convention (UNC) notation. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> parameter is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The path specified through the <em>path</em> parameter does not exist. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> is too long.</p>\n"
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.FileSystemWatcher(String)
- uid: System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  commentId: M:System.IO.FileSystemWatcher.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: FileSystemWatcher(String, String)
  fullName: System.IO.FileSystemWatcher.FileSystemWatcher(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 28
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> class, given the specified directory and type of files to monitor.</p>\n"
  syntax:
    content: public FileSystemWatcher(string path, string filter)
    content.vb: Public Sub New(path As String, filter As String)
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The directory to monitor, in standard or Universal Naming Convention (UNC) notation. </p>\n"
    - id: filter
      type: System.String
      description: "\n<p>The type of files to watch. For example, \"*.txt\" watches for changes to all text files. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>path</em> parameter is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>The <em>filter</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> parameter is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The path specified through the <em>path</em> parameter does not exist. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>\n<em>path</em> is too long.</p>\n"
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.FileSystemWatcher(String, String)
- uid: System.IO.FileSystemWatcher.EnableRaisingEvents
  commentId: P:System.IO.FileSystemWatcher.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: EnableRaisingEvents
  fullName: System.IO.FileSystemWatcher.EnableRaisingEvents
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableRaisingEvents
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 29
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets a value indicating whether the component is enabled.</p>\n"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    content.vb: Public Property EnableRaisingEvents As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the component is enabled; otherwise, <strong>false</strong>. The default is <strong>false</strong>. If you are using the component on a designer in Visual Studio 2005, the default is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> object has been disposed.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The current operating system is not Microsoft Windows NT or later.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The directory specified in <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> could not be found.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> has not been set or is invalid.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.EnableRaisingEvents
- uid: System.IO.FileSystemWatcher.Filter
  commentId: P:System.IO.FileSystemWatcher.Filter
  id: Filter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Filter
  fullName: System.IO.FileSystemWatcher.Filter
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Filter
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 30
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the filter string used to determine what files are monitored in a directory.</p>\n"
  syntax:
    content: public string Filter { get; set; }
    content.vb: Public Property Filter As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The filter string. The default is \"*.*\" (Watches all files.) </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.FileSystemWatcher.InternalBufferSize
    commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Filter
- uid: System.IO.FileSystemWatcher.IncludeSubdirectories
  commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  id: IncludeSubdirectories
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: IncludeSubdirectories
  fullName: System.IO.FileSystemWatcher.IncludeSubdirectories
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncludeSubdirectories
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 31
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets a value indicating whether subdirectories within the specified path should be monitored.</p>\n"
  syntax:
    content: public bool IncludeSubdirectories { get; set; }
    content.vb: Public Property IncludeSubdirectories As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if you want to monitor subdirectories; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemEventArgs.FullPath
    commentId: P:System.IO.FileSystemEventArgs.FullPath
  - type: System.IO.RenamedEventArgs.OldFullPath
    commentId: P:System.IO.RenamedEventArgs.OldFullPath
  - type: System.IO.FileSystemWatcher.InternalBufferSize
    commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  - type: System.IO.FileSystemEventArgs.Name
    commentId: P:System.IO.FileSystemEventArgs.Name
  - type: System.IO.RenamedEventArgs.OldName
    commentId: P:System.IO.RenamedEventArgs.OldName
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.IncludeSubdirectories
- uid: System.IO.FileSystemWatcher.InternalBufferSize
  commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  id: InternalBufferSize
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: InternalBufferSize
  fullName: System.IO.FileSystemWatcher.InternalBufferSize
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalBufferSize
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 32
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the size (in bytes) of the internal buffer.</p>\n"
  syntax:
    content: public int InternalBufferSize { get; set; }
    content.vb: Public Property InternalBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The internal buffer size in bytes. The default is 8192 (8 KB).</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.InternalBufferSize
- uid: System.IO.FileSystemWatcher.NotifyFilter
  commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  id: NotifyFilter
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: NotifyFilter
  fullName: System.IO.FileSystemWatcher.NotifyFilter
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotifyFilter
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 33
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the type of changes to watch for.</p>\n"
  syntax:
    content: public NotifyFilters NotifyFilter { get; set; }
    content.vb: Public Property NotifyFilter As NotifyFilters
    parameters: []
    return:
      type: System.IO.NotifyFilters
      description: "\n<p>One of the <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref> values. The default is the bitwise OR combination of <strong>LastWrite</strong>, <strong>FileName</strong>, and <strong>DirectoryName</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value is not a valid bitwise OR combination of the <xref href=\"System.IO.NotifyFilters\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "\n<p>The value that is being set is not valid.</p>\n"
  seealso:
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.FileSystemWatcher.InternalBufferSize
    commentId: P:System.IO.FileSystemWatcher.InternalBufferSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.NotifyFilter
- uid: System.IO.FileSystemWatcher.Path
  commentId: P:System.IO.FileSystemWatcher.Path
  id: Path
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Path
  fullName: System.IO.FileSystemWatcher.Path
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Path
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 34
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets or sets the path of the directory to watch.</p>\n"
  syntax:
    content: public string Path { get; set; }
    content.vb: Public Property Path As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The path to monitor. The default is an empty string (\"\").</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified path does not exist or could not be found.</p>\n<p>-or- </p>\n<p>The specified path contains wildcard characters.</p>\n<p>-or- </p>\n<p>The specified path contains invalid path characters.</p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Path
- uid: System.IO.FileSystemWatcher.Changed
  commentId: E:System.IO.FileSystemWatcher.Changed
  id: Changed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Changed
  fullName: System.IO.FileSystemWatcher.Changed
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Changed
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 35
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is changed.</p>\n"
  syntax:
    content: public event FileSystemEventHandler Changed
    content.vb: Public Event Changed As FileSystemEventHandler
    return:
      type: System.IO.FileSystemEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Changed
- uid: System.IO.FileSystemWatcher.Created
  commentId: E:System.IO.FileSystemWatcher.Created
  id: Created
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Created
  fullName: System.IO.FileSystemWatcher.Created
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Created
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 36
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is created.</p>\n"
  syntax:
    content: public event FileSystemEventHandler Created
    content.vb: Public Event Created As FileSystemEventHandler
    return:
      type: System.IO.FileSystemEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Created
- uid: System.IO.FileSystemWatcher.Deleted
  commentId: E:System.IO.FileSystemWatcher.Deleted
  id: Deleted
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Deleted
  fullName: System.IO.FileSystemWatcher.Deleted
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Deleted
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 37
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is deleted.</p>\n"
  syntax:
    content: public event FileSystemEventHandler Deleted
    content.vb: Public Event Deleted As FileSystemEventHandler
    return:
      type: System.IO.FileSystemEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Deleted
- uid: System.IO.FileSystemWatcher.Error
  commentId: E:System.IO.FileSystemWatcher.Error
  id: Error
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Error
  fullName: System.IO.FileSystemWatcher.Error
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Error
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 38
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when the instance of <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> is unable to continue monitoring changes or when the internal buffer overflows.</p>\n"
  syntax:
    content: public event ErrorEventHandler Error
    content.vb: Public Event Error As ErrorEventHandler
    return:
      type: System.IO.ErrorEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.ErrorEventArgs
    commentId: T:System.IO.ErrorEventArgs
  - type: System.IO.ErrorEventHandler
    commentId: T:System.IO.ErrorEventHandler
  - type: System.IO.FileSystemWatcher.Filter
    commentId: P:System.IO.FileSystemWatcher.Filter
  - type: System.IO.FileSystemWatcher.IncludeSubdirectories
    commentId: P:System.IO.FileSystemWatcher.IncludeSubdirectories
  - type: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Error
- uid: System.IO.FileSystemWatcher.Renamed
  commentId: E:System.IO.FileSystemWatcher.Renamed
  id: Renamed
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Renamed
  fullName: System.IO.FileSystemWatcher.Renamed
  type: Event
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Renamed
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 39
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Occurs when a file or directory in the specified <xref href=\"System.IO.FileSystemWatcher.Path\" data-throw-if-not-resolved=\"false\"></xref> is renamed.</p>\n"
  syntax:
    content: public event RenamedEventHandler Renamed
    content.vb: Public Event Renamed As RenamedEventHandler
    return:
      type: System.IO.RenamedEventHandler
  seealso:
  - type: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  - type: System.IO.FileSystemWatcher.SynchronizingObject
    commentId: P:System.IO.FileSystemWatcher.SynchronizingObject
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Renamed
- uid: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  id: OnChanged(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnChanged(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnChanged(System.IO.FileSystemEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnChanged
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 40
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected void OnChanged(FileSystemEventArgs e)
    content.vb: Protected Sub OnChanged(e As FileSystemEventArgs)
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "\n<p>A <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Changed
    commentId: E:System.IO.FileSystemWatcher.Changed
  - type: System.IO.FileSystemWatcher.NotifyFilter
    commentId: P:System.IO.FileSystemWatcher.NotifyFilter
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: FileSystemWatcher.OnChanged(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  id: OnCreated(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnCreated(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnCreated
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 41
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected void OnCreated(FileSystemEventArgs e)
    content.vb: Protected Sub OnCreated(e As FileSystemEventArgs)
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "\n<p>A <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: FileSystemWatcher.OnCreated(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  id: OnDeleted(System.IO.FileSystemEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnDeleted(FileSystemEventArgs)
  fullName: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnDeleted
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 42
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected void OnDeleted(FileSystemEventArgs e)
    content.vb: Protected Sub OnDeleted(e As FileSystemEventArgs)
    parameters:
    - id: e
      type: System.IO.FileSystemEventArgs
      description: "\n<p>A <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemEventArgs
    commentId: T:System.IO.FileSystemEventArgs
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: FileSystemWatcher.OnDeleted(FileSystemEventArgs)
- uid: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  id: OnError(System.IO.ErrorEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnError(ErrorEventArgs)
  fullName: System.IO.FileSystemWatcher.OnError(System.IO.ErrorEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnError
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 43
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Error\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected void OnError(ErrorEventArgs e)
    content.vb: Protected Sub OnError(e As ErrorEventArgs)
    parameters:
    - id: e
      type: System.IO.ErrorEventArgs
      description: "\n<p>An <xref href=\"System.IO.ErrorEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Error
    commentId: E:System.IO.FileSystemWatcher.Error
  - type: System.IO.ErrorEventArgs
    commentId: T:System.IO.ErrorEventArgs
  - type: System.IO.ErrorEventHandler
    commentId: T:System.IO.ErrorEventHandler
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: FileSystemWatcher.OnError(ErrorEventArgs)
- uid: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  commentId: M:System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  id: OnRenamed(System.IO.RenamedEventArgs)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: OnRenamed(RenamedEventArgs)
  fullName: System.IO.FileSystemWatcher.OnRenamed(System.IO.RenamedEventArgs)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRenamed
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 44
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Raises the <xref href=\"System.IO.FileSystemWatcher.Renamed\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected void OnRenamed(RenamedEventArgs e)
    content.vb: Protected Sub OnRenamed(e As RenamedEventArgs)
    parameters:
    - id: e
      type: System.IO.RenamedEventArgs
      description: "\n<p>A <xref href=\"System.IO.RenamedEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher.Renamed
    commentId: E:System.IO.FileSystemWatcher.Renamed
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: FileSystemWatcher.OnRenamed(RenamedEventArgs)
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  commentId: M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  id: WaitForChanged(System.IO.WatcherChangeTypes)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: WaitForChanged(WatcherChangeTypes)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForChanged
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 45
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor.</p>\n"
  syntax:
    content: public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType)
    content.vb: Public Function WaitForChanged(changeType As WatcherChangeTypes) As WaitForChangedResult
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "\n<p>The <xref href=\"System.IO.WatcherChangeTypes\" data-throw-if-not-resolved=\"false\"></xref> to watch for. </p>\n"
    return:
      type: System.IO.WaitForChangedResult
      description: "\n<p>A <xref href=\"System.IO.WaitForChangedResult\" data-throw-if-not-resolved=\"false\"></xref> that contains specific information on the change that occurred.</p>\n"
  seealso:
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes)
- uid: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  commentId: M:System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  id: WaitForChanged(System.IO.WatcherChangeTypes,System.Int32)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: WaitForChanged(WatcherChangeTypes, Int32)
  fullName: System.IO.FileSystemWatcher.WaitForChanged(System.IO.WatcherChangeTypes, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForChanged
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 46
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>A synchronous method that returns a structure that contains specific information on the change that occurred, given the type of change you want to monitor and the time (in milliseconds) to wait before timing out.</p>\n"
  syntax:
    content: public WaitForChangedResult WaitForChanged(WatcherChangeTypes changeType, int timeout)
    content.vb: Public Function WaitForChanged(changeType As WatcherChangeTypes, timeout As Integer) As WaitForChangedResult
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "\n<p>The <xref href=\"System.IO.WatcherChangeTypes\" data-throw-if-not-resolved=\"false\"></xref> to watch for. </p>\n"
    - id: timeout
      type: System.Int32
      description: "\n<p>The time (in milliseconds) to wait before timing out. </p>\n"
    return:
      type: System.IO.WaitForChangedResult
      description: "\n<p>A <xref href=\"System.IO.WaitForChangedResult\" data-throw-if-not-resolved=\"false\"></xref> that contains specific information on the change that occurred.</p>\n"
  seealso:
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.WaitForChanged(WatcherChangeTypes, Int32)
- uid: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  commentId: M:System.IO.FileSystemWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.IO.FileSystemWatcher.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
    startLine: 12
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.IO.FileSystemWatcher\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: FileSystemWatcher.Dispose(Boolean)
- uid: System.IO.FileSystemWatcher.Dispose
  commentId: M:System.IO.FileSystemWatcher.Dispose
  id: Dispose
  parent: System.IO.FileSystemWatcher
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.IO.FileSystemWatcher.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.manual.cs
    startLine: 13
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemWatcher.Dispose()
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  commentId: N:System.IO
  nameWithType: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  commentId: T:System.IDisposable
  nameWithType: IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.IO.NotifyFilters
  parent: System.IO
  isExternal: false
  name: NotifyFilters
  fullName: System.IO.NotifyFilters
  commentId: T:System.IO.NotifyFilters
  nameWithType: NotifyFilters
- uid: System.IO.FileSystemEventHandler
  parent: System.IO
  isExternal: false
  name: FileSystemEventHandler
  fullName: System.IO.FileSystemEventHandler
  commentId: T:System.IO.FileSystemEventHandler
  nameWithType: FileSystemEventHandler
- uid: System.IO.ErrorEventHandler
  parent: System.IO
  isExternal: false
  name: ErrorEventHandler
  fullName: System.IO.ErrorEventHandler
  commentId: T:System.IO.ErrorEventHandler
  nameWithType: ErrorEventHandler
- uid: System.IO.RenamedEventHandler
  parent: System.IO
  isExternal: false
  name: RenamedEventHandler
  fullName: System.IO.RenamedEventHandler
  commentId: T:System.IO.RenamedEventHandler
  nameWithType: RenamedEventHandler
- uid: System.IO.FileSystemEventArgs
  parent: System.IO
  isExternal: false
  name: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
  commentId: T:System.IO.FileSystemEventArgs
  nameWithType: FileSystemEventArgs
- uid: System.IO.ErrorEventArgs
  parent: System.IO
  isExternal: false
  name: ErrorEventArgs
  fullName: System.IO.ErrorEventArgs
  commentId: T:System.IO.ErrorEventArgs
  nameWithType: ErrorEventArgs
- uid: System.IO.RenamedEventArgs
  parent: System.IO
  isExternal: false
  name: RenamedEventArgs
  fullName: System.IO.RenamedEventArgs
  commentId: T:System.IO.RenamedEventArgs
  nameWithType: RenamedEventArgs
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
  commentId: T:System.IO.WatcherChangeTypes
  nameWithType: WatcherChangeTypes
- uid: System.IO.WaitForChangedResult
  parent: System.IO
  isExternal: false
  name: WaitForChangedResult
  fullName: System.IO.WaitForChangedResult
  commentId: T:System.IO.WaitForChangedResult
  nameWithType: WaitForChangedResult
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.IDisposable.Dispose
  nameWithType: IDisposable.Dispose()
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
  nameWithType: PathTooLongException
  commentId: T:System.IO.PathTooLongException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  nameWithType: FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
- uid: System.ComponentModel.InvalidEnumArgumentException
