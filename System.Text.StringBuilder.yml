items:
- uid: System.Text.StringBuilder
  commentId: T:System.Text.StringBuilder
  id: StringBuilder
  parent: System.Text
  children:
  - System.Text.StringBuilder.#ctor
  - System.Text.StringBuilder.#ctor(System.Int32)
  - System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  - System.Text.StringBuilder.#ctor(System.String)
  - System.Text.StringBuilder.#ctor(System.String,System.Int32)
  - System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.Boolean)
  - System.Text.StringBuilder.Append(System.Byte)
  - System.Text.StringBuilder.Append(System.Char)
  - System.Text.StringBuilder.Append(System.Char*,System.Int32)
  - System.Text.StringBuilder.Append(System.Char,System.Int32)
  - System.Text.StringBuilder.Append(System.Char[])
  - System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.Decimal)
  - System.Text.StringBuilder.Append(System.Double)
  - System.Text.StringBuilder.Append(System.Int16)
  - System.Text.StringBuilder.Append(System.Int32)
  - System.Text.StringBuilder.Append(System.Int64)
  - System.Text.StringBuilder.Append(System.Object)
  - System.Text.StringBuilder.Append(System.SByte)
  - System.Text.StringBuilder.Append(System.Single)
  - System.Text.StringBuilder.Append(System.String)
  - System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Text.StringBuilder.Append(System.UInt16)
  - System.Text.StringBuilder.Append(System.UInt32)
  - System.Text.StringBuilder.Append(System.UInt64)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  - System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  - System.Text.StringBuilder.AppendLine
  - System.Text.StringBuilder.AppendLine(System.String)
  - System.Text.StringBuilder.Capacity
  - System.Text.StringBuilder.Chars(System.Int32)
  - System.Text.StringBuilder.Clear
  - System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.EnsureCapacity(System.Int32)
  - System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  - System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  - System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char)
  - System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  - System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  - System.Text.StringBuilder.Insert(System.Int32,System.Double)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  - System.Text.StringBuilder.Insert(System.Int32,System.Object)
  - System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  - System.Text.StringBuilder.Insert(System.Int32,System.Single)
  - System.Text.StringBuilder.Insert(System.Int32,System.String)
  - System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  - System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  - System.Text.StringBuilder.Length
  - System.Text.StringBuilder.MaxCapacity
  - System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  - System.Text.StringBuilder.Replace(System.Char,System.Char)
  - System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  - System.Text.StringBuilder.Replace(System.String,System.String)
  - System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  - System.Text.StringBuilder.ToString
  - System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: StringBuilder
  fullName: System.Text.StringBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringBuilder
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 41
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Represents a mutable string of characters. This class cannot be inherited.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public sealed class StringBuilder
    content.vb: >-
      <ComVisible(True)>

      Public NotInheritable Class StringBuilder
  seealso:
  - type: System.String
    commentId: T:System.String
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: StringBuilder
- uid: System.Text.StringBuilder.#ctor
  commentId: M:System.Text.StringBuilder.#ctor
  id: '#ctor'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder()
  fullName: System.Text.StringBuilder.StringBuilder()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 89
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public StringBuilder()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.StringBuilder()
- uid: System.Text.StringBuilder.#ctor(System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 95
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class using the specified capacity.</p>\n"
  syntax:
    content: public StringBuilder(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of this instance. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.StringBuilder(Int32)
- uid: System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(Int32, Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 160
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class that starts with a specified capacity and can grow to a specified maximum.</p>\n"
  syntax:
    content: public StringBuilder(int capacity, int maxCapacity)
    content.vb: Public Sub New(capacity As Integer, maxCapacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: maxCapacity
      type: System.Int32
      description: "\n<p>The maximum number of characters the current string can contain. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>maxCapacity</em> is less than one, <em>capacity</em> is less than zero, or <em>capacity</em> is greater than <em>maxCapacity</em>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  - type: System.Text.StringBuilder.MaxCapacity
    commentId: P:System.Text.StringBuilder.MaxCapacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.StringBuilder(Int32, Int32)
- uid: System.Text.StringBuilder.#ctor(System.String)
  commentId: M:System.Text.StringBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(String)
  fullName: System.Text.StringBuilder.StringBuilder(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 104
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class using the specified string.</p>\n"
  syntax:
    content: public StringBuilder(string value)
    content.vb: Public Sub New(value As String)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string used to initialize the value of the instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.StringBuilder(String)
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(String, Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.String, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 114
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class using the specified string and capacity.</p>\n"
  syntax:
    content: public StringBuilder(string value, int capacity)
    content.vb: Public Sub New(value As String, capacity As Integer)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string used to initialize the value of the instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.StringBuilder(String, Int32)
- uid: System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.#ctor(System.String,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32,System.Int32)'
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: StringBuilder(String, Int32, Int32, Int32)
  fullName: System.Text.StringBuilder.StringBuilder(System.String, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 121
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> class from the specified substring and capacity.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder(string value, int startIndex, int length, int capacity)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(value As String, startIndex As Integer, length As Integer, capacity As Integer)
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string that contains the substring used to initialize the value of this instance. If <em>value</em> is <strong>null</strong>, the new <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> will contain the empty string (that is, it contains <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>). </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The position within <em>value</em> where the substring begins. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters in the substring. </p>\n"
    - id: capacity
      type: System.Int32
      description: "\n<p>The suggested starting size of the <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>length</em> is not a position within <em>value</em>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Capacity
    commentId: P:System.Text.StringBuilder.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.StringBuilder(String, Int32, Int32, Int32)
- uid: System.Text.StringBuilder.Capacity
  commentId: P:System.Text.StringBuilder.Capacity
  id: Capacity
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Capacity
  fullName: System.Text.StringBuilder.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 289
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets or sets the maximum number of characters that can be contained in the memory allocated by the current instance.</p>\n"
  syntax:
    content: public int Capacity { get; set; }
    content.vb: Public Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters that can be contained in the memory allocated by the current instance. Its value can range from <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> to <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than the current length of this instance.</p>\n<p>-or- </p>\n<p>The value specified for a set operation is greater than the maximum capacity. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Capacity
- uid: System.Text.StringBuilder.Chars(System.Int32)
  commentId: P:System.Text.StringBuilder.Chars(System.Int32)
  id: Chars(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Chars[Int32]
  fullName: System.Text.StringBuilder.Chars[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 517
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets or sets the character at the specified character position in this instance.</p>\n"
  syntax:
    content: >-
      [IndexerName("Chars")]

      public char this[int index] { get; set; }
    content.vb: >-
      <IndexerName("Chars")>

      Public Property Chars(index As Integer) As Char
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position of the character. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The Unicode character at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the bounds of this instance while setting a character. </p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the bounds of this instance while getting a character. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Chars
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Chars(System.Int32)
  name.vb: Chars(Int32)
  nameWithType: StringBuilder.Chars[Int32]
  nameWithType.vb: StringBuilder.Chars(Int32)
- uid: System.Text.StringBuilder.Length
  commentId: P:System.Text.StringBuilder.Length
  id: Length
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Text.StringBuilder.Length
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Length
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 459
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets or sets the length of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int Length { get; set; }
    content.vb: Public Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than zero or greater than <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Length
- uid: System.Text.StringBuilder.MaxCapacity
  commentId: P:System.Text.StringBuilder.MaxCapacity
  id: MaxCapacity
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: MaxCapacity
  fullName: System.Text.StringBuilder.MaxCapacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MaxCapacity
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 312
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Gets the maximum capacity of this instance.</p>\n"
  syntax:
    content: public int MaxCapacity { get; }
    content.vb: Public ReadOnly Property MaxCapacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters this instance can hold.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: StringBuilder.MaxCapacity
- uid: System.Text.StringBuilder.Append(System.Boolean)
  commentId: M:System.Text.StringBuilder.Append(System.Boolean)
  id: Append(System.Boolean)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Boolean)
  fullName: System.Text.StringBuilder.Append(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 876
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified Boolean value to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(bool value)
    content.vb: Public Function Append(value As Boolean) As StringBuilder
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Boolean)
- uid: System.Text.StringBuilder.Append(System.Byte)
  commentId: M:System.Text.StringBuilder.Append(System.Byte)
  id: Append(System.Byte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Byte)
  fullName: System.Text.StringBuilder.Append(System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 891
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 8-bit unsigned integer to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(byte value)
    content.vb: Public Function Append(value As Byte) As StringBuilder
    parameters:
    - id: value
      type: System.Byte
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Byte)
- uid: System.Text.StringBuilder.Append(System.Char)
  commentId: M:System.Text.StringBuilder.Append(System.Char)
  id: Append(System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char)
  fullName: System.Text.StringBuilder.Append(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 897
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(char value)
    content.vb: Public Function Append(value As Char) As StringBuilder
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The UTF-16-encoded code unit to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Char)
- uid: System.Text.StringBuilder.Append(System.Char*,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Char*,System.Int32)
  id: Append(System.Char*,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char*, Int32)
  fullName: System.Text.StringBuilder.Append(System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1618
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends an array of Unicode characters starting at a specified address to this instance. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      public StringBuilder Append(char *value, int valueCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Public Function Append(value As Char *, valueCount As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to an array of characters. </p>\n"
    - id: valueCount
      type: System.Int32
      description: "\n<p>The number of characters in the array. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>valueCount</em> is less than zero. </p>\n<p>-or-</p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<em>value</em> is a null pointer. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Char*, Int32)
- uid: System.Text.StringBuilder.Append(System.Char,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Char,System.Int32)
  id: Append(System.Char,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char, Int32)
  fullName: System.Text.StringBuilder.Append(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 555
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a specified number of copies of the string representation of a Unicode character to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(char value, int repeatCount)
    content.vb: Public Function Append(value As Char, repeatCount As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The character to append. </p>\n"
    - id: repeatCount
      type: System.Int32
      description: "\n<p>The number of times to append <em>value</em>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>repeatCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Char, Int32)
- uid: System.Text.StringBuilder.Append(System.Char[])
  commentId: M:System.Text.StringBuilder.Append(System.Char[])
  id: Append(System.Char[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char[])
  fullName: System.Text.StringBuilder.Append(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 984
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of the Unicode characters in a specified array to this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(char[] value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As Char()) As StringBuilder
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>The array of characters to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Append(System.Char())
  name.vb: Append(Char())
  nameWithType: StringBuilder.Append(Char[])
  nameWithType.vb: StringBuilder.Append(Char())
- uid: System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Char[],System.Int32,System.Int32)
  id: Append(System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Char[], Int32, Int32)
  fullName: System.Text.StringBuilder.Append(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 587
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified subarray of Unicode characters to this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(char[] value, int startIndex, int charCount)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>A character array. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position in <em>value</em>. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> + <em>charCount</em> is greater than the length of <em>value</em>.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Append(System.Char(), System.Int32, System.Int32)
  name.vb: Append(Char(), Int32, Int32)
  nameWithType: StringBuilder.Append(Char[], Int32, Int32)
  nameWithType.vb: StringBuilder.Append(Char(), Int32, Int32)
- uid: System.Text.StringBuilder.Append(System.Decimal)
  commentId: M:System.Text.StringBuilder.Append(System.Decimal)
  id: Append(System.Decimal)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Decimal)
  fullName: System.Text.StringBuilder.Append(System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 942
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified decimal number to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(decimal value)
    content.vb: Public Function Append(value As Decimal) As StringBuilder
    parameters:
    - id: value
      type: System.Decimal
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Decimal)
- uid: System.Text.StringBuilder.Append(System.Double)
  commentId: M:System.Text.StringBuilder.Append(System.Double)
  id: Append(System.Double)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Double)
  fullName: System.Text.StringBuilder.Append(System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 937
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified double-precision floating-point number to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(double value)
    content.vb: Public Function Append(value As Double) As StringBuilder
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Double)
- uid: System.Text.StringBuilder.Append(System.Int16)
  commentId: M:System.Text.StringBuilder.Append(System.Int16)
  id: Append(System.Int16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Int16)
  fullName: System.Text.StringBuilder.Append(System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 909
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 16-bit signed integer to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(short value)
    content.vb: Public Function Append(value As Short) As StringBuilder
    parameters:
    - id: value
      type: System.Int16
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Int16)
- uid: System.Text.StringBuilder.Append(System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.Int32)
  id: Append(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Int32)
  fullName: System.Text.StringBuilder.Append(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 916
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 32-bit signed integer to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(int value)
    content.vb: Public Function Append(value As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Int32)
- uid: System.Text.StringBuilder.Append(System.Int64)
  commentId: M:System.Text.StringBuilder.Append(System.Int64)
  id: Append(System.Int64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Int64)
  fullName: System.Text.StringBuilder.Append(System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 923
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 64-bit signed integer to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(long value)
    content.vb: Public Function Append(value As Long) As StringBuilder
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Int64)
- uid: System.Text.StringBuilder.Append(System.Object)
  commentId: M:System.Text.StringBuilder.Append(System.Object)
  id: Append(System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Object)
  fullName: System.Text.StringBuilder.Append(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 973
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified object to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(object value)
    content.vb: Public Function Append(value As Object) As StringBuilder
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Object)
- uid: System.Text.StringBuilder.Append(System.SByte)
  commentId: M:System.Text.StringBuilder.Append(System.SByte)
  id: Append(System.SByte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(SByte)
  fullName: System.Text.StringBuilder.Append(System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 883
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 8-bit signed integer to this instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As SByte) As StringBuilder
    parameters:
    - id: value
      type: System.SByte
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(SByte)
- uid: System.Text.StringBuilder.Append(System.Single)
  commentId: M:System.Text.StringBuilder.Append(System.Single)
  id: Append(System.Single)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(Single)
  fullName: System.Text.StringBuilder.Append(System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 930
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified single-precision floating-point number to this instance.</p>\n"
  syntax:
    content: public StringBuilder Append(float value)
    content.vb: Public Function Append(value As Single) As StringBuilder
    parameters:
    - id: value
      type: System.Single
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(Single)
- uid: System.Text.StringBuilder.Append(System.String)
  commentId: M:System.Text.StringBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(String)
  fullName: System.Text.StringBuilder.Append(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 620
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a copy of the specified string to this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(string value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As String) As StringBuilder
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(String)
- uid: System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(String, Int32, Int32)
  fullName: System.Text.StringBuilder.Append(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 677
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a copy of a specified substring to this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Append(string value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Append(value As String, startIndex As Integer, count As Integer) As StringBuilder
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string that contains the substring to append. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the substring within <em>value</em>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters in <em>value</em> to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>count</em> are not zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> + <em>count</em> is greater than the length of <em>value</em>.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(String, Int32, Int32)
- uid: System.Text.StringBuilder.Append(System.UInt16)
  commentId: M:System.Text.StringBuilder.Append(System.UInt16)
  id: Append(System.UInt16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(UInt16)
  fullName: System.Text.StringBuilder.Append(System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 949
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 16-bit unsigned integer to this instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As UShort) As StringBuilder
    parameters:
    - id: value
      type: System.UInt16
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(UInt16)
- uid: System.Text.StringBuilder.Append(System.UInt32)
  commentId: M:System.Text.StringBuilder.Append(System.UInt32)
  id: Append(System.UInt32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(UInt32)
  fullName: System.Text.StringBuilder.Append(System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 957
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 32-bit unsigned integer to this instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As UInteger) As StringBuilder
    parameters:
    - id: value
      type: System.UInt32
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(UInt32)
- uid: System.Text.StringBuilder.Append(System.UInt64)
  commentId: M:System.Text.StringBuilder.Append(System.UInt64)
  id: Append(System.UInt64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Append(UInt64)
  fullName: System.Text.StringBuilder.Append(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Append
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 965
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string representation of a specified 64-bit unsigned integer to this instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Append(ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Append(value As ULong) As StringBuilder
    parameters:
    - id: value
      type: System.UInt64
      description: "\n<p>The value to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Append(UInt64)
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1258
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument using a specified format provider. </p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> in which any format specification is replaced by the string representation of <em>arg0</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to one (1). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object)
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1263
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments using a specified format provider.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2 (two). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object)
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  id: AppendFormat(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1268
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments using a specified format provider.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, object arg0, object arg1, object arg2)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3 (three). </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object, Object, Object)
- uid: System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  commentId: M:System.Text.StringBuilder.AppendFormat(System.IFormatProvider,System.String,System.Object[])
  id: AppendFormat(System.IFormatProvider,System.String,System.Object[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(IFormatProvider, String, Object[])
  fullName: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1273
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array using a specified format provider.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(IFormatProvider provider, string format, params object[] args)
    content.vb: Public Function AppendFormat(provider As IFormatProvider, format As String, ParamArray args As Object()) As StringBuilder
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects to format.</p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed. After the append operation, this instance contains any data that existed before the operation, suffixed by a copy of <em>format</em> where any format specification is replaced by the string representation of the corresponding object argument. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.AppendFormat(System.IFormatProvider, System.String, System.Object())
  name.vb: AppendFormat(IFormatProvider, String, Object())
  nameWithType: StringBuilder.AppendFormat(IFormatProvider, String, Object[])
  nameWithType.vb: StringBuilder.AppendFormat(IFormatProvider, String, Object())
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object)
  id: AppendFormat(System.String,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1230
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, object arg0)
    content.vb: Public Function AppendFormat(format As String, arg0 As Object) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>An object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of <em>arg0</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 1.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendFormat(String, Object)
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object)
  id: AppendFormat(System.String,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1235
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of two arguments.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, object arg0, object arg1)
    content.vb: Public Function AppendFormat(format As String, arg0 As Object, arg1 As Object) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 2. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendFormat(String, Object, Object)
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object,System.Object,System.Object)
  id: AppendFormat(System.String,System.Object,System.Object,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object, Object, Object)
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1240
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of either of three arguments.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, object arg0, object arg1, object arg2)
    content.vb: Public Function AppendFormat(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to 3.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendFormat(String, Object, Object, Object)
- uid: System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  commentId: M:System.Text.StringBuilder.AppendFormat(System.String,System.Object[])
  id: AppendFormat(System.String,System.Object[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendFormat(String, Object[])
  fullName: System.Text.StringBuilder.AppendFormat(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendFormat
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1245
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a corresponding argument in a parameter array.</p>\n"
  syntax:
    content: public StringBuilder AppendFormat(string format, params object[] args)
    content.vb: Public Function AppendFormat(format As String, ParamArray args As Object()) As StringBuilder
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string (see Remarks). </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects to format. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>format</em> appended. Each format item in <em>format</em> is replaced by the string representation of the corresponding object argument.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid. </p>\n<p>-or-</p>\n<p>The index of a format item is less than 0 (zero), or greater than or equal to the length of the <em>args</em> array.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of the expanded string would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.AppendFormat(System.String, System.Object())
  name.vb: AppendFormat(String, Object())
  nameWithType: StringBuilder.AppendFormat(String, Object[])
  nameWithType.vb: StringBuilder.AppendFormat(String, Object())
- uid: System.Text.StringBuilder.AppendLine
  commentId: M:System.Text.StringBuilder.AppendLine
  id: AppendLine
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendLine()
  fullName: System.Text.StringBuilder.AppendLine()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendLine
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 712
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public StringBuilder AppendLine()
    content.vb: >-
      <ComVisible(False)>

      Public Function AppendLine As StringBuilder
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendLine()
- uid: System.Text.StringBuilder.AppendLine(System.String)
  commentId: M:System.Text.StringBuilder.AppendLine(System.String)
  id: AppendLine(System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: AppendLine(String)
  fullName: System.Text.StringBuilder.AppendLine(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AppendLine
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 718
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Appends a copy of the specified string followed by the default line terminator to the end of the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public StringBuilder AppendLine(string value)
    content.vb: >-
      <ComVisible(False)>

      Public Function AppendLine(value As String) As StringBuilder
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to append. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the append operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.AppendLine(String)
- uid: System.Text.StringBuilder.Clear
  commentId: M:System.Text.StringBuilder.Clear
  id: Clear
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Text.StringBuilder.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 450
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Removes all characters from the current <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public StringBuilder Clear()
    content.vb: Public Function Clear As StringBuilder
    return:
      type: System.Text.StringBuilder
      description: "\n<p>An object whose <xref href=\"System.Text.StringBuilder.Length\" data-throw-if-not-resolved=\"false\"></xref> is 0 (zero).</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Clear()
- uid: System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, Char[], Int32, Int32)
  fullName: System.Text.StringBuilder.CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 725
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Copies the characters from a specified segment of this instance to a specified segment of a destination <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      [SecuritySafeCritical]

      public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
    content.vb: >-
      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Sub CopyTo(sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)
    parameters:
    - id: sourceIndex
      type: System.Int32
      description: "\n<p>The starting position in this instance where characters will be copied from. The index is zero-based.</p>\n"
    - id: destination
      type: System.Char[]
      description: "\n<p>The array where characters will be copied.</p>\n"
    - id: destinationIndex
      type: System.Int32
      description: "\n<p>The starting position in <em>destination</em> where characters will be copied. The index is zero-based.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to be copied.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em>, is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>sourceIndex</em> is greater than the length of this instance.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceIndex</em> + <em>count</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>\n<em>destinationIndex</em> + <em>count</em> is greater than the length of <em>destination</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.CopyTo(System.Int32, System.Char(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Char(), Int32, Int32)
  nameWithType: StringBuilder.CopyTo(Int32, Char[], Int32, Int32)
  nameWithType.vb: StringBuilder.CopyTo(Int32, Char(), Int32, Int32)
- uid: System.Text.StringBuilder.EnsureCapacity(System.Int32)
  commentId: M:System.Text.StringBuilder.EnsureCapacity(System.Int32)
  id: EnsureCapacity(System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: EnsureCapacity(Int32)
  fullName: System.Text.StringBuilder.EnsureCapacity(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsureCapacity
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 321
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Ensures that the capacity of this instance of <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> is at least the specified value.</p>\n"
  syntax:
    content: public int EnsureCapacity(int capacity)
    content.vb: Public Function EnsureCapacity(capacity As Integer) As Integer
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The minimum capacity to ensure. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new capacity of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.EnsureCapacity(Int32)
- uid: System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  commentId: M:System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  id: Equals(System.Text.StringBuilder)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Equals(StringBuilder)
  fullName: System.Text.StringBuilder.Equals(System.Text.StringBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1446
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public bool Equals(StringBuilder sb)
    content.vb: Public Function Equals(sb As StringBuilder) As Boolean
    parameters:
    - id: sb
      type: System.Text.StringBuilder
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this instance and <em>sb</em> have equal string, <xref href=\"System.Text.StringBuilder.Capacity\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref> values; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Equals(StringBuilder)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Boolean)
  id: Insert(System.Int32,System.Boolean)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Boolean)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1030
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a Boolean value into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, bool value)
    content.vb: Public Function Insert(index As Integer, value As Boolean) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Boolean
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Boolean)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Byte)
  id: Insert(System.Int32,System.Byte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Byte)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1051
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 8-bit unsigned integer into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, byte value)
    content.vb: Public Function Insert(index As Integer, value As Byte) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Byte
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Byte
    commentId: T:System.Byte
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Byte)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char)
  id: Insert(System.Int32,System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Char)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1070
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified Unicode character into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, char value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As Char) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Char)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[])
  id: Insert(System.Int32,System.Char[])
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Char[])
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1085
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified array of Unicode characters into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, char[] value)
    content.vb: Public Function Insert(index As Integer, value As Char()) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Char[]
      description: "\n<p>The character array to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Insert(System.Int32, System.Char())
  name.vb: Insert(Int32, Char())
  nameWithType: StringBuilder.Insert(Int32, Char[])
  nameWithType.vb: StringBuilder.Insert(Int32, Char())
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  id: Insert(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Char[], Int32, Int32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1101
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified subarray of Unicode characters into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, char[] value, int startIndex, int charCount)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As Char(), startIndex As Integer, charCount As Integer) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Char[]
      description: "\n<p>A character array. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting index within <em>value</em>. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>, and <em>startIndex</em> and <em>charCount</em> are not zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em>, <em>startIndex</em>, or <em>charCount</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than the length of this instance.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>charCount</em> is not a position within <em>value</em>.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Text.StringBuilder.Insert(System.Int32, System.Char(), System.Int32, System.Int32)
  name.vb: Insert(Int32, Char(), Int32, Int32)
  nameWithType: StringBuilder.Insert(Int32, Char[], Int32, Int32)
  nameWithType.vb: StringBuilder.Insert(Int32, Char(), Int32, Int32)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Decimal)
  id: Insert(System.Int32,System.Decimal)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Decimal)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1182
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a decimal number into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, decimal value)
    content.vb: Public Function Insert(index As Integer, value As Decimal) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Decimal
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Decimal
    commentId: T:System.Decimal
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Decimal)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Double)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Double)
  id: Insert(System.Int32,System.Double)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Double)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1177
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a double-precision floating-point number into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, double value)
    content.vb: Public Function Insert(index As Integer, value As Double) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Double
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Double
    commentId: T:System.Double
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Double)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int16)
  id: Insert(System.Int32,System.Int16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Int16)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1061
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 16-bit signed integer into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, short value)
    content.vb: Public Function Insert(index As Integer, value As Short) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Int16
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int16
    commentId: T:System.Int16
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Int16)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int32)
  id: Insert(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Int32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1147
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 32-bit signed integer into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, int value)
    content.vb: Public Function Insert(index As Integer, value As Integer) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Int32
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Int32)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Int64)
  id: Insert(System.Int32,System.Int64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Int64)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1157
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 64-bit signed integer into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, long value)
    content.vb: Public Function Insert(index As Integer, value As Long) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Int64
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Int64
    commentId: T:System.Int64
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Int64)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Object)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1222
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of an object into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, object value)
    content.vb: Public Function Insert(index As Integer, value As Object) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to insert, or <strong>null</strong>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Object)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.SByte)
  id: Insert(System.Int32,System.SByte)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, SByte)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1040
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a specified 8-bit signed integer into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As SByte) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.SByte
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.SByte
    commentId: T:System.SByte
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, SByte)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.Single)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.Single)
  id: Insert(System.Int32,System.Single)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, Single)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1167
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a single-precision floating point number into this instance at the specified character position.</p>\n"
  syntax:
    content: public StringBuilder Insert(int index, float value)
    content.vb: Public Function Insert(index As Integer, value As Single) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.Single
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Single
    commentId: T:System.Single
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, Single)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, String)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1007
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts a string into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, string value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As String) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the current length of this instance. </p>\n<p>-or-</p>\n<p>The current length of this <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object plus the length of <em>value</em> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, String)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.String,System.Int32)
  id: Insert(System.Int32,System.String,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, String, Int32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 790
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts one or more copies of a specified string into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StringBuilder Insert(int index, string value, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(index As Integer, value As String, count As Integer) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times to insert <em>value</em>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after insertion has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the current length of this instance.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The current length of this <xref href=\"System.Text.StringBuilder\" data-throw-if-not-resolved=\"false\"></xref> object plus the length of <em>value</em> times <em>count</em> exceeds <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, String, Int32)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt16)
  id: Insert(System.Int32,System.UInt16)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, UInt16)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1191
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 16-bit unsigned integer into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As UShort) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.UInt16
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.UInt16
    commentId: T:System.UInt16
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, UInt16)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt32)
  id: Insert(System.Int32,System.UInt32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, UInt32)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1201
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 32-bit unsigned integer into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As UInteger) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.UInt32
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.UInt32
    commentId: T:System.UInt32
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, UInt32)
- uid: System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  commentId: M:System.Text.StringBuilder.Insert(System.Int32,System.UInt64)
  id: Insert(System.Int32,System.UInt64)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Insert(Int32, UInt64)
  fullName: System.Text.StringBuilder.Insert(System.Int32, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1211
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Inserts the string representation of a 64-bit unsigned integer into this instance at the specified character position.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public StringBuilder Insert(int index, ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function Insert(index As Integer, value As ULong) As StringBuilder
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The position in this instance where insertion begins. </p>\n"
    - id: value
      type: System.UInt64
      description: "\n<p>The value to insert. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the insert operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero or greater than the length of this instance. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.UInt64
    commentId: T:System.UInt64
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Insert(Int32, UInt64)
- uid: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  id: Remove(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Remove(Int32, Int32)
  fullName: System.Text.StringBuilder.Remove(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 836
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Removes the specified range of characters from this instance.</p>\n"
  syntax:
    content: public StringBuilder Remove(int startIndex, int length)
    content.vb: Public Function Remove(startIndex As Integer, length As Integer) As StringBuilder
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based position in this instance where removal begins. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters to remove. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance after the excise operation has completed.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>If <em>startIndex</em> or <em>length</em> is less than zero, or <em>startIndex</em> + <em>length</em> is greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Replace(System.String,System.String)
    commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Remove(Int32, Int32)
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char)
  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char)
  id: Replace(System.Char,System.Char)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(Char, Char)
  fullName: System.Text.StringBuilder.Replace(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1576
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces all occurrences of a specified character in this instance with another specified character.</p>\n"
  syntax:
    content: public StringBuilder Replace(char oldChar, char newChar)
    content.vb: Public Function Replace(oldChar As Char, newChar As Char) As StringBuilder
    parameters:
    - id: oldChar
      type: System.Char
      description: "\n<p>The character to replace. </p>\n"
    - id: newChar
      type: System.Char
      description: "\n<p>The character that replaces <em>oldChar</em>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Replace(Char, Char)
- uid: System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Replace(System.Char,System.Char,System.Int32,System.Int32)
  id: Replace(System.Char,System.Char,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(Char, Char, Int32, Int32)
  fullName: System.Text.StringBuilder.Replace(System.Char, System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1579
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces, within a substring of this instance, all occurrences of a specified character with another specified character.</p>\n"
  syntax:
    content: public StringBuilder Replace(char oldChar, char newChar, int startIndex, int count)
    content.vb: Public Function Replace(oldChar As Char, newChar As Char, startIndex As Integer, count As Integer) As StringBuilder
    parameters:
    - id: oldChar
      type: System.Char
      description: "\n<p>The character to replace. </p>\n"
    - id: newChar
      type: System.Char
      description: "\n<p>The character that replaces <em>oldChar</em>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The position in this instance where the substring begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the substring. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with <em>oldChar</em> replaced by <em>newChar</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> + <em>count</em> is greater than the length of the value of this instance.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> or <em>count</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Replace(Char, Char, Int32, Int32)
- uid: System.Text.StringBuilder.Replace(System.String,System.String)
  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(String, String)
  fullName: System.Text.StringBuilder.Replace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1441
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces all occurrences of a specified string in this instance with another specified string.</p>\n"
  syntax:
    content: public StringBuilder Replace(string oldValue, string newValue)
    content.vb: Public Function Replace(oldValue As String, newValue As String) As StringBuilder
    parameters:
    - id: oldValue
      type: System.String
      description: "\n<p>The string to replace. </p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>oldValue</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>oldValue</em> is zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
    commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Replace(String, String)
- uid: System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.Replace(System.String,System.String,System.Int32,System.Int32)
  id: Replace(System.String,System.String,System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: Replace(String, String, Int32, Int32)
  fullName: System.Text.StringBuilder.Replace(System.String, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 1491
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Replaces, within a substring of this instance, all occurrences of a specified string with another specified string.</p>\n"
  syntax:
    content: public StringBuilder Replace(string oldValue, string newValue, int startIndex, int count)
    content.vb: Public Function Replace(oldValue As String, newValue As String, startIndex As Integer, count As Integer) As StringBuilder
    parameters:
    - id: oldValue
      type: System.String
      description: "\n<p>The string to replace. </p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The string that replaces <em>oldValue</em>, or <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The position in this instance where the substring begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the substring. </p>\n"
    return:
      type: System.Text.StringBuilder
      description: "\n<p>A reference to this instance with all instances of <em>oldValue</em> replaced by <em>newValue</em> in the range from <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>oldValue</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>oldValue</em> is zero. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>count</em> indicates a character position not within this instance.</p>\n<p>-or- </p>\n<p>Enlarging the value of this instance would exceed <xref href=\"System.Text.StringBuilder.MaxCapacity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Text.StringBuilder.Remove(System.Int32,System.Int32)
    commentId: M:System.Text.StringBuilder.Remove(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.Replace(String, String, Int32, Int32)
- uid: System.Text.StringBuilder.ToString
  commentId: M:System.Text.StringBuilder.ToString
  id: ToString
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Text.StringBuilder.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 332
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Converts the value of this instance to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override string ToString()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string whose value is the same as this instance.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: StringBuilder.ToString()
- uid: System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  commentId: M:System.Text.StringBuilder.ToString(System.Int32,System.Int32)
  id: ToString(System.Int32,System.Int32)
  parent: System.Text.StringBuilder
  langs:
  - csharp
  - vb
  name: ToString(Int32, Int32)
  fullName: System.Text.StringBuilder.ToString(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/StringBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Text/StringBuilder.cs
    startLine: 375
  assemblies:
  - System.Runtime
  namespace: System.Text
  summary: "\n<p>Converts the value of a substring of this instance to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string ToString(int startIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToString(startIndex As Integer, length As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the substring in this instance. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the substring. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string whose value is the same as the specified substring of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or- </p>\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the length of the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: StringBuilder.ToString(Int32, Int32)
references:
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
  nameWithType: System.Text
  commentId: N:System.Text
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
  nameWithType: Char
  commentId: T:System.Char
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Text.StringBuilder
  parent: System.Text
  isExternal: false
  name: StringBuilder
  fullName: System.Text.StringBuilder
  nameWithType: StringBuilder
  commentId: T:System.Text.StringBuilder
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
  nameWithType: Byte
  commentId: T:System.Byte
- uid: System.Char*
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  nameWithType: Char*
- uid: System.Char[]
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Char[]
  nameWithType.vb: Char()
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
  nameWithType: Decimal
  commentId: T:System.Decimal
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
  nameWithType: Double
  commentId: T:System.Double
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
  nameWithType: Int16
  commentId: T:System.Int16
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
  nameWithType: SByte
  commentId: T:System.SByte
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
  nameWithType: Single
  commentId: T:System.Single
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
  nameWithType: UInt16
  commentId: T:System.UInt16
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
  nameWithType: UInt32
  commentId: T:System.UInt32
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
  nameWithType: UInt64
  commentId: T:System.UInt64
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
  nameWithType: IFormatProvider
  commentId: T:System.IFormatProvider
- uid: System.Object[]
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Object[]
  nameWithType.vb: Object()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
  nameWithType: NullReferenceException
  commentId: T:System.NullReferenceException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
  nameWithType: OutOfMemoryException
  commentId: T:System.OutOfMemoryException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
  nameWithType: FormatException
  commentId: T:System.FormatException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
