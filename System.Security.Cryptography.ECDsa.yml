### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsa
  commentId: T:System.Security.Cryptography.ECDsa
  id: ECDsa
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.ECDsa.#ctor
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  - System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  - System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  - System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  - vb
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsa
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 77
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Provides an abstract base class that encapsulates the Elliptic Curve Digital Signature Algorithm (ECDSA).</p>\n"
  syntax:
    content: 'public abstract class ECDsa : AsymmetricAlgorithm, IDisposable'
    content.vb: >-
      Public MustInherit Class ECDsa
          Inherits AsymmetricAlgorithm
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  - System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  - System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Security.Cryptography.ECDsa.#ctor
  commentId: M:System.Security.Cryptography.ECDsa.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: ECDsa()
  nameWithType: ECDsa.ECDsa()
  fullName: System.Security.Cryptography.ECDsa.ECDsa()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 79
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.ECDsa\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected ECDsa()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Cryptography.ECDsa.Create
  commentId: M:System.Security.Cryptography.ECDsa.Create
  id: Create
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: ECDsa.Create()
  fullName: System.Security.Cryptography.ECDsa.Create()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 80
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Creates a new instance of the default implementation of the Elliptic Curve Digital Signature Algorithm (ECDSA).</p>\n"
  syntax:
    content: public static ECDsa Create()
    content.vb: Public Shared Function Create As ECDsa
    return:
      type: System.Security.Cryptography.ECDsa
      description: "\n<p>A new instance of the default implementation (<xref href=\"System.Security.Cryptography.ECDsaCng\" data-throw-if-not-resolved=\"false\"></xref>) of this class.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  id: Create(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: Create(ECCurve)
  nameWithType: ECDsa.Create(ECCurve)
  fullName: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 81
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public static ECDsa Create(ECCurve curve)
    content.vb: Public Shared Function Create(curve As ECCurve) As ECDsa
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
    return:
      type: System.Security.Cryptography.ECDsa
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  id: Create(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: Create(ECParameters)
  nameWithType: ECDsa.Create(ECParameters)
  fullName: System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 82
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public static ECDsa Create(ECParameters parameters)
    content.vb: Public Shared Function Create(parameters As ECParameters) As ECDsa
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
    return:
      type: System.Security.Cryptography.ECDsa
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  id: ExportExplicitParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: ExportExplicitParameters(Boolean)
  nameWithType: ECDsa.ExportExplicitParameters(Boolean)
  fullName: System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExportExplicitParameters
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 83
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public virtual ECParameters ExportExplicitParameters(bool includePrivateParameters)
    content.vb: Public Overridable Function ExportExplicitParameters(includePrivateParameters As Boolean) As ECParameters
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
    return:
      type: System.Security.Cryptography.ECParameters
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  commentId: M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  id: ExportParameters(System.Boolean)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: ExportParameters(Boolean)
  nameWithType: ECDsa.ExportParameters(Boolean)
  fullName: System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExportParameters
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 84
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public virtual ECParameters ExportParameters(bool includePrivateParameters)
    content.vb: Public Overridable Function ExportParameters(includePrivateParameters As Boolean) As ECParameters
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
    return:
      type: System.Security.Cryptography.ECParameters
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  commentId: M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  id: GenerateKey(System.Security.Cryptography.ECCurve)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: GenerateKey(ECCurve)
  nameWithType: ECDsa.GenerateKey(ECCurve)
  fullName: System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenerateKey
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 85
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public virtual void GenerateKey(ECCurve curve)
    content.vb: Public Overridable Sub GenerateKey(curve As ECCurve)
    parameters:
    - id: curve
      type: System.Security.Cryptography.ECCurve
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: HashData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.HashData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 86
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, computes the hash value of the specified portion of a byte array by using the specified hashing algorithm. </p>\n"
  syntax:
    content: protected abstract byte[] HashData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)
    content.vb: Protected MustOverride Function HashData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The data to be hashed. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The index of the first byte in <em>data</em> to be hashed.  </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to hash. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The algorithm to use to hash the data. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The hashed data. </p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>A derived class must override this method. </p>\n"
  nameWithType.vb: ECDsa.HashData(Byte(), Int32, Int32, HashAlgorithmName)
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: System.Security.Cryptography.ECDsa.HashData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  name.vb: HashData(Byte(), Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: HashData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.HashData(Stream, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.HashData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 87
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, computes the hash value of the specified binary stream by using the specified hashing algorithm.</p>\n"
  syntax:
    content: protected abstract byte[] HashData(Stream data, HashAlgorithmName hashAlgorithm)
    content.vb: Protected MustOverride Function HashData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.IO.Stream
      description: "\n<p>The binary stream to hash. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The algorithm to use to hash the data.</p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The hashed data.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>A derived class must override this method. </p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  commentId: M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  id: ImportParameters(System.Security.Cryptography.ECParameters)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: ImportParameters(ECParameters)
  nameWithType: ECDsa.ImportParameters(ECParameters)
  fullName: System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImportParameters
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 88
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public virtual void ImportParameters(ECParameters parameters)
    content.vb: Public Overridable Sub ImportParameters(parameters As ECParameters)
    parameters:
    - id: parameters
      type: System.Security.Cryptography.ECParameters
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: SignData(Byte[], Int32, Int32, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], Int32, Int32, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(System.Byte[], System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 89
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value of a portion of the specified byte array using the specified hash algorithm and signs the resulting hash value. </p>\n"
  syntax:
    content: public virtual byte[] SignData(byte[] data, int offset, int count, HashAlgorithmName hashAlgorithm)
    content.vb: Public Overridable Function SignData(data As Byte(), offset As Integer, count As Integer, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The input data for which to compute the hash. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset into the array at which to begin using data. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes in the array to use as data. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm to use to create the hash value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The ECDSA signature for the specified data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than zero. </p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero. </p>\n<p>-or-</p>\n<p>\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>.  </p>\n"
  nameWithType.vb: ECDsa.SignData(Byte(), Int32, Int32, HashAlgorithmName)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Cryptography.ECDsa.SignData(System.Byte(), System.Int32, System.Int32, System.Security.Cryptography.HashAlgorithmName)
  name.vb: SignData(Byte(), Int32, Int32, HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: SignData(Byte[], HashAlgorithmName)
  nameWithType: ECDsa.SignData(Byte[], HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 90
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value of the specified byte array using the specified hash algorithm and signs the resulting hash value. </p>\n"
  syntax:
    content: public virtual byte[] SignData(byte[] data, HashAlgorithmName hashAlgorithm)
    content.vb: Public Overridable Function SignData(data As Byte(), hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The input data for which to compute the hash. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm to use to create the hash value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The ECDSA signature for the specified data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: ECDsa.SignData(Byte(), HashAlgorithmName)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Cryptography.ECDsa.SignData(System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  name.vb: SignData(Byte(), HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: SignData(Stream, HashAlgorithmName)
  nameWithType: ECDsa.SignData(Stream, HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.SignData(System.IO.Stream, System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 91
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes the hash value of the specified stream using the specified hash algorithm and signs the resulting hash value.</p>\n"
  syntax:
    content: public virtual byte[] SignData(Stream data, HashAlgorithmName hashAlgorithm)
    content.vb: Public Overridable Function SignData(data As Stream, hashAlgorithm As HashAlgorithmName) As Byte()
    parameters:
    - id: data
      type: System.IO.Stream
      description: "\n<p>The input stream for which to compute the hash. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm to use to create the hash value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>The ECDSA signature for the specified data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: SignHash(Byte[])
  nameWithType: ECDsa.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsa.SignHash(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignHash
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 92
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Generates a digital signature for the specified hash value. </p>\n"
  syntax:
    content: public abstract byte[] SignHash(byte[] hash)
    content.vb: Public MustOverride Function SignHash(hash As Byte()) As Byte()
    parameters:
    - id: hash
      type: System.Byte[]
      description: "\n<p>The hash value of the data that is being signed.</p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A digital signature that consists of the given hash value encrypted with the private key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>hash</em> parameter is <strong>null</strong>.</p>\n"
  nameWithType.vb: ECDsa.SignHash(Byte())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.ECDsa.SignHash(System.Byte())
  name.vb: SignHash(Byte())
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: VerifyData(Byte[], Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Byte[], HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[], System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 93
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies that a digital signature is valid by calculating the hash value of the specified data using the specified hash algorithm and comparing it to the provided signature. </p>\n"
  syntax:
    content: public bool VerifyData(byte[] data, byte[] signature, HashAlgorithmName hashAlgorithm)
    content.vb: Public Function VerifyData(data As Byte(), signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The signed data. </p>\n"
    - id: signature
      type: System.Byte[]
      description: "\n<p>The signature data to be verified. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm used to create the hash value of the data. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>signature</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: ECDsa.VerifyData(Byte(), Byte(), HashAlgorithmName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.Byte(), System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  name.vb: VerifyData(Byte(), Byte(), HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Byte[], Int32, Int32, Byte[], HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 94
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies that a digital signature is valid by calculating the hash value of the data in a portion of a byte array using the specified hash algorithm and comparing it to the provided signature. </p>\n"
  syntax:
    content: public virtual bool VerifyData(byte[] data, int offset, int count, byte[] signature, HashAlgorithmName hashAlgorithm)
    content.vb: Public Overridable Function VerifyData(data As Byte(), offset As Integer, count As Integer, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The signed data. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The starting index at which to compute the hash. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to hash. </p>\n"
    - id: signature
      type: System.Byte[]
      description: "\n<p>The signature data to be verified. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm used to create the hash value of the data. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>signature</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than zero. </p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>offset</em> + <em>count</em> – 1 results in an index that is beyond the upper bound of <em>data</em>.  </p>\n"
  nameWithType.vb: ECDsa.VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  name.vb: VerifyData(Byte(), Int32, Int32, Byte(), HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  commentId: M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  id: VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: VerifyData(Stream, Byte[], HashAlgorithmName)
  nameWithType: ECDsa.VerifyData(Stream, Byte[], HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream, System.Byte[], System.Security.Cryptography.HashAlgorithmName)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyData
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 95
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies that a digital signature is valid by calculating the hash value of the specified stream using the specified hash algorithm and comparing it to the provided signature. </p>\n"
  syntax:
    content: public bool VerifyData(Stream data, byte[] signature, HashAlgorithmName hashAlgorithm)
    content.vb: Public Function VerifyData(data As Stream, signature As Byte(), hashAlgorithm As HashAlgorithmName) As Boolean
    parameters:
    - id: data
      type: System.IO.Stream
      description: "\n<p>The signed data. </p>\n"
    - id: signature
      type: System.Byte[]
      description: "\n<p>The signature data to be verified. </p>\n"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "\n<p>The hash algorithm used to create the hash value of the data. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the signature is valid; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>data</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>signature</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hashAlgorithm</em>.<xref href=\"System.Security.Cryptography.HashAlgorithmName.Name\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: ECDsa.VerifyData(Stream, Byte(), HashAlgorithmName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream, System.Byte(), System.Security.Cryptography.HashAlgorithmName)
  name.vb: VerifyData(Stream, Byte(), HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  commentId: M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsa
  langs:
  - csharp
  - vb
  name: VerifyHash(Byte[], Byte[])
  nameWithType: ECDsa.VerifyHash(Byte[], Byte[])
  fullName: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VerifyHash
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 96
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Verifies a digital signature against the specified hash value.</p>\n"
  syntax:
    content: public abstract bool VerifyHash(byte[] hash, byte[] signature)
    content.vb: Public MustOverride Function VerifyHash(hash As Byte(), signature As Byte()) As Boolean
    parameters:
    - id: hash
      type: System.Byte[]
      description: "\n<p>The hash value of a block of data.</p>\n"
    - id: signature
      type: System.Byte[]
      description: "\n<p>The digital signature to be verified.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the hash value equals the decrypted signature; otherwise, <strong>false</strong>.</p>\n"
  nameWithType.vb: ECDsa.VerifyHash(Byte(), Byte())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.ECDsa.VerifyHash(System.Byte(), System.Byte())
  name.vb: VerifyHash(Byte(), Byte())
references:
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Cryptography.AsymmetricAlgorithm
  commentId: T:System.Security.Cryptography.AsymmetricAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: AsymmetricAlgorithm
  nameWithType: AsymmetricAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: KeySizeValue
  nameWithType: AsymmetricAlgorithm.KeySizeValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  commentId: F:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: LegalKeySizesValue
  nameWithType: AsymmetricAlgorithm.LegalKeySizesValue
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: Dispose()
  nameWithType: AsymmetricAlgorithm.Dispose()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose()
  spec.csharp:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
    name: Dispose
    nameWithType: AsymmetricAlgorithm.Dispose
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
    name: Dispose
    nameWithType: AsymmetricAlgorithm.Dispose
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Clear
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: Clear()
  nameWithType: AsymmetricAlgorithm.Clear()
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear()
  spec.csharp:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
    name: Clear
    nameWithType: AsymmetricAlgorithm.Clear
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Clear
    name: Clear
    nameWithType: AsymmetricAlgorithm.Clear
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: AsymmetricAlgorithm.Dispose(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
    name: Dispose
    nameWithType: AsymmetricAlgorithm.Dispose
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Dispose(System.Boolean)
    name: Dispose
    nameWithType: AsymmetricAlgorithm.Dispose
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: Create(String)
  nameWithType: AsymmetricAlgorithm.Create(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
  spec.csharp:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
    name: Create
    nameWithType: AsymmetricAlgorithm.Create
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.Create(System.String)
    name: Create
    nameWithType: AsymmetricAlgorithm.Create
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.Create
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: FromXmlString(String)
  nameWithType: AsymmetricAlgorithm.FromXmlString(String)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
  spec.csharp:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
    name: FromXmlString
    nameWithType: AsymmetricAlgorithm.FromXmlString
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString(System.String)
    name: FromXmlString
    nameWithType: AsymmetricAlgorithm.FromXmlString
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.FromXmlString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  commentId: M:System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: ToXmlString(Boolean)
  nameWithType: AsymmetricAlgorithm.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
    name: ToXmlString
    nameWithType: AsymmetricAlgorithm.ToXmlString
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString(System.Boolean)
    name: ToXmlString
    nameWithType: AsymmetricAlgorithm.ToXmlString
    fullName: System.Security.Cryptography.AsymmetricAlgorithm.ToXmlString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: KeySize
  nameWithType: AsymmetricAlgorithm.KeySize
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeySize
- uid: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: LegalKeySizes
  nameWithType: AsymmetricAlgorithm.LegalKeySizes
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
- uid: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: SignatureAlgorithm
  nameWithType: AsymmetricAlgorithm.SignatureAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.SignatureAlgorithm
- uid: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  commentId: P:System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
  parent: System.Security.Cryptography.AsymmetricAlgorithm
  isExternal: true
  name: KeyExchangeAlgorithm
  nameWithType: AsymmetricAlgorithm.KeyExchangeAlgorithm
  fullName: System.Security.Cryptography.AsymmetricAlgorithm.KeyExchangeAlgorithm
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Security.Cryptography.ECDsa
  commentId: T:System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography.ECCurve
  commentId: T:System.Security.Cryptography.ECCurve
  parent: System.Security.Cryptography
  isExternal: false
  name: ECCurve
  nameWithType: ECCurve
  fullName: System.Security.Cryptography.ECCurve
- uid: System.Security.Cryptography.ECParameters
  commentId: T:System.Security.Cryptography.ECParameters
  parent: System.Security.Cryptography
  isExternal: false
  name: ECParameters
  nameWithType: ECParameters
  fullName: System.Security.Cryptography.ECParameters
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HashAlgorithmName
  commentId: T:System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
