### YamlMime:ManagedReference
items:
- uid: System.Reflection.LocalVariableInfo
  commentId: T:System.Reflection.LocalVariableInfo
  id: LocalVariableInfo
  parent: System.Reflection
  children:
  - System.Reflection.LocalVariableInfo.#ctor
  - System.Reflection.LocalVariableInfo.IsPinned
  - System.Reflection.LocalVariableInfo.LocalIndex
  - System.Reflection.LocalVariableInfo.LocalType
  - System.Reflection.LocalVariableInfo.ToString
  langs:
  - csharp
  - vb
  name: LocalVariableInfo
  nameWithType: LocalVariableInfo
  fullName: System.Reflection.LocalVariableInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LocalVariableInfo
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 136
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Discovers the attributes of a local variable and provides access to local variable metadata.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public class LocalVariableInfo
    content.vb: >-
      <ComVisible(True)>

      Public Class LocalVariableInfo
  seealso:
  - linkId: System.Reflection.MethodBody.LocalVariables
    commentId: P:System.Reflection.MethodBody.LocalVariables
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.LocalVariableInfo.#ctor
  commentId: M:System.Reflection.LocalVariableInfo.#ctor
  id: '#ctor'
  parent: System.Reflection.LocalVariableInfo
  langs:
  - csharp
  - vb
  name: LocalVariableInfo()
  nameWithType: LocalVariableInfo.LocalVariableInfo()
  fullName: System.Reflection.LocalVariableInfo.LocalVariableInfo()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 146
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.LocalVariableInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected LocalVariableInfo()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Reflection.LocalVariableInfo.IsPinned
  commentId: P:System.Reflection.LocalVariableInfo.IsPinned
  id: IsPinned
  parent: System.Reflection.LocalVariableInfo
  langs:
  - csharp
  - vb
  name: IsPinned
  nameWithType: LocalVariableInfo.IsPinned
  fullName: System.Reflection.LocalVariableInfo.IsPinned
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPinned
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 163
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the object referred to by the local variable is pinned in memory.</p>\n"
  syntax:
    content: public virtual bool IsPinned { get; }
    content.vb: Public Overridable ReadOnly Property IsPinned As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object referred to by the variable is pinned in memory; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.LocalVariableInfo.LocalIndex
  commentId: P:System.Reflection.LocalVariableInfo.LocalIndex
  id: LocalIndex
  parent: System.Reflection.LocalVariableInfo
  langs:
  - csharp
  - vb
  name: LocalIndex
  nameWithType: LocalVariableInfo.LocalIndex
  fullName: System.Reflection.LocalVariableInfo.LocalIndex
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LocalIndex
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 164
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the index of the local variable within the method body.</p>\n"
  syntax:
    content: public virtual int LocalIndex { get; }
    content.vb: Public Overridable ReadOnly Property LocalIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An integer value that represents the order of declaration of the local variable within the method body.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.LocalVariableInfo.LocalType
  commentId: P:System.Reflection.LocalVariableInfo.LocalType
  id: LocalType
  parent: System.Reflection.LocalVariableInfo
  langs:
  - csharp
  - vb
  name: LocalType
  nameWithType: LocalVariableInfo.LocalType
  fullName: System.Reflection.LocalVariableInfo.LocalType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LocalType
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 162
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the local variable.</p>\n"
  syntax:
    content: public virtual Type LocalType { get; }
    content.vb: Public Overridable ReadOnly Property LocalType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the local variable.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.LocalVariableInfo.ToString
  commentId: M:System.Reflection.LocalVariableInfo.ToString
  id: ToString
  parent: System.Reflection.LocalVariableInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: LocalVariableInfo.ToString()
  fullName: System.Reflection.LocalVariableInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBody.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/MethodBody.cs
    startLine: 150
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a user-readable string that describes the local variable.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that displays information about the local variable, including the type name, index, and pinned status.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
