items:
- uid: System.Threading.AbandonedMutexException
  commentId: T:System.Threading.AbandonedMutexException
  id: AbandonedMutexException
  parent: System.Threading
  children:
  - System.Threading.AbandonedMutexException.#ctor
  - System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)
  - System.Threading.AbandonedMutexException.#ctor(System.String)
  - System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)
  - System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)
  - System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)
  - System.Threading.AbandonedMutexException.Mutex
  - System.Threading.AbandonedMutexException.MutexIndex
  langs:
  - csharp
  - vb
  name: AbandonedMutexException
  fullName: System.Threading.AbandonedMutexException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AbandonedMutexException
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 21
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>The exception that is thrown when one thread acquires a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that another thread has abandoned by exiting without releasing it.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public class AbandonedMutexException : SystemException, ISerializable, _Exception
    content.vb: >-
      <ComVisible(False)>

      Public Class AbandonedMutexException
          Inherits SystemException
          Implements ISerializable, _Exception
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  inheritance:
  - System.Object
  - System.Exception
  implements:
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.InteropServices._Exception
  inheritedMembers:
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Exception.GetType
  - System.Exception.Message
  - System.Exception.Data
  - System.Exception.InnerException
  - System.Exception.TargetSite
  - System.Exception.StackTrace
  - System.Exception.HelpLink
  - System.Exception.Source
  - System.Exception.HResult
  - System.Exception.SerializeObjectState
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: AbandonedMutexException
- uid: System.Threading.AbandonedMutexException.#ctor
  commentId: M:System.Threading.AbandonedMutexException.#ctor
  id: '#ctor'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException()
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 27
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with default values.</p>\n"
  syntax:
    content: public AbandonedMutexException()
    content.vb: Public Sub New
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AbandonedMutexException.AbandonedMutexException()
- uid: System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.Int32,System.Threading.WaitHandle)
  id: '#ctor(System.Int32,System.Threading.WaitHandle)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(Int32, WaitHandle)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.Int32, System.Threading.WaitHandle)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 42
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified index for the abandoned mutex, if applicable, and a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the mutex.</p>\n"
  syntax:
    content: public AbandonedMutexException(int location, WaitHandle handle)
    content.vb: Public Sub New(location As Integer, handle As WaitHandle)
    parameters:
    - id: location
      type: System.Int32
      description: "\n<p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <xref href=\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> method, or â€“1 if the exception is thrown for the <xref href=\"System.Threading.WaitHandle.WaitOne\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    - id: handle
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AbandonedMutexException.AbandonedMutexException(Int32, WaitHandle)
- uid: System.Threading.AbandonedMutexException.#ctor(System.String)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 32
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  syntax:
    content: public AbandonedMutexException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AbandonedMutexException.AbandonedMutexException(String)
- uid: System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String, Exception)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 37
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and inner exception. </p>\n"
  syntax:
    content: public AbandonedMutexException(string message, Exception inner)
    content.vb: Public Sub New(message As String, inner As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AbandonedMutexException.AbandonedMutexException(String, Exception)
- uid: System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)
  id: '#ctor(System.String,System.Exception,System.Int32,System.Threading.WaitHandle)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String, Exception, Int32, WaitHandle)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String, System.Exception, System.Int32, System.Threading.WaitHandle)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 54
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message, the inner exception, the index for the abandoned mutex, if applicable, and a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the mutex.</p>\n"
  syntax:
    content: public AbandonedMutexException(string message, Exception inner, int location, WaitHandle handle)
    content.vb: Public Sub New(message As String, inner As Exception, location As Integer, handle As WaitHandle)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
    - id: inner
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>inner</em> parameter is not <strong>null</strong>, the current exception is raised in a <strong>catch</strong> block that handles the inner exception.</p>\n"
    - id: location
      type: System.Int32
      description: "\n<p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <xref href=\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> method, or â€“1 if the exception is thrown for the <xref href=\"System.Threading.WaitHandle.WaitOne\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    - id: handle
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AbandonedMutexException.AbandonedMutexException(String, Exception, Int32, WaitHandle)
- uid: System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)
  commentId: M:System.Threading.AbandonedMutexException.#ctor(System.String,System.Int32,System.Threading.WaitHandle)
  id: '#ctor(System.String,System.Int32,System.Threading.WaitHandle)'
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: AbandonedMutexException(String, Int32, WaitHandle)
  fullName: System.Threading.AbandonedMutexException.AbandonedMutexException(System.String, System.Int32, System.Threading.WaitHandle)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 48
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.AbandonedMutexException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message, the index of the abandoned mutex, if applicable, and the abandoned mutex. </p>\n"
  syntax:
    content: public AbandonedMutexException(string message, int location, WaitHandle handle)
    content.vb: Public Sub New(message As String, location As Integer, handle As WaitHandle)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>An error message that explains the reason for the exception.</p>\n"
    - id: location
      type: System.Int32
      description: "\n<p>The index of the abandoned mutex in the array of wait handles if the exception is thrown for the <xref href=\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> method, or â€“1 if the exception is thrown for the <xref href=\"System.Threading.WaitHandle.WaitOne\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    - id: handle
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: AbandonedMutexException.AbandonedMutexException(String, Int32, WaitHandle)
- uid: System.Threading.AbandonedMutexException.Mutex
  commentId: P:System.Threading.AbandonedMutexException.Mutex
  id: Mutex
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: Mutex
  fullName: System.Threading.AbandonedMutexException.Mutex
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Mutex
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 70
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the abandoned mutex that caused the exception, if known.</p>\n"
  syntax:
    content: public Mutex Mutex { get; }
    content.vb: Public ReadOnly Property Mutex As Mutex
    parameters: []
    return:
      type: System.Threading.Mutex
      description: "\n<p>A <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex, or <strong>null</strong> if the abandoned mutex could not be identified.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: AbandonedMutexException.Mutex
- uid: System.Threading.AbandonedMutexException.MutexIndex
  commentId: P:System.Threading.AbandonedMutexException.MutexIndex
  id: MutexIndex
  parent: System.Threading.AbandonedMutexException
  langs:
  - csharp
  - vb
  name: MutexIndex
  fullName: System.Threading.AbandonedMutexException.MutexIndex
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MutexIndex
    path: src/mscorlib/src/System/Threading/AbandonedMutexException.cs
    startLine: 77
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the index of the abandoned mutex that caused the exception, if known.</p>\n"
  syntax:
    content: public int MutexIndex { get; }
    content.vb: Public ReadOnly Property MutexIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The index, in the array of wait handles passed to the <xref href=\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])\" data-throw-if-not-resolved=\"false\"></xref> method, of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the abandoned mutex, or â€“1 if the index of the abandoned mutex could not be determined.</p>\n"
  seealso:
  - type: System.Threading.Mutex
    commentId: T:System.Threading.Mutex
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: AbandonedMutexException.MutexIndex
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  fullName: System.Exception
  nameWithType: Exception
  commentId: T:System.Exception
- uid: System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  nameWithType: ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
- uid: System.Runtime.InteropServices._Exception
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Exception
  fullName: System.Runtime.InteropServices._Exception
  nameWithType: _Exception
  commentId: T:System.Runtime.InteropServices._Exception
- uid: System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Exception.GetBaseException()
  commentId: M:System.Exception.GetBaseException
- uid: System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    fullName: System.Exception.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Exception.ToString()
  commentId: M:System.Exception.ToString
- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Exception
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)
  commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
- uid: System.Exception.GetType
  parent: System.Exception
  isExternal: true
  name: GetType()
  fullName: System.Exception.GetType()
  spec.csharp:
  - uid: System.Exception.GetType
    name: GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetType
    name: GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Exception.GetType()
  commentId: M:System.Exception.GetType
- uid: System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  fullName: System.Exception.Message
  nameWithType: Exception.Message
  commentId: P:System.Exception.Message
- uid: System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  fullName: System.Exception.Data
  nameWithType: Exception.Data
  commentId: P:System.Exception.Data
- uid: System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  fullName: System.Exception.InnerException
  nameWithType: Exception.InnerException
  commentId: P:System.Exception.InnerException
- uid: System.Exception.TargetSite
  parent: System.Exception
  isExternal: true
  name: TargetSite
  fullName: System.Exception.TargetSite
  nameWithType: Exception.TargetSite
  commentId: P:System.Exception.TargetSite
- uid: System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  fullName: System.Exception.StackTrace
  nameWithType: Exception.StackTrace
  commentId: P:System.Exception.StackTrace
- uid: System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  fullName: System.Exception.HelpLink
  nameWithType: Exception.HelpLink
  commentId: P:System.Exception.HelpLink
- uid: System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  fullName: System.Exception.Source
  nameWithType: Exception.Source
  commentId: P:System.Exception.Source
- uid: System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  fullName: System.Exception.HResult
  nameWithType: Exception.HResult
  commentId: P:System.Exception.HResult
- uid: System.Exception.SerializeObjectState
  parent: System.Exception
  isExternal: true
  name: SerializeObjectState
  fullName: System.Exception.SerializeObjectState
  nameWithType: Exception.SerializeObjectState
  commentId: E:System.Exception.SerializeObjectState
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
- uid: System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  fullName: System.Threading.WaitHandle
  nameWithType: WaitHandle
  commentId: T:System.Threading.WaitHandle
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  fullName: System.Threading.Mutex
  nameWithType: Mutex
  commentId: T:System.Threading.Mutex
