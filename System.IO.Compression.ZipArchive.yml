### YamlMime:ManagedReference
items:
- uid: System.IO.Compression.ZipArchive
  commentId: T:System.IO.Compression.ZipArchive
  id: ZipArchive
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  - System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  - System.IO.Compression.ZipArchive.CreateEntry(System.String)
  - System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  - System.IO.Compression.ZipArchive.Dispose
  - System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  - System.IO.Compression.ZipArchive.Entries
  - System.IO.Compression.ZipArchive.GetEntry(System.String)
  - System.IO.Compression.ZipArchive.Mode
  langs:
  - csharp
  - vb
  name: ZipArchive
  nameWithType: ZipArchive
  fullName: System.IO.Compression.ZipArchive
  type: Class
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ZipArchive
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 15
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Represents a package of compressed files in the zip archive format.</p>\n"
  syntax:
    content: 'public class ZipArchive : IDisposable'
    content.vb: >-
      Public Class ZipArchive
          Implements IDisposable
  seealso:
  - linkId: System.IO.Compression.ZipFile
    commentId: T:System.IO.Compression.ZipFile
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream)
  nameWithType: ZipArchive.ZipArchive(Stream)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 51
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class from the specified stream.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream)
    content.vb: Public Sub New(stream As Stream)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The stream that contains the archive to be read.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed or does not support reading.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream are not in the zip archive format.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream, ZipArchiveMode)
  nameWithType: ZipArchive.ZipArchive(Stream, ZipArchiveMode)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 63
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class from the specified stream and with the specified mode.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input or output stream.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> is an invalid value.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream, ZipArchiveMode, Boolean)
  nameWithType: ZipArchive.ZipArchive(Stream, ZipArchiveMode, Boolean)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 76
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class on the specified stream for the specified mode, and optionally leaves the stream open.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input or output stream.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to leave the stream open after the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> is an invalid value.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  commentId: M:System.IO.Compression.ZipArchive.#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)
  id: '#ctor(System.IO.Stream,System.IO.Compression.ZipArchiveMode,System.Boolean,System.Text.Encoding)'
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)
  nameWithType: ZipArchive.ZipArchive(Stream, ZipArchiveMode, Boolean, Encoding)
  fullName: System.IO.Compression.ZipArchive.ZipArchive(System.IO.Stream, System.IO.Compression.ZipArchiveMode, System.Boolean, System.Text.Encoding)
  type: Constructor
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 129
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class on the specified stream for the specified mode, uses the specified encoding for entry names, and optionally leaves the stream open.</p>\n"
  syntax:
    content: public ZipArchive(Stream stream, ZipArchiveMode mode, bool leaveOpen, Encoding entryNameEncoding)
    content.vb: Public Sub New(stream As Stream, mode As ZipArchiveMode, leaveOpen As Boolean, entryNameEncoding As Encoding)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The input or output stream.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that indicates whether the zip archive is used to read, create, or update entries.</p>\n"
    - id: leaveOpen
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to leave the stream open after the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> object is disposed; otherwise, <strong>false</strong>.</p>\n"
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The stream is already closed, or the capabilities of the stream do not match the mode.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stream</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> is an invalid value.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The contents of the stream could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is missing from the archive or is corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref> and an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.Entries
  commentId: P:System.IO.Compression.ZipArchive.Entries
  id: Entries
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Entries
  nameWithType: ZipArchive.Entries
  fullName: System.IO.Compression.ZipArchive.Entries
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Entries
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 147
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets the collection of entries that are currently in the zip archive.</p>\n"
  syntax:
    content: public ReadOnlyCollection<ZipArchiveEntry> Entries { get; }
    content.vb: Public ReadOnly Property Entries As ReadOnlyCollection(Of ZipArchiveEntry)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
      description: "\n<p>The collection of entries that are currently in the zip archive.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchive.Mode
  commentId: P:System.IO.Compression.ZipArchive.Mode
  id: Mode
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: ZipArchive.Mode
  fullName: System.IO.Compression.ZipArchive.Mode
  type: Property
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Mode
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 167
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Gets a value that describes the type of action the zip archive can perform on entries.</p>\n"
  syntax:
    content: public ZipArchiveMode Mode { get; }
    content.vb: Public ReadOnly Property Mode As ZipArchiveMode
    parameters: []
    return:
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that describes the type of action (read, create, or update) the zip archive can perform on entries.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String)
  commentId: M:System.IO.Compression.ZipArchive.CreateEntry(System.String)
  id: CreateEntry(System.String)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: CreateEntry(String)
  nameWithType: ZipArchive.CreateEntry(String)
  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEntry
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 196
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Creates an empty entry that has the specified path and entry name in the zip archive.</p>\n"
  syntax:
    content: public ZipArchiveEntry CreateEntry(string entryName)
    content.vb: Public Function CreateEntry(entryName As String) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: "\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\n"
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: "\n<p>An empty entry in the zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>entryName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>entryName</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  commentId: M:System.IO.Compression.ZipArchive.CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  id: CreateEntry(System.String,System.IO.Compression.CompressionLevel)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: CreateEntry(String, CompressionLevel)
  nameWithType: ZipArchive.CreateEntry(String, CompressionLevel)
  fullName: System.IO.Compression.ZipArchive.CreateEntry(System.String, System.IO.Compression.CompressionLevel)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateEntry
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 215
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Creates an empty entry that has the specified entry name and compression level in the zip archive.</p>\n"
  syntax:
    content: public ZipArchiveEntry CreateEntry(string entryName, CompressionLevel compressionLevel)
    content.vb: Public Function CreateEntry(entryName As String, compressionLevel As CompressionLevel) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: "\n<p>A path, relative to the root of the archive, that specifies the name of the entry to be created.</p>\n"
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: "\n<p>One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</p>\n"
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: "\n<p>An empty entry in the zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>entryName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>entryName</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support writing.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.Dispose
  commentId: M:System.IO.Compression.ZipArchive.Dispose
  id: Dispose
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ZipArchive.Dispose()
  fullName: System.IO.Compression.ZipArchive.Dispose()
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 262
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Releases the resources used by the current instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  commentId: M:System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ZipArchive.Dispose(Boolean)
  fullName: System.IO.Compression.ZipArchive.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 228
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Called by the <xref href=\"System.IO.Compression.ZipArchive.Dispose\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Object.Finalize\" data-throw-if-not-resolved=\"false\"></xref> methods to release the unmanaged resources used by the current instance of the <xref href=\"System.IO.Compression.ZipArchive\" data-throw-if-not-resolved=\"false\"></xref> class, and optionally finishes writing the archive and releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to finish writing the archive and release unmanaged and managed resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.IO.Compression.ZipArchive.GetEntry(System.String)
  commentId: M:System.IO.Compression.ZipArchive.GetEntry(System.String)
  id: GetEntry(System.String)
  parent: System.IO.Compression.ZipArchive
  langs:
  - csharp
  - vb
  name: GetEntry(String)
  nameWithType: ZipArchive.GetEntry(String)
  fullName: System.IO.Compression.ZipArchive.GetEntry(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEntry
    path: src/System.IO.Compression/src/System/IO/Compression/ZipArchive.cs
    startLine: 279
  assemblies:
  - System.IO.Compression
  namespace: System.IO.Compression
  summary: "\n<p>Retrieves a wrapper for the specified entry in the zip archive.</p>\n"
  syntax:
    content: public ZipArchiveEntry GetEntry(string entryName)
    content.vb: Public Function GetEntry(entryName As String) As ZipArchiveEntry
    parameters:
    - id: entryName
      type: System.String
      description: "\n<p>A path, relative to the root of the archive, that identifies the entry to retrieve.</p>\n"
    return:
      type: System.IO.Compression.ZipArchiveEntry
      description: "\n<p>A wrapper for the specified entry in the archive; <strong>null</strong> if the entry does not exist in the archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>entryName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>entryName</em> is <strong>null</strong>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The zip archive does not support reading.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The zip archive has been disposed.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The zip archive is corrupt, and its entries cannot be retrieved.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.IO.Compression
  commentId: N:System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  nameWithType: System.IO.Compression
  fullName: System.IO.Compression
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.IO.Compression.ZipArchiveMode
  commentId: T:System.IO.Compression.ZipArchiveMode
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchiveMode
  nameWithType: ZipArchiveMode
  fullName: System.IO.Compression.ZipArchiveMode
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.IO.Compression.ZipArchiveEntry}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<ZipArchiveEntry>
  nameWithType: ReadOnlyCollection<ZipArchiveEntry>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IO.Compression.ZipArchiveEntry>
  nameWithType.vb: ReadOnlyCollection(Of ZipArchiveEntry)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.IO.Compression.ZipArchiveEntry)
  name.vb: ReadOnlyCollection(Of ZipArchiveEntry)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Compression.ZipArchiveEntry
    name: ZipArchiveEntry
    nameWithType: ZipArchiveEntry
    fullName: System.IO.Compression.ZipArchiveEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Compression.ZipArchiveEntry
    name: ZipArchiveEntry
    nameWithType: ZipArchiveEntry
    fullName: System.IO.Compression.ZipArchiveEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Compression.ZipArchiveEntry
  commentId: T:System.IO.Compression.ZipArchiveEntry
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchiveEntry
  nameWithType: ZipArchiveEntry
  fullName: System.IO.Compression.ZipArchiveEntry
- uid: System.IO.Compression.CompressionLevel
  commentId: T:System.IO.Compression.CompressionLevel
  parent: System.IO.Compression
  isExternal: false
  name: CompressionLevel
  nameWithType: CompressionLevel
  fullName: System.IO.Compression.CompressionLevel
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.InvalidDataException
  commentId: T:System.IO.InvalidDataException
  isExternal: false
  name: InvalidDataException
  nameWithType: InvalidDataException
  fullName: System.IO.InvalidDataException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
