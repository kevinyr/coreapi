### YamlMime:ManagedReference
items:
- uid: System.Text.RegularExpressions.RegexRunnerFactory
  commentId: T:System.Text.RegularExpressions.RegexRunnerFactory
  id: RegexRunnerFactory
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.RegexRunnerFactory.#ctor
  - System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance
  langs:
  - csharp
  - vb
  name: RegexRunnerFactory
  nameWithType: RegexRunnerFactory
  fullName: System.Text.RegularExpressions.RegexRunnerFactory
  type: Class
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexRunnerFactory.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegexRunnerFactory
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexRunnerFactory.cs
    startLine: 8
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Creates a <xref href=\"System.Text.RegularExpressions.RegexRunner\" data-throw-if-not-resolved=\"false\"></xref> class for a compiled regular expression.</p>\n"
  syntax:
    content: public abstract class RegexRunnerFactory
    content.vb: Public MustInherit Class RegexRunnerFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Text.RegularExpressions.RegexRunnerFactory.#ctor
  commentId: M:System.Text.RegularExpressions.RegexRunnerFactory.#ctor
  id: '#ctor'
  parent: System.Text.RegularExpressions.RegexRunnerFactory
  langs:
  - csharp
  - vb
  name: RegexRunnerFactory()
  nameWithType: RegexRunnerFactory.RegexRunnerFactory()
  fullName: System.Text.RegularExpressions.RegexRunnerFactory.RegexRunnerFactory()
  type: Constructor
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexRunnerFactory.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexRunnerFactory.cs
    startLine: 10
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.RegularExpressions.RegexRunnerFactory\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: protected RegexRunnerFactory()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance
  commentId: M:System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance
  id: CreateInstance
  parent: System.Text.RegularExpressions.RegexRunnerFactory
  langs:
  - csharp
  - vb
  name: CreateInstance()
  nameWithType: RegexRunnerFactory.CreateInstance()
  fullName: System.Text.RegularExpressions.RegexRunnerFactory.CreateInstance()
  type: Method
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexRunnerFactory.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexRunnerFactory.cs
    startLine: 11
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>When overridden in a derived class, creates a <xref href=\"System.Text.RegularExpressions.RegexRunner\" data-throw-if-not-resolved=\"false\"></xref> object for a specific compiled regular expression.</p>\n"
  syntax:
    content: protected abstract RegexRunner CreateInstance()
    content.vb: Protected MustOverride Function CreateInstance As RegexRunner
    return:
      type: System.Text.RegularExpressions.RegexRunner
      description: "\n<p>A <xref href=\"System.Text.RegularExpressions.RegexRunner\" data-throw-if-not-resolved=\"false\"></xref> object designed to execute a specific compiled regular expression. </p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
references:
- uid: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Text.RegularExpressions.RegexRunner
  commentId: T:System.Text.RegularExpressions.RegexRunner
  parent: System.Text.RegularExpressions
  isExternal: false
  name: RegexRunner
  nameWithType: RegexRunner
  fullName: System.Text.RegularExpressions.RegexRunner
