### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer
  commentId: T:System.Runtime.Serialization.Json.DataContractJsonSerializer
  id: DataContractJsonSerializer
  parent: System.Runtime.Serialization.Json
  children:
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  - System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer
  nameWithType: DataContractJsonSerializer
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataContractJsonSerializer
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 27
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Serializes objects to the JavaScript Object Notation (JSON) and deserializes JSON data to objects. This class cannot be inherited.</p>\n"
  syntax:
    content: public sealed class DataContractJsonSerializer
    content.vb: Public NotInheritable Class DataContractJsonSerializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type)
  id: '#ctor(System.Type)'
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer(Type)
  nameWithType: DataContractJsonSerializer.DataContractJsonSerializer(Type)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 29
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize or deserialize an object of the specified type.</p>\n"
  syntax:
    content: public DataContractJsonSerializer(Type type)
    content.vb: Public Sub New(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the instances that is serialized or deserialized.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})
  id: '#ctor(System.Type,System.Collections.Generic.IEnumerable{System.Type})'
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer(Type, IEnumerable<Type>)
  nameWithType: DataContractJsonSerializer.DataContractJsonSerializer(Type, IEnumerable<Type>)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Collections.Generic.IEnumerable<System.Type>)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 30
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize or deserialize an object of the specified type, with a collection of known types that may be present in the object graph. </p>\n"
  syntax:
    content: public DataContractJsonSerializer(Type type, IEnumerable<Type> knownTypes)
    content.vb: Public Sub New(type As Type, knownTypes As IEnumerable(Of Type))
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the instances that are serialized or deserialized.</p>\n"
    - id: knownTypes
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>  of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that contains the types that may be present in the object graph.</p>\n"
  nameWithType.vb: DataContractJsonSerializer.DataContractJsonSerializer(Type, IEnumerable(Of Type))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Collections.Generic.IEnumerable(Of System.Type))
  name.vb: DataContractJsonSerializer(Type, IEnumerable(Of Type))
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  id: '#ctor(System.Type,System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)'
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)
  nameWithType: DataContractJsonSerializer.DataContractJsonSerializer(Type, DataContractJsonSerializerSettings)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DataContractJsonSerializer(System.Type, System.Runtime.Serialization.Json.DataContractJsonSerializerSettings)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 31
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> class to serialize or deserialize an object of the specified type and serializer settings.</p>\n"
  syntax:
    content: public DataContractJsonSerializer(Type type, DataContractJsonSerializerSettings settings)
    content.vb: Public Sub New(type As Type, settings As DataContractJsonSerializerSettings)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the instances that is serialized or deserialized.</p>\n"
    - id: settings
      type: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
      description: "\n<p>The serializer settings for the JSON serializer.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  id: DateTimeFormat
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: DateTimeFormat
  nameWithType: DataContractJsonSerializer.DateTimeFormat
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.DateTimeFormat
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DateTimeFormat
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 32
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets the format of the date and time type items in object graph.</p>\n"
  syntax:
    content: public DateTimeFormat DateTimeFormat { get; }
    content.vb: Public ReadOnly Property DateTimeFormat As DateTimeFormat
    parameters: []
    return:
      type: System.Runtime.Serialization.DateTimeFormat
      description: "\n<p>The format of the date and time type items in object graph.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  id: EmitTypeInformation
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: EmitTypeInformation
  nameWithType: DataContractJsonSerializer.EmitTypeInformation
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.EmitTypeInformation
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EmitTypeInformation
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 33
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets or sets the data contract JSON serializer settings to emit type information.</p>\n"
  syntax:
    content: public EmitTypeInformation EmitTypeInformation { get; }
    content.vb: Public ReadOnly Property EmitTypeInformation As EmitTypeInformation
    parameters: []
    return:
      type: System.Runtime.Serialization.EmitTypeInformation
      description: "\n<p>The data contract JSON serializer settings to emit type information.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  id: KnownTypes
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: KnownTypes
  nameWithType: DataContractJsonSerializer.KnownTypes
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.KnownTypes
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: KnownTypes
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 34
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets a collection of types that may be present in the object graph serialized using this instance of the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ReadOnlyCollection<Type> KnownTypes { get; }
    content.vb: Public ReadOnly Property KnownTypes As ReadOnlyCollection(Of Type)
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}
      description: "\n<p>A <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> that contains the expected types passed in as known types to the <xref href=\"System.Runtime.Serialization.Json.DataContractJsonSerializer\" data-throw-if-not-resolved=\"false\"></xref> constructor.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  id: SerializeReadOnlyTypes
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: SerializeReadOnlyTypes
  nameWithType: DataContractJsonSerializer.SerializeReadOnlyTypes
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.SerializeReadOnlyTypes
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SerializeReadOnlyTypes
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 35
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets or sets a value that specifies whether to serialize read only types.</p>\n"
  syntax:
    content: public bool SerializeReadOnlyTypes { get; }
    content.vb: Public ReadOnly Property SerializeReadOnlyTypes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to serialize read only types; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  commentId: P:System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  id: UseSimpleDictionaryFormat
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: UseSimpleDictionaryFormat
  nameWithType: DataContractJsonSerializer.UseSimpleDictionaryFormat
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.UseSimpleDictionaryFormat
  type: Property
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseSimpleDictionaryFormat
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 36
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Gets or sets a value that specifies whether to use a simple dictionary format.</p>\n"
  syntax:
    content: public bool UseSimpleDictionaryFormat { get; }
    content.vb: Public ReadOnly Property UseSimpleDictionaryFormat As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to use a simple dictionary format; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  id: ReadObject(System.IO.Stream)
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: ReadObject(Stream)
  nameWithType: DataContractJsonSerializer.ReadObject(Stream)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.ReadObject(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadObject
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 37
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Reads a document stream in the JSON (JavaScript Object Notation) format and returns the deserialized object.</p>\n"
  syntax:
    content: public object ReadObject(Stream stream)
    content.vb: Public Function ReadObject(stream As Stream) As Object
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> to be read.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The deserialized object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
  commentId: M:System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream,System.Object)
  id: WriteObject(System.IO.Stream,System.Object)
  parent: System.Runtime.Serialization.Json.DataContractJsonSerializer
  langs:
  - csharp
  - vb
  name: WriteObject(Stream, Object)
  nameWithType: DataContractJsonSerializer.WriteObject(Stream, Object)
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializer.WriteObject(System.IO.Stream, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteObject
    path: src/System.Runtime.Serialization.Json/ref/System.Runtime.Serialization.Json.cs
    startLine: 38
  assemblies:
  - System.Runtime.Serialization.Json
  namespace: System.Runtime.Serialization.Json
  summary: "\n<p>Serializes a specified object to JavaScript Object Notation (JSON) data and writes the resulting JSON to a stream.</p>\n"
  syntax:
    content: public void WriteObject(Stream stream, object graph)
    content.vb: Public Sub WriteObject(stream As Stream, graph As Object)
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "\n<p>The <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> that is written to.</p>\n"
    - id: graph
      type: System.Object
      description: "\n<p>The object that contains the data to write to the stream.</p>\n"
  exceptions:
  - type: System.Runtime.Serialization.InvalidDataContractException
    commentId: T:System.Runtime.Serialization.InvalidDataContractException
    description: "\n<p>The type being serialized does not conform to data contract rules. For example, the <xref href=\"System.Runtime.Serialization.DataContractAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute has not been applied to the type.</p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>There is a problem with the instance being written.</p>\n"
  - type: System.ServiceModel.QuotaExceededException
    commentId: T:System.ServiceModel.QuotaExceededException
    description: "\n<p>The maximum number of objects to serialize has been exceeded. Check the <xref href=\"System.Runtime.Serialization.DataContractSerializer.MaxItemsInObjectGraph\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization.Json
  commentId: N:System.Runtime.Serialization.Json
  isExternal: false
  name: System.Runtime.Serialization.Json
  nameWithType: System.Runtime.Serialization.Json
  fullName: System.Runtime.Serialization.Json
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
  commentId: T:System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
  parent: System.Runtime.Serialization.Json
  isExternal: false
  name: DataContractJsonSerializerSettings
  nameWithType: DataContractJsonSerializerSettings
  fullName: System.Runtime.Serialization.Json.DataContractJsonSerializerSettings
- uid: System.Runtime.Serialization.DateTimeFormat
  commentId: T:System.Runtime.Serialization.DateTimeFormat
  parent: System.Runtime.Serialization
  isExternal: false
  name: DateTimeFormat
  nameWithType: DateTimeFormat
  fullName: System.Runtime.Serialization.DateTimeFormat
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.Serialization.EmitTypeInformation
  commentId: T:System.Runtime.Serialization.EmitTypeInformation
  parent: System.Runtime.Serialization
  isExternal: false
  name: EmitTypeInformation
  nameWithType: EmitTypeInformation
  fullName: System.Runtime.Serialization.EmitTypeInformation
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Type}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.Type}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<Type>
  nameWithType: ReadOnlyCollection<Type>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Type>
  nameWithType.vb: ReadOnlyCollection(Of Type)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.Type)
  name.vb: ReadOnlyCollection(Of Type)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Runtime.Serialization.InvalidDataContractException
  commentId: T:System.Runtime.Serialization.InvalidDataContractException
  isExternal: false
  name: InvalidDataContractException
  nameWithType: InvalidDataContractException
  fullName: System.Runtime.Serialization.InvalidDataContractException
- uid: System.Runtime.Serialization.SerializationException
  commentId: T:System.Runtime.Serialization.SerializationException
  isExternal: false
  name: SerializationException
  nameWithType: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.ServiceModel.QuotaExceededException
  commentId: T:System.ServiceModel.QuotaExceededException
  isExternal: false
  name: QuotaExceededException
  nameWithType: QuotaExceededException
  fullName: System.ServiceModel.QuotaExceededException
