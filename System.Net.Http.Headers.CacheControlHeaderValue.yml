### YamlMime:ManagedReference
items:
- uid: System.Net.Http.Headers.CacheControlHeaderValue
  commentId: T:System.Net.Http.Headers.CacheControlHeaderValue
  id: CacheControlHeaderValue
  parent: System.Net.Http.Headers
  children:
  - System.Net.Http.Headers.CacheControlHeaderValue.#ctor
  - System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  - System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  - System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
  - System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  - System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  - System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  - System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  - System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  - System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  - System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  - System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  - System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  - System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  - System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  - System.Net.Http.Headers.CacheControlHeaderValue.Private
  - System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  - System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  - System.Net.Http.Headers.CacheControlHeaderValue.Public
  - System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  - System.Net.Http.Headers.CacheControlHeaderValue.ToString
  - System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  langs:
  - csharp
  - vb
  name: CacheControlHeaderValue
  nameWithType: CacheControlHeaderValue
  fullName: System.Net.Http.Headers.CacheControlHeaderValue
  type: Class
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CacheControlHeaderValue
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 256
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Represents the value of the Cache-Control header.</p>\n"
  syntax:
    content: public class CacheControlHeaderValue
    content.vb: Public Class CacheControlHeaderValue
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Http.Headers.CacheControlHeaderValue.#ctor
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.#ctor
  id: '#ctor'
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: CacheControlHeaderValue()
  nameWithType: CacheControlHeaderValue.CacheControlHeaderValue()
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.CacheControlHeaderValue()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 258
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CacheControlHeaderValue()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  id: Extensions
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Extensions
  nameWithType: CacheControlHeaderValue.Extensions
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Extensions
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Extensions
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 259
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Cache-extension tokens, each with an optional assigned value.</p>\n"
  syntax:
    content: public ICollection<NameValueHeaderValue> Extensions { get; }
    content.vb: Public ReadOnly Property Extensions As ICollection(Of NameValueHeaderValue)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}
      description: "\n<p>A collection of cache-extension tokens each with an optional assigned value.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  id: MaxAge
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MaxAge
  nameWithType: CacheControlHeaderValue.MaxAge
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxAge
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxAge
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 260
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The maximum age, specified in seconds, that the HTTP client is willing to accept a response. </p>\n"
  syntax:
    content: public TimeSpan? MaxAge { get; set; }
    content.vb: Public Property MaxAge As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>The time in seconds. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  id: MaxStale
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MaxStale
  nameWithType: CacheControlHeaderValue.MaxStale
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxStale
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxStale
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 261
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether an HTTP client is willing to accept a response that has exceeded its expiration time.</p>\n"
  syntax:
    content: public bool MaxStale { get; set; }
    content.vb: Public Property MaxStale As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the HTTP client is willing to accept a response that has exceed the expiration time; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  id: MaxStaleLimit
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MaxStaleLimit
  nameWithType: CacheControlHeaderValue.MaxStaleLimit
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MaxStaleLimit
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxStaleLimit
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 262
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The maximum time, in seconds, an HTTP client is willing to accept a response that has exceeded its expiration time.</p>\n"
  syntax:
    content: public TimeSpan? MaxStaleLimit { get; set; }
    content.vb: Public Property MaxStaleLimit As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>The time in seconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  id: MinFresh
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MinFresh
  nameWithType: CacheControlHeaderValue.MinFresh
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MinFresh
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinFresh
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 263
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The freshness lifetime, in seconds, that an HTTP client is willing to accept a response.</p>\n"
  syntax:
    content: public TimeSpan? MinFresh { get; set; }
    content.vb: Public Property MinFresh As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>The time in seconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  id: MustRevalidate
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: MustRevalidate
  nameWithType: CacheControlHeaderValue.MustRevalidate
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.MustRevalidate
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MustRevalidate
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 264
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale.</p>\n"
  syntax:
    content: public bool MustRevalidate { get; set; }
    content.vb: Public Property MustRevalidate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  id: NoCache
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoCache
  nameWithType: CacheControlHeaderValue.NoCache
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoCache
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoCache
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 265
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether an HTTP client is willing to accept a cached response.</p>\n"
  syntax:
    content: public bool NoCache { get; set; }
    content.vb: Public Property NoCache As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the HTTP client is willing to accept a cached response; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  id: NoCacheHeaders
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoCacheHeaders
  nameWithType: CacheControlHeaderValue.NoCacheHeaders
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoCacheHeaders
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoCacheHeaders
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 266
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>A collection of fieldnames in the \"no-cache\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public ICollection<string> NoCacheHeaders { get; }
    content.vb: Public ReadOnly Property NoCacheHeaders As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "\n<p>A collection of fieldnames.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  id: NoStore
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoStore
  nameWithType: CacheControlHeaderValue.NoStore
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoStore
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoStore
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 267
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether a cache must not store any part of either the HTTP request mressage or any response.</p>\n"
  syntax:
    content: public bool NoStore { get; set; }
    content.vb: Public Property NoStore As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a cache must not store any part of either the HTTP request mressage or any response; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  id: NoTransform
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: NoTransform
  nameWithType: CacheControlHeaderValue.NoTransform
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.NoTransform
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoTransform
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 268
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether a cache or proxy must not change any aspect of the entity-body.</p>\n"
  syntax:
    content: public bool NoTransform { get; set; }
    content.vb: Public Property NoTransform As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a cache or proxy must not change any aspect of the entity-body; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  id: OnlyIfCached
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: OnlyIfCached
  nameWithType: CacheControlHeaderValue.OnlyIfCached
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.OnlyIfCached
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnlyIfCached
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 269
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status.</p>\n"
  syntax:
    content: public bool OnlyIfCached { get; set; }
    content.vb: Public Property OnlyIfCached As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a cache should either respond using a cached entry that is consistent with the other constraints of the HTTP request, or respond with a 504 (Gateway Timeout) status; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Private
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Private
  id: Private
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Private
  nameWithType: CacheControlHeaderValue.Private
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Private
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Private
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 270
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether all or part of the HTTP response message is intended for a single user and must not be cached by a shared cache.</p>\n"
  syntax:
    content: public bool Private { get; set; }
    content.vb: Public Property Private As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the HTTP response message is intended for a single user and must not be cached by a shared cache; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  id: PrivateHeaders
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: PrivateHeaders
  nameWithType: CacheControlHeaderValue.PrivateHeaders
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.PrivateHeaders
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivateHeaders
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 271
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>A collection fieldnames in the \"private\" directive in a cache-control header field on an HTTP response.</p>\n"
  syntax:
    content: public ICollection<string> PrivateHeaders { get; }
    content.vb: Public ReadOnly Property PrivateHeaders As ICollection(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "\n<p>A collection of fieldnames.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  id: ProxyRevalidate
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: ProxyRevalidate
  nameWithType: CacheControlHeaderValue.ProxyRevalidate
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.ProxyRevalidate
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProxyRevalidate
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 272
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether the origin server require revalidation of a cache entry on any subsequent use when the cache entry becomes stale for shared user agent caches.</p>\n"
  syntax:
    content: public bool ProxyRevalidate { get; set; }
    content.vb: Public Property ProxyRevalidate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the origin server requires revalidation of a cache entry on any subsequent use when the entry becomes stale for shared user agent caches; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Public
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.Public
  id: Public
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Public
  nameWithType: CacheControlHeaderValue.Public
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Public
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Public
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 273
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Whether an HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache.</p>\n"
  syntax:
    content: public bool Public { get; set; }
    content.vb: Public Property Public As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the HTTP response may be cached by any cache, even if it would normally be non-cacheable or cacheable only within a non- shared cache; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  commentId: P:System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  id: SharedMaxAge
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: SharedMaxAge
  nameWithType: CacheControlHeaderValue.SharedMaxAge
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.SharedMaxAge
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SharedMaxAge
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 274
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>The shared maximum age, specified in seconds, in an HTTP response that overrides the \"max-age\" directive in a cache-control header or an Expires header for a shared cache.</p>\n"
  syntax:
    content: public TimeSpan? SharedMaxAge { get; set; }
    content.vb: Public Property SharedMaxAge As TimeSpan?
    parameters: []
    return:
      type: System.Nullable{System.TimeSpan}
      description: "\n<p>The time in seconds.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CacheControlHeaderValue.Equals(Object)
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 275
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode
  id: GetHashCode
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CacheControlHeaderValue.GetHashCode()
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 276
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Serves as a hash function for a  <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current object.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: CacheControlHeaderValue.Parse(String)
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 277
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Converts a string to an <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public static CacheControlHeaderValue Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As CacheControlHeaderValue
    parameters:
    - id: input
      type: System.String
      description: "\n<p>A string that represents cache-control header value information.</p>\n"
    return:
      type: System.Net.Http.Headers.CacheControlHeaderValue
      description: "\n<p>A <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is a <strong>null</strong> reference.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>input</em> is not valid cache-control header value information.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Http.Headers.CacheControlHeaderValue.ToString
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.ToString
  id: ToString
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CacheControlHeaderValue.ToString()
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 278
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents the current object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  commentId: M:System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  id: TryParse(System.String,System.Net.Http.Headers.CacheControlHeaderValue@)
  parent: System.Net.Http.Headers.CacheControlHeaderValue
  langs:
  - csharp
  - vb
  name: TryParse(String, out CacheControlHeaderValue)
  nameWithType: CacheControlHeaderValue.TryParse(String, out CacheControlHeaderValue)
  fullName: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String, out System.Net.Http.Headers.CacheControlHeaderValue)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 279
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Determines whether a string is valid <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> information.</p>\n"
  syntax:
    content: public static bool TryParse(string input, out CacheControlHeaderValue parsedValue)
    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As CacheControlHeaderValue) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to validate.</p>\n"
    - id: parsedValue
      type: System.Net.Http.Headers.CacheControlHeaderValue
      description: "\n<p>The <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> version of the string.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>input</em> is valid <xref href=\"System.Net.Http.Headers.CacheControlHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> information; otherwise, <strong>false</strong>.</p>\n"
  nameWithType.vb: CacheControlHeaderValue.TryParse(String, ByRef CacheControlHeaderValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.Http.Headers.CacheControlHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.CacheControlHeaderValue)
  name.vb: TryParse(String, ByRef CacheControlHeaderValue)
references:
- uid: System.Net.Http.Headers
  commentId: N:System.Net.Http.Headers
  isExternal: false
  name: System.Net.Http.Headers
  nameWithType: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}
  commentId: T:System.Collections.Generic.ICollection{System.Net.Http.Headers.NameValueHeaderValue}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<NameValueHeaderValue>
  nameWithType: ICollection<NameValueHeaderValue>
  fullName: System.Collections.Generic.ICollection<System.Net.Http.Headers.NameValueHeaderValue>
  nameWithType.vb: ICollection(Of NameValueHeaderValue)
  fullname.vb: System.Collections.Generic.ICollection(Of System.Net.Http.Headers.NameValueHeaderValue)
  name.vb: ICollection(Of NameValueHeaderValue)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.Headers.NameValueHeaderValue
    name: NameValueHeaderValue
    nameWithType: NameValueHeaderValue
    fullName: System.Net.Http.Headers.NameValueHeaderValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.Headers.NameValueHeaderValue
    name: NameValueHeaderValue
    nameWithType: NameValueHeaderValue
    fullName: System.Net.Http.Headers.NameValueHeaderValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.ICollection`1
  commentId: T:System.Collections.Generic.ICollection`1
  isExternal: false
  name: ICollection<T>
  nameWithType: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  nameWithType.vb: ICollection(Of T)
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Nullable{System.TimeSpan}
  commentId: T:System.Nullable{System.TimeSpan}
  parent: System
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<System.TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of System.TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Generic.ICollection{System.String}
  commentId: T:System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  nameWithType.vb: ICollection(Of String)
  fullname.vb: System.Collections.Generic.ICollection(Of System.String)
  name.vb: ICollection(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Http.Headers.CacheControlHeaderValue
  commentId: T:System.Net.Http.Headers.CacheControlHeaderValue
  parent: System.Net.Http.Headers
  isExternal: false
  name: CacheControlHeaderValue
  nameWithType: CacheControlHeaderValue
  fullName: System.Net.Http.Headers.CacheControlHeaderValue
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
