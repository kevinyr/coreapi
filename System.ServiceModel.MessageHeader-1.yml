items:
- uid: System.ServiceModel.MessageHeader`1
  commentId: T:System.ServiceModel.MessageHeader`1
  id: MessageHeader`1
  parent: System.ServiceModel
  children:
  - System.ServiceModel.MessageHeader`1.#ctor
  - System.ServiceModel.MessageHeader`1.#ctor(`0)
  - System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)
  - System.ServiceModel.MessageHeader`1.Actor
  - System.ServiceModel.MessageHeader`1.Content
  - System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)
  - System.ServiceModel.MessageHeader`1.MustUnderstand
  - System.ServiceModel.MessageHeader`1.Relay
  langs:
  - csharp
  - vb
  name: MessageHeader<T>
  fullName: System.ServiceModel.MessageHeader<T>
  type: Class
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: MessageHeader
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 414
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Represents the content of a SOAP header.</p>\n"
  syntax:
    content: public class MessageHeader<T>
    content.vb: Public Class MessageHeader(Of T)
    typeParameters:
    - id: T
      description: "\n<p>The message header type.</p>\n"
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.ServiceModel.MessageHeader(Of T)
  name.vb: MessageHeader(Of T)
  nameWithType: MessageHeader<T>
  nameWithType.vb: MessageHeader(Of T)
- uid: System.ServiceModel.MessageHeader`1.#ctor
  commentId: M:System.ServiceModel.MessageHeader`1.#ctor
  id: '#ctor'
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: MessageHeader()
  fullName: System.ServiceModel.MessageHeader<T>.MessageHeader()
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 416
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.MessageHeader`1\" data-throw-if-not-resolved=\"false\"></xref> class.  </p>\n"
  syntax:
    content: public MessageHeader()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).MessageHeader()
  nameWithType: MessageHeader<T>.MessageHeader()
  nameWithType.vb: MessageHeader(Of T).MessageHeader()
- uid: System.ServiceModel.MessageHeader`1.#ctor(`0)
  commentId: M:System.ServiceModel.MessageHeader`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: MessageHeader(T)
  fullName: System.ServiceModel.MessageHeader<T>.MessageHeader(T)
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 417
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.MessageHeader`1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified header content.</p>\n"
  syntax:
    content: public MessageHeader(T content)
    content.vb: Public Sub New(content As T)
    parameters:
    - id: content
      type: '{T}'
      description: "\n<p>The content of the new header.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).MessageHeader(T)
  nameWithType: MessageHeader<T>.MessageHeader(T)
  nameWithType.vb: MessageHeader(Of T).MessageHeader(T)
- uid: System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)
  commentId: M:System.ServiceModel.MessageHeader`1.#ctor(`0,System.Boolean,System.String,System.Boolean)
  id: '#ctor(`0,System.Boolean,System.String,System.Boolean)'
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: MessageHeader(T, Boolean, String, Boolean)
  fullName: System.ServiceModel.MessageHeader<T>.MessageHeader(T, System.Boolean, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 418
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.MessageHeader`1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified header content and metadata. </p>\n"
  syntax:
    content: public MessageHeader(T content, bool mustUnderstand, string actor, bool relay)
    content.vb: Public Sub New(content As T, mustUnderstand As Boolean, actor As String, relay As Boolean)
    parameters:
    - id: content
      type: '{T}'
      description: "\n<p>The content of the new header.</p>\n"
    - id: mustUnderstand
      type: System.Boolean
      description: "\n<p>A value that indicates whether the header must be understood.</p>\n"
    - id: actor
      type: System.String
      description: "\n<p>The targeted recipient of the message header.</p>\n"
    - id: relay
      type: System.Boolean
      description: "\n<p>A value that indicates whether the header should be relayed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).MessageHeader(T, System.Boolean, System.String, System.Boolean)
  nameWithType: MessageHeader<T>.MessageHeader(T, Boolean, String, Boolean)
  nameWithType.vb: MessageHeader(Of T).MessageHeader(T, Boolean, String, Boolean)
- uid: System.ServiceModel.MessageHeader`1.Actor
  commentId: P:System.ServiceModel.MessageHeader`1.Actor
  id: Actor
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: Actor
  fullName: System.ServiceModel.MessageHeader<T>.Actor
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Actor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 419
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets or sets the targeted recipient of the message header.</p>\n"
  syntax:
    content: public string Actor { get; set; }
    content.vb: Public Property Actor As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The targeted recipient of the message header. The default is an empty string (\"\").</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).Actor
  nameWithType: MessageHeader<T>.Actor
  nameWithType.vb: MessageHeader(Of T).Actor
- uid: System.ServiceModel.MessageHeader`1.Content
  commentId: P:System.ServiceModel.MessageHeader`1.Content
  id: Content
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: Content
  fullName: System.ServiceModel.MessageHeader<T>.Content
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Content
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 420
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets or sets the content of the header.</p>\n"
  syntax:
    content: public T Content { get; set; }
    content.vb: Public Property Content As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The content of the header.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).Content
  nameWithType: MessageHeader<T>.Content
  nameWithType.vb: MessageHeader(Of T).Content
- uid: System.ServiceModel.MessageHeader`1.MustUnderstand
  commentId: P:System.ServiceModel.MessageHeader`1.MustUnderstand
  id: MustUnderstand
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: MustUnderstand
  fullName: System.ServiceModel.MessageHeader<T>.MustUnderstand
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: MustUnderstand
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 421
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets or sets a value that indicates whether the header must be understood, as stated in the SOAP 1.1/1.2 specification. </p>\n"
  syntax:
    content: public bool MustUnderstand { get; set; }
    content.vb: Public Property MustUnderstand As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the header must be understood; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).MustUnderstand
  nameWithType: MessageHeader<T>.MustUnderstand
  nameWithType.vb: MessageHeader(Of T).MustUnderstand
- uid: System.ServiceModel.MessageHeader`1.Relay
  commentId: P:System.ServiceModel.MessageHeader`1.Relay
  id: Relay
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: Relay
  fullName: System.ServiceModel.MessageHeader<T>.Relay
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Relay
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 422
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets a value that indicates whether the header should be relayed.</p>\n"
  syntax:
    content: public bool Relay { get; set; }
    content.vb: Public Property Relay As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the header should be relayed; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).Relay
  nameWithType: MessageHeader<T>.Relay
  nameWithType.vb: MessageHeader(Of T).Relay
- uid: System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)
  commentId: M:System.ServiceModel.MessageHeader`1.GetUntypedHeader(System.String,System.String)
  id: GetUntypedHeader(System.String,System.String)
  parent: System.ServiceModel.MessageHeader`1
  langs:
  - csharp
  - vb
  name: GetUntypedHeader(String, String)
  fullName: System.ServiceModel.MessageHeader<T>.GetUntypedHeader(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: GetUntypedHeader
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 423
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the message header with the specified namespace and local name.</p>\n"
  syntax:
    content: public MessageHeader GetUntypedHeader(string name, string ns)
    content.vb: Public Function GetUntypedHeader(name As String, ns As String) As MessageHeader
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the header XML element</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the header XML element.</p>\n"
    return:
      type: System.ServiceModel.Channels.MessageHeader
      description: "\n<p>A message header with the specified namespace and local name.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ServiceModel.MessageHeader(Of T).GetUntypedHeader(System.String, System.String)
  nameWithType: MessageHeader<T>.GetUntypedHeader(String, String)
  nameWithType.vb: MessageHeader(Of T).GetUntypedHeader(String, String)
references:
- uid: System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  fullName: System.ServiceModel
  commentId: N:System.ServiceModel
  nameWithType: System.ServiceModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  commentId: '!:T'
  nameWithType: T
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.ServiceModel.Channels.MessageHeader
  parent: System.ServiceModel.Channels
  isExternal: false
  name: MessageHeader
  fullName: System.ServiceModel.Channels.MessageHeader
  commentId: T:System.ServiceModel.Channels.MessageHeader
  nameWithType: MessageHeader
- uid: System.ServiceModel.Channels
  isExternal: false
  name: System.ServiceModel.Channels
  fullName: System.ServiceModel.Channels
  commentId: N:System.ServiceModel.Channels
  nameWithType: System.ServiceModel.Channels
