items:
- uid: Microsoft.Win32.RegistryKey
  commentId: T:Microsoft.Win32.RegistryKey
  id: RegistryKey
  parent: Microsoft.Win32
  children:
  - Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  - Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.Dispose
  - Microsoft.Win32.RegistryKey.Flush
  - Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  - Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  - Microsoft.Win32.RegistryKey.GetSubKeyNames
  - Microsoft.Win32.RegistryKey.GetValue(System.String)
  - Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
  - Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  - Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  - Microsoft.Win32.RegistryKey.GetValueNames
  - Microsoft.Win32.RegistryKey.Handle
  - Microsoft.Win32.RegistryKey.Name
  - Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  - Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  - Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  - Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  - Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.RegistryKey.SubKeyCount
  - Microsoft.Win32.RegistryKey.ToString
  - Microsoft.Win32.RegistryKey.ValueCount
  - Microsoft.Win32.RegistryKey.View
  langs:
  - csharp
  - vb
  name: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
  type: Class
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegistryKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 15
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Represents a key-level node in the Windows registry. This class is a registry encapsulation.</p>\n"
  syntax:
    content: 'public sealed class RegistryKey : IDisposable'
    content.vb: >-
      Public NotInheritable Class RegistryKey
          Implements IDisposable
  seealso:
  - type: Microsoft.Win32.Registry
    commentId: T:Microsoft.Win32.Registry
  - type: Microsoft.Win32.RegistryHive
    commentId: T:Microsoft.Win32.RegistryHive
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: RegistryKey
- uid: Microsoft.Win32.RegistryKey.Handle
  commentId: P:Microsoft.Win32.RegistryKey.Handle
  id: Handle
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Handle
  fullName: Microsoft.Win32.RegistryKey.Handle
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Handle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 367
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Gets a <xref href=\"Microsoft.Win32.SafeHandles.SafeRegistryHandle\" data-throw-if-not-resolved=\"false\"></xref> object that represents the registry key that the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object encapsulates.</p>\n"
  syntax:
    content: public SafeRegistryHandle Handle { get; }
    content.vb: Public ReadOnly Property Handle As SafeRegistryHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
      description: "\n<p>The handle to the registry key.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The registry key is closed. Closed keys cannot be accessed.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, such as deletion of the current key.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read the key.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: RegistryKey.Handle
- uid: Microsoft.Win32.RegistryKey.Name
  commentId: P:Microsoft.Win32.RegistryKey.Name
  id: Name
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Name
  fullName: Microsoft.Win32.RegistryKey.Name
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 487
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the name of the key.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The absolute (qualified) name of the key.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.ToString
    commentId: M:Microsoft.Win32.RegistryKey.ToString
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: RegistryKey.Name
- uid: Microsoft.Win32.RegistryKey.SubKeyCount
  commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  id: SubKeyCount
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: SubKeyCount
  fullName: Microsoft.Win32.RegistryKey.SubKeyCount
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubKeyCount
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 353
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the count of subkeys of the current key.</p>\n"
  syntax:
    content: public int SubKeyCount { get; }
    content.vb: Public ReadOnly Property SubKeyCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of subkeys of the current key.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have read permission for the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, for example the current key has been deleted.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: RegistryKey.SubKeyCount
- uid: Microsoft.Win32.RegistryKey.ValueCount
  commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  id: ValueCount
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: ValueCount
  fullName: Microsoft.Win32.RegistryKey.ValueCount
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueCount
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 412
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the count of values in the key.</p>\n"
  syntax:
    content: public int ValueCount { get; }
    content.vb: Public ReadOnly Property ValueCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of name/value pairs in the key.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have read permission for the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, for example the current key has been deleted.</p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: RegistryKey.ValueCount
- uid: Microsoft.Win32.RegistryKey.View
  commentId: P:Microsoft.Win32.RegistryKey.View
  id: View
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: View
  fullName: Microsoft.Win32.RegistryKey.View
  type: Property
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: View
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 358
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Gets the view that was used to create the registry key. </p>\n"
  syntax:
    content: public RegistryView View { get; }
    content.vb: Public ReadOnly Property View As RegistryView
    parameters: []
    return:
      type: Microsoft.Win32.RegistryView
      description: "\n<p>The view that was used to create the registry key.</p>\n<p>-or-</p>\n<p>\n<xref href=\"Microsoft.Win32.RegistryView.Default\" data-throw-if-not-resolved=\"false\"></xref>, if no view was used.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: RegistryKey.View
- uid: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  id: CreateSubKey(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: CreateSubKey(String)
  fullName: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 121
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a new subkey or opens an existing subkey for write access.  </p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "Reviewed for thread safety")]

      public RegistryKey CreateSubKey(string subkey)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="Reviewed for thread safety")>

      Public Function CreateSubKey(subkey As String) As RegistryKey
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The newly created subkey, or <strong>null</strong> if the operation failed. If a zero-length string is specified for <em>subkey</em>, the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or open the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> on which this method is being invoked is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> cannot be written to; for example, it was not opened as a writable key , or the user does not have the necessary access rights. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The nesting level exceeds 510.</p>\n<p>-or-</p>\n<p>A system error occurred, such as deletion of the key, or an attempt to create a key in the <xref href=\"Microsoft.Win32.Registry.LocalMachine\" data-throw-if-not-resolved=\"false\"></xref> root.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.CreateSubKey(String)
- uid: Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean)
  id: CreateSubKey(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: CreateSubKey(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.CreateSubKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 127
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a new subkey or opens an existing subkey with the specified access. </p>\n<p>Available starting in .NET Framework 4.6</p>\n"
  syntax:
    content: public RegistryKey CreateSubKey(string subkey, bool writable)
    content.vb: Public Function CreateSubKey(subkey As String, writable As Boolean) As RegistryKey
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to indicate the new subkey is writable; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The newly created subkey, or <strong>null</strong> if the operation failed. If a zero-length string is specified for <em>subkey</em>, the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or open the registry key. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The nesting level exceeds 510.</p>\n<p>-or-</p>\n<p>A system error occurred, such as deletion of the key, or an attempt to create a key in the <xref href=\"Microsoft.Win32.Registry.LocalMachine\" data-throw-if-not-resolved=\"false\"></xref> root.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.CreateSubKey(String, Boolean)
- uid: Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  id: CreateSubKey(System.String,System.Boolean,Microsoft.Win32.RegistryOptions)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: CreateSubKey(String, Boolean, RegistryOptions)
  fullName: Microsoft.Win32.RegistryKey.CreateSubKey(System.String, System.Boolean, Microsoft.Win32.RegistryOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 132
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a new subkey or opens an existing subkey with the specified access. </p>\n<p>Available starting in .NET Framework 4.6</p>\n"
  syntax:
    content: public RegistryKey CreateSubKey(string subkey, bool writable, RegistryOptions options)
    content.vb: Public Function CreateSubKey(subkey As String, writable As Boolean, options As RegistryOptions) As RegistryKey
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open. This string is not case-sensitive.</p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to indicate the new subkey is writable; otherwise, <strong>false</strong>.</p>\n"
    - id: options
      type: Microsoft.Win32.RegistryOptions
      description: "\n<p>The registry option to use.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The newly created subkey, or <strong>null</strong> if the operation failed. If a zero-length string is specified for <em>subkey</em>, the current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> does not specify a valid Option</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or open the registry key. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The current <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> cannot be written to; for example, it was not opened as a writable key, or the user does not have the necessary access rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The nesting level exceeds 510.</p>\n<p>-or-</p>\n<p>A system error occurred, such as deletion of the key, or an attempt to create a key in the <xref href=\"Microsoft.Win32.Registry.LocalMachine\" data-throw-if-not-resolved=\"false\"></xref> root.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.CreateSubKey(String, Boolean, RegistryOptions)
- uid: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  id: DeleteSubKey(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKey(String)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 164
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified subkey. </p>\n"
  syntax:
    content: public void DeleteSubKey(string subkey)
    content.vb: Public Sub DeleteSubKey(subkey As String)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name of the subkey to delete. This string is not case-sensitive.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>subkey</em> has child subkeys </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>subkey</em> parameter does not specify a valid registry key </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong></p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.DeleteSubKey(String)
- uid: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String,System.Boolean)
  id: DeleteSubKey(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKey(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 169
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified subkey, and specifies whether an exception is raised if the subkey is not found. </p>\n"
  syntax:
    content: public void DeleteSubKey(string subkey, bool throwOnMissingSubKey)
    content.vb: Public Sub DeleteSubKey(subkey As String, throwOnMissingSubKey As Boolean)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name of the subkey to delete. This string is not case-sensitive.</p>\n"
    - id: throwOnMissingSubKey
      type: System.Boolean
      description: "\n<p>Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <strong>true</strong> and the specified subkey does not exist, an exception is raised. If this argument is <strong>false</strong> and the specified subkey does not exist, no action is taken. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>subkey</em> has child subkeys. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>subkey</em> does not specify a valid registry key, and <em>throwOnMissingSubKey</em> is <strong>true</strong>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.DeleteSubKey(String, Boolean)
- uid: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  id: DeleteSubKeyTree(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKeyTree(String)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKeyTree
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 202
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes a subkey and any child subkeys recursively. </p>\n"
  syntax:
    content: public void DeleteSubKeyTree(string subkey)
    content.vb: Public Sub DeleteSubKeyTree(subkey As String)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The subkey to delete. This string is not case-sensitive.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Deletion of a root hive is attempted.</p>\n<p>-or-</p>\n<p>\n<em>subkey</em> does not specify a valid registry subkey. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error has occurred.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.DeleteSubKeyTree(String)
- uid: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String,System.Boolean)
  id: DeleteSubKeyTree(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteSubKeyTree(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteSubKeyTree
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 207
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified subkey and any child subkeys recursively, and specifies whether an exception is raised if the subkey is not found. </p>\n"
  syntax:
    content: public void DeleteSubKeyTree(string subkey, bool throwOnMissingSubKey)
    content.vb: Public Sub DeleteSubKeyTree(subkey As String, throwOnMissingSubKey As Boolean)
    parameters:
    - id: subkey
      type: System.String
      description: "\n<p>The name of the subkey to delete. This string is not case-sensitive.</p>\n"
    - id: throwOnMissingSubKey
      type: System.Boolean
      description: "\n<p>Indicates whether an exception should be raised if the specified subkey cannot be found. If this argument is <strong>true</strong> and the specified subkey does not exist, an exception is raised. If this argument is <strong>false</strong> and the specified subkey does not exist, no action is taken.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An attempt was made to delete the root hive of the tree.</p>\n<p>-or-</p>\n<p>\n<em>subkey</em> does not specify a valid registry subkey, and <em>throwOnMissingSubKey</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subkey</em> is <strong>null</strong>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed).</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the key.</p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.DeleteSubKeyTree(String, Boolean)
- uid: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  id: DeleteValue(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteValue(String)
  fullName: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 277
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified value from this key.</p>\n"
  syntax:
    content: public void DeleteValue(string name)
    content.vb: Public Sub DeleteValue(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to delete. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid reference to a value. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the value. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is read-only. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.DeleteValue(String)
- uid: Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String,System.Boolean)
  id: DeleteValue(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: DeleteValue(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.DeleteValue(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeleteValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 282
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Deletes the specified value from this key, and specifies whether an exception is raised if the value is not found.</p>\n"
  syntax:
    content: public void DeleteValue(string name, bool throwOnMissingValue)
    content.vb: Public Sub DeleteValue(name As String, throwOnMissingValue As Boolean)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to delete. </p>\n"
    - id: throwOnMissingValue
      type: System.Boolean
      description: "\n<p>Indicates whether an exception should be raised if the specified value cannot be found. If this argument is <strong>true</strong> and the specified value does not exist, an exception is raised. If this argument is <strong>false</strong> and the specified value does not exist, no action is taken. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid reference to a value and <em>throwOnMissingValue</em> is <strong>true</strong>. </p>\n<p>-or- </p>\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to delete the value. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is read-only. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
    commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.DeleteValue(String, Boolean)
- uid: Microsoft.Win32.RegistryKey.Dispose
  commentId: M:Microsoft.Win32.RegistryKey.Dispose
  id: Dispose
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: Microsoft.Win32.RegistryKey.Dispose()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 92
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.Dispose()
- uid: Microsoft.Win32.RegistryKey.Flush
  commentId: M:Microsoft.Win32.RegistryKey.Flush
  id: Flush
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: Flush()
  fullName: Microsoft.Win32.RegistryKey.Flush()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Flush
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 87
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Writes all the attributes of the specified open registry key into the registry.</p>\n"
  syntax:
    content: public void Flush()
    content.vb: Public Sub Flush
  seealso:
  - type: Microsoft.Win32.RegistryKey.Close
    commentId: M:Microsoft.Win32.RegistryKey.Close
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.Flush()
- uid: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  commentId: M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  id: FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: FromHandle(SafeRegistryHandle)
  fullName: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromHandle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 376
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a registry key from a specified handle.</p>\n"
  syntax:
    content: public static RegistryKey FromHandle(SafeRegistryHandle handle)
    content.vb: Public Shared Function FromHandle(handle As SafeRegistryHandle) As RegistryKey
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
      description: "\n<p>The handle to the registry key.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>A registry key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>handle</em> is <strong>null</strong>.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to perform this action.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RegistryKey.FromHandle(SafeRegistryHandle)
- uid: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  commentId: M:Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  id: FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle,Microsoft.Win32.RegistryView)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: FromHandle(SafeRegistryHandle, RegistryView)
  fullName: Microsoft.Win32.RegistryKey.FromHandle(Microsoft.Win32.SafeHandles.SafeRegistryHandle, Microsoft.Win32.RegistryView)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FromHandle
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 381
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Creates a registry key from a specified handle and registry view setting. </p>\n"
  syntax:
    content: public static RegistryKey FromHandle(SafeRegistryHandle handle, RegistryView view)
    content.vb: Public Shared Function FromHandle(handle As SafeRegistryHandle, view As RegistryView) As RegistryKey
    parameters:
    - id: handle
      type: Microsoft.Win32.SafeHandles.SafeRegistryHandle
      description: "\n<p>The handle to the registry key.</p>\n"
    - id: view
      type: Microsoft.Win32.RegistryView
      description: "\n<p>The registry view to use.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>A registry key.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>view</em> is invalid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>handle</em> is <strong>null</strong>.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to perform this action.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RegistryKey.FromHandle(SafeRegistryHandle, RegistryView)
- uid: Microsoft.Win32.RegistryKey.GetSubKeyNames
  commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  id: GetSubKeyNames
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetSubKeyNames()
  fullName: Microsoft.Win32.RegistryKey.GetSubKeyNames()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSubKeyNames
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 397
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves an array of strings that contains all the subkey names.</p>\n"
  syntax:
    content: public string[] GetSubKeyNames()
    content.vb: Public Function GetSubKeyNames As String()
    return:
      type: System.String[]
      description: "\n<p>An array of strings that contains the names of the subkeys for the current key.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred, for example the current key has been deleted.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.GetSubKeyNames()
- uid: Microsoft.Win32.RegistryKey.GetValue(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  id: GetValue(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValue(String)
  fullName: Microsoft.Win32.RegistryKey.GetValue(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 438
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name. Returns <strong>null</strong> if the name/value pair does not exist in the registry.</p>\n"
  syntax:
    content: public object GetValue(string name)
    content.vb: Public Function GetValue(name As String) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. This string is not case-sensitive.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with <em>name</em>, or <strong>null</strong> if <em>name</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
    commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.GetValue(String)
- uid: Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
  commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object)
  id: GetValue(System.String,System.Object)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValue(String, Object)
  fullName: Microsoft.Win32.RegistryKey.GetValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 455
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name. If the name is not found, returns the default value that you provide.</p>\n"
  syntax:
    content: public object GetValue(string name, object defaultValue)
    content.vb: Public Function GetValue(name As String, defaultValue As Object) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. This string is not case-sensitive.</p>\n"
    - id: defaultValue
      type: System.Object
      description: "\n<p>The value to return if <em>name</em> does not exist. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with <em>name</em>, with any embedded environment variables left unexpanded, or <em>defaultValue</em> if <em>name</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
    commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.GetValue(String, Object)
- uid: Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  id: GetValue(System.String,System.Object,Microsoft.Win32.RegistryValueOptions)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValue(String, Object, RegistryValueOptions)
  fullName: Microsoft.Win32.RegistryKey.GetValue(System.String, System.Object, Microsoft.Win32.RegistryValueOptions)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 460
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name and retrieval options. If the name is not found, returns the default value that you provide.</p>\n"
  syntax:
    content: public object GetValue(string name, object defaultValue, RegistryValueOptions options)
    content.vb: Public Function GetValue(name As String, defaultValue As Object, options As RegistryValueOptions) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. This string is not case-sensitive.</p>\n"
    - id: defaultValue
      type: System.Object
      description: "\n<p>The value to return if <em>name</em> does not exist. </p>\n"
    - id: options
      type: Microsoft.Win32.RegistryValueOptions
      description: "\n<p>One of the enumeration values that specifies optional processing of the retrieved value.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with <em>name</em>, processed according to the specified <em>options</em>, or <em>defaultValue</em> if <em>name</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not a valid <xref href=\"Microsoft.Win32.RegistryValueOptions\" data-throw-if-not-resolved=\"false\"></xref> value; for example, an invalid value is cast to <xref href=\"Microsoft.Win32.RegistryValueOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryValueOptions
    commentId: T:Microsoft.Win32.RegistryValueOptions
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
    commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - type: Microsoft.Win32.RegistryKey.DeleteValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.GetValue(String, Object, RegistryValueOptions)
- uid: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  id: GetValueKind(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValueKind(String)
  fullName: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueKind
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 481
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the registry data type of the value associated with the specified name.</p>\n"
  syntax:
    content: public RegistryValueKind GetValueKind(string name)
    content.vb: Public Function GetValueKind(name As String) As RegistryValueKind
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value whose registry data type is to be retrieved. This string is not case-sensitive.</p>\n"
    return:
      type: Microsoft.Win32.RegistryValueKind
      description: "\n<p>The registry data type of the value associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The subkey that contains the specified value does not exist.</p>\n<p>-or-</p>\n<p>The name/value pair specified by <em>name</em> does not exist.</p>\n<p>This exception is not thrown on Windows 95, Windows 98, or Windows Millennium Edition.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueNames
    commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
    commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  - type: Microsoft.Win32.RegistryValueKind
    commentId: T:Microsoft.Win32.RegistryValueKind
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.GetValueKind(String)
- uid: Microsoft.Win32.RegistryKey.GetValueNames
  commentId: M:Microsoft.Win32.RegistryKey.GetValueNames
  id: GetValueNames
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: GetValueNames()
  fullName: Microsoft.Win32.RegistryKey.GetValueNames()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueNames
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 423
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves an array of strings that contains all the value names associated with this key.</p>\n"
  syntax:
    content: public string[] GetValueNames()
    content.vb: Public Function GetValueNames As String()
    return:
      type: System.String[]
      description: "\n<p>An array of strings that contains the value names for the current key.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref>  being manipulated is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A system error occurred; for example, the current key has been deleted.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.GetValueNames()
- uid: Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  commentId: M:Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  id: OpenBaseKey(Microsoft.Win32.RegistryHive,Microsoft.Win32.RegistryView)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenBaseKey(RegistryHive, RegistryView)
  fullName: Microsoft.Win32.RegistryKey.OpenBaseKey(Microsoft.Win32.RegistryHive, Microsoft.Win32.RegistryView)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenBaseKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 288
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Opens a new <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that represents the requested key on the local machine with the specified view.</p>\n"
  syntax:
    content: public static RegistryKey OpenBaseKey(RegistryHive hKey, RegistryView view)
    content.vb: Public Shared Function OpenBaseKey(hKey As RegistryHive, view As RegistryView) As RegistryKey
    parameters:
    - id: hKey
      type: Microsoft.Win32.RegistryHive
      description: "\n<p>The HKEY to open.</p>\n"
    - id: view
      type: Microsoft.Win32.RegistryView
      description: "\n<p>The registry view to use.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The requested registry key.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hKey</em> or <em>view</em> is invalid.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The user does not have the necessary registry rights.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to perform this action.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RegistryKey.OpenBaseKey(RegistryHive, RegistryView)
- uid: Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  id: OpenSubKey(System.String)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenSubKey(String)
  fullName: Microsoft.Win32.RegistryKey.OpenSubKey(System.String)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 346
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a subkey as read-only.</p>\n"
  syntax:
    content: public RegistryKey OpenSubKey(string name)
    content.vb: Public Function OpenSubKey(name As String) As RegistryKey
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name or path of the subkey to open as read-only. </p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The subkey requested, or <strong>null</strong> if the operation failed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong></p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read the registry key. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  - type: Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
    commentId: M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  - type: Microsoft.Win32.Registry
    commentId: T:Microsoft.Win32.Registry
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.OpenSubKey(String)
- uid: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Boolean)
  id: OpenSubKey(System.String,System.Boolean)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenSubKey(String, Boolean)
  fullName: Microsoft.Win32.RegistryKey.OpenSubKey(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 319
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a specified subkey, and specifies whether write access is to be applied to the key. </p>\n"
  syntax:
    content: public RegistryKey OpenSubKey(string name, bool writable)
    content.vb: Public Function OpenSubKey(name As String, writable As Boolean) As RegistryKey
    parameters:
    - id: name
      type: System.String
      description: "\n<p>Name or path of the subkey to open. </p>\n"
    - id: writable
      type: System.Boolean
      description: "\n<p>Set to <strong>true</strong> if you need write access to the key. </p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The subkey requested, or <strong>null</strong> if the operation failed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to access the registry key in the specified mode. </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.CreateSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKey(System.String)
  - type: Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.DeleteSubKeyTree(System.String)
  - type: Microsoft.Win32.RegistryKey.GetSubKeyNames
    commentId: M:Microsoft.Win32.RegistryKey.GetSubKeyNames
  - type: Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
    commentId: M:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey(Microsoft.Win32.RegistryHive,System.String)
  - type: Microsoft.Win32.RegistryKey.SubKeyCount
    commentId: P:Microsoft.Win32.RegistryKey.SubKeyCount
  - type: Microsoft.Win32.Registry
    commentId: T:Microsoft.Win32.Registry
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.OpenSubKey(String, Boolean)
- uid: Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  commentId: M:Microsoft.Win32.RegistryKey.OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  id: OpenSubKey(System.String,System.Security.AccessControl.RegistryRights)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: OpenSubKey(String, RegistryRights)
  fullName: Microsoft.Win32.RegistryKey.OpenSubKey(System.String, System.Security.AccessControl.RegistryRights)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenSubKey
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 324
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a subkey with the specified name and .</p>\n<p>Available starting in .NET Framework 4.6</p>\n"
  syntax:
    content: public RegistryKey OpenSubKey(string name, RegistryRights rights)
    content.vb: Public Function OpenSubKey(name As String, rights As RegistryRights) As RegistryKey
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name or path of the subkey to create or open.</p>\n"
    - id: rights
      type: System.Security.AccessControl.RegistryRights
      description: "\n<p>The rights for the registry key.</p>\n"
    return:
      type: Microsoft.Win32.RegistryKey
      description: "\n<p>The subkey requested, or <strong>null</strong> if the operation failed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is closed (closed keys cannot be accessed). </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to access the registry key in the specified mode. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.OpenSubKey(String, RegistryRights)
- uid: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object)
  id: SetValue(System.String,System.Object)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: SetValue(String, Object)
  fullName: Microsoft.Win32.RegistryKey.SetValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 499
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Sets the specified name/value pair.</p>\n"
  syntax:
    content: public void SetValue(string name, object value)
    content.vb: Public Sub SetValue(name As String, value As Object)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to store. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The data to be stored. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> is an unsupported data type. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is read-only, and cannot be written to; for example, the key has not been opened with write access. </p>\n<p>-or-</p>\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or modify registry keys. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.SetValue(String, Object)
- uid: Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  commentId: M:Microsoft.Win32.RegistryKey.SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: SetValue(String, Object, RegistryValueKind)
  fullName: Microsoft.Win32.RegistryKey.SetValue(System.String, System.Object, Microsoft.Win32.RegistryValueKind)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 504
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Sets the value of a name/value pair in the registry key, using the specified registry data type.</p>\n"
  syntax:
    content: public void SetValue(string name, object value, RegistryValueKind valueKind)
    content.vb: Public Sub SetValue(name As String, value As Object, valueKind As RegistryValueKind)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to be stored. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The data to be stored. </p>\n"
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "\n<p>The registry data type to use when storing the data. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The type of <em>value</em> did not match the registry data type specified by <em>valueKind</em>, therefore the data could not be converted properly. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value is closed (closed keys cannot be accessed). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is read-only, and cannot be written to; for example, the key has not been opened with write access.</p>\n<p>-or-</p>\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows Millennium Edition or Windows 98. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or modify registry keys. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> object represents a root-level node, and the operating system is Windows 2000, Windows XP, or Windows Server 2003.</p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.GetValueKind(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValueKind(System.String)
  - type: Microsoft.Win32.RegistryKey.GetValue(System.String)
    commentId: M:Microsoft.Win32.RegistryKey.GetValue(System.String)
  - type: Microsoft.Win32.RegistryKey.ValueCount
    commentId: P:Microsoft.Win32.RegistryKey.ValueCount
  - type: Microsoft.Win32.RegistryValueKind
    commentId: T:Microsoft.Win32.RegistryValueKind
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RegistryKey.SetValue(String, Object, RegistryValueKind)
- uid: Microsoft.Win32.RegistryKey.ToString
  commentId: M:Microsoft.Win32.RegistryKey.ToString
  id: ToString
  parent: Microsoft.Win32.RegistryKey
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: Microsoft.Win32.RegistryKey.ToString()
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/RegistryKey.cs
    startLine: 565
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves a string representation of this key.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string representing the key. If the specified key is invalid (cannot be found) then <strong>null</strong> is returned.</p>\n"
  overridden: System.Object.ToString
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> being accessed is closed (closed keys cannot be accessed). </p>\n"
  seealso:
  - type: Microsoft.Win32.RegistryKey.Name
    commentId: P:Microsoft.Win32.RegistryKey.Name
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: RegistryKey.ToString()
references:
- uid: Microsoft.Win32
  isExternal: false
  name: Microsoft.Win32
  fullName: Microsoft.Win32
  nameWithType: Microsoft.Win32
  commentId: N:Microsoft.Win32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeRegistryHandle
  fullName: Microsoft.Win32.SafeHandles.SafeRegistryHandle
  nameWithType: SafeRegistryHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeRegistryHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: Microsoft.Win32.RegistryView
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryView
  fullName: Microsoft.Win32.RegistryView
  nameWithType: RegistryView
  commentId: T:Microsoft.Win32.RegistryView
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
  nameWithType: RegistryKey
  commentId: T:Microsoft.Win32.RegistryKey
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: Microsoft.Win32.RegistryOptions
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryOptions
  fullName: Microsoft.Win32.RegistryOptions
  nameWithType: RegistryOptions
  commentId: T:Microsoft.Win32.RegistryOptions
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.String[]
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: String[]
  nameWithType.vb: String()
- uid: Microsoft.Win32.RegistryValueOptions
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueOptions
  fullName: Microsoft.Win32.RegistryValueOptions
  nameWithType: RegistryValueOptions
  commentId: T:Microsoft.Win32.RegistryValueOptions
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
  nameWithType: RegistryValueKind
  commentId: T:Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.RegistryHive
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryHive
  fullName: Microsoft.Win32.RegistryHive
  nameWithType: RegistryHive
  commentId: T:Microsoft.Win32.RegistryHive
- uid: System.Security.AccessControl.RegistryRights
  parent: System.Security.AccessControl
  isExternal: false
  name: RegistryRights
  fullName: System.Security.AccessControl.RegistryRights
  nameWithType: RegistryRights
  commentId: T:System.Security.AccessControl.RegistryRights
- uid: System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  fullName: System.Security.AccessControl
  nameWithType: System.Security.AccessControl
  commentId: N:System.Security.AccessControl
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
  nameWithType: IOException
  commentId: T:System.IO.IOException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
  nameWithType: SecurityException
  commentId: T:System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
