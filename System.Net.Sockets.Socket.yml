### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.Socket
  commentId: T:System.Net.Sockets.Socket
  id: Socket
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  - System.Net.Sockets.Socket.Accept
  - System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.AddressFamily
  - System.Net.Sockets.Socket.Available
  - System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Blocking
  - System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.Connected
  - System.Net.Sockets.Socket.Dispose
  - System.Net.Sockets.Socket.Dispose(System.Boolean)
  - System.Net.Sockets.Socket.DontFragment
  - System.Net.Sockets.Socket.DualMode
  - System.Net.Sockets.Socket.EnableBroadcast
  - System.Net.Sockets.Socket.ExclusiveAddressUse
  - System.Net.Sockets.Socket.Finalize
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  - System.Net.Sockets.Socket.IsBound
  - System.Net.Sockets.Socket.LingerState
  - System.Net.Sockets.Socket.Listen(System.Int32)
  - System.Net.Sockets.Socket.LocalEndPoint
  - System.Net.Sockets.Socket.MulticastLoopback
  - System.Net.Sockets.Socket.NoDelay
  - System.Net.Sockets.Socket.OSSupportsIPv4
  - System.Net.Sockets.Socket.OSSupportsIPv6
  - System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  - System.Net.Sockets.Socket.ProtocolType
  - System.Net.Sockets.Socket.Receive(System.Byte[])
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveBufferSize
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  - System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.ReceiveTimeout
  - System.Net.Sockets.Socket.RemoteEndPoint
  - System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  - System.Net.Sockets.Socket.Send(System.Byte[])
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  - System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendBufferSize
  - System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SendTimeout
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  - System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - System.Net.Sockets.Socket.SocketType
  - System.Net.Sockets.Socket.Ttl
  langs:
  - csharp
  - vb
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Socket
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 158
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Implements the Berkeley sockets interface.</p>\n"
  syntax:
    content: 'public class Socket : IDisposable'
    content.vb: >-
      Public Class Socket
          Implements IDisposable
  seealso:
  - linkId: System.Net
    commentId: N:System.Net
  - linkId: System.Net.Cache
    commentId: N:System.Net.Cache
  - linkId: System.Net.Security
    commentId: N:System.Net.Security
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.EndPoint)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress[],System.Int32)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.String,System.Int32)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.SendAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  - System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  commentId: M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Socket(AddressFamily, SocketType, ProtocolType)
  nameWithType: Socket.Socket(AddressFamily, SocketType, ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(System.Net.Sockets.AddressFamily, System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 160
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class using the specified address family, socket type and protocol.</p>\n"
  syntax:
    content: public Socket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType)
    content.vb: Public Sub New(addressFamily As AddressFamily, socketType As SocketType, protocolType As ProtocolType)
    parameters:
    - id: addressFamily
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketType\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.ProtocolType\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>The combination of <em>addressFamily</em>, <em>socketType</em>, and <em>protocolType</em> results in an invalid socket. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
  - linkId: System.Net.Sockets.AddressFamily
    commentId: T:System.Net.Sockets.AddressFamily
  - linkId: System.Net.Sockets.ProtocolType
    commentId: T:System.Net.Sockets.ProtocolType
  - linkId: System.Net.Sockets.SocketType
    commentId: T:System.Net.Sockets.SocketType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  commentId: M:System.Net.Sockets.Socket.#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)
  id: '#ctor(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)'
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Socket(SocketType, ProtocolType)
  nameWithType: Socket.Socket(SocketType, ProtocolType)
  fullName: System.Net.Sockets.Socket.Socket(System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 161
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class using the specified socket type and protocol.</p>\n"
  syntax:
    content: public Socket(SocketType socketType, ProtocolType protocolType)
    content.vb: Public Sub New(socketType As SocketType, protocolType As ProtocolType)
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.ProtocolType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>The combination of  <em>socketType</em> and <em>protocolType</em> results in an invalid socket. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.AddressFamily
  commentId: P:System.Net.Sockets.Socket.AddressFamily
  id: AddressFamily
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: AddressFamily
  nameWithType: Socket.AddressFamily
  fullName: System.Net.Sockets.Socket.AddressFamily
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressFamily
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 162
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the address family of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public AddressFamily AddressFamily { get; }
    content.vb: Public ReadOnly Property AddressFamily As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.AddressFamily
    commentId: T:System.Net.Sockets.AddressFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.Available
  commentId: P:System.Net.Sockets.Socket.Available
  id: Available
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Available
  nameWithType: Socket.Available
  fullName: System.Net.Sockets.Socket.Available
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Available
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 163
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the amount of data that has been received from the network and is available to be read.</p>\n"
  syntax:
    content: public int Available { get; }
    content.vb: Public ReadOnly Property Available As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of bytes of data received from the network and available to be read.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.IO.Stream
    commentId: T:System.IO.Stream
  - linkId: System.Net.Sockets.SocketType.Dgram
    commentId: F:System.Net.Sockets.SocketType.Dgram
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.Blocking
  commentId: P:System.Net.Sockets.Socket.Blocking
  id: Blocking
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Blocking
  nameWithType: Socket.Blocking
  fullName: System.Net.Sockets.Socket.Blocking
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Blocking
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 164
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is in blocking mode.</p>\n"
  syntax:
    content: public bool Blocking { get; set; }
    content.vb: Public Property Blocking As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will block; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Connected
  commentId: P:System.Net.Sockets.Socket.Connected
  id: Connected
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Connected
  nameWithType: Socket.Connected
  fullName: System.Net.Sockets.Socket.Connected
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connected
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 165
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is connected to a remote host as of the last <xref href=\"System.Net.Sockets.Socket.Send(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.Socket.Receive(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> operation.</p>\n"
  syntax:
    content: public bool Connected { get; }
    content.vb: Public ReadOnly Property Connected As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> was connected to a remote resource as of the most recent operation; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.DontFragment
  commentId: P:System.Net.Sockets.Socket.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: DontFragment
  nameWithType: Socket.DontFragment
  fullName: System.Net.Sockets.Socket.DontFragment
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DontFragment
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 166
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.</p>\n"
  syntax:
    content: public bool DontFragment { get; set; }
    content.vb: Public Property DontFragment As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> allows datagram fragmentation; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property can be set only for sockets in the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> families. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.DualMode
  commentId: P:System.Net.Sockets.Socket.DualMode
  id: DualMode
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: DualMode
  nameWithType: Socket.DualMode
  fullName: System.Net.Sockets.Socket.DualMode
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DualMode
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 167
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is a dual-mode socket used for both IPv4 and IPv6.</p>\n"
  syntax:
    content: public bool DualMode { get; set; }
    content.vb: Public Property DualMode As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is a  dual-mode socket; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.EnableBroadcast
  commentId: P:System.Net.Sockets.Socket.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: EnableBroadcast
  nameWithType: Socket.EnableBroadcast
  fullName: System.Net.Sockets.Socket.EnableBroadcast
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableBroadcast
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 168
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> can send or receive broadcast packets.</p>\n"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    content.vb: Public Property EnableBroadcast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> allows broadcast packets; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>This option is valid for a datagram socket only. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.Socket.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ExclusiveAddressUse
  nameWithType: Socket.ExclusiveAddressUse
  fullName: System.Net.Sockets.Socket.ExclusiveAddressUse
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveAddressUse
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 169
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> allows only one process to bind to a port.</p>\n"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> allows only one socket to bind to a specific port; otherwise, <strong>false</strong>. The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2, and <strong>false</strong> for all other versions.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> has been called for this <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.IsBound
  commentId: P:System.Net.Sockets.Socket.IsBound
  id: IsBound
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: IsBound
  nameWithType: Socket.IsBound
  fullName: System.Net.Sockets.Socket.IsBound
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsBound
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 170
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is bound to a specific local port.</p>\n"
  syntax:
    content: public bool IsBound { get; }
    content.vb: Public ReadOnly Property IsBound As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is bound to a local port; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.LingerState
  commentId: P:System.Net.Sockets.Socket.LingerState
  id: LingerState
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: LingerState
  nameWithType: Socket.LingerState
  fullName: System.Net.Sockets.Socket.LingerState
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LingerState
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 171
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies whether the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> will delay closing a socket in an attempt to send all pending data.</p>\n"
  syntax:
    content: public LingerOption LingerState { get; set; }
    content.vb: Public Property LingerState As LingerOption
    parameters: []
    return:
      type: System.Net.Sockets.LingerOption
      description: "\n<p>A <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> that specifies how to linger while closing a socket.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.LocalEndPoint
  commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  id: LocalEndPoint
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: LocalEndPoint
  nameWithType: Socket.LocalEndPoint
  fullName: System.Net.Sockets.Socket.LocalEndPoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalEndPoint
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 172
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the local endpoint.</p>\n"
  syntax:
    content: public EndPoint LocalEndPoint { get; }
    content.vb: Public ReadOnly Property LocalEndPoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is using for communications.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  - linkId: System.Net.IPEndPoint
    commentId: T:System.Net.IPEndPoint
  - linkId: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.MulticastLoopback
  commentId: P:System.Net.Sockets.Socket.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: MulticastLoopback
  nameWithType: Socket.MulticastLoopback
  fullName: System.Net.Sockets.Socket.MulticastLoopback
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastLoopback
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 173
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies whether outgoing multicast packets are delivered to the sending application.</p>\n"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    content.vb: Public Property MulticastLoopback As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> receives outgoing multicast packets; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.NoDelay
  commentId: P:System.Net.Sockets.Socket.NoDelay
  id: NoDelay
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: NoDelay
  nameWithType: Socket.NoDelay
  fullName: System.Net.Sockets.Socket.NoDelay
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NoDelay
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 174
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the stream <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is using the Nagle algorithm.</p>\n"
  syntax:
    content: public bool NoDelay { get; set; }
    content.vb: Public Property NoDelay As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>false</strong> if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> uses the Nagle algorithm; otherwise, <strong>true</strong>. The default is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.OSSupportsIPv4
  commentId: P:System.Net.Sockets.Socket.OSSupportsIPv4
  id: OSSupportsIPv4
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: OSSupportsIPv4
  nameWithType: Socket.OSSupportsIPv4
  fullName: System.Net.Sockets.Socket.OSSupportsIPv4
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OSSupportsIPv4
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 175
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Indicates whether the underlying operating system and network adaptors support Internet Protocol version 4 (IPv4).</p>\n"
  syntax:
    content: public static bool OSSupportsIPv4 { get; }
    content.vb: Public Shared ReadOnly Property OSSupportsIPv4 As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operating system and network adaptors support the IPv4 protocol; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.OSSupportsIPv6
    commentId: P:System.Net.Sockets.Socket.OSSupportsIPv6
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.Sockets.Socket.OSSupportsIPv6
  commentId: P:System.Net.Sockets.Socket.OSSupportsIPv6
  id: OSSupportsIPv6
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: OSSupportsIPv6
  nameWithType: Socket.OSSupportsIPv6
  fullName: System.Net.Sockets.Socket.OSSupportsIPv6
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OSSupportsIPv6
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 176
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Indicates whether the underlying operating system and network adaptors support Internet Protocol version 6 (IPv6).</p>\n"
  syntax:
    content: public static bool OSSupportsIPv6 { get; }
    content.vb: Public Shared ReadOnly Property OSSupportsIPv6 As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operating system and network adaptors support the IPv6 protocol; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.OSSupportsIPv4
    commentId: P:System.Net.Sockets.Socket.OSSupportsIPv4
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.Sockets.Socket.ProtocolType
  commentId: P:System.Net.Sockets.Socket.ProtocolType
  id: ProtocolType
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ProtocolType
  nameWithType: Socket.ProtocolType
  fullName: System.Net.Sockets.Socket.ProtocolType
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProtocolType
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 177
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the protocol type of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ProtocolType ProtocolType { get; }
    content.vb: Public ReadOnly Property ProtocolType As ProtocolType
    parameters: []
    return:
      type: System.Net.Sockets.ProtocolType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.ProtocolType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.ReceiveBufferSize
  commentId: P:System.Net.Sockets.Socket.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveBufferSize
  nameWithType: Socket.ReceiveBufferSize
  fullName: System.Net.Sockets.Socket.ReceiveBufferSize
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveBufferSize
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 178
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the size of the receive buffer of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    content.vb: Public Property ReceiveBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the size, in bytes, of the receive buffer. The default is 8192.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than 0.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.ReceiveTimeout
  commentId: P:System.Net.Sockets.Socket.ReceiveTimeout
  id: ReceiveTimeout
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveTimeout
  nameWithType: Socket.ReceiveTimeout
  fullName: System.Net.Sockets.Socket.ReceiveTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveTimeout
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 179
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the amount of time after which a synchronous <xref href=\"System.Net.Sockets.Socket.Receive(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> call will time out.</p>\n"
  syntax:
    content: public int ReceiveTimeout { get; set; }
    content.vb: Public Property ReceiveTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The time-out value, in milliseconds. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than -1.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.RemoteEndPoint
  commentId: P:System.Net.Sockets.Socket.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: Socket.RemoteEndPoint
  fullName: System.Net.Sockets.Socket.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoteEndPoint
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 180
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the remote endpoint.</p>\n"
  syntax:
    content: public EndPoint RemoteEndPoint { get; }
    content.vb: Public ReadOnly Property RemoteEndPoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> with which the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is communicating.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Accept
    commentId: M:System.Net.Sockets.Socket.Accept
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.SendBufferSize
  commentId: P:System.Net.Sockets.Socket.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendBufferSize
  nameWithType: Socket.SendBufferSize
  fullName: System.Net.Sockets.Socket.SendBufferSize
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendBufferSize
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 181
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the size of the send buffer of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int SendBufferSize { get; set; }
    content.vb: Public Property SendBufferSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the size, in bytes, of the send buffer. The default is 8192.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than 0.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SendTimeout
  commentId: P:System.Net.Sockets.Socket.SendTimeout
  id: SendTimeout
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendTimeout
  nameWithType: Socket.SendTimeout
  fullName: System.Net.Sockets.Socket.SendTimeout
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendTimeout
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 182
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the amount of time after which a synchronous <xref href=\"System.Net.Sockets.Socket.Send(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> call will time out.</p>\n"
  syntax:
    content: public int SendTimeout { get; set; }
    content.vb: Public Property SendTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The time-out value, in milliseconds. If you set the property with a value between 1 and 499, the value will be changed to 500. The default value is 0, which indicates an infinite time-out period. Specifying -1 also indicates an infinite time-out period.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than -1.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SocketType
  commentId: P:System.Net.Sockets.Socket.SocketType
  id: SocketType
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SocketType
  nameWithType: Socket.SocketType
  fullName: System.Net.Sockets.Socket.SocketType
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketType
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 183
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the type of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SocketType SocketType { get; }
    content.vb: Public ReadOnly Property SocketType As SocketType
    parameters: []
    return:
      type: System.Net.Sockets.SocketType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketType
    commentId: T:System.Net.Sockets.SocketType
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.Socket.Ttl
  commentId: P:System.Net.Sockets.Socket.Ttl
  id: Ttl
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Ttl
  nameWithType: Socket.Ttl
  fullName: System.Net.Sockets.Socket.Ttl
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ttl
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 184
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the Time To Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public short Ttl { get; set; }
    content.vb: Public Property Ttl As Short
    parameters: []
    return:
      type: System.Int16
      description: "\n<p>The TTL value.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The TTL value can't be set to a negative number.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property can be set only for sockets in the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> families.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. This error is also returned when an attempt was made to set TTL to a value higher than 255.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Accept
  commentId: M:System.Net.Sockets.Socket.Accept
  id: Accept
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Accept()
  nameWithType: Socket.Accept()
  fullName: System.Net.Sockets.Socket.Accept()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Accept
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 185
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Creates a new <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> for a newly created connection.</p>\n"
  syntax:
    content: public Socket Accept()
    content.vb: Public Function Accept As Socket
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>A <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> for a newly created connection.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The accepting socket is not listening for connections. You must call <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> before calling <xref href=\"System.Net.Sockets.Socket.Accept\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Listen(System.Int32)
    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)
  - linkId: System.Net.Sockets.Socket.RemoteEndPoint
    commentId: P:System.Net.Sockets.Socket.RemoteEndPoint
  - linkId: System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
    commentId: M:System.Net.Sockets.Socket.BeginAccept(System.AsyncCallback,System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: AcceptAsync(SocketAsyncEventArgs)
  nameWithType: Socket.AcceptAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 186
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Begins an asynchronous operation to accept an incoming connection attempt.</p>\n"
  syntax:
    content: public bool AcceptAsync(SocketAsyncEventArgs e)
    content.vb: Public Function AcceptAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation.</p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An argument is not valid. This exception occurs if the buffer provided is not large enough. The buffer must be at least 2 * (sizeof(SOCKADDR_STORAGE + 16) bytes. </p>\n<p>This exception also occurs if multiple buffers are specified, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is not null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>An argument is out of range. The exception occurs if the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Count\" data-throw-if-not-resolved=\"false\"></xref> is less than 0.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An invalid operation was requested. This exception occurs if the accepting <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is not listening for connections or the accepted socket is bound. </p>\n<p>You must call the <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method before calling the <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n<p>This exception also occurs if the socket is already connected or a socket operation was already in progress using the specified <em>e</em> parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  id: Bind(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Bind(EndPoint)
  nameWithType: Socket.Bind(EndPoint)
  fullName: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Bind
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 187
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Associates a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> with a local endpoint.</p>\n"
  syntax:
    content: public void Bind(EndPoint localEP)
    content.vb: Public Sub Bind(localEP As EndPoint)
    parameters:
    - id: localEP
      type: System.Net.EndPoint
      description: "\n<p>The local <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> to associate with the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller higher in the call stack does not have permission for the requested operation. </p>\n"
  seealso:
  - linkId: System.Net.IPEndPoint
    commentId: T:System.Net.IPEndPoint
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Listen(System.Int32)
    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)
  - linkId: System.Net.IPAddress
    commentId: T:System.Net.IPAddress
  - linkId: System.Net.Sockets.Socket.LocalEndPoint
    commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: CancelConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.CancelConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.CancelConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelConnectAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 188
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Cancels an asynchronous request for a remote host connection.</p>\n"
  syntax:
    content: public static void CancelConnectAsync(SocketAsyncEventArgs e)
    content.vb: Public Shared Sub CancelConnectAsync(e As SocketAsyncEventArgs)
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object used to request the connection to the remote host by calling one of the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>e</em> parameter cannot be null and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> cannot be null.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller higher in the call stack does not have permission for the requested operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  id: Connect(System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Connect(EndPoint)
  nameWithType: Socket.Connect(EndPoint)
  fullName: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connect
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 189
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Establishes a connection to a remote host.</p>\n"
  syntax:
    content: public void Connect(EndPoint remoteEP)
    content.vb: Public Sub Connect(remoteEP As EndPoint)
    parameters:
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the remote device. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller higher in the call stack does not have permission for the requested operation. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>ing.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.LocalEndPoint
    commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.Socket.Blocking
    commentId: P:System.Net.Sockets.Socket.Blocking
  - linkId: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
    commentId: M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress,System.Int32)
  id: Connect(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Connect(IPAddress, Int32)
  nameWithType: Socket.Connect(IPAddress, Int32)
  fullName: System.Net.Sockets.Socket.Connect(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connect
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 190
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Establishes a connection to a remote host. The host is specified by an IP address and a port number.</p>\n"
  syntax:
    content: public void Connect(IPAddress address, int port)
    content.vb: Public Sub Connect(address As IPAddress, port As Integer)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>The IP address of the remote host.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number of the remote host.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The port number is not valid.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is valid for sockets in the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> families.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>address</em> is zero.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>ing.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  commentId: M:System.Net.Sockets.Socket.Connect(System.Net.IPAddress[],System.Int32)
  id: Connect(System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Connect(IPAddress[], Int32)
  nameWithType: Socket.Connect(IPAddress[], Int32)
  fullName: System.Net.Sockets.Socket.Connect(System.Net.IPAddress[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connect
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 191
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Establishes a connection to a remote host. The host is specified by an array of IP addresses and a port number.</p>\n"
  syntax:
    content: public void Connect(IPAddress[] addresses, int port)
    content.vb: Public Sub Connect(addresses As IPAddress(), port As Integer)
    parameters:
    - id: addresses
      type: System.Net.IPAddress[]
      description: "\n<p>The IP addresses of the remote host.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number of the remote host.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>addresses</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The port number is not valid.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is valid for sockets in the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> families.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>address</em> is zero.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>ing.</p>\n"
  nameWithType.vb: Socket.Connect(IPAddress(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Connect(System.Net.IPAddress(), System.Int32)
  name.vb: Connect(IPAddress(), Int32)
- uid: System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  commentId: M:System.Net.Sockets.Socket.Connect(System.String,System.Int32)
  id: Connect(System.String,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Connect(String, Int32)
  nameWithType: Socket.Connect(String, Int32)
  fullName: System.Net.Sockets.Socket.Connect(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Connect
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 192
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Establishes a connection to a remote host. The host is specified by a host name and a port number.</p>\n"
  syntax:
    content: public void Connect(string host, int port)
    content.vb: Public Sub Connect(host As String, port As Integer)
    parameters:
    - id: host
      type: System.String
      description: "\n<p>The name of the remote host.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port number of the remote host.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>host</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The port number is not valid.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is valid for sockets in the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> families.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>ing.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ConnectAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 193
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Begins an asynchronous request for a connection to a remote host.</p>\n"
  syntax:
    content: public bool ConnectAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ConnectAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An argument is not valid. This exception occurs if multiple buffers are specified, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is not null. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>e</em> parameter cannot be null and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> cannot be null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is listening or a socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method. This exception also occurs if the local endpoint and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> are not the same address family.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller higher in the call stack does not have permission for the requested operation.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  id: ConnectAsync(System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ConnectAsync(SocketType, ProtocolType, SocketAsyncEventArgs)
  nameWithType: Socket.ConnectAsync(SocketType, ProtocolType, SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketType, System.Net.Sockets.ProtocolType, System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 194
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Begins an asynchronous request for a connection to a remote host.</p>\n"
  syntax:
    content: public static bool ConnectAsync(SocketType socketType, ProtocolType protocolType, SocketAsyncEventArgs e)
    content.vb: Public Shared Function ConnectAsync(socketType As SocketType, protocolType As ProtocolType, e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: socketType
      type: System.Net.Sockets.SocketType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: protocolType
      type: System.Net.Sockets.ProtocolType
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.ProtocolType\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An argument is not valid. This exception occurs if multiple buffers are specified, the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is not null. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>e</em> parameter cannot be null and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> cannot be null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is listening or a socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method. This exception also occurs if the local endpoint and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> are not the same address family.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller higher in the call stack does not have permission for the requested operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Sockets.Socket.Dispose
  commentId: M:System.Net.Sockets.Socket.Dispose
  id: Dispose
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Socket.Dispose()
  fullName: System.Net.Sockets.Socket.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 195
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Dispose(System.Boolean)
  commentId: M:System.Net.Sockets.Socket.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Socket.Dispose(Boolean)
  fullName: System.Net.Sockets.Socket.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 196
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, and optionally disposes of the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Net.Sockets.Socket.Finalize
  commentId: M:System.Net.Sockets.Socket.Finalize
  id: Finalize
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: Socket.Finalize()
  fullName: System.Net.Sockets.Socket.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 197
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Frees resources used by the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  commentId: M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: GetSocketOption(SocketOptionLevel, SocketOptionName)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel, SocketOptionName)
  fullName: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 198
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns the value of a specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option, represented as an object.</p>\n"
  syntax:
    content: public object GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName)
    content.vb: Public Function GetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName) As Object
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object that represents the value of the option. When the <em>optionName</em> parameter is set to <xref href=\"System.Net.Sockets.SocketOptionName.Linger\" data-throw-if-not-resolved=\"false\"></xref> the return value is an instance of the <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> class. When <em>optionName</em> is set to <xref href=\"System.Net.Sockets.SocketOptionName.AddMembership\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.SocketOptionName.DropMembership\" data-throw-if-not-resolved=\"false\"></xref>, the return value is an instance of the <xref href=\"System.Net.Sockets.MulticastOption\" data-throw-if-not-resolved=\"false\"></xref> class. When <em>optionName</em> is any other value, the return value is an integer.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information.</p>\n<p>-or-</p>\n<p>\n<em>optionName</em> was set to the unsupported value <xref href=\"System.Net.Sockets.SocketOptionName.MaxConnections\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.SocketOptionName
    commentId: T:System.Net.Sockets.SocketOptionName
  - linkId: System.Net.Sockets.SocketOptionLevel
    commentId: T:System.Net.Sockets.SocketOptionLevel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  commentId: M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: GetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])
  nameWithType: Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])
  fullName: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 199
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option setting, represented as a byte array.</p>\n"
  syntax:
    content: public void GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue)
    content.vb: Public Sub GetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionValue
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is to receive the option setting. </p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n<p>- or -</p>\n<p>In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling <xref href=\"System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.SocketOptionName
    commentId: T:System.Net.Sockets.SocketOptionName
  - linkId: System.Net.Sockets.SocketOptionLevel
    commentId: T:System.Net.Sockets.SocketOptionLevel
  nameWithType.vb: Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte())
  name.vb: GetSocketOption(SocketOptionLevel, SocketOptionName, Byte())
- uid: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  commentId: M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: GetSocketOption(SocketOptionLevel, SocketOptionName, Int32)
  nameWithType: Socket.GetSocketOption(SocketOptionLevel, SocketOptionName, Int32)
  fullName: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 200
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns the value of the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option in an array.</p>\n"
  syntax:
    content: public byte[] GetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionLength)
    content.vb: Public Function GetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionLength As Integer) As Byte()
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionLength
      type: System.Int32
      description: "\n<p>The length, in bytes, of the expected return value. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the value of the socket option.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n<p>- or -</p>\n<p>In .NET Compact Framework applications, the Windows CE default buffer space is set to 32768 bytes. You can change the per socket buffer space by calling <xref href=\"System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.SocketOptionName
    commentId: T:System.Net.Sockets.SocketOptionName
  - linkId: System.Net.Sockets.SocketOptionLevel
    commentId: T:System.Net.Sockets.SocketOptionLevel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  commentId: M:System.Net.Sockets.Socket.IOControl(System.Int32,System.Byte[],System.Byte[])
  id: IOControl(System.Int32,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: IOControl(Int32, Byte[], Byte[])
  nameWithType: Socket.IOControl(Int32, Byte[], Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(System.Int32, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IOControl
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 201
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets low-level operating modes for the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> using numerical control codes.</p>\n"
  syntax:
    content: public int IOControl(int ioControlCode, byte[] optionInValue, byte[] optionOutValue)
    content.vb: Public Function IOControl(ioControlCode As Integer, optionInValue As Byte(), optionOutValue As Byte()) As Integer
    parameters:
    - id: ioControlCode
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the control code of the operation to perform. </p>\n"
    - id: optionInValue
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that contains the input data required by the operation. </p>\n"
    - id: optionOutValue
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that contains the output data returned by the operation. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes in the <em>optionOutValue</em> parameter.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An attempt was made to change the blocking mode without using the <xref href=\"System.Net.Sockets.Socket.Blocking\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  nameWithType.vb: Socket.IOControl(Int32, Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.IOControl(System.Int32, System.Byte(), System.Byte())
  name.vb: IOControl(Int32, Byte(), Byte())
- uid: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  commentId: M:System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  id: IOControl(System.Net.Sockets.IOControlCode,System.Byte[],System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: IOControl(IOControlCode, Byte[], Byte[])
  nameWithType: Socket.IOControl(IOControlCode, Byte[], Byte[])
  fullName: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IOControl
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 202
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets low-level operating modes for the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.Net.Sockets.IOControlCode\" data-throw-if-not-resolved=\"false\"></xref> enumeration to specify control codes.</p>\n"
  syntax:
    content: public int IOControl(IOControlCode ioControlCode, byte[] optionInValue, byte[] optionOutValue)
    content.vb: Public Function IOControl(ioControlCode As IOControlCode, optionInValue As Byte(), optionOutValue As Byte()) As Integer
    parameters:
    - id: ioControlCode
      type: System.Net.Sockets.IOControlCode
      description: "\n<p>A <xref href=\"System.Net.Sockets.IOControlCode\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the control code of the operation to perform. </p>\n"
    - id: optionInValue
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the input data required by the operation. </p>\n"
    - id: optionOutValue
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the output data returned by the operation. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes in the <em>optionOutValue</em> parameter.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An attempt was made to change the blocking mode without using the <xref href=\"System.Net.Sockets.Socket.Blocking\" data-throw-if-not-resolved=\"false\"></xref> property. </p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  nameWithType.vb: Socket.IOControl(IOControlCode, Byte(), Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.IOControl(System.Net.Sockets.IOControlCode, System.Byte(), System.Byte())
  name.vb: IOControl(IOControlCode, Byte(), Byte())
- uid: System.Net.Sockets.Socket.Listen(System.Int32)
  commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)
  id: Listen(System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Listen(Int32)
  nameWithType: Socket.Listen(Int32)
  fullName: System.Net.Sockets.Socket.Listen(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Listen
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 203
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Places a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> in a listening state.</p>\n"
  syntax:
    content: public void Listen(int backlog)
    content.vb: Public Sub Listen(backlog As Integer)
    parameters:
    - id: backlog
      type: System.Int32
      description: "\n<p>The maximum length of the pending connections queue. </p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketOptionName.MaxConnections
    commentId: F:System.Net.Sockets.SocketOptionName.MaxConnections
  - linkId: System.Net.Sockets.Socket.Accept
    commentId: M:System.Net.Sockets.Socket.Accept
  - linkId: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  commentId: M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  id: Poll(System.Int32,System.Net.Sockets.SelectMode)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Poll(Int32, SelectMode)
  nameWithType: Socket.Poll(Int32, SelectMode)
  fullName: System.Net.Sockets.Socket.Poll(System.Int32, System.Net.Sockets.SelectMode)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Poll
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 204
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Determines the status of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Poll(int microSeconds, SelectMode mode)
    content.vb: Public Function Poll(microSeconds As Integer, mode As SelectMode) As Boolean
    parameters:
    - id: microSeconds
      type: System.Int32
      description: "\n<p>The time to wait for a response, in microseconds. </p>\n"
    - id: mode
      type: System.Net.Sockets.SelectMode
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SelectMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The status of the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> based on the polling mode value passed in the <em>mode</em> parameter.</p>\n<p>Mode </p>\n<p>Return Value </p>\n<table><tbody><tr><td>\n<p>\n<xref href=\"System.Net.Sockets.SelectMode.SelectRead\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong> if <xref href=\"System.Net.Sockets.Socket.Listen(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> has been called and a connection is pending; </p>\n<p>-or- </p>\n<p>\n<strong>true</strong> if data is available for reading; </p>\n<p>-or- </p>\n<p>\n<strong>true</strong> if the connection has been closed, reset, or terminated; </p>\n<p>otherwise, returns <strong>false</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.Sockets.SelectMode.SelectWrite\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong>, if processing a <xref href=\"System.Net.Sockets.Socket.Connect(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref>, and the connection has succeeded; </p>\n<p>-or- </p>\n<p>\n<strong>true</strong> if data can be sent; </p>\n<p>otherwise, returns <strong>false</strong>. </p>\n</td></tr><tr><td>\n<p>\n<xref href=\"System.Net.Sockets.SelectMode.SelectError\" data-throw-if-not-resolved=\"false\"></xref>\n</p>\n</td><td>\n<p>\n<strong>true</strong> if processing a <xref href=\"System.Net.Sockets.Socket.Connect(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> that does not block, and the connection has failed; </p>\n<p>-or- </p>\n<p>\n<strong>true</strong> if <xref href=\"System.Net.Sockets.SocketOptionName.OutOfBandInline\" data-throw-if-not-resolved=\"false\"></xref> is not set and out-of-band data is available; </p>\n<p>otherwise, returns <strong>false</strong>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <em>mode</em> parameter is not one of the <xref href=\"System.Net.Sockets.SelectMode\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See remarks below. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SelectMode
    commentId: T:System.Net.Sockets.SelectMode
  - linkId: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
    commentId: M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Receive(System.Byte[])
  commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[])
  id: Receive(System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(Byte[])
  nameWithType: Socket.Receive(Byte[])
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 205
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into a receive buffer.</p>\n"
  syntax:
    content: public int Receive(byte[] buffer)
    content.vb: Public Function Receive(buffer As Byte()) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for the received data. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte())
  name.vb: Receive(Byte())
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(Byte[], Int32, Int32, SocketFlags)
  nameWithType: Socket.Receive(Byte[], Int32, Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 206
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives the specified number of bytes from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into the specified offset position of the receive buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for received data. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The location in <em>buffer</em> to store the received data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to receive. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.Sockets.Socket.LocalEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property was not set.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(Byte(), Int32, Int32, SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  name.vb: Receive(Byte(), Int32, Int32, SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(Byte[], Int32, Int32, SocketFlags, out SocketError)
  nameWithType: Socket.Receive(Byte[], Int32, Int32, SocketFlags, out SocketError)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 207
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into a receive buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Receive(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Receive(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for the received data.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The position in the <em>buffer</em> parameter to store the received data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to receive. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketError\" data-throw-if-not-resolved=\"false\"></xref> object that stores the socket error.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.Sockets.Socket.LocalEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property is not set.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(Byte(), Int32, Int32, SocketFlags, ByRef SocketError)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  name.vb: Receive(Byte(), Int32, Int32, SocketFlags, ByRef SocketError)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(Byte[], Int32, SocketFlags)
  nameWithType: Socket.Receive(Byte[], Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 208
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives the specified number of bytes of data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into a receive buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Receive(byte[] buffer, int size, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffer As Byte(), size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for the received data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to receive. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>size</em> exceeds the size of <em>buffer</em>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(Byte(), Int32, SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags)
  name.vb: Receive(Byte(), Int32, SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Receive(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(Byte[], SocketFlags)
  nameWithType: Socket.Receive(Byte[], SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Byte[], System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 209
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into a receive buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Receive(byte[] buffer, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffer As Byte(), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for the received data. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(Byte(), SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Byte(), System.Net.Sockets.SocketFlags)
  name.vb: Receive(Byte(), SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  commentId: M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 210
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into the list of receive buffers.</p>\n"
  syntax:
    content: public int Receive(IList<ArraySegment<byte>> buffers)
    content.vb: Public Function Receive(buffers As IList(Of ArraySegment(Of Byte))) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>A list of <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>s of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the received data.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred while attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  nameWithType.vb: Socket.Receive(IList(Of ArraySegment(Of Byte)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)))
  name.vb: Receive(IList(Of ArraySegment(Of Byte)))
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(IList<ArraySegment<Byte>>, SocketFlags)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>, SocketFlags)
  fullName: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 211
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into the list of receive buffers, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags)
    content.vb: Public Function Receive(buffers As IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>A list of <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>s of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the received data.</p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>buffers</em>.Count is zero.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred while attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(IList(Of ArraySegment(Of Byte)), SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  name.vb: Receive(IList(Of ArraySegment(Of Byte)), SocketFlags)
- uid: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  commentId: M:System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Receive(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Receive(IList<ArraySegment<Byte>>, SocketFlags, out SocketError)
  nameWithType: Socket.Receive(IList<ArraySegment<Byte>>, SocketFlags, out SocketError)
  fullName: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Receive
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 212
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives data from a bound <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> into the list of receive buffers, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Receive(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Receive(buffers As IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>A list of <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>s of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the received data.</p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketError\" data-throw-if-not-resolved=\"false\"></xref> object that stores the socket error.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffers</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>buffers</em>.Count is zero.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred while attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.Receive(IList(Of ArraySegment(Of Byte)), SocketFlags, ByRef SocketError)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Receive(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  name.vb: Receive(IList(Of ArraySegment(Of Byte)), SocketFlags, ByRef SocketError)
- uid: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 213
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Begins an asynchronous request to receive data from a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool ReceiveAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ReceiveAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An argument was invalid. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> properties on the <em>e</em> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.BufferList
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BufferList
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[], Int32, Int32, SocketFlags, ref EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ref System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveFrom
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 214
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>, and stores the endpoint.</p>\n"
  syntax:
    content: public int ReceiveFrom(byte[] buffer, int offset, int size, SocketFlags socketFlags, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for received data. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The position in the <em>buffer</em> parameter to store the received data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to receive. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref>, passed by reference, that represents the remote server. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of the <em>buffer</em> minus the value of the offset parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.Sockets.Socket.LocalEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property was not set.</p>\n<p>-or- </p>\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.ReceiveFrom(Byte(), Int32, Int32, SocketFlags, ByRef EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint)
  name.vb: ReceiveFrom(Byte(), Int32, Int32, SocketFlags, ByRef EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveFrom(Byte[], Int32, SocketFlags, ref EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[], Int32, SocketFlags, ref EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags, ref System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveFrom
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 215
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives the specified number of bytes into the data buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>, and stores the endpoint.</p>\n"
  syntax:
    content: public int ReceiveFrom(byte[] buffer, int size, SocketFlags socketFlags, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), size As Integer, socketFlags As SocketFlags, ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for received data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to receive. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref>, passed by reference, that represents the remote server. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of <em>buffer</em>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.Sockets.Socket.LocalEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property was not set.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.ReceiveFrom(Byte(), Int32, SocketFlags, ByRef EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint)
  name.vb: ReceiveFrom(Byte(), Int32, SocketFlags, ByRef EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveFrom(Byte[], ref EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[], ref EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], ref System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveFrom
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 216
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives a datagram into the data buffer and stores the endpoint.</p>\n"
  syntax:
    content: public int ReceiveFrom(byte[] buffer, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for received data. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref>, passed by reference, that represents the remote server. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.ReceiveFrom(Byte(), ByRef EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), ByRef System.Net.EndPoint)
  name.vb: ReceiveFrom(Byte(), ByRef EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  id: ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveFrom(Byte[], SocketFlags, ref EndPoint)
  nameWithType: Socket.ReceiveFrom(Byte[], SocketFlags, ref EndPoint)
  fullName: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[], System.Net.Sockets.SocketFlags, ref System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveFrom
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 217
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives a datagram into the data buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>, and stores the endpoint.</p>\n"
  syntax:
    content: public int ReceiveFrom(byte[] buffer, SocketFlags socketFlags, ref EndPoint remoteEP)
    content.vb: Public Function ReceiveFrom(buffer As Byte(), socketFlags As SocketFlags, ByRef remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for the received data. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref>, passed by reference, that represents the remote server. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.ReceiveFrom(Byte(), SocketFlags, ByRef EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.ReceiveFrom(System.Byte(), System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint)
  name.vb: ReceiveFrom(Byte(), SocketFlags, ByRef EndPoint)
- uid: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveFromAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 218
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Begins to asynchronously receive data from a specified network device.</p>\n"
  syntax:
    content: public bool ReceiveFromAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ReceiveFromAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> cannot be null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  commentId: M:System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  id: ReceiveMessageFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags@,System.Net.EndPoint@,System.Net.Sockets.IPPacketInformation@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveMessageFrom(Byte[], Int32, Int32, ref SocketFlags, ref EndPoint, out IPPacketInformation)
  nameWithType: Socket.ReceiveMessageFrom(Byte[], Int32, Int32, ref SocketFlags, ref EndPoint, out IPPacketInformation)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte[], System.Int32, System.Int32, ref System.Net.Sockets.SocketFlags, ref System.Net.EndPoint, out System.Net.Sockets.IPPacketInformation)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveMessageFrom
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 219
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Receives the specified number of bytes of data into the specified location of the data buffer, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>, and stores the endpoint and packet information.</p>\n"
  syntax:
    content: public int ReceiveMessageFrom(byte[] buffer, int offset, int size, ref SocketFlags socketFlags, ref EndPoint remoteEP, out IPPacketInformation ipPacketInformation)
    content.vb: Public Function ReceiveMessageFrom(buffer As Byte(), offset As Integer, size As Integer, ByRef socketFlags As SocketFlags, ByRef remoteEP As EndPoint, ByRef ipPacketInformation As IPPacketInformation) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that is the storage location for received data.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The position in the <em>buffer</em> parameter to store the received data.</p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to receive.</p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref>, passed by reference, that represents the remote server.</p>\n"
    - id: ipPacketInformation
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>An <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> holding address and interface information.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes received.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>- or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of the <em>buffer</em> minus the value of the offset parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Net.Sockets.Socket.LocalEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property was not set.</p>\n<p>-or- </p>\n<p>The .NET Framework is running on an AMD 64-bit processor.</p>\n<p>-or- </p>\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The operating system is Windows 2000 or earlier, and this method requires Windows XP.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
    commentId: M:System.Net.Sockets.Socket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)
  - linkId: System.Net.Sockets.Socket.Available
    commentId: P:System.Net.Sockets.Socket.Available
  - linkId: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
    commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  see:
  - linkId: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  nameWithType.vb: Socket.ReceiveMessageFrom(Byte(), Int32, Int32, ByRef SocketFlags, ByRef EndPoint, ByRef IPPacketInformation)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.ReceiveMessageFrom(System.Byte(), System.Int32, System.Int32, ByRef System.Net.Sockets.SocketFlags, ByRef System.Net.EndPoint, ByRef System.Net.Sockets.IPPacketInformation)
  name.vb: ReceiveMessageFrom(Byte(), Int32, Int32, ByRef SocketFlags, ByRef EndPoint, ByRef IPPacketInformation)
- uid: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: ReceiveMessageFromAsync(SocketAsyncEventArgs)
  nameWithType: Socket.ReceiveMessageFromAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveMessageFromAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 220
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Begins to asynchronously receive the specified number of bytes of data into the specified location in the data buffer, using the specified <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>, and stores the endpoint and packet information.</p>\n"
  syntax:
    content: public bool ReceiveMessageFromAsync(SocketAsyncEventArgs e)
    content.vb: Public Function ReceiveMessageFromAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> cannot be null.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  commentId: M:System.Net.Sockets.Socket.Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  id: Select(System.Collections.IList,System.Collections.IList,System.Collections.IList,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Select(IList, IList, IList, Int32)
  nameWithType: Socket.Select(IList, IList, IList, Int32)
  fullName: System.Net.Sockets.Socket.Select(System.Collections.IList, System.Collections.IList, System.Collections.IList, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 221
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Determines the status of one or more sockets.</p>\n"
  syntax:
    content: public static void Select(IList checkRead, IList checkWrite, IList checkError, int microSeconds)
    content.vb: Public Shared Sub Select(checkRead As IList, checkWrite As IList, checkError As IList, microSeconds As Integer)
    parameters:
    - id: checkRead
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> instances to check for readability. </p>\n"
    - id: checkWrite
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> instances to check for writability. </p>\n"
    - id: checkError
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> instances to check for errors. </p>\n"
    - id: microSeconds
      type: System.Int32
      description: "\n<p>The time-out value, in microseconds. A -1 value indicates an infinite time-out.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>checkRead</em> parameter is <strong>null</strong> or empty.</p>\n<p>-and- </p>\n<p>The <em>checkWrite</em> parameter is <strong>null</strong> or empty </p>\n<p>-and- </p>\n<p>The <em>checkError</em> parameter is <strong>null</strong> or empty. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  seealso:
  - linkId: System.Collections.IList
    commentId: T:System.Collections.IList
  - linkId: System.Net.Sockets.Socket.Accept
    commentId: M:System.Net.Sockets.Socket.Accept
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
    commentId: M:System.Net.Sockets.Socket.Poll(System.Int32,System.Net.Sockets.SelectMode)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Sockets.Socket.Send(System.Byte[])
  commentId: M:System.Net.Sockets.Socket.Send(System.Byte[])
  id: Send(System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(Byte[])
  nameWithType: Socket.Send(Byte[])
  fullName: System.Net.Sockets.Socket.Send(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 222
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends data to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(byte[] buffer)
    content.vb: Public Function Send(buffer As Byte()) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  nameWithType.vb: Socket.Send(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte())
  name.vb: Send(Byte())
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(Byte[], Int32, Int32, SocketFlags)
  nameWithType: Socket.Send(Byte[], Int32, Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 223
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the specified number of bytes of data to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified offset, and using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags)
    content.vb: Public Function Send(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The position in the data buffer at which to begin sending data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to send. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  nameWithType.vb: Socket.Send(Byte(), Int32, Int32, SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags)
  name.vb: Send(Byte(), Int32, Int32, SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(Byte[], Int32, Int32, SocketFlags, out SocketError)
  nameWithType: Socket.Send(Byte[], Int32, Int32, SocketFlags, out SocketError)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 224
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the specified number of bytes of data to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified offset, and using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  syntax:
    content: public int Send(byte[] buffer, int offset, int size, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Send(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The position in the data buffer at which to begin sending data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to send. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketError\" data-throw-if-not-resolved=\"false\"></xref> object that stores the socket error.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  nameWithType.vb: Socket.Send(Byte(), Int32, Int32, SocketFlags, ByRef SocketError)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  name.vb: Send(Byte(), Int32, Int32, SocketFlags, ByRef SocketError)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(Byte[], Int32, SocketFlags)
  nameWithType: Socket.Send(Byte[], Int32, SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 225
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the specified number of bytes of data to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(byte[] buffer, int size, SocketFlags socketFlags)
    content.vb: Public Function Send(buffer As Byte(), size As Integer, socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to send. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>size</em> is less than 0 or exceeds the size of the buffer. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  nameWithType.vb: Socket.Send(Byte(), Int32, SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags)
  name.vb: Send(Byte(), Int32, SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Net.Sockets.SocketFlags)
  id: Send(System.Byte[],System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(Byte[], SocketFlags)
  nameWithType: Socket.Send(Byte[], SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Byte[], System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 226
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends data to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(byte[] buffer, SocketFlags socketFlags)
    content.vb: Public Function Send(buffer As Byte(), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  nameWithType.vb: Socket.Send(Byte(), SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Byte(), System.Net.Sockets.SocketFlags)
  name.vb: Send(Byte(), SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  commentId: M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}})
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(IList<ArraySegment<Byte>>)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>)
  fullName: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 227
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the set of buffers in the list to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(IList<ArraySegment<byte>> buffers)
    content.vb: Public Function Send(buffers As IList(Of ArraySegment(Of Byte))) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>A list of <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>s of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffers</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>buffers</em> is empty.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See remarks section below. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  nameWithType.vb: Socket.Send(IList(Of ArraySegment(Of Byte)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)))
  name.vb: Send(IList(Of ArraySegment(Of Byte)))
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(IList<ArraySegment<Byte>>, SocketFlags)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>, SocketFlags)
  fullName: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 228
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the set of buffers in the list to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags)
    content.vb: Public Function Send(buffers As IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>A list of <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>s of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent.</p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffers</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>buffers</em> is empty.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  nameWithType.vb: Socket.Send(IList(Of ArraySegment(Of Byte)), SocketFlags)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  name.vb: Send(IList(Of ArraySegment(Of Byte)), SocketFlags)
- uid: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  commentId: M:System.Net.Sockets.Socket.Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  id: Send(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags,System.Net.Sockets.SocketError@)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Send(IList<ArraySegment<Byte>>, SocketFlags, out SocketError)
  nameWithType: Socket.Send(IList<ArraySegment<Byte>>, SocketFlags, out SocketError)
  fullName: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags, out System.Net.Sockets.SocketError)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Send
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 229
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the set of buffers in the list to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>, using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Send(IList<ArraySegment<byte>> buffers, SocketFlags socketFlags, out SocketError errorCode)
    content.vb: Public Function Send(buffers As IList(Of ArraySegment(Of Byte)), socketFlags As SocketFlags, ByRef errorCode As SocketError) As Integer
    parameters:
    - id: buffers
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>A list of <xref href=\"System.ArraySegment`1\" data-throw-if-not-resolved=\"false\"></xref>s of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent.</p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    - id: errorCode
      type: System.Net.Sockets.SocketError
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketError\" data-throw-if-not-resolved=\"false\"></xref> object that stores the socket error.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent to the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffers</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>buffers</em> is empty.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  nameWithType.vb: Socket.Send(IList(Of ArraySegment(Of Byte)), SocketFlags, ByRef SocketError)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.Send(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags, ByRef System.Net.Sockets.SocketError)
  name.vb: Send(IList(Of ArraySegment(Of Byte)), SocketFlags, ByRef SocketError)
- uid: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 230
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends data asynchronously to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool SendAsync(SocketAsyncEventArgs e)
    content.vb: Public Function SendAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> properties on the <em>e</em> parameter must reference valid buffers. One or the other of these properties may be set, but not both at the same time.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is not yet connected or was not obtained via an <xref href=\"System.Net.Sockets.Socket.Accept\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref>,or <xref href=\"System.Net.Sockets.Socket.BeginAccept\" data-throw-if-not-resolved=\"false\"></xref>, method.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.BufferList
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BufferList
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendPacketsAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendPacketsAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPacketsAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 231
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends a collection of files or in memory data buffers asynchronously to a connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool SendPacketsAsync(SocketAsyncEventArgs e)
    content.vb: Public Function SendPacketsAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in the <xref href=\"System.Net.Sockets.SendPacketsElement.FilePath\" data-throw-if-not-resolved=\"false\"></xref> property was not found. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method. This exception also occurs if the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is not connected to a remote host. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>A connectionless <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is being used and the file being sent exceeds the maximum packet size of the underlying transport.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsFlags
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint)
  nameWithType: Socket.SendTo(Byte[], Int32, Int32, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendTo
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 232
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the specified number of bytes of data to the specified endpoint, starting at the specified location in the buffer, and using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int SendTo(byte[] buffer, int offset, int size, SocketFlags socketFlags, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), offset As Integer, size As Integer, socketFlags As SocketFlags, remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The position in the data buffer at which to begin sending data. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to send. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the destination location for the data. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>offset</em> is greater than the length of <em>buffer</em>.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is greater than the length of <em>buffer</em> minus the value of the <em>offset</em> parameter. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<em>socketFlags</em> is not a valid combination of values.</p>\n<p>-or- </p>\n<p>An operating system error occurs while accessing the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A caller in the call stack does not have the required permissions. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.Socket.LocalEndPoint
    commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  nameWithType.vb: Socket.SendTo(Byte(), Int32, Int32, SocketFlags, EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Int32, System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: SendTo(Byte(), Int32, Int32, SocketFlags, EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendTo(Byte[], Int32, SocketFlags, EndPoint)
  nameWithType: Socket.SendTo(Byte[], Int32, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendTo
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 233
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends the specified number of bytes of data to the specified endpoint using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int SendTo(byte[] buffer, int size, SocketFlags socketFlags, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), size As Integer, socketFlags As SocketFlags, remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The number of bytes to send. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the destination location for the data. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The specified <em>size</em> exceeds the size of <em>buffer</em>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.Socket.LocalEndPoint
    commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  nameWithType.vb: Socket.SendTo(Byte(), Int32, SocketFlags, EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Int32, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: SendTo(Byte(), Int32, SocketFlags, EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendTo(Byte[], EndPoint)
  nameWithType: Socket.SendTo(Byte[], EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendTo
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 234
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends data to the specified endpoint.</p>\n"
  syntax:
    content: public int SendTo(byte[] buffer, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the destination for the data. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.Socket.LocalEndPoint
    commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  nameWithType.vb: Socket.SendTo(Byte(), EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Net.EndPoint)
  name.vb: SendTo(Byte(), EndPoint)
- uid: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  id: SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendTo(Byte[], SocketFlags, EndPoint)
  nameWithType: Socket.SendTo(Byte[], SocketFlags, EndPoint)
  fullName: System.Net.Sockets.Socket.SendTo(System.Byte[], System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendTo
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 235
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends data to a specific endpoint using the specified <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int SendTo(byte[] buffer, SocketFlags socketFlags, EndPoint remoteEP)
    content.vb: Public Function SendTo(buffer As Byte(), socketFlags As SocketFlags, remoteEP As EndPoint) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to be sent. </p>\n"
    - id: socketFlags
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A bitwise combination of the <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: remoteEP
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the destination location for the data. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes sent.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>remoteEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Connect(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
    commentId: M:System.Net.Sockets.Socket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)
  - linkId: System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  - linkId: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
    commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  - linkId: System.Net.Sockets.Socket.LocalEndPoint
    commentId: P:System.Net.Sockets.Socket.LocalEndPoint
  nameWithType.vb: Socket.SendTo(Byte(), SocketFlags, EndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.SendTo(System.Byte(), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: SendTo(Byte(), SocketFlags, EndPoint)
- uid: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  id: SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SendToAsync(SocketAsyncEventArgs)
  nameWithType: Socket.SendToAsync(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendToAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 236
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends data asynchronously to a specific remote host.</p>\n"
  syntax:
    content: public bool SendToAsync(SocketAsyncEventArgs e)
    content.vb: Public Function SendToAsync(e As SocketAsyncEventArgs) As Boolean
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object to use for this asynchronous socket operation.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <strong>true</strong> if the I/O operation is pending. The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will be raised upon completion of the operation. </p>\n<p>Returns <strong>false</strong> if the I/O operation completed synchronously. In this case, The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Completed\" data-throw-if-not-resolved=\"false\"></xref> event on the <em>e</em> parameter will not be raised and the <em>e</em> object passed as a parameter may be examined immediately after the method call returns to retrieve the result of the operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> cannot be null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A socket operation was already in progress using the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> object specified in the <em>e</em> parameter.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Windows XP or later is required for this method.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>The protocol specified is connection-oriented, but the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is not yet connected.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs
    commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Completed
    commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.UserToken
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Boolean)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Boolean)
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 237
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option to the specified <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, bool optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Boolean)
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionValue
      type: System.Boolean
      description: "\n<p>The value of the option, represented as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])
  nameWithType: Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Byte[])
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 238
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option to the specified value, represented as a byte array.</p>\n"
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, byte[] optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Byte())
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionValue
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that represents the value of the option. </p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketOptionName
    commentId: T:System.Net.Sockets.SocketOptionName
  - linkId: System.Net.Sockets.SocketOptionLevel
    commentId: T:System.Net.Sockets.SocketOptionLevel
  - linkId: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
    commentId: M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  nameWithType.vb: Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Byte())
  name.vb: SetSocketOption(SocketOptionLevel, SocketOptionName, Byte())
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Int32)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Int32)
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 239
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option to the specified integer value.</p>\n"
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, int optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Integer)
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionValue
      type: System.Int32
      description: "\n<p>A value of the option. </p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketOptionName
    commentId: T:System.Net.Sockets.SocketOptionName
  - linkId: System.Net.Sockets.SocketOptionLevel
    commentId: T:System.Net.Sockets.SocketOptionLevel
  - linkId: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
    commentId: M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  commentId: M:System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  id: SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: SetSocketOption(SocketOptionLevel, SocketOptionName, Object)
  nameWithType: Socket.SetSocketOption(SocketOptionLevel, SocketOptionName, Object)
  fullName: System.Net.Sockets.Socket.SetSocketOption(System.Net.Sockets.SocketOptionLevel, System.Net.Sockets.SocketOptionName, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetSocketOption
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 240
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the specified <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> option to the specified value, represented as an object.</p>\n"
  syntax:
    content: public void SetSocketOption(SocketOptionLevel optionLevel, SocketOptionName optionName, object optionValue)
    content.vb: Public Sub SetSocketOption(optionLevel As SocketOptionLevel, optionName As SocketOptionName, optionValue As Object)
    parameters:
    - id: optionLevel
      type: System.Net.Sockets.SocketOptionLevel
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionLevel\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionName
      type: System.Net.Sockets.SocketOptionName
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketOptionName\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: optionValue
      type: System.Object
      description: "\n<p>A <xref href=\"System.Net.Sockets.LingerOption\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.MulticastOption\" data-throw-if-not-resolved=\"false\"></xref> that contains the value of the option. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>optionValue</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketOptionName
    commentId: T:System.Net.Sockets.SocketOptionName
  - linkId: System.Net.Sockets.SocketOptionLevel
    commentId: T:System.Net.Sockets.SocketOptionLevel
  - linkId: System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
    commentId: M:System.Net.Sockets.Socket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  commentId: M:System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  id: Shutdown(System.Net.Sockets.SocketShutdown)
  parent: System.Net.Sockets.Socket
  langs:
  - csharp
  - vb
  name: Shutdown(SocketShutdown)
  nameWithType: Socket.Shutdown(SocketShutdown)
  fullName: System.Net.Sockets.Socket.Shutdown(System.Net.Sockets.SocketShutdown)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Shutdown
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 241
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Disables sends and receives on a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Shutdown(SocketShutdown how)
    content.vb: Public Sub Shutdown(how As SocketShutdown)
    parameters:
    - id: how
      type: System.Net.Sockets.SocketShutdown
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.SocketShutdown\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the operation that will no longer be allowed. </p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  - linkId: System.Net.Sockets.SocketShutdown
    commentId: T:System.Net.Sockets.SocketShutdown
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  commentId: M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  name: AcceptAsync()
  nameWithType: SocketTaskExtensions.AcceptAsync()
  fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync()
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)
  name: AcceptAsync(Socket)
  nameWithType: SocketTaskExtensions.AcceptAsync(Socket)
  fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)
  name: ConnectAsync(EndPoint)
  nameWithType: SocketTaskExtensions.ConnectAsync(EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.EndPoint)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.EndPoint)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)
  name: ConnectAsync(IPAddress, Int32)
  nameWithType: SocketTaskExtensions.ConnectAsync(IPAddress, Int32)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress, System.Int32)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress[],System.Int32)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)
  name: ConnectAsync(IPAddress[], Int32)
  nameWithType: SocketTaskExtensions.ConnectAsync(IPAddress[], Int32)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress[], System.Int32)
  nameWithType.vb: SocketTaskExtensions.ConnectAsync(IPAddress(), Int32)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress(), System.Int32)
  name.vb: ConnectAsync(IPAddress(), Int32)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress[],System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.IPAddress[],System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.String,System.Int32)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)
  name: ConnectAsync(String, Int32)
  nameWithType: SocketTaskExtensions.ConnectAsync(String, Int32)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.String, System.Int32)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.String,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.String,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  name: ReceiveAsync(ArraySegment<Byte>, SocketFlags)
  nameWithType: SocketTaskExtensions.ReceiveAsync(ArraySegment<Byte>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.ReceiveAsync(ArraySegment(Of Byte), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags)
  name.vb: ReceiveAsync(ArraySegment(Of Byte), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  name: ReceiveAsync(IList<ArraySegment<Byte>>, SocketFlags)
  nameWithType: SocketTaskExtensions.ReceiveAsync(IList<ArraySegment<Byte>>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.ReceiveAsync(IList(Of ArraySegment(Of Byte)), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  name.vb: ReceiveAsync(IList(Of ArraySegment(Of Byte)), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  name: ReceiveFromAsync(ArraySegment<Byte>, SocketFlags, EndPoint)
  nameWithType: SocketTaskExtensions.ReceiveFromAsync(ArraySegment<Byte>, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  nameWithType.vb: SocketTaskExtensions.ReceiveFromAsync(ArraySegment(Of Byte), SocketFlags, EndPoint)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: ReceiveFromAsync(ArraySegment(Of Byte), SocketFlags, EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveFromAsync
    nameWithType: SocketTaskExtensions.ReceiveFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveFromAsync
    nameWithType: SocketTaskExtensions.ReceiveFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  name: ReceiveMessageFromAsync(ArraySegment<Byte>, SocketFlags, EndPoint)
  nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync(ArraySegment<Byte>, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  nameWithType.vb: SocketTaskExtensions.ReceiveMessageFromAsync(ArraySegment(Of Byte), SocketFlags, EndPoint)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: ReceiveMessageFromAsync(ArraySegment(Of Byte), SocketFlags, EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveMessageFromAsync
    nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveMessageFromAsync
    nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.SendAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  name: SendAsync(ArraySegment<Byte>, SocketFlags)
  nameWithType: SocketTaskExtensions.SendAsync(ArraySegment<Byte>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.SendAsync(ArraySegment(Of Byte), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags)
  name.vb: SendAsync(ArraySegment(Of Byte), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  name: SendAsync(IList<ArraySegment<Byte>>, SocketFlags)
  nameWithType: SocketTaskExtensions.SendAsync(IList<ArraySegment<Byte>>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.SendAsync(IList(Of ArraySegment(Of Byte)), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  name.vb: SendAsync(IList(Of ArraySegment(Of Byte)), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.Socket.System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  parent: System.Net.Sockets.SocketTaskExtensions
  definition: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  name: SendToAsync(ArraySegment<Byte>, SocketFlags, EndPoint)
  nameWithType: SocketTaskExtensions.SendToAsync(ArraySegment<Byte>, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  nameWithType.vb: SocketTaskExtensions.SendToAsync(ArraySegment(Of Byte), SocketFlags, EndPoint)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: SendToAsync(ArraySegment(Of Byte), SocketFlags, EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: SendToAsync
    nameWithType: SocketTaskExtensions.SendToAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: SendToAsync
    nameWithType: SocketTaskExtensions.SendToAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  isExternal: false
  name: AcceptAsync(Socket)
  nameWithType: SocketTaskExtensions.AcceptAsync(Socket)
  fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket)
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions
  commentId: T:System.Net.Sockets.SocketTaskExtensions
  parent: System.Net.Sockets
  isExternal: false
  name: SocketTaskExtensions
  nameWithType: SocketTaskExtensions
  fullName: System.Net.Sockets.SocketTaskExtensions
- uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)
  isExternal: false
  name: AcceptAsync(Socket, Socket)
  nameWithType: SocketTaskExtensions.AcceptAsync(Socket, Socket)
  fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket, System.Net.Sockets.Socket)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.AcceptAsync(System.Net.Sockets.Socket,System.Net.Sockets.Socket)
    name: AcceptAsync
    nameWithType: SocketTaskExtensions.AcceptAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.AcceptAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)
  isExternal: true
  name: ConnectAsync(Socket, EndPoint)
  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.EndPoint)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)
  isExternal: true
  name: ConnectAsync(Socket, IPAddress, Int32)
  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, IPAddress, Int32)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress, System.Int32)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)
  isExternal: true
  name: ConnectAsync(Socket, IPAddress[], Int32)
  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, IPAddress[], Int32)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress[], System.Int32)
  nameWithType.vb: SocketTaskExtensions.ConnectAsync(Socket, IPAddress(), Int32)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.Net.IPAddress(), System.Int32)
  name.vb: ConnectAsync(Socket, IPAddress(), Int32)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.Net.IPAddress[],System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)
  isExternal: true
  name: ConnectAsync(Socket, String, Int32)
  nameWithType: SocketTaskExtensions.ConnectAsync(Socket, String, Int32)
  fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket, System.String, System.Int32)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ConnectAsync(System.Net.Sockets.Socket,System.String,System.Int32)
    name: ConnectAsync
    nameWithType: SocketTaskExtensions.ConnectAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ConnectAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  isExternal: true
  name: ReceiveAsync(Socket, ArraySegment<Byte>, SocketFlags)
  nameWithType: SocketTaskExtensions.ReceiveAsync(Socket, ArraySegment<Byte>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.ReceiveAsync(Socket, ArraySegment(Of Byte), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags)
  name.vb: ReceiveAsync(Socket, ArraySegment(Of Byte), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  isExternal: true
  name: ReceiveAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)
  nameWithType: SocketTaskExtensions.ReceiveAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.ReceiveAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  name.vb: ReceiveAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: ReceiveAsync
    nameWithType: SocketTaskExtensions.ReceiveAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  isExternal: true
  name: ReceiveFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)
  nameWithType: SocketTaskExtensions.ReceiveFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  nameWithType.vb: SocketTaskExtensions.ReceiveFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: ReceiveFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveFromAsync
    nameWithType: SocketTaskExtensions.ReceiveFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveFromAsync
    nameWithType: SocketTaskExtensions.ReceiveFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  isExternal: true
  name: ReceiveMessageFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)
  nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  nameWithType.vb: SocketTaskExtensions.ReceiveMessageFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: ReceiveMessageFromAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveMessageFromAsync
    nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: ReceiveMessageFromAsync
    nameWithType: SocketTaskExtensions.ReceiveMessageFromAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.ReceiveMessageFromAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
  isExternal: true
  name: SendAsync(Socket, ArraySegment<Byte>, SocketFlags)
  nameWithType: SocketTaskExtensions.SendAsync(Socket, ArraySegment<Byte>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.SendAsync(Socket, ArraySegment(Of Byte), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags)
  name.vb: SendAsync(Socket, ArraySegment(Of Byte), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
  isExternal: true
  name: SendAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)
  nameWithType: SocketTaskExtensions.SendAsync(Socket, IList<ArraySegment<Byte>>, SocketFlags)
  fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList<System.ArraySegment<System.Byte>>, System.Net.Sockets.SocketFlags)
  nameWithType.vb: SocketTaskExtensions.SendAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket, System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte)), System.Net.Sockets.SocketFlags)
  name.vb: SendAsync(Socket, IList(Of ArraySegment(Of Byte)), SocketFlags)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendAsync(System.Net.Sockets.Socket,System.Collections.Generic.IList{System.ArraySegment{System.Byte}},System.Net.Sockets.SocketFlags)
    name: SendAsync
    nameWithType: SocketTaskExtensions.SendAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  commentId: M:System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
  isExternal: true
  name: SendToAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)
  nameWithType: SocketTaskExtensions.SendToAsync(Socket, ArraySegment<Byte>, SocketFlags, EndPoint)
  fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket, System.ArraySegment<System.Byte>, System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  nameWithType.vb: SocketTaskExtensions.SendToAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)
  fullname.vb: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket, System.ArraySegment(Of System.Byte), System.Net.Sockets.SocketFlags, System.Net.EndPoint)
  name.vb: SendToAsync(Socket, ArraySegment(Of Byte), SocketFlags, EndPoint)
  spec.csharp:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: SendToAsync
    nameWithType: SocketTaskExtensions.SendToAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Sockets.SocketTaskExtensions.SendToAsync(System.Net.Sockets.Socket,System.ArraySegment{System.Byte},System.Net.Sockets.SocketFlags,System.Net.EndPoint)
    name: SendToAsync
    nameWithType: SocketTaskExtensions.SendToAsync
    fullName: System.Net.Sockets.SocketTaskExtensions.SendToAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.Socket
    name: Socket
    nameWithType: Socket
    fullName: System.Net.Sockets.Socket
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Sockets.SocketFlags
    name: SocketFlags
    nameWithType: SocketFlags
    fullName: System.Net.Sockets.SocketFlags
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.EndPoint
    name: EndPoint
    nameWithType: EndPoint
    fullName: System.Net.EndPoint
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.AddressFamily
  commentId: T:System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets.SocketType
  commentId: T:System.Net.Sockets.SocketType
  parent: System.Net.Sockets
  isExternal: false
  name: SocketType
  nameWithType: SocketType
  fullName: System.Net.Sockets.SocketType
- uid: System.Net.Sockets.ProtocolType
  commentId: T:System.Net.Sockets.ProtocolType
  parent: System.Net.Sockets
  isExternal: false
  name: ProtocolType
  nameWithType: ProtocolType
  fullName: System.Net.Sockets.ProtocolType
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.LingerOption
  commentId: T:System.Net.Sockets.LingerOption
  parent: System.Net.Sockets
  isExternal: false
  name: LingerOption
  nameWithType: LingerOption
  fullName: System.Net.Sockets.LingerOption
- uid: System.Net.EndPoint
  commentId: T:System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Net.Sockets.Socket
  commentId: T:System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Net.Sockets.SocketAsyncEventArgs
  commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncEventArgs
  nameWithType: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Net.IPAddress[]
  name: IPAddress[]
  nameWithType: IPAddress[]
  fullName: System.Net.IPAddress[]
  nameWithType.vb: IPAddress()
  fullname.vb: System.Net.IPAddress()
  name.vb: IPAddress()
  spec.csharp:
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketOptionLevel
  commentId: T:System.Net.Sockets.SocketOptionLevel
  parent: System.Net.Sockets
  isExternal: false
  name: SocketOptionLevel
  nameWithType: SocketOptionLevel
  fullName: System.Net.Sockets.SocketOptionLevel
- uid: System.Net.Sockets.SocketOptionName
  commentId: T:System.Net.Sockets.SocketOptionName
  parent: System.Net.Sockets
  isExternal: false
  name: SocketOptionName
  nameWithType: SocketOptionName
  fullName: System.Net.Sockets.SocketOptionName
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Net.Sockets.IOControlCode
  commentId: T:System.Net.Sockets.IOControlCode
  parent: System.Net.Sockets
  isExternal: false
  name: IOControlCode
  nameWithType: IOControlCode
  fullName: System.Net.Sockets.IOControlCode
- uid: System.Net.Sockets.SelectMode
  commentId: T:System.Net.Sockets.SelectMode
  parent: System.Net.Sockets
  isExternal: false
  name: SelectMode
  nameWithType: SelectMode
  fullName: System.Net.Sockets.SelectMode
- uid: System.Net.Sockets.SocketFlags
  commentId: T:System.Net.Sockets.SocketFlags
  parent: System.Net.Sockets
  isExternal: false
  name: SocketFlags
  nameWithType: SocketFlags
  fullName: System.Net.Sockets.SocketFlags
- uid: System.Net.Sockets.SocketError
  commentId: T:System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: false
  name: SocketError
  nameWithType: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  commentId: T:System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  nameWithType.vb: IList(Of ArraySegment(Of Byte))
  fullname.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))
  name.vb: IList(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Net.Sockets.IPPacketInformation
  commentId: T:System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Net.Sockets.SocketShutdown
  commentId: T:System.Net.Sockets.SocketShutdown
  parent: System.Net.Sockets
  isExternal: false
  name: SocketShutdown
  nameWithType: SocketShutdown
  fullName: System.Net.Sockets.SocketShutdown
- uid: System.Net.Sockets.SocketException
  commentId: T:System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
