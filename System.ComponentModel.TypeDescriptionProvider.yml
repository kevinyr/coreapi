### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptionProvider
  commentId: T:System.ComponentModel.TypeDescriptionProvider
  id: TypeDescriptionProvider
  parent: System.ComponentModel
  children:
  - System.ComponentModel.TypeDescriptionProvider.#ctor
  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  langs:
  - csharp
  - vb
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeDescriptionProvider
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 14
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Provides supplemental metadata to the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract class TypeDescriptionProvider
    content.vb: Public MustInherit Class TypeDescriptionProvider
  seealso:
  - linkId: System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
    commentId: M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)
  - linkId: System.ComponentModel.TypeDescriptionProviderAttribute
    commentId: T:System.ComponentModel.TypeDescriptionProviderAttribute
  - linkId: System.ComponentModel.ICustomTypeDescriptor
    commentId: T:System.ComponentModel.ICustomTypeDescriptor
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 27
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected TypeDescriptionProvider()
    content.vb: Protected Sub New
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(System.ComponentModel.TypeDescriptionProvider)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 39
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.TypeDescriptionProvider\" data-throw-if-not-resolved=\"false\"></xref> class using a parent type description provider.</p>\n"
  syntax:
    content: protected TypeDescriptionProvider(TypeDescriptionProvider parent)
    content.vb: Protected Sub New(parent As TypeDescriptionProvider)
    parameters:
    - id: parent
      type: System.ComponentModel.TypeDescriptionProvider
      description: "\n<p>The parent type description provider.</p>\n"
  seealso:
  - linkId: System.ComponentModel.CustomTypeDescriptor
    commentId: T:System.ComponentModel.CustomTypeDescriptor
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  commentId: M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: CreateInstance(IServiceProvider, Type, Type[], Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider, Type, Type[], Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider, System.Type, System.Type[], System.Object[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateInstance
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 53
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Creates an object that can substitute for another data type.</p>\n"
  syntax:
    content: public virtual object CreateInstance(IServiceProvider provider, Type objectType, Type[] argTypes, object[] args)
    content.vb: Public Overridable Function CreateInstance(provider As IServiceProvider, objectType As Type, argTypes As Type(), args As Object()) As Object
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "\n<p>An optional service provider.</p>\n"
    - id: objectType
      type: System.Type
      description: "\n<p>The type of object to create. This parameter is never <strong>null</strong>.</p>\n"
    - id: argTypes
      type: System.Type[]
      description: "\n<p>An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be <strong>null</strong> or of zero length.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An optional array of parameter values to pass to the object's constructor.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The substitute <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
    commentId: M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  nameWithType.vb: TypeDescriptionProvider.CreateInstance(IServiceProvider, Type, Type(), Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider, System.Type, System.Type(), System.Object())
  name.vb: CreateInstance(IServiceProvider, Type, Type(), Object())
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  id: GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCache
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 79
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a per-object cache, accessed as an <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> of key/value pairs.</p>\n"
  syntax:
    content: public virtual IDictionary GetCache(object instance)
    content.vb: Public Overridable Function GetCache(instance As Object) As IDictionary
    parameters:
    - id: instance
      type: System.Object
      description: "\n<p>The object for which to get the cache.</p>\n"
    return:
      type: System.Collections.IDictionary
      description: "\n<p>An <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> if the provided object supports caching; otherwise, <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - linkId: System.ComponentModel.Design.IDictionaryService
    commentId: T:System.ComponentModel.Design.IDictionaryService
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  id: GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetExtendedTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 103
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an extended custom type descriptor for the given object.</p>\n"
  syntax:
    content: public virtual ICustomTypeDescriptor GetExtendedTypeDescriptor(object instance)
    content.vb: Public Overridable Function GetExtendedTypeDescriptor(instance As Object) As ICustomTypeDescriptor
    parameters:
    - id: instance
      type: System.Object
      description: "\n<p>The object for which to get the extended type descriptor.</p>\n"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "\n<p>An <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that can provide extended metadata for the object.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  id: GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetExtenderProviders
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 118
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the extender providers for the specified object.</p>\n"
  syntax:
    content: protected virtual IExtenderProvider[] GetExtenderProviders(object instance)
    content.vb: Protected Overridable Function GetExtenderProviders(instance As Object) As IExtenderProvider()
    parameters:
    - id: instance
      type: System.Object
      description: "\n<p>The object to get extender providers for.</p>\n"
    return:
      type: System.ComponentModel.IExtenderProvider[]
      description: "\n<p>An array of extender providers for <em>instance</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFullComponentName
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 142
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the name of the specified component, or <strong>null</strong> if the component has no name.</p>\n"
  syntax:
    content: public virtual string GetFullComponentName(object component)
    content.vb: Public Overridable Function GetFullComponentName(component As Object) As String
    parameters:
    - id: component
      type: System.Object
      description: "\n<p>The specified component.</p>\n"
    return:
      type: System.String
      description: "\n<p>The name of the specified component.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>component</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 171
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Performs normal reflection against the given object.</p>\n"
  syntax:
    content: public Type GetReflectionType(object instance)
    content.vb: Public Function GetReflectionType(instance As Object) As Type
    parameters:
    - id: instance
      type: System.Object
      description: "\n<p>An instance of the type (should not be <strong>null</strong>).</p>\n"
    return:
      type: System.Type
      description: "\n<p>The type of reflection for this <em>instance</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 157
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Performs normal reflection against a type.</p>\n"
  syntax:
    content: public Type GetReflectionType(Type objectType)
    content.vb: Public Function GetReflectionType(objectType As Type) As Type
    parameters:
    - id: objectType
      type: System.Type
      description: "\n<p>The type of object for which to retrieve the <xref href=\"System.Reflection.IReflect\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The type of reflection for this <em>objectType</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>objectType</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  id: GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetReflectionType(Type, Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type, Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetReflectionType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 190
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Performs normal reflection against the given object with the given type.</p>\n"
  syntax:
    content: public virtual Type GetReflectionType(Type objectType, object instance)
    content.vb: Public Overridable Function GetReflectionType(objectType As Type, instance As Object) As Type
    parameters:
    - id: objectType
      type: System.Type
      description: "\n<p>The type of object for which to retrieve the <xref href=\"System.Reflection.IReflect\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: instance
      type: System.Object
      description: "\n<p>An instance of the type. Can be <strong>null</strong>.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The type of reflection for this <em>objectType</em>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  id: GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRuntimeType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 206
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Converts a reflection type into a runtime type.</p>\n"
  syntax:
    content: public virtual Type GetRuntimeType(Type reflectionType)
    content.vb: Public Overridable Function GetRuntimeType(reflectionType As Type) As Type
    parameters:
    - id: reflectionType
      type: System.Type
      description: "\n<p>The type to convert to its runtime equivalent.</p>\n"
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that represents the runtime equivalent of <em>reflectionType</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>reflectionType</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  id: GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 247
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a custom type descriptor for the given object.</p>\n"
  syntax:
    content: public ICustomTypeDescriptor GetTypeDescriptor(object instance)
    content.vb: Public Function GetTypeDescriptor(instance As Object) As ICustomTypeDescriptor
    parameters:
    - id: instance
      type: System.Object
      description: "\n<p>An instance of the type. Can be <strong>null</strong> if no instance was passed to the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "\n<p>An <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that can provide metadata for the type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>instance</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  id: GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 234
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a custom type descriptor for the given type.</p>\n"
  syntax:
    content: public ICustomTypeDescriptor GetTypeDescriptor(Type objectType)
    content.vb: Public Function GetTypeDescriptor(objectType As Type) As ICustomTypeDescriptor
    parameters:
    - id: objectType
      type: System.Type
      description: "\n<p>The type of object for which to retrieve the type descriptor.</p>\n"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "\n<p>An <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that can provide metadata for the type.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  id: GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: GetTypeDescriptor(Type, Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type, Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTypeDescriptor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 271
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a custom type descriptor for the given type and object.</p>\n"
  syntax:
    content: public virtual ICustomTypeDescriptor GetTypeDescriptor(Type objectType, object instance)
    content.vb: Public Overridable Function GetTypeDescriptor(objectType As Type, instance As Object) As ICustomTypeDescriptor
    parameters:
    - id: objectType
      type: System.Type
      description: "\n<p>The type of object for which to retrieve the type descriptor.</p>\n"
    - id: instance
      type: System.Object
      description: "\n<p>An instance of the type. Can be <strong>null</strong> if no instance was passed to the <xref href=\"System.ComponentModel.TypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "\n<p>An <xref href=\"System.ComponentModel.ICustomTypeDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that can provide metadata for the type.</p>\n"
  seealso:
  - linkId: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
    commentId: M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  commentId: M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  id: IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  - vb
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSupportedType
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/TypeDescriptionProvider.cs
    startLine: 290
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers. </p>\n"
  syntax:
    content: public virtual bool IsSupportedType(Type type)
    content.vb: Public Overridable Function IsSupportedType(type As Type) As Boolean
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type to test for compatibility.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>type</em> is compatible with the type description and its chain of type description providers; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ComponentModel.TypeDescriptionProvider
  commentId: T:System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.IServiceProvider
  commentId: T:System.IServiceProvider
  parent: System
  isExternal: false
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.ComponentModel.ICustomTypeDescriptor
  commentId: T:System.ComponentModel.ICustomTypeDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: ICustomTypeDescriptor
  nameWithType: ICustomTypeDescriptor
  fullName: System.ComponentModel.ICustomTypeDescriptor
- uid: System.ComponentModel.IExtenderProvider[]
  name: IExtenderProvider[]
  nameWithType: IExtenderProvider[]
  fullName: System.ComponentModel.IExtenderProvider[]
  nameWithType.vb: IExtenderProvider()
  fullname.vb: System.ComponentModel.IExtenderProvider()
  name.vb: IExtenderProvider()
  spec.csharp:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    nameWithType: IExtenderProvider
    fullName: System.ComponentModel.IExtenderProvider
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    nameWithType: IExtenderProvider
    fullName: System.ComponentModel.IExtenderProvider
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
