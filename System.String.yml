items:
- uid: System.String
  commentId: T:System.String
  id: String
  parent: System
  children:
  - System.String.#ctor(System.Char*)
  - System.String.#ctor(System.Char*,System.Int32,System.Int32)
  - System.String.#ctor(System.Char,System.Int32)
  - System.String.#ctor(System.Char[])
  - System.String.#ctor(System.Char[],System.Int32,System.Int32)
  - System.String.Chars(System.Int32)
  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  - System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  - System.String.Compare(System.String,System.String)
  - System.String.Compare(System.String,System.String,System.Boolean)
  - System.String.Compare(System.String,System.String,System.StringComparison)
  - System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  - System.String.CompareOrdinal(System.String,System.String)
  - System.String.CompareTo(System.String)
  - System.String.Concat(System.Collections.Generic.IEnumerable{System.String})
  - System.String.Concat(System.Object)
  - System.String.Concat(System.Object,System.Object)
  - System.String.Concat(System.Object,System.Object,System.Object)
  - System.String.Concat(System.Object[])
  - System.String.Concat(System.String,System.String)
  - System.String.Concat(System.String,System.String,System.String)
  - System.String.Concat(System.String,System.String,System.String,System.String)
  - System.String.Concat(System.String[])
  - System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})
  - System.String.Contains(System.String)
  - System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - System.String.Empty
  - System.String.EndsWith(System.String)
  - System.String.EndsWith(System.String,System.StringComparison)
  - System.String.Equals(System.Object)
  - System.String.Equals(System.String)
  - System.String.Equals(System.String,System.String)
  - System.String.Equals(System.String,System.String,System.StringComparison)
  - System.String.Equals(System.String,System.StringComparison)
  - System.String.Format(System.IFormatProvider,System.String,System.Object)
  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)
  - System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  - System.String.Format(System.IFormatProvider,System.String,System.Object[])
  - System.String.Format(System.String,System.Object)
  - System.String.Format(System.String,System.Object,System.Object)
  - System.String.Format(System.String,System.Object,System.Object,System.Object)
  - System.String.Format(System.String,System.Object[])
  - System.String.GetHashCode
  - System.String.IndexOf(System.Char)
  - System.String.IndexOf(System.Char,System.Int32)
  - System.String.IndexOf(System.Char,System.Int32,System.Int32)
  - System.String.IndexOf(System.String)
  - System.String.IndexOf(System.String,System.Int32)
  - System.String.IndexOf(System.String,System.Int32,System.Int32)
  - System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  - System.String.IndexOf(System.String,System.Int32,System.StringComparison)
  - System.String.IndexOf(System.String,System.StringComparison)
  - System.String.IndexOfAny(System.Char[])
  - System.String.IndexOfAny(System.Char[],System.Int32)
  - System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)
  - System.String.Insert(System.Int32,System.String)
  - System.String.IsNullOrEmpty(System.String)
  - System.String.IsNullOrWhiteSpace(System.String)
  - System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  - System.String.Join(System.String,System.Object[])
  - System.String.Join(System.String,System.String[])
  - System.String.Join(System.String,System.String[],System.Int32,System.Int32)
  - System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  - System.String.LastIndexOf(System.Char)
  - System.String.LastIndexOf(System.Char,System.Int32)
  - System.String.LastIndexOf(System.Char,System.Int32,System.Int32)
  - System.String.LastIndexOf(System.String)
  - System.String.LastIndexOf(System.String,System.Int32)
  - System.String.LastIndexOf(System.String,System.Int32,System.Int32)
  - System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  - System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)
  - System.String.LastIndexOf(System.String,System.StringComparison)
  - System.String.LastIndexOfAny(System.Char[])
  - System.String.LastIndexOfAny(System.Char[],System.Int32)
  - System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  - System.String.Length
  - System.String.op_Equality(System.String,System.String)
  - System.String.op_Inequality(System.String,System.String)
  - System.String.PadLeft(System.Int32)
  - System.String.PadLeft(System.Int32,System.Char)
  - System.String.PadRight(System.Int32)
  - System.String.PadRight(System.Int32,System.Char)
  - System.String.Remove(System.Int32)
  - System.String.Remove(System.Int32,System.Int32)
  - System.String.Replace(System.Char,System.Char)
  - System.String.Replace(System.String,System.String)
  - System.String.Split(System.Char[])
  - System.String.Split(System.Char[],System.Int32)
  - System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)
  - System.String.Split(System.Char[],System.StringSplitOptions)
  - System.String.Split(System.String[],System.Int32,System.StringSplitOptions)
  - System.String.Split(System.String[],System.StringSplitOptions)
  - System.String.StartsWith(System.String)
  - System.String.StartsWith(System.String,System.StringComparison)
  - System.String.Substring(System.Int32)
  - System.String.Substring(System.Int32,System.Int32)
  - System.String.System#Collections#IEnumerable#GetEnumerator
  - System.String.System#IComparable#CompareTo(System.Object)
  - System.String.System#IConvertible#GetTypeCode
  - System.String.System#IConvertible#ToBoolean(System.IFormatProvider)
  - System.String.System#IConvertible#ToByte(System.IFormatProvider)
  - System.String.System#IConvertible#ToChar(System.IFormatProvider)
  - System.String.System#IConvertible#ToDateTime(System.IFormatProvider)
  - System.String.System#IConvertible#ToDecimal(System.IFormatProvider)
  - System.String.System#IConvertible#ToDouble(System.IFormatProvider)
  - System.String.System#IConvertible#ToInt16(System.IFormatProvider)
  - System.String.System#IConvertible#ToInt32(System.IFormatProvider)
  - System.String.System#IConvertible#ToInt64(System.IFormatProvider)
  - System.String.System#IConvertible#ToSByte(System.IFormatProvider)
  - System.String.System#IConvertible#ToSingle(System.IFormatProvider)
  - System.String.System#IConvertible#ToString(System.IFormatProvider)
  - System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  - System.String.System#IConvertible#ToUInt16(System.IFormatProvider)
  - System.String.System#IConvertible#ToUInt32(System.IFormatProvider)
  - System.String.System#IConvertible#ToUInt64(System.IFormatProvider)
  - System.String.ToCharArray
  - System.String.ToCharArray(System.Int32,System.Int32)
  - System.String.ToLower
  - System.String.ToLowerInvariant
  - System.String.ToString
  - System.String.ToUpper
  - System.String.ToUpperInvariant
  - System.String.Trim
  - System.String.Trim(System.Char[])
  - System.String.TrimEnd(System.Char[])
  - System.String.TrimStart(System.Char[])
  langs:
  - csharp
  - vb
  name: String
  fullName: System.String
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: String
    path: src/mscorlib/src/System/String.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents text as a sequence of UTF-16 code units.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public sealed class String : IComparable, ICloneable, IConvertible, IComparable<string>, IEnumerable<char>, IEnumerable, IEquatable<string>
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public NotInheritable Class String
          Implements IComparable, ICloneable, IConvertible, IComparable(Of String), IEnumerable(Of Char), IEnumerable, IEquatable(Of String)
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.ICloneable
    commentId: T:System.ICloneable
  - type: System.IConvertible
    commentId: T:System.IConvertible
  - type: System.Collections.IEnumerable
    commentId: T:System.Collections.IEnumerable
  - type: System.Text.StringBuilder
    commentId: T:System.Text.StringBuilder
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IEnumerable{System.Char}
  - System.Collections.IEnumerable
  - System.IComparable
  - System.IComparable{System.String}
  - System.IConvertible
  - System.IEquatable{System.String}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: String
- uid: System.String.Empty
  commentId: F:System.String.Empty
  id: Empty
  parent: System.String
  langs:
  - csharp
  - vb
  name: Empty
  fullName: System.String.Empty
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Empty
    path: src/mscorlib/src/System/String.cs
    startLine: 71
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the empty string. This field is read-only.</p>\n"
  syntax:
    content: public static readonly string Empty
    content.vb: Public Shared ReadOnly Empty As String
    return:
      type: System.String
  seealso:
  - type: System.String.IsNullOrEmpty(System.String)
    commentId: M:System.String.IsNullOrEmpty(System.String)
  - type: System.String.IsNullOrWhiteSpace(System.String)
    commentId: M:System.String.IsNullOrWhiteSpace(System.String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: String.Empty
- uid: System.String.#ctor(System.Char*)
  commentId: M:System.String.#ctor(System.Char*)
  id: '#ctor(System.Char*)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char*)
  fullName: System.String.String(System.Char*)
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public String(char *value)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(value As Char *)
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to a null-terminated array of Unicode characters. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current process does not have read access to all the addressed characters.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> specifies an address less than 64000.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.String(Char*)
- uid: System.String.#ctor(System.Char*,System.Int32,System.Int32)
  commentId: M:System.String.#ctor(System.Char*,System.Int32,System.Int32)
  id: '#ctor(System.Char*,System.Int32,System.Int32)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char*, Int32, Int32)
  fullName: System.String.String(System.Char*, System.Int32, System.Int32)
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by a specified pointer to an array of Unicode characters, a starting character position within that array, and a length.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public String(char *value, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(value As Char *, startIndex As Integer, length As Integer)
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to an array of Unicode characters. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position within <em>value</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters within <em>value</em> to use. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero, <em>value</em> + <em>startIndex</em> cause a pointer overflow, or the current process does not have read access to all the addressed characters.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> specifies an array that contains an invalid Unicode character, or <em>value</em> + <em>startIndex</em> specifies an address less than 64000.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.String(Char*, Int32, Int32)
- uid: System.String.#ctor(System.Char,System.Int32)
  commentId: M:System.String.#ctor(System.Char,System.Int32)
  id: '#ctor(System.Char,System.Int32)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char, Int32)
  fullName: System.String.String(System.Char, System.Int32)
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by a specified Unicode character repeated a specified number of times.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public String(char c, int count)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(c As Char, count As Integer)
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>A Unicode character. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times <em>c</em> occurs. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.String(Char, Int32)
- uid: System.String.#ctor(System.Char[])
  commentId: M:System.String.#ctor(System.Char[])
  id: '#ctor(System.Char[])'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char[])
  fullName: System.String.String(System.Char[])
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by an array of Unicode characters.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public String(char[] value)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(value As Char())
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>An array of Unicode characters. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.String(System.Char())
  name.vb: String(Char())
  nameWithType: String.String(Char[])
  nameWithType.vb: String.String(Char())
- uid: System.String.#ctor(System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.#ctor(System.Char[],System.Int32,System.Int32)
  id: '#ctor(System.Char[],System.Int32,System.Int32)'
  parent: System.String
  langs:
  - csharp
  - vb
  name: String(Char[], Int32, Int32)
  fullName: System.String.String(System.Char[], System.Int32, System.Int32)
  type: Constructor
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> class to the value indicated by an array of Unicode characters, a starting character position within that array, and a length.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public String(char[] value, int startIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub New(value As Char(), startIndex As Integer, length As Integer)
    parameters:
    - id: value
      type: System.Char[]
      description: "\n<p>An array of Unicode characters. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position within <em>value</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters within <em>value</em> to use. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or- </p>\n<p>The sum of <em>startIndex</em> and <em>length</em> is greater than the number of elements in <em>value</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.String(System.Char(), System.Int32, System.Int32)
  name.vb: String(Char(), Int32, Int32)
  nameWithType: String.String(Char[], Int32, Int32)
  nameWithType.vb: String.String(Char(), Int32, Int32)
- uid: System.String.Chars(System.Int32)
  commentId: P:System.String.Chars(System.Int32)
  id: Chars(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Chars[Int32]
  fullName: System.String.Chars[System.Int32]
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> object at a specified position in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [IndexerName("Chars")]

      public char this[int index]

      {
          [MethodImpl(MethodImplOptions.InternalCall)]
          [SecuritySafeCritical]
          get;
      }
    content.vb: >-
      <IndexerName("Chars")>

      Public ReadOnly Property Chars(index As Integer) As Char
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>A position in the current string. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The object at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is greater than or equal to the length of this object or less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.GetEnumerator
    commentId: M:System.String.GetEnumerator
  - type: System.Int32
    commentId: T:System.Int32
  attributes:
  - type: System.Runtime.CompilerServices.IndexerNameAttribute
    ctor: System.Runtime.CompilerServices.IndexerNameAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Chars
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.String.Chars(System.Int32)
  name.vb: Chars(Int32)
  nameWithType: String.Chars[Int32]
  nameWithType.vb: String.Chars(Int32)
- uid: System.String.Length
  commentId: P:System.String.Length
  id: Length
  parent: System.String
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.String.Length
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the number of characters in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      public int Length

      {
          [SecuritySafeCritical]
          [MethodImpl(MethodImplOptions.InternalCall)]
          get;
      }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of characters in the current string.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: String.Length
- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32, Int32)
  fullName: System.String.Compare(System.String, System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/String.cs
    startLine: 1929
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares substrings of two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects and returns an integer that indicates their relative position in the sort order.</p>\n"
  syntax:
    content: public static int Compare(string strA, int indexA, string strB, int indexB, int length)
    content.vb: Public Shared Function Compare(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to use in the comparison. </p>\n"
    - id: indexA
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strA</em>. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to use in the comparison. </p>\n"
    - id: indexB
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strB</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters in the substrings to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer indicating the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The substrings occur in the same position in the sort order, or <em>length</em> is zero. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> follows the substring in <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>indexA</em> is greater than <em>strA</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexB</em> is greater than <em>strB</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\n<p>-or-</p>\n<p>Either <em>indexA</em> or <em>indexB</em> is <strong>null</strong>, and <em>length</em> is greater than zero.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Compare(String, Int32, String, Int32, Int32)
- uid: System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  commentId: M:System.String.Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  id: Compare(System.String,System.Int32,System.String,System.Int32,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, Int32, String, Int32, Int32, StringComparison)
  fullName: System.String.Compare(System.String, System.Int32, System.String, System.Int32, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/String.cs
    startLine: 2040
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares substrings of two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static int Compare(string strA, int indexA, string strB, int indexB, int length, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Compare(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to use in the comparison. </p>\n"
    - id: indexA
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strA</em>. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to use in the comparison.</p>\n"
    - id: indexB
      type: System.Int32
      description: "\n<p>The position of the substring within <em>strB</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters in the substrings to compare. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules to use in the comparison. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> precedes the substring in <em>strB</em> in the sort order.</p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The substrings occur in the same position in the sort order, or the <em>length</em> parameter is zero. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> follllows the substring in <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>indexA</em> is greater than <em>strA</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexB</em> is greater than <em>strB</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\n<p>-or-</p>\n<p>Either <em>indexA</em> or <em>indexB</em> is <strong>null</strong>, and <em>length</em> is greater than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Compare(String, Int32, String, Int32, Int32, StringComparison)
- uid: System.String.Compare(System.String,System.String)
  commentId: M:System.String.Compare(System.String,System.String)
  id: Compare(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, String)
  fullName: System.String.Compare(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/String.cs
    startLine: 1802
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects and returns an integer that indicates their relative position in the sort order.</p>\n"
  syntax:
    content: public static int Compare(string strA, string strB)
    content.vb: Public Shared Function Compare(strA As String, strB As String) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Compare(String, String)
- uid: System.String.Compare(System.String,System.String,System.Boolean)
  commentId: M:System.String.Compare(System.String,System.String,System.Boolean)
  id: Compare(System.String,System.String,System.Boolean)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, String, Boolean)
  fullName: System.String.Compare(System.String, System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/String.cs
    startLine: 1813
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects, ignoring or honoring their case, and returns an integer that indicates their relative position in the sort order.</p>\n"
  syntax:
    content: public static int Compare(string strA, string strB, bool ignoreCase)
    content.vb: Public Shared Function Compare(strA As String, strB As String, ignoreCase As Boolean) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to ignore case during the comparison; otherwise, <strong>false</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> occurs in the same position as <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  - type: System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
    commentId: M:System.Globalization.CompareInfo.IsPrefix(System.String,System.String,System.Globalization.CompareOptions)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Compare(String, String, Boolean)
- uid: System.String.Compare(System.String,System.String,System.StringComparison)
  commentId: M:System.String.Compare(System.String,System.String,System.StringComparison)
  id: Compare(System.String,System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Compare(String, String, StringComparison)
  fullName: System.String.Compare(System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Compare
    path: src/mscorlib/src/System/String.cs
    startLine: 1825
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects using the specified rules, and returns an integer that indicates their relative position in the sort order.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static int Compare(string strA, string strB, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Compare(strA As String, strB As String, comparisonType As StringComparison) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare.</p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules to use in the comparison. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> precedes <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> is in the same position as <em>strB</em> in the sort order. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> follows <em>strB</em> in the sort order. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> is not supported.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Compare(String, String, StringComparison)
- uid: System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.String.CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  id: CompareOrdinal(System.String,System.Int32,System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CompareOrdinal(String, Int32, String, Int32, Int32)
  fullName: System.String.CompareOrdinal(System.String, System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareOrdinal
    path: src/mscorlib/src/System/String.cs
    startLine: 2187
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares substrings of two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in each substring. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static int CompareOrdinal(string strA, int indexA, string strB, int indexB, int length)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function CompareOrdinal(strA As String, indexA As Integer, strB As String, indexB As Integer, length As Integer) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to use in the comparison. </p>\n"
    - id: indexA
      type: System.Int32
      description: "\n<p>The starting index of the substring in <em>strA</em>. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to use in the comparison. </p>\n"
    - id: indexB
      type: System.Int32
      description: "\n<p>The starting index of the substring in <em>strB</em>. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters in the substrings to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value</p>\n<p>Condition</p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> is less than the substring in <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The substrings are equal, or <em>length</em> is zero. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The substring in <em>strA</em> is greater than the substring in <em>strB</em>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>strA</em> is not <strong>null</strong> and <em>indexA</em> is greater than <em>strA</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>strB</em> is not <strong>null</strong> and<em>indexB</em> is greater than <em>strB</em>.<xref href=\"System.String.Length\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>indexA</em>, <em>indexB</em>, or <em>length</em> is negative. </p>\n"
  seealso:
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.CompareOrdinal(String, Int32, String, Int32, Int32)
- uid: System.String.CompareOrdinal(System.String,System.String)
  commentId: M:System.String.CompareOrdinal(System.String,System.String)
  id: CompareOrdinal(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CompareOrdinal(String, String)
  fullName: System.String.CompareOrdinal(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareOrdinal
    path: src/mscorlib/src/System/String.cs
    startLine: 2160
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects by evaluating the numeric values of the corresponding <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in each string.</p>\n"
  syntax:
    content: public static int CompareOrdinal(string strA, string strB)
    content.vb: Public Shared Function CompareOrdinal(strA As String, strB As String) As Integer
    parameters:
    - id: strA
      type: System.String
      description: "\n<p>The first string to compare. </p>\n"
    - id: strB
      type: System.String
      description: "\n<p>The second string to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that indicates the lexical relationship between the two comparands.</p>\n<p>Value</p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>\n<em>strA</em> is less than <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>\n<em>strA</em> and <em>strB</em> are equal. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>\n<em>strA</em> is greater than <em>strB</em>. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.String.CompareTo(System.Object)
    commentId: M:System.String.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.CompareOrdinal(String, String)
- uid: System.String.CompareTo(System.String)
  commentId: M:System.String.CompareTo(System.String)
  id: CompareTo(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CompareTo(String)
  fullName: System.String.CompareTo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/String.cs
    startLine: 2149
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares this instance with a specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object and indicates whether this instance precedes, follows, or appears in the same position in the sort order as the specified string. </p>\n"
  syntax:
    content: public int CompareTo(string strB)
    content.vb: Public Function CompareTo(strB As String) As Integer
    parameters:
    - id: strB
      type: System.String
      description: "\n<p>The string to compare with this instance. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the <em>strB</em> parameter.</p>\n<p>Value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance precedes <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance has the same position in the sort order as <em>strB</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance follows <em>strB</em>.</p>\n<p>-or- </p>\n<p>\n<em>strB</em> is <strong>null</strong>. </p>\n</td></tr></tbody></table>\n"
  seealso:
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  implements:
  - System.IComparable{System.String}.CompareTo(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.CompareTo(String)
- uid: System.String.Concat(System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.String.Concat(System.Collections.Generic.IEnumerable{System.String})
  id: Concat(System.Collections.Generic.IEnumerable{System.String})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(IEnumerable<String>)
  fullName: System.String.Concat(System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3352
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static string Concat(IEnumerable<string> values)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function Concat(values As IEnumerable(Of String)) As String
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\n<p>A collection object that implements <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and whose generic type argument is <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated strings in <em>values</em>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>values</em> is an empty <strong>IEnumerable(Of String)</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Concat(IEnumerable(Of String))
  nameWithType: String.Concat(IEnumerable<String>)
  nameWithType.vb: String.Concat(IEnumerable(Of String))
- uid: System.String.Concat(System.Object)
  commentId: M:System.String.Concat(System.Object)
  id: Concat(System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object)
  fullName: System.String.Concat(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3221
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates the string  representation of a specified object.</p>\n"
  syntax:
    content: public static string Concat(object arg0)
    content.vb: Public Shared Function Concat(arg0 As Object) As String
    parameters:
    - id: arg0
      type: System.Object
      description: "\n<p>The object to represent, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of <em>arg0</em>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>arg0</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Concat(Object)
- uid: System.String.Concat(System.Object,System.Object)
  commentId: M:System.String.Concat(System.Object,System.Object)
  id: Concat(System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object, Object)
  fullName: System.String.Concat(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3232
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the string representations of two specified objects.</p>\n"
  syntax:
    content: public static string Concat(object arg0, object arg1)
    content.vb: Public Shared Function Concat(arg0 As Object, arg1 As Object) As String
    parameters:
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to concatenate. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated string representations of the values of <em>arg0</em> and <em>arg1</em>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Concat(Object, Object)
- uid: System.String.Concat(System.Object,System.Object,System.Object)
  commentId: M:System.String.Concat(System.Object,System.Object,System.Object)
  id: Concat(System.Object,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object, Object, Object)
  fullName: System.String.Concat(System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3247
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the string representations of three specified objects.</p>\n"
  syntax:
    content: public static string Concat(object arg0, object arg1, object arg2)
    content.vb: Public Shared Function Concat(arg0 As Object, arg1 As Object, arg2 As Object) As String
    parameters:
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to concatenate. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to concatenate. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated string representations of the values of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Concat(Object, Object, Object)
- uid: System.String.Concat(System.Object[])
  commentId: M:System.String.Concat(System.Object[])
  id: Concat(System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(Object[])
  fullName: System.String.Concat(System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3297
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the string representations of the elements in a specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string Concat(params object[] args)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Concat(ParamArray args As Object()) As String
    parameters:
    - id: args
      type: System.Object[]
      description: "\n<p>An object array that contains the elements to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated string representations of the values of the elements in <em>args</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(System.Object())
  name.vb: Concat(Object())
  nameWithType: String.Concat(Object[])
  nameWithType.vb: String.Concat(Object())
- uid: System.String.Concat(System.String,System.String)
  commentId: M:System.String.Concat(System.String,System.String)
  id: Concat(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String, String)
  fullName: System.String.Concat(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3369
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates two specified instances of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string Concat(string str0, string str1)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Concat(str0 As String, str1 As String) As String
    parameters:
    - id: str0
      type: System.String
      description: "\n<p>The first string to concatenate. </p>\n"
    - id: str1
      type: System.String
      description: "\n<p>The second string to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenation of <em>str0</em> and <em>str1</em>.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Concat(String, String)
- uid: System.String.Concat(System.String,System.String,System.String)
  commentId: M:System.String.Concat(System.String,System.String,System.String)
  id: Concat(System.String,System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String, String, String)
  fullName: System.String.Concat(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3398
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates three specified instances of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string Concat(string str0, string str1, string str2)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Concat(str0 As String, str1 As String, str2 As String) As String
    parameters:
    - id: str0
      type: System.String
      description: "\n<p>The first string to concatenate. </p>\n"
    - id: str1
      type: System.String
      description: "\n<p>The second string to concatenate. </p>\n"
    - id: str2
      type: System.String
      description: "\n<p>The third string to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenation of <em>str0</em>, <em>str1</em>, and <em>str2</em>.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Concat(String, String, String)
- uid: System.String.Concat(System.String,System.String,System.String,System.String)
  commentId: M:System.String.Concat(System.String,System.String,System.String,System.String)
  id: Concat(System.String,System.String,System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String, String, String, String)
  fullName: System.String.Concat(System.String, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3432
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates four specified instances of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string Concat(string str0, string str1, string str2, string str3)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Concat(str0 As String, str1 As String, str2 As String, str3 As String) As String
    parameters:
    - id: str0
      type: System.String
      description: "\n<p>The first string to concatenate. </p>\n"
    - id: str1
      type: System.String
      description: "\n<p>The second string to concatenate. </p>\n"
    - id: str2
      type: System.String
      description: "\n<p>The third string to concatenate. </p>\n"
    - id: str3
      type: System.String
      description: "\n<p>The fourth string to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenation of <em>str0</em>, <em>str1</em>, <em>str2</em>, and <em>str3</em>.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Concat(String, String, String, String)
- uid: System.String.Concat(System.String[])
  commentId: M:System.String.Concat(System.String[])
  id: Concat(System.String[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat(String[])
  fullName: System.String.Concat(System.String[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3473
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the elements of a specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string Concat(params string[] values)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Concat(ParamArray values As String()) As String
    parameters:
    - id: values
      type: System.String[]
      description: "\n<p>An array of string instances. </p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated elements of <em>values</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(System.String())
  name.vb: Concat(String())
  nameWithType: String.Concat(String[])
  nameWithType.vb: String.Concat(String())
- uid: System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.String.Concat``1(System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Concat<T>(IEnumerable<T>)
  fullName: System.String.Concat<T>(System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Concat
    path: src/mscorlib/src/System/String.cs
    startLine: 3331
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static string Concat<T>(IEnumerable<T> values)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function Concat(Of T)(values As IEnumerable(Of T)) As String
    parameters:
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection object that implements the <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the members of <em>values</em>.</p>\n"
    return:
      type: System.String
      description: "\n<p>The concatenated members in <em>values</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Concat(Of T)(IEnumerable(Of T))
  nameWithType: String.Concat<T>(IEnumerable<T>)
  nameWithType.vb: String.Concat(Of T)(IEnumerable(Of T))
- uid: System.String.Contains(System.String)
  commentId: M:System.String.Contains(System.String)
  id: Contains(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Contains(String)
  fullName: System.String.Contains(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/String.cs
    startLine: 2202
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether a specified substring occurs within this string.</p>\n"
  syntax:
    content: public bool Contains(string value)
    content.vb: Public Function Contains(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter occurs within this string, or if <em>value</em> is the empty string (\"\"); otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.String)
    commentId: M:System.String.LastIndexOf(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Contains(String)
- uid: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, Char[], Int32, Int32)
  fullName: System.String.CopyTo(System.Int32, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/String.cs
    startLine: 744
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a specified number of characters from a specified position in this instance to a specified position in an array of Unicode characters.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void CopyTo(int sourceIndex, char[] destination, int destinationIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub CopyTo(sourceIndex As Integer, destination As Char(), destinationIndex As Integer, count As Integer)
    parameters:
    - id: sourceIndex
      type: System.Int32
      description: "\n<p>The index of the first character in this instance to copy. </p>\n"
    - id: destination
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to which characters in this instance are copied. </p>\n"
    - id: destinationIndex
      type: System.Int32
      description: "\n<p>The index in <em>destination</em> at which the copy operation begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters in this instance to copy to <em>destination</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destination</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceIndex</em>, <em>destinationIndex</em>, or <em>count</em> is negative </p>\n<p>-or- </p>\n<p>\n<em>sourceIndex</em> does not identify a position in the current instance. </p>\n<p>-or-</p>\n<p>\n<em>destinationIndex</em> does not identify a valid index in the <em>destination</em> array. </p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of the substring from <em>startIndex</em> to the end of this instance </p>\n<p>-or- </p>\n<p>\n<em>count</em> is greater than the length of the subarray from <em>destinationIndex</em> to the end of the <em>destination</em> array. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.CopyTo(System.Int32, System.Char(), System.Int32, System.Int32)
  name.vb: CopyTo(Int32, Char(), Int32, Int32)
  nameWithType: String.CopyTo(Int32, Char[], Int32, Int32)
  nameWithType.vb: String.CopyTo(Int32, Char(), Int32, Int32)
- uid: System.String.EndsWith(System.String)
  commentId: M:System.String.EndsWith(System.String)
  id: EndsWith(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: EndsWith(String)
  fullName: System.String.EndsWith(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndsWith
    path: src/mscorlib/src/System/String.cs
    startLine: 2212
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the end of this string instance matches the specified string.</p>\n"
  syntax:
    content: public bool EndsWith(string value)
    content.vb: Public Function EndsWith(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to the substring at the end of this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> matches the end of this instance; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.StartsWith(System.String)
    commentId: M:System.String.StartsWith(System.String)
  - type: System.String.Compare(System.String,System.String)
    commentId: M:System.String.Compare(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.EndsWith(String)
- uid: System.String.EndsWith(System.String,System.StringComparison)
  commentId: M:System.String.EndsWith(System.String,System.StringComparison)
  id: EndsWith(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: EndsWith(String, StringComparison)
  fullName: System.String.EndsWith(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndsWith
    path: src/mscorlib/src/System/String.cs
    startLine: 2217
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the end of this string instance matches the specified string when compared using the specified comparison option.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(false)]

      public bool EndsWith(string value, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(False)>

      Public Function EndsWith(value As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to the substring at the end of this instance. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter matches the end of this string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.StringComparison
    commentId: T:System.StringComparison
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.EndsWith(String, StringComparison)
- uid: System.String.Equals(System.Object)
  commentId: M:System.String.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.String.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/String.cs
    startLine: 553
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this instance and a specified object, which must also be a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object, have the same value.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public override bool Equals(object obj)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The string to compare to this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and its value is the same as this instance; otherwise, <strong>false</strong>.  If <em>obj</em> is <strong>null</strong>, the method returns <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: String.Equals(Object)
- uid: System.String.Equals(System.String)
  commentId: M:System.String.Equals(System.String)
  id: Equals(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String)
  fullName: System.String.Equals(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/String.cs
    startLine: 573
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this instance and another specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object have the same value.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public bool Equals(string value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Function Equals(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to this instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as the value of this instance; otherwise, <strong>false</strong>. If <em>value</em> is <strong>null</strong>, the method returns <strong>false</strong>. </p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  implements:
  - System.IEquatable{System.String}.Equals(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Equals(String)
- uid: System.String.Equals(System.String,System.String)
  commentId: M:System.String.Equals(System.String,System.String)
  id: Equals(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String, String)
  fullName: System.String.Equals(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/String.cs
    startLine: 652
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects have the same value.</p>\n"
  syntax:
    content: public static bool Equals(string a, string b)
    content.vb: Public Shared Function Equals(a As String, b As String) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>. If both <em>a</em> and <em>b</em> are <strong>null</strong>, the method returns <strong>true</strong>.</p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Equals(String, String)
- uid: System.String.Equals(System.String,System.String,System.StringComparison)
  commentId: M:System.String.Equals(System.String,System.String,System.StringComparison)
  id: Equals(System.String,System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String, String, StringComparison)
  fullName: System.String.Equals(System.String, System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/String.cs
    startLine: 665
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> objects have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool Equals(string a, string b, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Equals(a As String, b As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the comparison. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <em>a</em> parameter is equal to the value of the <em>b</em> parameter; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Equals(String, String, StringComparison)
- uid: System.String.Equals(System.String,System.StringComparison)
  commentId: M:System.String.Equals(System.String,System.StringComparison)
  id: Equals(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equals(String, StringComparison)
  fullName: System.String.Equals(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/String.cs
    startLine: 596
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether this string and a specified <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object have the same value. A parameter specifies the culture, case, and sort rules used in the comparison.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public bool Equals(string value, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Equals(value As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare to this instance.</p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies how the strings will be compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the <em>value</em> parameter is the same as this string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  seealso:
  - type: System.String.CompareOrdinal(System.String,System.String)
    commentId: M:System.String.CompareOrdinal(System.String,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Equals(String, StringComparison)
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object)
  id: Format(System.IFormatProvider,System.String,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object)
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3164
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format item or items in a specified string with the string representation of the corresponding object. A parameter supplies culture-specific formatting information. </p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, object arg0)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format item or items have been replaced by the string representation of <em>arg0</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>arg0</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to one. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Format(IFormatProvider, String, Object)
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object)
  id: Format(System.IFormatProvider,System.String,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object, Object)
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3169
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of two specified objects. A parameter supplies culture-specific formatting information.</p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, object arg0, object arg1)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em>, <em>arg0</em>, or <em>arg1</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to two. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Format(IFormatProvider, String, Object, Object)
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  id: Format(System.IFormatProvider,System.String,System.Object,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object, Object, Object)
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3174
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of three specified objects. An parameter supplies culture-specific formatting information. </p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, object arg0, object arg1, object arg2)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em>, <em>arg0</em>, <em>arg1</em>, or <em>arg2</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to three. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Format(IFormatProvider, String, Object, Object, Object)
- uid: System.String.Format(System.IFormatProvider,System.String,System.Object[])
  commentId: M:System.String.Format(System.IFormatProvider,System.String,System.Object[])
  id: Format(System.IFormatProvider,System.String,System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(IFormatProvider, String, Object[])
  fullName: System.String.Format(System.IFormatProvider, System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3179
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. A parameter supplies culture-specific formatting information.</p>\n"
  syntax:
    content: public static string Format(IFormatProvider provider, string format, params object[] args)
    content.vb: Public Shared Function Format(provider As IFormatProvider, format As String, ParamArray args As Object()) As String
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that supplies culture-specific formatting information. </p>\n"
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An object array that contains zero or more objects to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array. </p>\n"
  seealso:
  - type: System.Globalization.DateTimeFormatInfo
    commentId: T:System.Globalization.DateTimeFormatInfo
  - type: System.ICustomFormatter
    commentId: T:System.ICustomFormatter
  - type: System.IFormatProvider
    commentId: T:System.IFormatProvider
  - type: System.Globalization.NumberFormatInfo
    commentId: T:System.Globalization.NumberFormatInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Format(System.IFormatProvider, System.String, System.Object())
  name.vb: Format(IFormatProvider, String, Object())
  nameWithType: String.Format(IFormatProvider, String, Object[])
  nameWithType.vb: String.Format(IFormatProvider, String, Object())
- uid: System.String.Format(System.String,System.Object)
  commentId: M:System.String.Format(System.String,System.Object)
  id: Format(System.String,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object)
  fullName: System.String.Format(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3136
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces one or more format items in a specified string with the string representation of a specified object.</p>\n"
  syntax:
    content: public static string Format(string format, object arg0)
    content.vb: Public Shared Function Format(format As String, arg0 As Object) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which any format items are replaced by the string representation of <em>arg0</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The format item in <em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is not zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Format(String, Object)
- uid: System.String.Format(System.String,System.Object,System.Object)
  commentId: M:System.String.Format(System.String,System.Object,System.Object)
  id: Format(System.String,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object, Object)
  fullName: System.String.Format(System.String, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3141
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of two specified objects.</p>\n"
  syntax:
    content: public static string Format(string format, object arg0, object arg1)
    content.vb: Public Shared Function Format(format As String, arg0 As Object, arg1 As Object) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string. </p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which format items are replaced by the string representations of <em>arg0</em> and <em>arg1</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is not zero or one. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Format(String, Object, Object)
- uid: System.String.Format(System.String,System.Object,System.Object,System.Object)
  commentId: M:System.String.Format(System.String,System.Object,System.Object,System.Object)
  id: Format(System.String,System.Object,System.Object,System.Object)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object, Object, Object)
  fullName: System.String.Format(System.String, System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3146
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format items in a specified string with the string representation of three specified objects.</p>\n"
  syntax:
    content: public static string Format(string format, object arg0, object arg1, object arg2)
    content.vb: Public Shared Function Format(format As String, arg0 As Object, arg1 As Object, arg2 As Object) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string.</p>\n"
    - id: arg0
      type: System.Object
      description: "\n<p>The first object to format. </p>\n"
    - id: arg1
      type: System.Object
      description: "\n<p>The second object to format. </p>\n"
    - id: arg2
      type: System.Object
      description: "\n<p>The third object to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representations of <em>arg0</em>, <em>arg1</em>, and <em>arg2</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than two. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Format(String, Object, Object, Object)
- uid: System.String.Format(System.String,System.Object[])
  commentId: M:System.String.Format(System.String,System.Object[])
  id: Format(System.String,System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Format(String, Object[])
  fullName: System.String.Format(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/String.cs
    startLine: 3151
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Replaces the format item in a specified string with the string representation of a corresponding object in a specified array.</p>\n"
  syntax:
    content: public static string Format(string format, params object[] args)
    content.vb: Public Shared Function Format(format As String, ParamArray args As Object()) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A composite format string.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An object array that contains zero or more objects to format. </p>\n"
    return:
      type: System.String
      description: "\n<p>A copy of <em>format</em> in which the format items have been replaced by the string representation of the corresponding objects in <em>args</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>format</em> or <em>args</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>format</em> is invalid.</p>\n<p>-or- </p>\n<p>The index of a format item is less than zero, or greater than or equal to the length of the <em>args</em> array. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Format(System.String, System.Object())
  name.vb: Format(String, Object())
  nameWithType: String.Format(String, Object[])
  nameWithType.vb: String.Format(String, Object())
- uid: System.String.GetHashCode
  commentId: M:System.String.GetHashCode
  id: GetHashCode
  parent: System.String
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.String.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/String.cs
    startLine: 854
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this string.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  seealso:
  - type: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: String.GetHashCode()
- uid: System.String.IndexOf(System.Char)
  commentId: M:System.String.IndexOf(System.Char)
  id: IndexOf(System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(Char)
  fullName: System.String.IndexOf(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2299
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string.</p>\n"
  syntax:
    content: public int IndexOf(char value)
    content.vb: Public Function IndexOf(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A Unicode character to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(Char)
- uid: System.String.IndexOf(System.Char,System.Int32)
  commentId: M:System.String.IndexOf(System.Char,System.Int32)
  id: IndexOf(System.Char,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32)
  fullName: System.String.IndexOf(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2304
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified Unicode character in this string. The search starts at a specified character position.</p>\n"
  syntax:
    content: public int IndexOf(char value, int startIndex)
    content.vb: Public Function IndexOf(value As Char, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than 0 (zero) or greater than the length of the string. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(Char, Int32)
- uid: System.String.IndexOf(System.Char,System.Int32,System.Int32)
  commentId: M:System.String.IndexOf(System.Char,System.Int32,System.Int32)
  id: IndexOf(System.Char,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(Char, Int32, Int32)
  fullName: System.String.IndexOf(System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2309
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified character in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int IndexOf(char value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function IndexOf(value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>A Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the string if that character is found, or -1 if it is not.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the length of this string.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(Char, Int32, Int32)
- uid: System.String.IndexOf(System.String)
  commentId: M:System.String.IndexOf(System.String)
  id: IndexOf(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String)
  fullName: System.String.IndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2376
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance.</p>\n"
  syntax:
    content: public int IndexOf(string value)
    content.vb: Public Function IndexOf(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is 0.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(String)
- uid: System.String.IndexOf(System.String,System.Int32)
  commentId: M:System.String.IndexOf(System.String,System.Int32)
  id: IndexOf(System.String,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32)
  fullName: System.String.IndexOf(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2385
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position.</p>\n"
  syntax:
    content: public int IndexOf(string value, int startIndex)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(String, Int32)
- uid: System.String.IndexOf(System.String,System.Int32,System.Int32)
  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32)
  id: IndexOf(System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32, Int32)
  fullName: System.String.IndexOf(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2394
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in this instance. The search starts at a specified character position and examines a specified number of character positions.</p>\n"
  syntax:
    content: public int IndexOf(string value, int startIndex, int count)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the length of this string.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Globalization.CultureInfo
    commentId: T:System.Globalization.CultureInfo
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(String, Int32, Int32)
- uid: System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  commentId: M:System.String.IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  id: IndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32, Int32, StringComparison)
  fullName: System.String.IndexOf(System.String, System.Int32, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2418
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. Parameters specify the starting search position in the current string, the number of characters in the current string to search, and the type of search to use for the specified string.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int IndexOf(string value, int startIndex, int count, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function IndexOf(value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the <em>value</em> parameter from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is greater than the length of this string minus <em>startIndex</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(String, Int32, Int32, StringComparison)
- uid: System.String.IndexOf(System.String,System.Int32,System.StringComparison)
  commentId: M:System.String.IndexOf(System.String,System.Int32,System.StringComparison)
  id: IndexOf(System.String,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, Int32, StringComparison)
  fullName: System.String.IndexOf(System.String, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2413
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. Parameters specify the starting search position in the current string and the type of search to use for the specified string.</p>\n"
  syntax:
    content: public int IndexOf(string value, int startIndex, StringComparison comparisonType)
    content.vb: Public Function IndexOf(value As String, startIndex As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the <em>value</em> parameter from the start of the current instance if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than 0 (zero) or greater than the length of this string. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(String, Int32, StringComparison)
- uid: System.String.IndexOf(System.String,System.StringComparison)
  commentId: M:System.String.IndexOf(System.String,System.StringComparison)
  id: IndexOf(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOf(String, StringComparison)
  fullName: System.String.IndexOf(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2408
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence of the specified string in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. A parameter specifies the type of search to use for the specified string.</p>\n"
  syntax:
    content: public int IndexOf(string value, StringComparison comparisonType)
    content.vb: Public Function IndexOf(value As String, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the <em>value</em> parameter if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is 0.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.IndexOf(String, StringComparison)
- uid: System.String.IndexOfAny(System.Char[])
  commentId: M:System.String.IndexOfAny(System.Char[])
  id: IndexOfAny(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOfAny(Char[])
  fullName: System.String.IndexOfAny(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOfAny
    path: src/mscorlib/src/System/String.cs
    startLine: 2355
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters.</p>\n"
  syntax:
    content: public int IndexOfAny(char[] anyOf)
    content.vb: Public Function IndexOfAny(anyOf As Char()) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.IndexOfAny(System.Char())
  name.vb: IndexOfAny(Char())
  nameWithType: String.IndexOfAny(Char[])
  nameWithType.vb: String.IndexOfAny(Char())
- uid: System.String.IndexOfAny(System.Char[],System.Int32)
  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32)
  id: IndexOfAny(System.Char[],System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOfAny(Char[], Int32)
  fullName: System.String.IndexOfAny(System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOfAny
    path: src/mscorlib/src/System/String.cs
    startLine: 2360
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position.</p>\n"
  syntax:
    content: public int IndexOfAny(char[] anyOf, int startIndex)
    content.vb: Public Function IndexOfAny(anyOf As Char(), startIndex As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> is greater than the number of characters in this instance. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.IndexOfAny(System.Char(), System.Int32)
  name.vb: IndexOfAny(Char(), Int32)
  nameWithType: String.IndexOfAny(Char[], Int32)
  nameWithType.vb: String.IndexOfAny(Char(), Int32)
- uid: System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.IndexOfAny(System.Char[],System.Int32,System.Int32)
  id: IndexOfAny(System.Char[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IndexOfAny(Char[], Int32, Int32)
  fullName: System.String.IndexOfAny(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the first occurrence in this instance of any character in a specified array of Unicode characters. The search starts at a specified character position and examines a specified number of character positions.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public int IndexOfAny(char[] anyOf, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Function IndexOfAny(anyOf As Char(), startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of the first occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>\n<em>count</em> + <em>startIndex</em> is greater than the number of characters in this instance. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.IndexOfAny(System.Char(), System.Int32, System.Int32)
  name.vb: IndexOfAny(Char(), Int32, Int32)
  nameWithType: String.IndexOfAny(Char[], Int32, Int32)
  nameWithType.vb: String.IndexOfAny(Char(), Int32, Int32)
- uid: System.String.Insert(System.Int32,System.String)
  commentId: M:System.String.Insert(System.Int32,System.String)
  id: Insert(System.Int32,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Insert(Int32, String)
  fullName: System.String.Insert(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/String.cs
    startLine: 2953
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which a specified string is inserted at a specified index position in this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string Insert(int startIndex, string value)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Insert(startIndex As Integer, value As String) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index position of the insertion. </p>\n"
    - id: value
      type: System.String
      description: "\n<p>The string to insert. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but with <em>value</em> inserted at position <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is negative or greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
    commentId: M:System.String.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Insert(Int32, String)
- uid: System.String.IsNullOrEmpty(System.String)
  commentId: M:System.String.IsNullOrEmpty(System.String)
  id: IsNullOrEmpty(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IsNullOrEmpty(String)
  fullName: System.String.IsNullOrEmpty(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsNullOrEmpty
    path: src/mscorlib/src/System/String.cs
    startLine: 818
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the specified string is <strong>null</strong> or an <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> string.</p>\n"
  syntax:
    content: public static bool IsNullOrEmpty(string value)
    content.vb: Public Shared Function IsNullOrEmpty(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to test. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter is <strong>null</strong> or an empty string (\"\"); otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.String.IsNullOrWhiteSpace(System.String)
    commentId: M:System.String.IsNullOrWhiteSpace(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.IsNullOrEmpty(String)
- uid: System.String.IsNullOrWhiteSpace(System.String)
  commentId: M:System.String.IsNullOrWhiteSpace(System.String)
  id: IsNullOrWhiteSpace(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: IsNullOrWhiteSpace(String)
  fullName: System.String.IsNullOrWhiteSpace(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsNullOrWhiteSpace
    path: src/mscorlib/src/System/String.cs
    startLine: 823
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a specified string is <strong>null</strong>, empty, or consists only of white-space characters.</p>\n"
  syntax:
    content: public static bool IsNullOrWhiteSpace(string value)
    content.vb: Public Shared Function IsNullOrWhiteSpace(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to test.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>value</em> parameter is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, or if <em>value</em> consists exclusively of white-space characters. </p>\n"
  seealso:
  - type: System.String.IsNullOrEmpty(System.String)
    commentId: M:System.String.IsNullOrEmpty(System.String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.IsNullOrWhiteSpace(String)
- uid: System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  commentId: M:System.String.Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  id: Join(System.String,System.Collections.Generic.IEnumerable{System.String})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, IEnumerable<String>)
  fullName: System.String.Join(System.String, System.Collections.Generic.IEnumerable<System.String>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Join
    path: src/mscorlib/src/System/String.cs
    startLine: 140
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of a constructed <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> collection of type <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, using the specified separator between each member.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static string Join(string separator, IEnumerable<string> values)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function Join(separator As String, values As IEnumerable(Of String)) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\n"
    - id: values
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "\n<p>A collection that contains the strings to concatenate.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the members of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Join(String, IEnumerable(Of String))
  nameWithType: String.Join(String, IEnumerable<String>)
  nameWithType.vb: String.Join(String, IEnumerable(Of String))
- uid: System.String.Join(System.String,System.Object[])
  commentId: M:System.String.Join(System.String,System.Object[])
  id: Join(System.String,System.Object[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, Object[])
  fullName: System.String.Join(System.String, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Join
    path: src/mscorlib/src/System/String.cs
    startLine: 86
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the elements of an object array, using the specified separator between each element.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static string Join(string separator, params object[] values)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function Join(separator As String, ParamArray values As Object()) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\n"
    - id: values
      type: System.Object[]
      description: "\n<p>An array that contains the elements to concatenate.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the elements of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> is an empty array, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.Object())
  name.vb: Join(String, Object())
  nameWithType: String.Join(String, Object[])
  nameWithType.vb: String.Join(String, Object())
- uid: System.String.Join(System.String,System.String[])
  commentId: M:System.String.Join(System.String,System.String[])
  id: Join(System.String,System.String[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, String[])
  fullName: System.String.Join(System.String, System.String[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Join
    path: src/mscorlib/src/System/String.cs
    startLine: 79
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates all the elements of a string array, using the specified separator between each element. </p>\n"
  syntax:
    content: public static string Join(string separator, params string[] value)
    content.vb: Public Shared Function Join(separator As String, ParamArray value As String()) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator. <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\n"
    - id: value
      type: System.String[]
      description: "\n<p>An array that contains the elements to concatenate. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the elements in <em>value</em> delimited by the <em>separator</em> string. If <em>value</em> is an empty array, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.String())
  name.vb: Join(String, String())
  nameWithType: String.Join(String, String[])
  nameWithType.vb: String.Join(String, String())
- uid: System.String.Join(System.String,System.String[],System.Int32,System.Int32)
  commentId: M:System.String.Join(System.String,System.String[],System.Int32,System.Int32)
  id: Join(System.String,System.String[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join(String, String[], Int32, Int32)
  fullName: System.String.Join(System.String, System.String[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Join
    path: src/mscorlib/src/System/String.cs
    startLine: 183
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the specified elements of a string array, using the specified separator between each element. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static string Join(string separator, string[] value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Join(separator As String, value As String(), startIndex As Integer, count As Integer) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator. <em>separator</em> is included in the returned string only if <em>value</em> has more than one element.</p>\n"
    - id: value
      type: System.String[]
      description: "\n<p>An array that contains the elements to concatenate. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The first element in <em>value</em> to use. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements of <em>value</em> to use. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the strings in <em>value</em> delimited by the <em>separator</em> string. </p>\n<p>-or-</p>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>count</em> is zero, <em>value</em> has no elements, or <em>separator</em> and all the elements of <em>value</em> are <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>count</em> is less than 0.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>count</em> is greater than the number of elements in <em>value</em>. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(System.String, System.String(), System.Int32, System.Int32)
  name.vb: Join(String, String(), Int32, Int32)
  nameWithType: String.Join(String, String[], Int32, Int32)
  nameWithType.vb: String.Join(String, String(), Int32, Int32)
- uid: System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.String.Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  id: Join``1(System.String,System.Collections.Generic.IEnumerable{``0})
  parent: System.String
  langs:
  - csharp
  - vb
  name: Join<T>(String, IEnumerable<T>)
  fullName: System.String.Join<T>(System.String, System.Collections.Generic.IEnumerable<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Join
    path: src/mscorlib/src/System/String.cs
    startLine: 108
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Concatenates the members of a collection, using the specified separator between each member.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static string Join<T>(string separator, IEnumerable<T> values)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function Join(Of T)(separator As String, values As IEnumerable(Of T)) As String
    parameters:
    - id: separator
      type: System.String
      description: "\n<p>The string to use as a separator.<em>separator</em> is included in the returned string only if <em>values</em> has more than one element.</p>\n"
    - id: values
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>A collection that contains the objects to concatenate.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the members of <em>values</em>.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string that consists of the members of <em>values</em> delimited by the <em>separator</em> string. If <em>values</em> has no members, the method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.String.Join(Of T)(System.String, System.Collections.Generic.IEnumerable(Of T))
  name.vb: Join(Of T)(String, IEnumerable(Of T))
  nameWithType: String.Join<T>(String, IEnumerable<T>)
  nameWithType.vb: String.Join(Of T)(String, IEnumerable(Of T))
- uid: System.String.LastIndexOf(System.Char)
  commentId: M:System.String.LastIndexOf(System.Char)
  id: LastIndexOf(System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(Char)
  fullName: System.String.LastIndexOf(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2464
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance.</p>\n"
  syntax:
    content: public int LastIndexOf(char value)
    content.vb: Public Function LastIndexOf(value As Char) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(Char)
- uid: System.String.LastIndexOf(System.Char,System.Int32)
  commentId: M:System.String.LastIndexOf(System.Char,System.Int32)
  id: LastIndexOf(System.Char,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(Char, Int32)
  fullName: System.String.LastIndexOf(System.Char, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2469
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified Unicode character within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n"
  syntax:
    content: public int LastIndexOf(char value, int startIndex)
    content.vb: Public Function LastIndexOf(value As Char, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the search. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than or equal to the length of this instance.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(Char, Int32)
- uid: System.String.LastIndexOf(System.Char,System.Int32,System.Int32)
  commentId: M:System.String.LastIndexOf(System.Char,System.Int32,System.Int32)
  id: LastIndexOf(System.Char,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(Char, Int32, Int32)
  fullName: System.String.LastIndexOf(System.Char, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2474
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of the specified Unicode character in a substring within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int LastIndexOf(char value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function LastIndexOf(value As Char, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Char
      description: "\n<p>The Unicode character to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of the search. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index position of <em>value</em> if that character is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than or equal to the length of this instance.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> - <em>count</em> + 1 is less than zero.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(Char, Int32, Int32)
- uid: System.String.LastIndexOf(System.String)
  commentId: M:System.String.LastIndexOf(System.String)
  id: LastIndexOf(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String)
  fullName: System.String.LastIndexOf(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2549
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance.</p>\n"
  syntax:
    content: public int LastIndexOf(string value)
    content.vb: Public Function LastIndexOf(value As String) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(String)
- uid: System.String.LastIndexOf(System.String,System.Int32)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32)
  id: LastIndexOf(System.String,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32)
  fullName: System.String.LastIndexOf(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2554
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n"
  syntax:
    content: public int LastIndexOf(string value, int startIndex)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than the length of the current instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than -1 or greater than zero.</p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(String, Int32)
- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32)
  id: LastIndexOf(System.String,System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32, Int32)
  fullName: System.String.LastIndexOf(System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2559
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n"
  syntax:
    content: public int LastIndexOf(string value, int startIndex, int count)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of <em>value</em> if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> - <em>count</em>+ 1 specifies a position that is not within this instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>start</em> is less than -1 or greater than zero. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>count</em> is greater than 1. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOfAny(System.Char[])
    commentId: M:System.String.LastIndexOfAny(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(String, Int32, Int32)
- uid: System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  id: LastIndexOf(System.String,System.Int32,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32, Int32, StringComparison)
  fullName: System.String.LastIndexOf(System.String, System.Int32, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2579
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence of a specified string within this instance. The search starts at a specified character position and proceeds backward toward the beginning of the string for the specified number of character positions. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public int LastIndexOf(string value, int startIndex, int count, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function LastIndexOf(value As String, startIndex As Integer, count As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is greater than the length of this instance.</p>\n<p>-or-</p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> + 1 - <em>count</em> specifies a position that is not within this instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>start</em> is less than -1 or greater than zero. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> and <em>count</em> is greater than 1. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(String, Int32, Int32, StringComparison)
- uid: System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)
  commentId: M:System.String.LastIndexOf(System.String,System.Int32,System.StringComparison)
  id: LastIndexOf(System.String,System.Int32,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, Int32, StringComparison)
  fullName: System.String.LastIndexOf(System.String, System.Int32, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2574
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. The search starts at a specified character position and proceeds backward toward the beginning of the string. A parameter specifies the type of comparison to perform when searching for the specified string.</p>\n"
  syntax:
    content: public int LastIndexOf(string value, int startIndex, StringComparison comparisonType)
    content.vb: Public Function LastIndexOf(value As String, startIndex As Integer, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the smaller of <em>startIndex</em> and the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than zero or greater than the length of the current instance. </p>\n<p>-or-</p>\n<p>The current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> is less than -1 or greater than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(String, Int32, StringComparison)
- uid: System.String.LastIndexOf(System.String,System.StringComparison)
  commentId: M:System.String.LastIndexOf(System.String,System.StringComparison)
  id: LastIndexOf(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOf(String, StringComparison)
  fullName: System.String.LastIndexOf(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/String.cs
    startLine: 2569
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index of the last occurrence of a specified string within the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. A parameter specifies the type of search to use for the specified string.</p>\n"
  syntax:
    content: public int LastIndexOf(string value, StringComparison comparisonType)
    content.vb: Public Function LastIndexOf(value As String, comparisonType As StringComparison) As Integer
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to seek. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that specifies the rules for the search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based starting index position of the <em>value</em> parameter if that string is found, or -1 if it is not. If <em>value</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, the return value is the last index position in this instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a valid <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.LastIndexOf(String, StringComparison)
- uid: System.String.LastIndexOfAny(System.Char[])
  commentId: M:System.String.LastIndexOfAny(System.Char[])
  id: LastIndexOfAny(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOfAny(Char[])
  fullName: System.String.LastIndexOfAny(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOfAny
    path: src/mscorlib/src/System/String.cs
    startLine: 2528
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array.</p>\n"
  syntax:
    content: public int LastIndexOfAny(char[] anyOf)
    content.vb: Public Function LastIndexOfAny(anyOf As Char()) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.LastIndexOfAny(System.Char())
  name.vb: LastIndexOfAny(Char())
  nameWithType: String.LastIndexOfAny(Char[])
  nameWithType.vb: String.LastIndexOfAny(Char())
- uid: System.String.LastIndexOfAny(System.Char[],System.Int32)
  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32)
  id: LastIndexOfAny(System.Char[],System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOfAny(Char[], Int32)
  fullName: System.String.LastIndexOfAny(System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOfAny
    path: src/mscorlib/src/System/String.cs
    startLine: 2533
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string.</p>\n"
  syntax:
    content: public int LastIndexOfAny(char[] anyOf, int startIndex)
    content.vb: Public Function LastIndexOfAny(anyOf As Char(), startIndex As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> specifies a position that is not within this instance. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.LastIndexOfAny(System.Char(), System.Int32)
  name.vb: LastIndexOfAny(Char(), Int32)
  nameWithType: String.LastIndexOfAny(Char[], Int32)
  nameWithType.vb: String.LastIndexOfAny(Char(), Int32)
- uid: System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  commentId: M:System.String.LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  id: LastIndexOfAny(System.Char[],System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: LastIndexOfAny(Char[], Int32, Int32)
  fullName: System.String.LastIndexOfAny(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reports the zero-based index position of the last occurrence in this instance of one or more characters specified in a Unicode array. The search starts at a specified character position and proceeds backward toward the beginning of the string for a specified number of character positions.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public int LastIndexOfAny(char[] anyOf, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Function LastIndexOfAny(anyOf As Char(), startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: anyOf
      type: System.Char[]
      description: "\n<p>A Unicode character array containing one or more characters to seek. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The search starting position. The search proceeds from <em>startIndex</em> toward the beginning of this instance.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of character positions to examine. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index position of the last occurrence in this instance where any character in <em>anyOf</em> was found; -1 if no character in <em>anyOf</em> was found or if the current instance equals <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>anyOf</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>count</em> or <em>startIndex</em> is negative.</p>\n<p>-or- </p>\n<p>The current instance does not equal <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, and <em>startIndex</em> minus <em>count</em> + 1 is less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.Array
    commentId: T:System.Array
  - type: System.String.IndexOf(System.Char)
    commentId: M:System.String.IndexOf(System.Char)
  - type: System.String.IndexOfAny(System.Char[])
    commentId: M:System.String.IndexOfAny(System.Char[])
  - type: System.String.LastIndexOf(System.Char)
    commentId: M:System.String.LastIndexOf(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.LastIndexOfAny(System.Char(), System.Int32, System.Int32)
  name.vb: LastIndexOfAny(Char(), Int32, Int32)
  nameWithType: String.LastIndexOfAny(Char[], Int32, Int32)
  nameWithType.vb: String.LastIndexOfAny(Char(), Int32, Int32)
- uid: System.String.op_Equality(System.String,System.String)
  commentId: M:System.String.op_Equality(System.String,System.String)
  id: op_Equality(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Equality(String, String)
  fullName: System.String.Equality(System.String, System.String)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/String.cs
    startLine: 721
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified strings have the same value.</p>\n"
  syntax:
    content: public static bool operator ==(string a, string b)
    content.vb: Public Shared Operator =(a As String, b As String) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>a</em> is the same as the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Equality(String, String)
- uid: System.String.op_Inequality(System.String,System.String)
  commentId: M:System.String.op_Inequality(System.String,System.String)
  id: op_Inequality(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Inequality(String, String)
  fullName: System.String.Inequality(System.String, System.String)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/String.cs
    startLine: 725
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified strings have different values.</p>\n"
  syntax:
    content: public static bool operator !=(string a, string b)
    content.vb: Public Shared Operator <>(a As String, b As String) As Boolean
    parameters:
    - id: a
      type: System.String
      description: "\n<p>The first string to compare, or <strong>null</strong>. </p>\n"
    - id: b
      type: System.String
      description: "\n<p>The second string to compare, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>a</em> is different from the value of <em>b</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: String.Inequality(String, String)
- uid: System.String.PadLeft(System.Int32)
  commentId: M:System.String.PadLeft(System.Int32)
  id: PadLeft(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadLeft(Int32)
  fullName: System.String.PadLeft(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PadLeft
    path: src/mscorlib/src/System/String.cs
    startLine: 2638
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that right-aligns the characters in this instance by padding them with spaces on the left, for a specified total length.</p>\n"
  syntax:
    content: public string PadLeft(int totalWidth)
    content.vb: Public Function PadLeft(totalWidth As Integer) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many spaces as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadRight(System.Int32)
    commentId: M:System.String.PadRight(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.PadLeft(Int32)
- uid: System.String.PadLeft(System.Int32,System.Char)
  commentId: M:System.String.PadLeft(System.Int32,System.Char)
  id: PadLeft(System.Int32,System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadLeft(Int32, Char)
  fullName: System.String.PadLeft(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PadLeft
    path: src/mscorlib/src/System/String.cs
    startLine: 2643
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that right-aligns the characters in this instance by padding them on the left with a specified Unicode character, for a specified total length.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string PadLeft(int totalWidth, char paddingChar)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function PadLeft(totalWidth As Integer, paddingChar As Char) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    - id: paddingChar
      type: System.Char
      description: "\n<p>A Unicode padding character. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but right-aligned and padded on the left with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadRight(System.Int32)
    commentId: M:System.String.PadRight(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.PadLeft(Int32, Char)
- uid: System.String.PadRight(System.Int32)
  commentId: M:System.String.PadRight(System.Int32)
  id: PadRight(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadRight(Int32)
  fullName: System.String.PadRight(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PadRight
    path: src/mscorlib/src/System/String.cs
    startLine: 2668
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that left-aligns the characters in this string by padding them with spaces on the right, for a specified total length.</p>\n"
  syntax:
    content: public string PadRight(int totalWidth)
    content.vb: Public Function PadRight(totalWidth As Integer) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many spaces as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadLeft(System.Int32)
    commentId: M:System.String.PadLeft(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.PadRight(Int32)
- uid: System.String.PadRight(System.Int32,System.Char)
  commentId: M:System.String.PadRight(System.Int32,System.Char)
  id: PadRight(System.Int32,System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: PadRight(Int32, Char)
  fullName: System.String.PadRight(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PadRight
    path: src/mscorlib/src/System/String.cs
    startLine: 2673
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string that left-aligns the characters in this string by padding them on the right with a specified Unicode character, for a specified total length.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string PadRight(int totalWidth, char paddingChar)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function PadRight(totalWidth As Integer, paddingChar As Char) As String
    parameters:
    - id: totalWidth
      type: System.Int32
      description: "\n<p>The number of characters in the resulting string, equal to the number of original characters plus any additional padding characters. </p>\n"
    - id: paddingChar
      type: System.Char
      description: "\n<p>A Unicode padding character. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance, but left-aligned and padded on the right with as many <em>paddingChar</em> characters as needed to create a length of <em>totalWidth</em>. However, if <em>totalWidth</em> is less than the length of this instance, the method returns a reference to the existing instance. If <em>totalWidth</em> is equal to the length of this instance, the method returns a new string that is identical to this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>totalWidth</em> is less than zero. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.PadLeft(System.Int32)
    commentId: M:System.String.PadLeft(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.PadRight(Int32, Char)
- uid: System.String.Remove(System.Int32)
  commentId: M:System.String.Remove(System.Int32)
  id: Remove(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Remove(Int32)
  fullName: System.String.Remove(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/String.cs
    startLine: 3119
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which all the characters in the current instance, beginning at a specified position and continuing through the last position, have been deleted.</p>\n"
  syntax:
    content: public string Remove(int startIndex)
    content.vb: Public Function Remove(startIndex As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based position to begin deleting characters. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this string except for the removed characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> specifies a position that is not within this string. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Remove(Int32)
- uid: System.String.Remove(System.Int32,System.Int32)
  commentId: M:System.String.Remove(System.Int32,System.Int32)
  id: Remove(System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Remove(Int32, Int32)
  fullName: System.String.Remove(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/String.cs
    startLine: 3081
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which a specified number of characters in the current instance beginning at a specified position have been deleted.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string Remove(int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Remove(startIndex As Integer, count As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based position to begin deleting characters. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to delete. </p>\n"
    return:
      type: System.String
      description: "\n<p>A new string that is equivalent to this instance except for the removed characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Either <em>startIndex</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>count</em> specify a position outside this instance. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Remove(Int32, Int32)
- uid: System.String.Replace(System.Char,System.Char)
  commentId: M:System.String.Replace(System.Char,System.Char)
  id: Replace(System.Char,System.Char)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Replace(Char, Char)
  fullName: System.String.Replace(System.Char, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/String.cs
    startLine: 2995
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which all occurrences of a specified Unicode character in this instance are replaced with another specified Unicode character.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string Replace(char oldChar, char newChar)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Replace(oldChar As Char, newChar As Char) As String
    parameters:
    - id: oldChar
      type: System.Char
      description: "\n<p>The Unicode character to be replaced. </p>\n"
    - id: newChar
      type: System.Char
      description: "\n<p>The Unicode character to replace all occurrences of <em>oldChar</em>. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to this instance except that all instances of <em>oldChar</em> are replaced with <em>newChar</em>. If <em>oldChar</em> is not found in the current instance, the method returns the current instance unchanged. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Replace(Char, Char)
- uid: System.String.Replace(System.String,System.String)
  commentId: M:System.String.Replace(System.String,System.String)
  id: Replace(System.String,System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Replace(String, String)
  fullName: System.String.Replace(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Replace
    path: src/mscorlib/src/System/String.cs
    startLine: 3070
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a new string in which all occurrences of a specified string in the current instance are replaced with another specified string.</p>\n"
  syntax:
    content: public string Replace(string oldValue, string newValue)
    content.vb: Public Function Replace(oldValue As String, newValue As String) As String
    parameters:
    - id: oldValue
      type: System.String
      description: "\n<p>The string to be replaced. </p>\n"
    - id: newValue
      type: System.String
      description: "\n<p>The string to replace all occurrences of <em>oldValue</em>. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to the current string except that all instances of <em>oldValue</em> are replaced with <em>newValue</em>. If <em>oldValue</em> is not found in the current instance, the method returns the current instance unchanged. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>oldValue</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>oldValue</em> is the empty string (\"\"). </p>\n"
  seealso:
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Replace(String, String)
- uid: System.String.Split(System.Char[])
  commentId: M:System.String.Split(System.Char[])
  id: Split(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[])
  fullName: System.String.Split(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Split
    path: src/mscorlib/src/System/String.cs
    startLine: 995
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into substrings that are based on the characters in an array. </p>\n"
  syntax:
    content: public string[] Split(params char[] separator)
    content.vb: Public Function Split(ParamArray separator As Char()) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings from this instance that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char())
  name.vb: Split(Char())
  nameWithType: String.Split(Char[])
  nameWithType.vb: String.Split(Char())
- uid: System.String.Split(System.Char[],System.Int32)
  commentId: M:System.String.Split(System.Char[],System.Int32)
  id: Split(System.Char[],System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[], Int32)
  fullName: System.String.Split(System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Split
    path: src/mscorlib/src/System/String.cs
    startLine: 1011
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into a maximum number of substrings based on the characters in an array. You also specify the maximum number of substrings to return.</p>\n"
  syntax:
    content: public string[] Split(char[] separator, int count)
    content.vb: Public Function Split(separator As Char(), count As Integer) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of substrings to return. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this instance that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Array
    commentId: T:System.Array
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Substring(System.Int32)
    commentId: M:System.String.Substring(System.Int32)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char(), System.Int32)
  name.vb: Split(Char(), Int32)
  nameWithType: String.Split(Char[], Int32)
  nameWithType.vb: String.Split(Char(), Int32)
- uid: System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)
  commentId: M:System.String.Split(System.Char[],System.Int32,System.StringSplitOptions)
  id: Split(System.Char[],System.Int32,System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[], Int32, StringSplitOptions)
  fullName: System.String.Split(System.Char[], System.Int32, System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Split
    path: src/mscorlib/src/System/String.cs
    startLine: 1022
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into a maximum number of substrings based on the characters in an array.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public string[] Split(char[] separator, int count, StringSplitOptions options)
    content.vb: >-
      <ComVisible(False)>

      Public Function Split(separator As Char(), count As Integer, options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of substrings to return. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char(), System.Int32, System.StringSplitOptions)
  name.vb: Split(Char(), Int32, StringSplitOptions)
  nameWithType: String.Split(Char[], Int32, StringSplitOptions)
  nameWithType.vb: String.Split(Char(), Int32, StringSplitOptions)
- uid: System.String.Split(System.Char[],System.StringSplitOptions)
  commentId: M:System.String.Split(System.Char[],System.StringSplitOptions)
  id: Split(System.Char[],System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(Char[], StringSplitOptions)
  fullName: System.String.Split(System.Char[], System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Split
    path: src/mscorlib/src/System/String.cs
    startLine: 1016
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into substrings based on the characters in an array. You can specify whether the substrings include empty array elements.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public string[] Split(char[] separator, StringSplitOptions options)
    content.vb: >-
      <ComVisible(False)>

      Public Function Split(separator As Char(), options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.Char[]
      description: "\n<p>A character array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more characters in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.Char(), System.StringSplitOptions)
  name.vb: Split(Char(), StringSplitOptions)
  nameWithType: String.Split(Char[], StringSplitOptions)
  nameWithType.vb: String.Split(Char(), StringSplitOptions)
- uid: System.String.Split(System.String[],System.Int32,System.StringSplitOptions)
  commentId: M:System.String.Split(System.String[],System.Int32,System.StringSplitOptions)
  id: Split(System.String[],System.Int32,System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(String[], Int32, StringSplitOptions)
  fullName: System.String.Split(System.String[], System.Int32, System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Split
    path: src/mscorlib/src/System/String.cs
    startLine: 1083
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into a maximum number of substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public string[] Split(string[] separator, int count, StringSplitOptions options)
    content.vb: >-
      <ComVisible(False)>

      Public Function Split(separator As String(), count As Integer, options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.String[]
      description: "\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of substrings to return. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is negative. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.String(), System.Int32, System.StringSplitOptions)
  name.vb: Split(String(), Int32, StringSplitOptions)
  nameWithType: String.Split(String[], Int32, StringSplitOptions)
  nameWithType.vb: String.Split(String(), Int32, StringSplitOptions)
- uid: System.String.Split(System.String[],System.StringSplitOptions)
  commentId: M:System.String.Split(System.String[],System.StringSplitOptions)
  id: Split(System.String[],System.StringSplitOptions)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Split(String[], StringSplitOptions)
  fullName: System.String.Split(System.String[], System.StringSplitOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Split
    path: src/mscorlib/src/System/String.cs
    startLine: 1077
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Splits a string into substrings based on the strings in an array. You can specify whether the substrings include empty array elements.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public string[] Split(string[] separator, StringSplitOptions options)
    content.vb: >-
      <ComVisible(False)>

      Public Function Split(separator As String(), options As StringSplitOptions) As String()
    parameters:
    - id: separator
      type: System.String[]
      description: "\n<p>A string array that delimits the substrings in this string, an empty array that contains no delimiters, or <strong>null</strong>. </p>\n"
    - id: options
      type: System.StringSplitOptions
      description: "\n<p>\n<xref href=\"System.StringSplitOptions.RemoveEmptyEntries\" data-throw-if-not-resolved=\"false\"></xref> to omit empty array elements from the array returned; or <xref href=\"System.StringSplitOptions.None\" data-throw-if-not-resolved=\"false\"></xref> to include empty array elements in the array returned. </p>\n"
    return:
      type: System.String[]
      description: "\n<p>An array whose elements contain the substrings in this string that are delimited by one or more strings in <em>separator</em>. For more information, see the Remarks section.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>options</em> is not one of the <xref href=\"System.StringSplitOptions\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Split(System.String(), System.StringSplitOptions)
  name.vb: Split(String(), StringSplitOptions)
  nameWithType: String.Split(String[], StringSplitOptions)
  nameWithType.vb: String.Split(String(), StringSplitOptions)
- uid: System.String.StartsWith(System.String)
  commentId: M:System.String.StartsWith(System.String)
  id: StartsWith(System.String)
  parent: System.String
  langs:
  - csharp
  - vb
  name: StartsWith(String)
  fullName: System.String.StartsWith(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartsWith
    path: src/mscorlib/src/System/String.cs
    startLine: 2700
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the beginning of this string instance matches the specified string.</p>\n"
  syntax:
    content: public bool StartsWith(string value)
    content.vb: Public Function StartsWith(value As String) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> matches the beginning of this string; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.String.EndsWith(System.String)
    commentId: M:System.String.EndsWith(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.StartsWith(String)
- uid: System.String.StartsWith(System.String,System.StringComparison)
  commentId: M:System.String.StartsWith(System.String,System.StringComparison)
  id: StartsWith(System.String,System.StringComparison)
  parent: System.String
  langs:
  - csharp
  - vb
  name: StartsWith(String, StringComparison)
  fullName: System.String.StartsWith(System.String, System.StringComparison)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartsWith
    path: src/mscorlib/src/System/String.cs
    startLine: 2709
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the beginning of this string instance matches the specified string when compared using the specified comparison option.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(false)]

      public bool StartsWith(string value, StringComparison comparisonType)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(False)>

      Public Function StartsWith(value As String, comparisonType As StringComparison) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The string to compare. </p>\n"
    - id: comparisonType
      type: System.StringComparison
      description: "\n<p>One of the enumeration values that determines how this string and <em>value</em> are compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this instance begins with <em>value</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparisonType</em> is not a <xref href=\"System.StringComparison\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  seealso:
  - type: System.StringComparison
    commentId: T:System.StringComparison
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.StartsWith(String, StringComparison)
- uid: System.String.Substring(System.Int32)
  commentId: M:System.String.Substring(System.Int32)
  id: Substring(System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Substring(Int32)
  fullName: System.String.Substring(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Substring
    path: src/mscorlib/src/System/String.cs
    startLine: 1300
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves a substring from this instance. The substring starts at a specified character position and continues to the end of the string.</p>\n"
  syntax:
    content: public string Substring(int startIndex)
    content.vb: Public Function Substring(startIndex As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting character position of a substring in this instance. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to the substring that begins at <em>startIndex</em> in this instance, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>startIndex</em> is equal to the length of this instance.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is less than zero or greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Int32
    commentId: T:System.Int32
  - type: System.String.Concat(System.Object)
    commentId: M:System.String.Concat(System.Object)
  - type: System.String.Insert(System.Int32,System.String)
    commentId: M:System.String.Insert(System.Int32,System.String)
  - type: System.String.Join(System.String,System.String[])
    commentId: M:System.String.Join(System.String,System.String[])
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Split(System.Char[])
    commentId: M:System.String.Split(System.Char[])
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Substring(Int32)
- uid: System.String.Substring(System.Int32,System.Int32)
  commentId: M:System.String.Substring(System.Int32,System.Int32)
  id: Substring(System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: Substring(Int32, Int32)
  fullName: System.String.Substring(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Substring
    path: src/mscorlib/src/System/String.cs
    startLine: 1306
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves a substring from this instance. The substring starts at a specified character position and has a specified length.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string Substring(int startIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function Substring(startIndex As Integer, length As Integer) As String
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting character position of a substring in this instance. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of characters in the substring. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that is equivalent to the substring of length <em>length</em> that begins at <em>startIndex</em> in this instance, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>startIndex</em> is equal to the length of this instance and <em>length</em> is zero.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> plus <em>length</em> indicates a position not within this instance.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero. </p>\n"
  seealso:
  - type: System.String.Remove(System.Int32,System.Int32)
    commentId: M:System.String.Remove(System.Int32,System.Int32)
  - type: System.String.Replace(System.Char,System.Char)
    commentId: M:System.String.Replace(System.Char,System.Char)
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Substring(Int32, Int32)
- uid: System.String.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.String.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.String.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/mscorlib/src/System/String.cs
    startLine: 3680
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an enumerator that iterates through the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator that can be used to iterate through the current string.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: String.IEnumerable.GetEnumerator()
  nameWithType.vb: String.System.Collections.IEnumerable.GetEnumerator()
- uid: System.String.System#IComparable#CompareTo(System.Object)
  commentId: M:System.String.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  fullName: System.String.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1595
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object value)
    content.vb: Function System.IComparable.CompareTo(value As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  name.vb: System.IComparable.CompareTo(Object)
  nameWithType: String.IComparable.CompareTo(Object)
  nameWithType.vb: String.System.IComparable.CompareTo(Object)
- uid: System.String.System#IConvertible#GetTypeCode
  commentId: M:System.String.System#IConvertible#GetTypeCode
  id: System#IConvertible#GetTypeCode
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.GetTypeCode()
  fullName: System.String.System.IConvertible.GetTypeCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.GetTypeCode
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1596
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: TypeCode IConvertible.GetTypeCode()
    content.vb: Function System.IConvertible.GetTypeCode As TypeCode Implements IConvertible.GetTypeCode
    return:
      type: System.TypeCode
  implements:
  - System.IConvertible.GetTypeCode
  name.vb: System.IConvertible.GetTypeCode()
  nameWithType: String.IConvertible.GetTypeCode()
  nameWithType.vb: String.System.IConvertible.GetTypeCode()
- uid: System.String.System#IConvertible#ToBoolean(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToBoolean(System.IFormatProvider)
  id: System#IConvertible#ToBoolean(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToBoolean(IFormatProvider)
  fullName: System.String.System.IConvertible.ToBoolean(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToBoolean
    path: src/mscorlib/src/System/String.cs
    startLine: 3570
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToBoolean(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: bool IConvertible.ToBoolean(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToBoolean(provider As IFormatProvider) As Boolean Implements IConvertible.ToBoolean
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>This parameter is ignored.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of the current string is <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref>; <strong>false</strong> if the value of the current string is <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current string is not <xref href=\"System.Boolean.TrueString\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Boolean.FalseString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToBoolean(System.IFormatProvider)
  name.vb: System.IConvertible.ToBoolean(IFormatProvider)
  nameWithType: String.IConvertible.ToBoolean(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToBoolean(IFormatProvider)
- uid: System.String.System#IConvertible#ToByte(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToByte(System.IFormatProvider)
  id: System#IConvertible#ToByte(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToByte(IFormatProvider)
  fullName: System.String.System.IConvertible.ToByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToByte
    path: src/mscorlib/src/System/String.cs
    startLine: 3585
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: byte IConvertible.ToByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToByte(provider As IFormatProvider) As Byte Implements IConvertible.ToByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.Byte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Byte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToByte(IFormatProvider)
  nameWithType: String.IConvertible.ToByte(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToByte(IFormatProvider)
- uid: System.String.System#IConvertible#ToChar(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToChar(System.IFormatProvider)
  id: System#IConvertible#ToChar(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToChar(IFormatProvider)
  fullName: System.String.System.IConvertible.ToChar(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToChar
    path: src/mscorlib/src/System/String.cs
    startLine: 3575
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToChar(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: char IConvertible.ToChar(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToChar(provider As IFormatProvider) As Char Implements IConvertible.ToChar
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The character at index 0 in the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToChar(System.IFormatProvider)
  name.vb: System.IConvertible.ToChar(IFormatProvider)
  nameWithType: String.IConvertible.ToChar(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToChar(IFormatProvider)
- uid: System.String.System#IConvertible#ToDateTime(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToDateTime(System.IFormatProvider)
  id: System#IConvertible#ToDateTime(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToDateTime(IFormatProvider)
  fullName: System.String.System.IConvertible.ToDateTime(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDateTime
    path: src/mscorlib/src/System/String.cs
    startLine: 3635
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDateTime(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: DateTime IConvertible.ToDateTime(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDateTime(provider As IFormatProvider) As Date Implements IConvertible.ToDateTime
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToDateTime(System.IFormatProvider)
  name.vb: System.IConvertible.ToDateTime(IFormatProvider)
  nameWithType: String.IConvertible.ToDateTime(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToDateTime(IFormatProvider)
- uid: System.String.System#IConvertible#ToDecimal(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToDecimal(System.IFormatProvider)
  id: System#IConvertible#ToDecimal(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToDecimal(IFormatProvider)
  fullName: System.String.System.IConvertible.ToDecimal(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDecimal
    path: src/mscorlib/src/System/String.cs
    startLine: 3630
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDecimal(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: decimal IConvertible.ToDecimal(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDecimal(provider As IFormatProvider) As Decimal Implements IConvertible.ToDecimal
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number less than <xref href=\"System.Decimal.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> greater. </p>\n"
  implements:
  - System.IConvertible.ToDecimal(System.IFormatProvider)
  name.vb: System.IConvertible.ToDecimal(IFormatProvider)
  nameWithType: String.IConvertible.ToDecimal(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToDecimal(IFormatProvider)
- uid: System.String.System#IConvertible#ToDouble(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToDouble(System.IFormatProvider)
  id: System#IConvertible#ToDouble(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToDouble(IFormatProvider)
  fullName: System.String.System.IConvertible.ToDouble(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToDouble
    path: src/mscorlib/src/System/String.cs
    startLine: 3625
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToDouble(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: double IConvertible.ToDouble(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToDouble(provider As IFormatProvider) As Double Implements IConvertible.ToDouble
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number less than <xref href=\"System.Double.MinValue\" data-throw-if-not-resolved=\"false\"></xref> or greater than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToDouble(System.IFormatProvider)
  name.vb: System.IConvertible.ToDouble(IFormatProvider)
  nameWithType: String.IConvertible.ToDouble(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToDouble(IFormatProvider)
- uid: System.String.System#IConvertible#ToInt16(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToInt16(System.IFormatProvider)
  id: System#IConvertible#ToInt16(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt16(IFormatProvider)
  fullName: System.String.System.IConvertible.ToInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt16
    path: src/mscorlib/src/System/String.cs
    startLine: 3590
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: short IConvertible.ToInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt16(provider As IFormatProvider) As Short Implements IConvertible.ToInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.Int16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Int16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt16(IFormatProvider)
  nameWithType: String.IConvertible.ToInt16(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToInt16(IFormatProvider)
- uid: System.String.System#IConvertible#ToInt32(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToInt32(System.IFormatProvider)
  id: System#IConvertible#ToInt32(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt32(IFormatProvider)
  fullName: System.String.System.IConvertible.ToInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt32
    path: src/mscorlib/src/System/String.cs
    startLine: 3600
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: int IConvertible.ToInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt32(provider As IFormatProvider) As Integer Implements IConvertible.ToInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt32(IFormatProvider)
  nameWithType: String.IConvertible.ToInt32(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToInt32(IFormatProvider)
- uid: System.String.System#IConvertible#ToInt64(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToInt64(System.IFormatProvider)
  id: System#IConvertible#ToInt64(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToInt64(IFormatProvider)
  fullName: System.String.System.IConvertible.ToInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToInt64
    path: src/mscorlib/src/System/String.cs
    startLine: 3610
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: long IConvertible.ToInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToInt64(provider As IFormatProvider) As Long Implements IConvertible.ToInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToInt64(IFormatProvider)
  nameWithType: String.IConvertible.ToInt64(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToInt64(IFormatProvider)
- uid: System.String.System#IConvertible#ToSByte(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToSByte(System.IFormatProvider)
  id: System#IConvertible#ToSByte(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToSByte(IFormatProvider)
  fullName: System.String.System.IConvertible.ToSByte(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSByte
    path: src/mscorlib/src/System/String.cs
    startLine: 3580
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSByte(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: sbyte IConvertible.ToSByte(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSByte(provider As IFormatProvider) As SByte Implements IConvertible.ToSByte
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.SByte
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.SByte.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.SByte.MinValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.IConvertible.ToSByte(System.IFormatProvider)
  name.vb: System.IConvertible.ToSByte(IFormatProvider)
  nameWithType: String.IConvertible.ToSByte(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToSByte(IFormatProvider)
- uid: System.String.System#IConvertible#ToSingle(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToSingle(System.IFormatProvider)
  id: System#IConvertible#ToSingle(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToSingle(IFormatProvider)
  fullName: System.String.System.IConvertible.ToSingle(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToSingle
    path: src/mscorlib/src/System/String.cs
    startLine: 3620
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToSingle(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: float IConvertible.ToSingle(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToSingle(provider As IFormatProvider) As Single Implements IConvertible.ToSingle
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToSingle(System.IFormatProvider)
  name.vb: System.IConvertible.ToSingle(IFormatProvider)
  nameWithType: String.IConvertible.ToSingle(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToSingle(IFormatProvider)
- uid: System.String.System#IConvertible#ToString(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToString(System.IFormatProvider)
  id: System#IConvertible#ToString(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToString(IFormatProvider)
  fullName: System.String.System.IConvertible.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IConvertible.ToString
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 1608
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: string IConvertible.ToString(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToString(provider As IFormatProvider) As String Implements IConvertible.ToString
    parameters:
    - id: provider
      type: System.IFormatProvider
    return:
      type: System.String
  implements:
  - System.IConvertible.ToString(System.IFormatProvider)
  name.vb: System.IConvertible.ToString(IFormatProvider)
  nameWithType: String.IConvertible.ToString(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToString(IFormatProvider)
- uid: System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToType(System.Type,System.IFormatProvider)
  id: System#IConvertible#ToType(System.Type,System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToType(Type, IFormatProvider)
  fullName: System.String.System.IConvertible.ToType(System.Type, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToType
    path: src/mscorlib/src/System/String.cs
    startLine: 3640
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToType(System.Type,System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: object IConvertible.ToType(Type type, IFormatProvider provider)
    content.vb: Function System.IConvertible.ToType(type As Type, provider As IFormatProvider) As Object Implements IConvertible.ToType
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type of the returned object. </p>\n"
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be converted to the type specified by the <em>type</em> parameter. </p>\n"
  implements:
  - System.IConvertible.ToType(System.Type,System.IFormatProvider)
  name.vb: System.IConvertible.ToType(Type, IFormatProvider)
  nameWithType: String.IConvertible.ToType(Type, IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToType(Type, IFormatProvider)
- uid: System.String.System#IConvertible#ToUInt16(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToUInt16(System.IFormatProvider)
  id: System#IConvertible#ToUInt16(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt16(IFormatProvider)
  fullName: System.String.System.IConvertible.ToUInt16(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt16
    path: src/mscorlib/src/System/String.cs
    startLine: 3595
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt16(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: ushort IConvertible.ToUInt16(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt16(provider As IFormatProvider) As UShort Implements IConvertible.ToUInt16
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater than <xref href=\"System.UInt16.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.UInt16.MinValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.IConvertible.ToUInt16(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt16(IFormatProvider)
  nameWithType: String.IConvertible.ToUInt16(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToUInt16(IFormatProvider)
- uid: System.String.System#IConvertible#ToUInt32(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToUInt32(System.IFormatProvider)
  id: System#IConvertible#ToUInt32(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt32(IFormatProvider)
  fullName: System.String.System.IConvertible.ToUInt32(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt32
    path: src/mscorlib/src/System/String.cs
    startLine: 3605
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt32(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: uint IConvertible.ToUInt32(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt32(provider As IFormatProvider) As UInteger Implements IConvertible.ToUInt32
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object cannot be parsed. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object is a number greater <xref href=\"System.UInt32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.UInt32.MinValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  implements:
  - System.IConvertible.ToUInt32(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt32(IFormatProvider)
  nameWithType: String.IConvertible.ToUInt32(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToUInt32(IFormatProvider)
- uid: System.String.System#IConvertible#ToUInt64(System.IFormatProvider)
  commentId: M:System.String.System#IConvertible#ToUInt64(System.IFormatProvider)
  id: System#IConvertible#ToUInt64(System.IFormatProvider)
  isEii: true
  parent: System.String
  langs:
  - csharp
  - vb
  name: IConvertible.ToUInt64(IFormatProvider)
  fullName: System.String.System.IConvertible.ToUInt64(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IConvertible.ToUInt64
    path: src/mscorlib/src/System/String.cs
    startLine: 3615
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>For a description of this member, see <xref href=\"System.IConvertible.ToUInt64(System.IFormatProvider)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: ulong IConvertible.ToUInt64(IFormatProvider provider)
    content.vb: Function System.IConvertible.ToUInt64(provider As IFormatProvider) As ULong Implements IConvertible.ToUInt64
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The converted value of the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  implements:
  - System.IConvertible.ToUInt64(System.IFormatProvider)
  name.vb: System.IConvertible.ToUInt64(IFormatProvider)
  nameWithType: String.IConvertible.ToUInt64(IFormatProvider)
  nameWithType.vb: String.System.IConvertible.ToUInt64(IFormatProvider)
- uid: System.String.ToCharArray
  commentId: M:System.String.ToCharArray
  id: ToCharArray
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToCharArray()
  fullName: System.String.ToCharArray()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToCharArray
    path: src/mscorlib/src/System/String.cs
    startLine: 769
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies the characters in this instance to a Unicode character array. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public char[] ToCharArray()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToCharArray As Char()
    return:
      type: System.Char[]
      description: "\n<p>A Unicode character array whose elements are the individual characters of this instance. If this instance is an empty string, the returned array is empty and has a zero length.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.Array
    commentId: T:System.Array
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.ToCharArray()
- uid: System.String.ToCharArray(System.Int32,System.Int32)
  commentId: M:System.String.ToCharArray(System.Int32,System.Int32)
  id: ToCharArray(System.Int32,System.Int32)
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToCharArray(Int32, Int32)
  fullName: System.String.ToCharArray(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToCharArray
    path: src/mscorlib/src/System/String.cs
    startLine: 791
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies the characters in a specified substring in this instance to a Unicode character array.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public char[] ToCharArray(int startIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToCharArray(startIndex As Integer, length As Integer) As Char()
    parameters:
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting position of a substring in this instance. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the substring in this instance. </p>\n"
    return:
      type: System.Char[]
      description: "\n<p>A Unicode character array whose elements are the <em>length</em> number of characters in this instance starting from character position <em>startIndex</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> plus <em>length</em> is greater than the length of this instance. </p>\n"
  seealso:
  - type: System.Array
    commentId: T:System.Array
  - type: System.Char
    commentId: T:System.Char
  - type: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.ToCharArray(Int32, Int32)
- uid: System.String.ToLower
  commentId: M:System.String.ToLower
  id: ToLower
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToLower()
  fullName: System.String.ToLower()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToLower
    path: src/mscorlib/src/System/String.cs
    startLine: 2788
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this string converted to lowercase.</p>\n"
  syntax:
    content: public string ToLower()
    content.vb: Public Function ToLower As String
    return:
      type: System.String
      description: "\n<p>A string in lowercase.</p>\n"
  seealso:
  - type: System.String.ToLowerInvariant
    commentId: M:System.String.ToLowerInvariant
  - type: System.String.ToUpper
    commentId: M:System.String.ToUpper
  - type: System.String.ToUpperInvariant
    commentId: M:System.String.ToUpperInvariant
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.ToLower()
- uid: System.String.ToLowerInvariant
  commentId: M:System.String.ToLowerInvariant
  id: ToLowerInvariant
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToLowerInvariant()
  fullName: System.String.ToLowerInvariant()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToLowerInvariant
    path: src/mscorlib/src/System/String.cs
    startLine: 2807
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object converted to lowercase using the casing rules of the invariant culture.</p>\n"
  syntax:
    content: public string ToLowerInvariant()
    content.vb: Public Function ToLowerInvariant As String
    return:
      type: System.String
      description: "\n<p>The lowercase equivalent of the current string.</p>\n"
  seealso:
  - type: System.String.ToUpperInvariant
    commentId: M:System.String.ToUpperInvariant
  - type: System.String.ToLower(System.Globalization.CultureInfo)
    commentId: M:System.String.ToLower(System.Globalization.CultureInfo)
  - type: System.String.ToLower
    commentId: M:System.String.ToLower
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.ToLowerInvariant()
- uid: System.String.ToString
  commentId: M:System.String.ToString
  id: ToString
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.String.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/String.cs
    startLine: 2845
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns this instance of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>; no actual conversion is performed.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The current string.</p>\n"
  overridden: System.Object.ToString
  seealso:
  - type: System.String.Clone
    commentId: M:System.String.Clone
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: String.ToString()
- uid: System.String.ToUpper
  commentId: M:System.String.ToUpper
  id: ToUpper
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToUpper()
  fullName: System.String.ToUpper()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUpper
    path: src/mscorlib/src/System/String.cs
    startLine: 2815
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this string converted to uppercase.</p>\n"
  syntax:
    content: public string ToUpper()
    content.vb: Public Function ToUpper As String
    return:
      type: System.String
      description: "\n<p>The uppercase equivalent of the current string.</p>\n"
  seealso:
  - type: System.String.ToLower
    commentId: M:System.String.ToLower
  - type: System.String.ToLowerInvariant
    commentId: M:System.String.ToLowerInvariant
  - type: System.String.ToUpperInvariant
    commentId: M:System.String.ToUpperInvariant
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.ToUpper()
- uid: System.String.ToUpperInvariant
  commentId: M:System.String.ToUpperInvariant
  id: ToUpperInvariant
  parent: System.String
  langs:
  - csharp
  - vb
  name: ToUpperInvariant()
  fullName: System.String.ToUpperInvariant()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUpperInvariant
    path: src/mscorlib/src/System/String.cs
    startLine: 2836
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a copy of this <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object converted to uppercase using the casing rules of the invariant culture.</p>\n"
  syntax:
    content: public string ToUpperInvariant()
    content.vb: Public Function ToUpperInvariant As String
    return:
      type: System.String
      description: "\n<p>The uppercase equivalent of the current string.</p>\n"
  seealso:
  - type: System.String.ToLowerInvariant
    commentId: M:System.String.ToLowerInvariant
  - type: System.String.ToUpper
    commentId: M:System.String.ToUpper
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.ToUpperInvariant()
- uid: System.String.Trim
  commentId: M:System.String.Trim
  id: Trim
  parent: System.String
  langs:
  - csharp
  - vb
  name: Trim()
  fullName: System.String.Trim()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Trim
    path: src/mscorlib/src/System/String.cs
    startLine: 2868
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all leading and trailing white-space characters from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string Trim()
    content.vb: Public Function Trim As String
    return:
      type: System.String
      description: "\n<p>The string that remains after all white-space characters are removed from the start and end of the current string. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </p>\n"
  seealso:
  - type: System.String.TrimEnd(System.Char[])
    commentId: M:System.String.TrimEnd(System.Char[])
  - type: System.String.TrimStart(System.Char[])
    commentId: M:System.String.TrimStart(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: String.Trim()
- uid: System.String.Trim(System.Char[])
  commentId: M:System.String.Trim(System.Char[])
  id: Trim(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: Trim(Char[])
  fullName: System.String.Trim(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Trim
    path: src/mscorlib/src/System/String.cs
    startLine: 1355
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all leading and trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string Trim(params char[] trimChars)
    content.vb: Public Function Trim(ParamArray trimChars As Char()) As String
    parameters:
    - id: trimChars
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the start and end of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.TrimEnd(System.Char[])
    commentId: M:System.String.TrimEnd(System.Char[])
  - type: System.String.TrimStart(System.Char[])
    commentId: M:System.String.TrimStart(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.Trim(System.Char())
  name.vb: Trim(Char())
  nameWithType: String.Trim(Char[])
  nameWithType.vb: String.Trim(Char())
- uid: System.String.TrimEnd(System.Char[])
  commentId: M:System.String.TrimEnd(System.Char[])
  id: TrimEnd(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: TrimEnd(Char[])
  fullName: System.String.TrimEnd(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrimEnd
    path: src/mscorlib/src/System/String.cs
    startLine: 1373
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all trailing occurrences of a set of characters specified in an array from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string TrimEnd(params char[] trimChars)
    content.vb: Public Function TrimEnd(ParamArray trimChars As Char()) As String
    parameters:
    - id: trimChars
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that remains after all occurrences of the characters in the <em>trimChars</em> parameter are removed from the end of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, Unicode white-space characters are removed instead. If no characters can be trimmed from the current instance, the method returns the current instance unchanged. </p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  - type: System.String.TrimStart(System.Char[])
    commentId: M:System.String.TrimStart(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.TrimEnd(System.Char())
  name.vb: TrimEnd(Char())
  nameWithType: String.TrimEnd(Char[])
  nameWithType.vb: String.TrimEnd(Char())
- uid: System.String.TrimStart(System.Char[])
  commentId: M:System.String.TrimStart(System.Char[])
  id: TrimStart(System.Char[])
  parent: System.String
  langs:
  - csharp
  - vb
  name: TrimStart(Char[])
  fullName: System.String.TrimStart(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/String.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrimStart
    path: src/mscorlib/src/System/String.cs
    startLine: 1364
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all leading occurrences of a set of characters specified in an array from the current <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string TrimStart(params char[] trimChars)
    content.vb: Public Function TrimStart(ParamArray trimChars As Char()) As String
    parameters:
    - id: trimChars
      type: System.Char[]
      description: "\n<p>An array of Unicode characters to remove, or <strong>null</strong>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that remains after all occurrences of characters in the <em>trimChars</em> parameter are removed from the start of the current string. If <em>trimChars</em> is <strong>null</strong> or an empty array, white-space characters are removed instead.</p>\n"
  seealso:
  - type: System.Char
    commentId: T:System.Char
  - type: System.String.Trim(System.Char[])
    commentId: M:System.String.Trim(System.Char[])
  - type: System.String.TrimEnd(System.Char[])
    commentId: M:System.String.TrimEnd(System.Char[])
  - type: System.Char.IsWhiteSpace(System.Char)
    commentId: M:System.Char.IsWhiteSpace(System.Char)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.String.TrimStart(System.Char())
  name.vb: TrimStart(Char())
  nameWithType: String.TrimStart(Char[])
  nameWithType.vb: String.TrimStart(Char())
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.Generic.IEnumerable{System.Char}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Char>
  fullName: System.Collections.Generic.IEnumerable<System.Char>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Char)
  name.vb: IEnumerable(Of Char)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IEnumerable<Char>
  nameWithType.vb: IEnumerable(Of Char)
  commentId: T:System.Collections.Generic.IEnumerable{System.Char}
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  nameWithType: IEnumerable
  commentId: T:System.Collections.IEnumerable
- uid: System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  fullName: System.IComparable
  nameWithType: IComparable
  commentId: T:System.IComparable
- uid: System.IComparable{System.String}
  parent: System
  definition: System.IComparable`1
  name: IComparable<String>
  fullName: System.IComparable<System.String>
  fullname.vb: System.IComparable(Of System.String)
  name.vb: IComparable(Of String)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IComparable<String>
  nameWithType.vb: IComparable(Of String)
  commentId: T:System.IComparable{System.String}
- uid: System.IConvertible
  parent: System
  isExternal: false
  name: IConvertible
  fullName: System.IConvertible
  nameWithType: IConvertible
  commentId: T:System.IConvertible
- uid: System.IEquatable{System.String}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<String>
  fullName: System.IEquatable<System.String>
  fullname.vb: System.IEquatable(Of System.String)
  name.vb: IEquatable(Of String)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IEquatable<String>
  nameWithType.vb: IEquatable(Of String)
  commentId: T:System.IEquatable{System.String}
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.IComparable`1
  isExternal: false
  name: IComparable<T>
  fullName: System.IComparable<T>
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    fullName: System.IComparable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IComparable<T>
  nameWithType.vb: IComparable(Of T)
  commentId: T:System.IComparable`1
- uid: System.IEquatable`1
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  commentId: T:System.IEquatable`1
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Char*
  name: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    fullName: '*'
  nameWithType: Char*
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Char
  parent: System
  isExternal: false
  name: Char
  fullName: System.Char
  nameWithType: Char
  commentId: T:System.Char
- uid: System.Char[]
  name: Char[]
  fullName: System.Char[]
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Char[]
  nameWithType.vb: Char()
- uid: System.StringComparison
  parent: System
  isExternal: false
  name: StringComparison
  fullName: System.StringComparison
  nameWithType: StringComparison
  commentId: T:System.StringComparison
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.IComparable{System.String}.CompareTo(System.String)
  parent: System.IComparable{System.String}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(String)
  fullName: System.IComparable<System.String>.CompareTo(System.String)
  fullname.vb: System.IComparable(Of System.String).CompareTo(System.String)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<System.String>.CompareTo
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of System.String).CompareTo
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IComparable<String>.CompareTo(String)
  nameWithType.vb: IComparable(Of String).CompareTo(String)
  commentId: M:System.IComparable{System.String}.CompareTo(System.String)
- uid: System.IComparable`1.CompareTo(`0)
  isExternal: false
  name: CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  commentId: M:System.IComparable`1.CompareTo(`0)
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IEnumerable<String>
  nameWithType.vb: IEnumerable(Of String)
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
- uid: System.Object[]
  name: Object[]
  fullName: System.Object[]
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Object[]
  nameWithType.vb: Object()
- uid: System.String[]
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: String[]
  nameWithType.vb: String()
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable{`0}
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.IEquatable{System.String}.Equals(System.String)
  parent: System.IEquatable{System.String}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(String)
  fullName: System.IEquatable<System.String>.Equals(System.String)
  fullname.vb: System.IEquatable(Of System.String).Equals(System.String)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.String>.Equals
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.String).Equals
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IEquatable<String>.Equals(String)
  nameWithType.vb: IEquatable(Of String).Equals(String)
  commentId: M:System.IEquatable{System.String}.Equals(System.String)
- uid: System.IEquatable`1.Equals(`0)
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  commentId: M:System.IEquatable`1.Equals(`0)
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  fullName: System.IFormatProvider
  nameWithType: IFormatProvider
  commentId: T:System.IFormatProvider
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.StringSplitOptions
  parent: System
  isExternal: false
  name: StringSplitOptions
  fullName: System.StringSplitOptions
  nameWithType: StringSplitOptions
  commentId: T:System.StringSplitOptions
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IEnumerable.GetEnumerator()
  commentId: M:System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IComparable.CompareTo(Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
- uid: System.IConvertible.GetTypeCode
  parent: System.IConvertible
  isExternal: false
  name: GetTypeCode()
  fullName: System.IConvertible.GetTypeCode()
  spec.csharp:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.GetTypeCode
    name: GetTypeCode
    fullName: System.IConvertible.GetTypeCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IConvertible.GetTypeCode()
  commentId: M:System.IConvertible.GetTypeCode
- uid: System.TypeCode
  parent: System
  isExternal: false
  name: TypeCode
  fullName: System.TypeCode
  nameWithType: TypeCode
  commentId: T:System.TypeCode
- uid: System.IConvertible.ToBoolean(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToBoolean(IFormatProvider)
  fullName: System.IConvertible.ToBoolean(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToBoolean(System.IFormatProvider)
    name: ToBoolean
    fullName: System.IConvertible.ToBoolean
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToBoolean(IFormatProvider)
  commentId: M:System.IConvertible.ToBoolean(System.IFormatProvider)
- uid: System.IConvertible.ToByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToByte(IFormatProvider)
  fullName: System.IConvertible.ToByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToByte(System.IFormatProvider)
    name: ToByte
    fullName: System.IConvertible.ToByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToByte(IFormatProvider)
  commentId: M:System.IConvertible.ToByte(System.IFormatProvider)
- uid: System.Byte
  parent: System
  isExternal: false
  name: Byte
  fullName: System.Byte
  nameWithType: Byte
  commentId: T:System.Byte
- uid: System.IConvertible.ToChar(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToChar(IFormatProvider)
  fullName: System.IConvertible.ToChar(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToChar(System.IFormatProvider)
    name: ToChar
    fullName: System.IConvertible.ToChar
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToChar(IFormatProvider)
  commentId: M:System.IConvertible.ToChar(System.IFormatProvider)
- uid: System.IConvertible.ToDateTime(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDateTime(IFormatProvider)
  fullName: System.IConvertible.ToDateTime(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDateTime(System.IFormatProvider)
    name: ToDateTime
    fullName: System.IConvertible.ToDateTime
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToDateTime(IFormatProvider)
  commentId: M:System.IConvertible.ToDateTime(System.IFormatProvider)
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
  nameWithType: DateTime
  commentId: T:System.DateTime
- uid: System.IConvertible.ToDecimal(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDecimal(IFormatProvider)
  fullName: System.IConvertible.ToDecimal(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDecimal(System.IFormatProvider)
    name: ToDecimal
    fullName: System.IConvertible.ToDecimal
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToDecimal(IFormatProvider)
  commentId: M:System.IConvertible.ToDecimal(System.IFormatProvider)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
  nameWithType: Decimal
  commentId: T:System.Decimal
- uid: System.IConvertible.ToDouble(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToDouble(IFormatProvider)
  fullName: System.IConvertible.ToDouble(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToDouble(System.IFormatProvider)
    name: ToDouble
    fullName: System.IConvertible.ToDouble
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToDouble(IFormatProvider)
  commentId: M:System.IConvertible.ToDouble(System.IFormatProvider)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
  nameWithType: Double
  commentId: T:System.Double
- uid: System.IConvertible.ToInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt16(IFormatProvider)
  fullName: System.IConvertible.ToInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt16(System.IFormatProvider)
    name: ToInt16
    fullName: System.IConvertible.ToInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToInt16(IFormatProvider)
  commentId: M:System.IConvertible.ToInt16(System.IFormatProvider)
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
  nameWithType: Int16
  commentId: T:System.Int16
- uid: System.IConvertible.ToInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt32(IFormatProvider)
  fullName: System.IConvertible.ToInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt32(System.IFormatProvider)
    name: ToInt32
    fullName: System.IConvertible.ToInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToInt32(IFormatProvider)
  commentId: M:System.IConvertible.ToInt32(System.IFormatProvider)
- uid: System.IConvertible.ToInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToInt64(IFormatProvider)
  fullName: System.IConvertible.ToInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToInt64(System.IFormatProvider)
    name: ToInt64
    fullName: System.IConvertible.ToInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToInt64(IFormatProvider)
  commentId: M:System.IConvertible.ToInt64(System.IFormatProvider)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.IConvertible.ToSByte(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSByte(IFormatProvider)
  fullName: System.IConvertible.ToSByte(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSByte(System.IFormatProvider)
    name: ToSByte
    fullName: System.IConvertible.ToSByte
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToSByte(IFormatProvider)
  commentId: M:System.IConvertible.ToSByte(System.IFormatProvider)
- uid: System.SByte
  parent: System
  isExternal: false
  name: SByte
  fullName: System.SByte
  nameWithType: SByte
  commentId: T:System.SByte
- uid: System.IConvertible.ToSingle(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToSingle(IFormatProvider)
  fullName: System.IConvertible.ToSingle(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToSingle(System.IFormatProvider)
    name: ToSingle
    fullName: System.IConvertible.ToSingle
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToSingle(IFormatProvider)
  commentId: M:System.IConvertible.ToSingle(System.IFormatProvider)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
  nameWithType: Single
  commentId: T:System.Single
- uid: System.IConvertible.ToString(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToString(IFormatProvider)
  fullName: System.IConvertible.ToString(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToString(System.IFormatProvider)
    name: ToString
    fullName: System.IConvertible.ToString
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToString(IFormatProvider)
  commentId: M:System.IConvertible.ToString(System.IFormatProvider)
- uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToType(Type, IFormatProvider)
  fullName: System.IConvertible.ToType(System.Type, System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToType(System.Type,System.IFormatProvider)
    name: ToType
    fullName: System.IConvertible.ToType
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToType(Type, IFormatProvider)
  commentId: M:System.IConvertible.ToType(System.Type,System.IFormatProvider)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.IConvertible.ToUInt16(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt16(IFormatProvider)
  fullName: System.IConvertible.ToUInt16(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt16(System.IFormatProvider)
    name: ToUInt16
    fullName: System.IConvertible.ToUInt16
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToUInt16(IFormatProvider)
  commentId: M:System.IConvertible.ToUInt16(System.IFormatProvider)
- uid: System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  fullName: System.UInt16
  nameWithType: UInt16
  commentId: T:System.UInt16
- uid: System.IConvertible.ToUInt32(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt32(IFormatProvider)
  fullName: System.IConvertible.ToUInt32(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt32(System.IFormatProvider)
    name: ToUInt32
    fullName: System.IConvertible.ToUInt32
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToUInt32(IFormatProvider)
  commentId: M:System.IConvertible.ToUInt32(System.IFormatProvider)
- uid: System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  fullName: System.UInt32
  nameWithType: UInt32
  commentId: T:System.UInt32
- uid: System.IConvertible.ToUInt64(System.IFormatProvider)
  parent: System.IConvertible
  isExternal: false
  name: ToUInt64(IFormatProvider)
  fullName: System.IConvertible.ToUInt64(System.IFormatProvider)
  spec.csharp:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IConvertible.ToUInt64(System.IFormatProvider)
    name: ToUInt64
    fullName: System.IConvertible.ToUInt64
  - name: (
    fullName: (
  - uid: System.IFormatProvider
    name: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    fullName: )
  nameWithType: IConvertible.ToUInt64(IFormatProvider)
  commentId: M:System.IConvertible.ToUInt64(System.IFormatProvider)
- uid: System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  fullName: System.UInt64
  nameWithType: UInt64
  commentId: T:System.UInt64
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
  nameWithType: OutOfMemoryException
  commentId: T:System.OutOfMemoryException
- uid: System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  fullName: System.FormatException
  nameWithType: FormatException
  commentId: T:System.FormatException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
  nameWithType: OverflowException
  commentId: T:System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
  nameWithType: InvalidCastException
  commentId: T:System.InvalidCastException
