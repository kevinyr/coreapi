### YamlMime:ManagedReference
items:
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  id: BindingFlags
  parent: System.Reflection
  children:
  - System.Reflection.BindingFlags.CreateInstance
  - System.Reflection.BindingFlags.DeclaredOnly
  - System.Reflection.BindingFlags.Default
  - System.Reflection.BindingFlags.FlattenHierarchy
  - System.Reflection.BindingFlags.GetField
  - System.Reflection.BindingFlags.GetProperty
  - System.Reflection.BindingFlags.IgnoreCase
  - System.Reflection.BindingFlags.Instance
  - System.Reflection.BindingFlags.InvokeMethod
  - System.Reflection.BindingFlags.NonPublic
  - System.Reflection.BindingFlags.Public
  - System.Reflection.BindingFlags.SetField
  - System.Reflection.BindingFlags.SetProperty
  - System.Reflection.BindingFlags.Static
  langs:
  - csharp
  - vb
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
  type: Enum
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BindingFlags
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 17
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies flags that control binding and the way in which the search for members and types is conducted by reflection.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [Flags]

      [ComVisible(true)]

      public enum BindingFlags
    content.vb: >-
      <Serializable>

      <Flags>

      <ComVisible(True)>

      Public Enum BindingFlags
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Reflection.BindingFlags.CreateInstance
  commentId: F:System.Reflection.BindingFlags.CreateInstance
  id: CreateInstance
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: CreateInstance
  nameWithType: BindingFlags.CreateInstance
  fullName: System.Reflection.BindingFlags.CreateInstance
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 42
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that reflection should create an instance of the specified type. Calls the constructor that matches the given arguments. The supplied member name is ignored. If the type of lookup is not specified, (Instance | Public) will apply. It is not possible to call a type initializer.</p>\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a constructor. </p>\n"
  syntax:
    content: CreateInstance = 512
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.DeclaredOnly
  commentId: F:System.Reflection.BindingFlags.DeclaredOnly
  id: DeclaredOnly
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: DeclaredOnly
  nameWithType: BindingFlags.DeclaredOnly
  fullName: System.Reflection.BindingFlags.DeclaredOnly
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredOnly
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that only members declared at the level of the supplied type's hierarchy should be considered. Inherited members are not considered.</p>\n"
  syntax:
    content: DeclaredOnly = 2
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.Default
  commentId: F:System.Reflection.BindingFlags.Default
  id: Default
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: BindingFlags.Default
  fullName: System.Reflection.BindingFlags.Default
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Default
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that no binding flags are defined.</p>\n"
  syntax:
    content: Default = 0
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.FlattenHierarchy
  commentId: F:System.Reflection.BindingFlags.FlattenHierarchy
  id: FlattenHierarchy
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: FlattenHierarchy
  nameWithType: BindingFlags.FlattenHierarchy
  fullName: System.Reflection.BindingFlags.FlattenHierarchy
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FlattenHierarchy
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 36
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that public and protected static members up the hierarchy should be returned. Private static members in inherited classes are not returned. Static members include fields, methods, events, and properties. Nested types are not returned.</p>\n"
  syntax:
    content: FlattenHierarchy = 64
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.GetField
  commentId: F:System.Reflection.BindingFlags.GetField
  id: GetField
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: GetField
  nameWithType: BindingFlags.GetField
  fullName: System.Reflection.BindingFlags.GetField
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetField
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 43
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that the value of the specified field should be returned.</p>\n<p>This flag is passed to an <strong>InvokeMember</strong> method to get a field value. </p>\n"
  syntax:
    content: GetField = 1024
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.GetProperty
  commentId: F:System.Reflection.BindingFlags.GetProperty
  id: GetProperty
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: GetProperty
  nameWithType: BindingFlags.GetProperty
  fullName: System.Reflection.BindingFlags.GetProperty
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetProperty
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 45
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that the value of the specified property should be returned.</p>\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a property getter. </p>\n"
  syntax:
    content: GetProperty = 4096
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.IgnoreCase
  commentId: F:System.Reflection.BindingFlags.IgnoreCase
  id: IgnoreCase
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: IgnoreCase
  nameWithType: BindingFlags.IgnoreCase
  fullName: System.Reflection.BindingFlags.IgnoreCase
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IgnoreCase
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that the case of the member name should not be considered when binding.</p>\n"
  syntax:
    content: IgnoreCase = 1
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.Instance
  commentId: F:System.Reflection.BindingFlags.Instance
  id: Instance
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: BindingFlags.Instance
  fullName: System.Reflection.BindingFlags.Instance
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Instance
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 32
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that instance members are to be included in the search.</p>\n"
  syntax:
    content: Instance = 4
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.InvokeMethod
  commentId: F:System.Reflection.BindingFlags.InvokeMethod
  id: InvokeMethod
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: InvokeMethod
  nameWithType: BindingFlags.InvokeMethod
  fullName: System.Reflection.BindingFlags.InvokeMethod
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InvokeMethod
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that a method is to be invoked. This must not be a constructor or a type initializer.</p>\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a method. </p>\n"
  syntax:
    content: InvokeMethod = 256
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.NonPublic
  commentId: F:System.Reflection.BindingFlags.NonPublic
  id: NonPublic
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: NonPublic
  nameWithType: BindingFlags.NonPublic
  fullName: System.Reflection.BindingFlags.NonPublic
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NonPublic
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that non-public members are to be included in the search.</p>\n"
  syntax:
    content: NonPublic = 32
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.Public
  commentId: F:System.Reflection.BindingFlags.Public
  id: Public
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: Public
  nameWithType: BindingFlags.Public
  fullName: System.Reflection.BindingFlags.Public
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Public
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 34
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that public members are to be included in the search.</p>\n"
  syntax:
    content: Public = 16
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.SetField
  commentId: F:System.Reflection.BindingFlags.SetField
  id: SetField
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: SetField
  nameWithType: BindingFlags.SetField
  fullName: System.Reflection.BindingFlags.SetField
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetField
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 44
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that the value of the specified field should be set.</p>\n<p>This flag is passed to an <strong>InvokeMember</strong> method to set a field value. </p>\n"
  syntax:
    content: SetField = 2048
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.SetProperty
  commentId: F:System.Reflection.BindingFlags.SetProperty
  id: SetProperty
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: SetProperty
  nameWithType: BindingFlags.SetProperty
  fullName: System.Reflection.BindingFlags.SetProperty
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetProperty
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 46
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that the value of the specified property should be set. For COM properties, specifying this binding flag is equivalent to specifying <strong>PutDispProperty</strong> and <strong>PutRefDispProperty</strong>.</p>\n<p>This flag is passed to an <strong>InvokeMember</strong> method to invoke a property setter. </p>\n"
  syntax:
    content: SetProperty = 8192
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Reflection.BindingFlags.Static
  commentId: F:System.Reflection.BindingFlags.Static
  id: Static
  parent: System.Reflection.BindingFlags
  langs:
  - csharp
  - vb
  name: Static
  nameWithType: BindingFlags.Static
  fullName: System.Reflection.BindingFlags.Static
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/BindingFlags.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Static
    path: src/mscorlib/src/System/Reflection/BindingFlags.cs
    startLine: 33
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Specifies that static members are to be included in the search.</p>\n"
  syntax:
    content: Static = 8
    return:
      type: System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
