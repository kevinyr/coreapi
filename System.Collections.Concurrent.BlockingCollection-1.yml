items:
- uid: System.Collections.Concurrent.BlockingCollection`1
  commentId: T:System.Collections.Concurrent.BlockingCollection`1
  id: BlockingCollection`1
  parent: System.Collections.Concurrent
  children:
  - System.Collections.Concurrent.BlockingCollection`1.#ctor
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  - System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  - System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  - System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.Count
  - System.Collections.Concurrent.BlockingCollection`1.Dispose
  - System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  - System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  - System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  - System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Concurrent.BlockingCollection`1.Take
  - System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.ToArray
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  - System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: BlockingCollection<T>
  fullName: System.Collections.Concurrent.BlockingCollection<T>
  type: Class
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BlockingCollection
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 41
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Provides blocking and bounding capabilities for thread-safe collections that implement <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (BlockingCollectionDebugView<>))]

      [DebuggerDisplay("Count = {Count}, Type = {_collection}")]

      public class BlockingCollection<T> : ICollection, IDisposable, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable
    content.vb: >-
      <DebuggerTypeProxy(GetType(BlockingCollectionDebugView(Of )))>

      <DebuggerDisplay("Count = {Count}, Type = {_collection}")>

      Public Class BlockingCollection(Of T)
          Implements ICollection, IDisposable, IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
      description: "\n<p>The type of elements in the collection.</p>\n"
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T)
  name.vb: BlockingCollection(Of T)
  nameWithType: BlockingCollection<T>
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Queryable.AsQueryable``1
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.ParallelEnumerable.AsParallel``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Aggregate``1(System.Func{{T},{T},{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Aggregate``2({TAccumulate},System.Func{{TAccumulate},{T},{TAccumulate}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Aggregate``3({TAccumulate},System.Func{{TAccumulate},{T},{TAccumulate}},System.Func{{TAccumulate},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.All``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Any``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Any``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.AsEnumerable``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Decimal})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Double})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Int32})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Int64})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Decimal}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Double}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Int32}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Int64}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Single}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Single})
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Append``1({T})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Prepend``1({T})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Contains``1({T})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Contains``1({T},System.Collections.Generic.IEqualityComparer{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Count``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Count``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.DefaultIfEmpty``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.DefaultIfEmpty``1({T})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Distinct``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEqualityComparer{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ElementAt``1(System.Int32)
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ElementAtOrDefault``1(System.Int32)
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.First``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.First``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.FirstOrDefault``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.FirstOrDefault``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``2(System.Func{{T},{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``2(System.Func{{T},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``4(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``4(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},{TInner},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},{TInner},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Last``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Last``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LastOrDefault``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LastOrDefault``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LongCount``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LongCount``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Decimal})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Double})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Int32})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Int64})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Decimal}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Double}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Int32}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Int64}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Single}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Single})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``2(System.Func{{T},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Decimal})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Double})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Int32})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Int64})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Decimal}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Double}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Int32}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Int64}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Single}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Single})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``2(System.Func{{T},{TResult}})
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderBy``2(System.Func{{T},{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderBy``2(System.Func{{T},{TKey}},System.Collections.Generic.IComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderByDescending``2(System.Func{{T},{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderByDescending``2(System.Func{{T},{TKey}},System.Collections.Generic.IComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Reverse``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Select``2(System.Func{{T},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Select``2(System.Func{{T},System.Int32,{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``2(System.Func{{T},System.Collections.Generic.IEnumerable{{TResult}}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``2(System.Func{{T},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``3(System.Func{{T},System.Collections.Generic.IEnumerable{{TCollection}}},System.Func{{T},{TCollection},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``3(System.Func{{T},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}},System.Func{{T},{TCollection},{TResult}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Single``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Single``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SingleOrDefault``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SingleOrDefault``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Skip``1(System.Int32)
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SkipWhile``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SkipWhile``1(System.Func{{T},System.Int32,System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Decimal})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Double})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Int32})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Int64})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Decimal}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Double}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Int32}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Int64}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Single}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Single})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Take``1(System.Int32)
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.TakeWhile``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.TakeWhile``1(System.Func{{T},System.Int32,System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToArray``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``2(System.Func{{T},{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``2(System.Func{{T},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToList``1
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``2(System.Func{{T},{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``2(System.Func{{T},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Collections.Generic.IEqualityComparer{{TKey}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Where``1(System.Func{{T},System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Where``1(System.Func{{T},System.Int32,System.Boolean})
  - System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{{TSecond}},System.Func{{T},{TSecond},{TResult}})
  nameWithType.vb: BlockingCollection(Of T)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor
  id: '#ctor'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 144
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class without an upper-bound.</p>\n"
  syntax:
    content: public BlockingCollection()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection()
  nameWithType: BlockingCollection<T>.BlockingCollection()
  nameWithType.vb: BlockingCollection(Of T).BlockingCollection()
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection(IProducerConsumerCollection<T>)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 200
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class without an upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\" data-throw-if-not-resolved=\"false\"></xref> as its underlying data store.</p>\n"
  syntax:
    content: public BlockingCollection(IProducerConsumerCollection<T> collection)
    content.vb: Public Sub New(collection As IProducerConsumerCollection(Of T))
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
      description: "\n<p>The collection to use as the underlying data store.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collection</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection(Of T))
  name.vb: BlockingCollection(IProducerConsumerCollection(Of T))
  nameWithType: BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>)
  nameWithType.vb: BlockingCollection(Of T).BlockingCollection(IProducerConsumerCollection(Of T))
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)
  id: '#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection(IProducerConsumerCollection<T>, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection<T>, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 174
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified upper-bound and using the provided <xref href=\"System.Collections.Concurrent.IProducerConsumerCollection`1\" data-throw-if-not-resolved=\"false\"></xref> as its underlying data store.</p>\n"
  syntax:
    content: public BlockingCollection(IProducerConsumerCollection<T> collection, int boundedCapacity)
    content.vb: Public Sub New(collection As IProducerConsumerCollection(Of T), boundedCapacity As Integer)
    parameters:
    - id: collection
      type: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
      description: "\n<p>The collection to use as the underlying data store.</p>\n"
    - id: boundedCapacity
      type: System.Int32
      description: "\n<p>The bounded size of the collection.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collection</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>boundedCapacity</em> is not a positive value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The supplied <em>collection</em> contains more values than is permitted by <em>boundedCapacity</em>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Collections.Concurrent.IProducerConsumerCollection(Of T), System.Int32)
  name.vb: BlockingCollection(IProducerConsumerCollection(Of T), Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection(IProducerConsumerCollection<T>, Int32)
  nameWithType.vb: BlockingCollection(Of T).BlockingCollection(IProducerConsumerCollection(Of T), Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BlockingCollection(Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BlockingCollection(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 159
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified upper-bound.</p>\n"
  syntax:
    content: public BlockingCollection(int boundedCapacity)
    content.vb: Public Sub New(boundedCapacity As Integer)
    parameters:
    - id: boundedCapacity
      type: System.Int32
      description: "\n<p>The bounded size of the collection.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>boundedCapacity</em> is not a positive value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BlockingCollection(System.Int32)
  nameWithType: BlockingCollection<T>.BlockingCollection(Int32)
  nameWithType.vb: BlockingCollection(Of T).BlockingCollection(Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity
  id: BoundedCapacity
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: BoundedCapacity
  fullName: System.Collections.Concurrent.BlockingCollection<T>.BoundedCapacity
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BoundedCapacity
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 62
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets the bounded capacity of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public int BoundedCapacity { get; }
    content.vb: Public ReadOnly Property BoundedCapacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The bounded capacity of this collection, or int.MaxValue if no bound was supplied.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).BoundedCapacity
  nameWithType: BlockingCollection<T>.BoundedCapacity
  nameWithType.vb: BlockingCollection(Of T).BoundedCapacity
- uid: System.Collections.Concurrent.BlockingCollection`1.Count
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.Count
  id: Count
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 101
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets the number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of items contained in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Count
  nameWithType: BlockingCollection<T>.Count
  nameWithType.vb: BlockingCollection(Of T).Count
- uid: System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted
  id: IsAddingCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: IsAddingCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsAddingCompleted
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAddingCompleted
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 75
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete for adding.</p>\n"
  syntax:
    content: public bool IsAddingCompleted { get; }
    content.vb: Public ReadOnly Property IsAddingCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Whether this collection has been marked as complete for adding.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).IsAddingCompleted
  nameWithType: BlockingCollection<T>.IsAddingCompleted
  nameWithType.vb: BlockingCollection(Of T).IsAddingCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted
  id: IsCompleted
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: IsCompleted
  fullName: System.Collections.Concurrent.BlockingCollection<T>.IsCompleted
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsCompleted
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 88
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets whether this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete for adding and is empty.</p>\n"
  syntax:
    content: public bool IsCompleted { get; }
    content.vb: Public ReadOnly Property IsCompleted As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Whether this collection has been marked as complete for adding and is empty.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).IsCompleted
  nameWithType: BlockingCollection<T>.IsCompleted
  nameWithType.vb: BlockingCollection(Of T).IsCompleted
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 113
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> is synchronized.</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>always returns false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.ICollection.IsSynchronized
  name.vb: System.Collections.ICollection.IsSynchronized
  nameWithType: BlockingCollection<T>.ICollection.IsSynchronized
  nameWithType.vb: BlockingCollection(Of T).System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 127
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref>. This property is not supported.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: "\n<p>returns null.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The SyncRoot property is not supported.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.ICollection.SyncRoot
  name.vb: System.Collections.ICollection.SyncRoot
  nameWithType: BlockingCollection<T>.ICollection.SyncRoot
  nameWithType.vb: BlockingCollection(Of T).System.Collections.ICollection.SyncRoot
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)
  id: Add(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Add(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 253
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Add(T item)
    content.vb: Public Sub Add(item As T)
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to the collection. The value can be a null reference.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete with regards to additions.</p>\n<p>-or-</p>\n<p>The underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Add(T)
  nameWithType: BlockingCollection<T>.Add(T)
  nameWithType.vb: BlockingCollection(Of T).Add(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)
  id: Add(`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Add(T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Add(T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 283
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds the item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Add(T item, CancellationToken cancellationToken)
    content.vb: Public Sub Add(item As T, cancellationToken As CancellationToken)
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to the collection. The value can be a null reference.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that owns <em>cancellationToken</em> has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete with regards to additions.</p>\n<p>-or-</p>\n<p>The underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Add(T, System.Threading.CancellationToken)
  nameWithType: BlockingCollection<T>.Add(T, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).Add(T, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: AddToAny(BlockingCollection<T>[], T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 793
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int AddToAny(BlockingCollection<T>[] collections, T item)
    content.vb: Public Shared Function AddToAny(collections As BlockingCollection(Of T)(), item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to one of the collections.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array to which the item was added.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).AddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T)
  name.vb: AddToAny(BlockingCollection(Of T)(), T)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T)
  nameWithType.vb: BlockingCollection(Of T).AddToAny(BlockingCollection(Of T)(), T)
- uid: System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  id: AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: AddToAny(BlockingCollection<T>[], T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.AddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 835
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Adds the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int AddToAny(BlockingCollection<T>[] collections, T item, CancellationToken cancellationToken)
    content.vb: Public Shared Function AddToAny(collections As BlockingCollection(Of T)(), item As T, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to one of the collections.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array to which the item was added.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one underlying collection didn't accept the item.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed, or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).AddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Threading.CancellationToken)
  name.vb: AddToAny(BlockingCollection(Of T)(), T, CancellationToken)
  nameWithType: BlockingCollection<T>.AddToAny(BlockingCollection<T>[], T, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).AddToAny(BlockingCollection(Of T)(), T, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding
  id: CompleteAdding
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: CompleteAdding()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CompleteAdding()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompleteAdding
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1473
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Marks the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances as not accepting any more additions.</p>\n"
  syntax:
    content: public void CompleteAdding()
    content.vb: Public Sub CompleteAdding
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).CompleteAdding()
  nameWithType: BlockingCollection<T>.CompleteAdding()
  nameWithType.vb: BlockingCollection(Of T).CompleteAdding()
- uid: System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: CopyTo(T[], Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.CopyTo(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1578
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n"
  syntax:
    content: public void CopyTo(T[] array, int index)
    content.vb: Public Sub CopyTo(array As T(), index As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance. The array must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>array</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>index</em> argument is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> argument is equal to or greater than the length of the <em>array</em>.</p>\n<p>The destination array is too small to hold all of the BlockingCcollection elements.</p>\n<p>The array rank doesn't match.</p>\n<p>The array type is incompatible with the type of the BlockingCollection elements.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).CopyTo(T(), System.Int32)
  name.vb: CopyTo(T(), Int32)
  nameWithType: BlockingCollection<T>.CopyTo(T[], Int32)
  nameWithType.vb: BlockingCollection(Of T).CopyTo(T(), Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Dispose
  id: Dispose
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1527
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Dispose()
  nameWithType: BlockingCollection<T>.Dispose()
  nameWithType.vb: BlockingCollection(Of T).Dispose()
- uid: System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1537
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Releases resources used by the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>Whether being disposed explicitly (true) or due to a finalizer (false).</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Dispose(System.Boolean)
  nameWithType: BlockingCollection<T>.Dispose(Boolean)
  nameWithType.vb: BlockingCollection(Of T).Dispose(Boolean)
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable
  id: GetConsumingEnumerable
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: GetConsumingEnumerable()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConsumingEnumerable
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1639
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Provides a consuming <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> for items in the collection.</p>\n"
  syntax:
    content: public IEnumerable<T> GetConsumingEnumerable()
    content.vb: Public Function GetConsumingEnumerable As IEnumerable(Of T)
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that removes and returns items from the collection.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).GetConsumingEnumerable()
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable()
  nameWithType.vb: BlockingCollection(Of T).GetConsumingEnumerable()
- uid: System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)
  id: GetConsumingEnumerable(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: GetConsumingEnumerable(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.GetConsumingEnumerable(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConsumingEnumerable
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1653
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Provides a consuming <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> for items in the collection.</p>\n"
  syntax:
    content: public IEnumerable<T> GetConsumingEnumerable(CancellationToken cancellationToken)
    content.vb: Public Function GetConsumingEnumerable(cancellationToken As CancellationToken) As IEnumerable(Of T)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> that removes and returns items from the collection.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).GetConsumingEnumerable(System.Threading.CancellationToken)
  nameWithType: BlockingCollection<T>.GetConsumingEnumerable(CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).GetConsumingEnumerable(CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator
  id: System#Collections#Generic#IEnumerable{T}#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: IEnumerable<T>.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1681
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Provides an <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> for items in the collection.</p>\n"
  syntax:
    content: IEnumerator<T> IEnumerable<T>.GetEnumerator()
    content.vb: Function System.Collections.Generic.IEnumerable<T>.GetEnumerator As IEnumerator(Of T) Implements IEnumerable(Of T).GetEnumerator
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerator`1\" data-throw-if-not-resolved=\"false\"></xref> for the items in the collection.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  name.vb: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  nameWithType: BlockingCollection<T>.IEnumerable<T>.GetEnumerator()
  nameWithType.vb: BlockingCollection(Of T).System.Collections.Generic.IEnumerable<T>.GetEnumerator()
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1597
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Copies all of the items in the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance to a compatible one-dimensional array, starting at the specified index of the target array.</p>\n"
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional array that is the destination of the elements copied from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance. The array must have zero-based indexing.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>array</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>index</em> argument is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>index</em> argument is equal to or greater than the length of the <em>array</em>, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.</p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
  nameWithType: BlockingCollection<T>.ICollection.CopyTo(Array, Int32)
  nameWithType.vb: BlockingCollection(Of T).System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1691
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Provides an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for items in the collection.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the items in the collection.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: BlockingCollection<T>.IEnumerable.GetEnumerator()
  nameWithType.vb: BlockingCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.Concurrent.BlockingCollection`1.Take
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Take
  id: Take
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Take()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 538
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Removes  an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public T Take()
    content.vb: Public Function Take As T
    return:
      type: '{T}'
      description: "\n<p>The item removed from the collection.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> is empty and the collection has been marked as complete for adding.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Take()
  nameWithType: BlockingCollection<T>.Take()
  nameWithType.vb: BlockingCollection(Of T).Take()
- uid: System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)
  id: Take(System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: Take(CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.Take(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 562
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Removes an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public T Take(CancellationToken cancellationToken)
    content.vb: Public Function Take(cancellationToken As CancellationToken) As T
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>Object that can be used to cancel the take operation.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The item removed from the collection.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created the token was canceled.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance or the BlockingCollection is marked as complete for adding, or the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).Take(System.Threading.CancellationToken)
  nameWithType: BlockingCollection<T>.Take(CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).Take(CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TakeFromAny(BlockingCollection<T>[], out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1172
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item)
    content.vb: Public Shared Function TakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item removed from one of the collections.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array from which the item was removed.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\" data-throw-if-not-resolved=\"false\"></xref> has been called on the collection.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T)
  name.vb: TakeFromAny(BlockingCollection(Of T)(), ByRef T)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], out T)
  nameWithType.vb: BlockingCollection(Of T).TakeFromAny(BlockingCollection(Of T)(), ByRef T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  id: TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TakeFromAny(BlockingCollection<T>[], out T, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1201
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Takes an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances while observing the specified cancellation token.</p>\n"
  syntax:
    content: public static int TakeFromAny(BlockingCollection<T>[] collections, out T item, CancellationToken cancellationToken)
    content.vb: Public Shared Function TakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item removed from one of the collections.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array from which the item was removed.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or <xref href=\"System.Collections.Concurrent.BlockingCollection`1.CompleteAdding\" data-throw-if-not-resolved=\"false\"></xref> has been called on the collection.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Threading.CancellationToken)
  name.vb: TakeFromAny(BlockingCollection(Of T)(), ByRef T, CancellationToken)
  nameWithType: BlockingCollection<T>.TakeFromAny(BlockingCollection<T>[], out T, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).TakeFromAny(BlockingCollection(Of T)(), ByRef T, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.ToArray
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.ToArray
  id: ToArray
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: ToArray()
  fullName: System.Collections.Concurrent.BlockingCollection<T>.ToArray()
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1559
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Copies the items from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance into a new array.</p>\n"
  syntax:
    content: public T[] ToArray()
    content.vb: Public Function ToArray As T()
    return:
      type: '{T}[]'
      description: "\n<p>An array containing copies of the elements of the collection.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).ToArray()
  nameWithType: BlockingCollection<T>.ToArray()
  nameWithType.vb: BlockingCollection(Of T).ToArray()
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)
  id: TryAdd(`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 305
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool TryAdd(T item)
    content.vb: Public Function TryAdd(item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to the collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if <em>item</em> could be added; otherwise false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.  </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete with regards to additions.</p>\n<p>-or-</p>\n<p>The underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T)
  nameWithType: BlockingCollection<T>.TryAdd(T)
  nameWithType.vb: BlockingCollection(Of T).TryAdd(T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)
  id: TryAdd(`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 350
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> within the specified time period.</p>\n"
  syntax:
    content: public bool TryAdd(T item, int millisecondsTimeout)
    content.vb: Public Function TryAdd(item As T, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to the collection.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the <em>item</em> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete with regards to additions.</p>\n<p>-or-</p>\n<p>The underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.Int32)
  nameWithType: BlockingCollection<T>.TryAdd(T, Int32)
  nameWithType.vb: BlockingCollection(Of T).TryAdd(T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  id: TryAdd(`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 376
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> within the specified time period, while observing a cancellation token.</p>\n"
  syntax:
    content: public bool TryAdd(T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function TryAdd(item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to the collection.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the <em>item</em> could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete with regards to additions.</p>\n<p>-or-</p>\n<p>The underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.Int32, System.Threading.CancellationToken)
  nameWithType: BlockingCollection<T>.TryAdd(T, Int32, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).TryAdd(T, Int32, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)
  id: TryAdd(`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAdd(T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAdd(T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAdd
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 328
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool TryAdd(T item, TimeSpan timeout)
    content.vb: Public Function TryAdd(item As T, timeout As TimeSpan) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to the collection.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n<p></p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the <em>item</em> could be added to the collection within the specified time span; otherwise, false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been marked as complete with regards to additions.</p>\n<p>-or-</p>\n<p>The underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAdd(T, System.TimeSpan)
  nameWithType: BlockingCollection<T>.TryAdd(T, TimeSpan)
  nameWithType.vb: BlockingCollection(Of T).TryAdd(T, TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 868
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to one of the collections.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array to which the item was added, or -1 if the item could not be added.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T)
  nameWithType.vb: BlockingCollection(Of T).TryAddToAny(BlockingCollection(Of T)(), T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 924
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, millisecondsTimeout As Integer) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to one of the collections.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array to which the item was added, or -1 if the item could not be added.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n<p>-or-</p>\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Int32)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, Int32)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32)
  nameWithType.vb: BlockingCollection(Of T).TryAddToAny(BlockingCollection(Of T)(), T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 956
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to one of the collections.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array to which the item was added, or -1 if the item could not be added.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one underlying collection didn't accept the item.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n<p>-or-</p>\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.Int32, System.Threading.CancellationToken)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, Int32, CancellationToken)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, Int32, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).TryAddToAny(BlockingCollection(Of T)(), T, Int32, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  id: TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryAddToAny(BlockingCollection<T>[], T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryAddToAny(System.Collections.Concurrent.BlockingCollection<T>[], T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryAddToAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 897
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to add the specified item to any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances while observing the specified cancellation token.</p>\n"
  syntax:
    content: public static int TryAddToAny(BlockingCollection<T>[] collections, T item, TimeSpan timeout)
    content.vb: Public Shared Function TryAddToAny(collections As BlockingCollection(Of T)(), item As T, timeout As TimeSpan) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item to be added to one of the collections.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n<p></p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array to which the item was added, or -1 if the item could not be added.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one underlying collection didn't accept the item.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryAddToAny(System.Collections.Concurrent.BlockingCollection(Of T)(), T, System.TimeSpan)
  name.vb: TryAddToAny(BlockingCollection(Of T)(), T, TimeSpan)
  nameWithType: BlockingCollection<T>.TryAddToAny(BlockingCollection<T>[], T, TimeSpan)
  nameWithType.vb: BlockingCollection(Of T).TryAddToAny(BlockingCollection(Of T)(), T, TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)
  id: TryTake(`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 584
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool TryTake(out T item)
    content.vb: Public Function TryTake(ByRef item As T) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be removed from the collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an item could be removed; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T)
  name.vb: TryTake(ByRef T)
  nameWithType: BlockingCollection<T>.TryTake(out T)
  nameWithType.vb: BlockingCollection(Of T).TryTake(ByRef T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)
  id: TryTake(`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 627
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> in the specified time period.</p>\n"
  syntax:
    content: public bool TryTake(out T item, int millisecondsTimeout)
    content.vb: Public Function TryTake(ByRef item As T, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be removed from the collection.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an item could be removed from the collection within the specified  time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.Int32)
  name.vb: TryTake(ByRef T, Int32)
  nameWithType: BlockingCollection<T>.TryTake(out T, Int32)
  nameWithType.vb: BlockingCollection(Of T).TryTake(ByRef T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTake(`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 652
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> in the specified time period while observing a cancellation token.</p>\n"
  syntax:
    content: public bool TryTake(out T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function TryTake(ByRef item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be removed from the collection.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an item could be removed from the collection within the specified  time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed or the underlying <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying collection was modified outside this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.Int32, System.Threading.CancellationToken)
  name.vb: TryTake(ByRef T, Int32, CancellationToken)
  nameWithType: BlockingCollection<T>.TryTake(out T, Int32, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).TryTake(ByRef T, Int32, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)
  id: TryTake(`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTake(out T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTake(out T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTake
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 606
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> in the specified time period.</p>\n"
  syntax:
    content: public bool TryTake(out T item, TimeSpan timeout)
    content.vb: Public Function TryTake(ByRef item As T, timeout As TimeSpan) As Boolean
    parameters:
    - id: item
      type: '{T}'
      description: "\n<p>The item to be removed from the collection.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>An object that represents the number of milliseconds to wait, or an object that represents -1 milliseconds to wait indefinitely. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an item could be removed from the collection within the specified  time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out.</p>\n<p>-or- </p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying collection was modified outside of this <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTake(ByRef T, System.TimeSpan)
  name.vb: TryTake(ByRef T, TimeSpan)
  nameWithType: BlockingCollection<T>.TryTake(out T, TimeSpan)
  nameWithType.vb: BlockingCollection(Of T).TryTake(ByRef T, TimeSpan)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1229
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item removed from one of the collections.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array from which the item was removed, or -1 if an item could not be removed.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T)
  nameWithType.vb: BlockingCollection(Of T).TryTakeFromAny(BlockingCollection(Of T)(), ByRef T)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T, Int32)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1290
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, millisecondsTimeout As Integer) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item removed from one of the collections.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array from which the item was removed, or -1 if an item could not be removed.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n<p>-or-</p>\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Int32)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, Int32)
  nameWithType.vb: BlockingCollection(Of T).TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T, Int32, CancellationToken)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1324
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item removed from one of the collections.</p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to observe.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array from which the item was removed, or -1 if an item could not be removed.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>If the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n<p>-or-</p>\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.Int32, System.Threading.CancellationToken)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32, CancellationToken)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, Int32, CancellationToken)
  nameWithType.vb: BlockingCollection(Of T).TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, Int32, CancellationToken)
- uid: System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  commentId: M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  id: TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)
  parent: System.Collections.Concurrent.BlockingCollection`1
  langs:
  - csharp
  - vb
  name: TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan)
  fullName: System.Collections.Concurrent.BlockingCollection<T>.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection<T>[], out T, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryTakeFromAny
    path: src/System.Collections.Concurrent/src/System/Collections/Concurrent/BlockingCollection.cs
    startLine: 1260
  assemblies:
  - System.Collections.Concurrent
  namespace: System.Collections.Concurrent
  summary: "\n<p>Tries to remove an item from any one of the specified <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances.</p>\n"
  syntax:
    content: public static int TryTakeFromAny(BlockingCollection<T>[] collections, out T item, TimeSpan timeout)
    content.vb: Public Shared Function TryTakeFromAny(collections As BlockingCollection(Of T)(), ByRef item As T, timeout As TimeSpan) As Integer
    parameters:
    - id: collections
      type: System.Collections.Concurrent.BlockingCollection`1[]
      description: "\n<p>The array of collections.</p>\n"
    - id: item
      type: '{T}'
      description: "\n<p>The item removed from one of the collections.</p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n<p></p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the collection in the <em>collections</em> array from which the item was removed, or -1 if an item could not be removed.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>At least one of the <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instances has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>collections</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The count of <em>collections</em> is greater than the maximum size of 62 for STA and 63 for MTA.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>collections</em> argument is a 0-length array or contains a null element.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>At least one of the underlying collections was modified outside of its <xref href=\"System.Collections.Concurrent.BlockingCollection`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Collections.Concurrent.BlockingCollection(Of T).TryTakeFromAny(System.Collections.Concurrent.BlockingCollection(Of T)(), ByRef T, System.TimeSpan)
  name.vb: TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, TimeSpan)
  nameWithType: BlockingCollection<T>.TryTakeFromAny(BlockingCollection<T>[], out T, TimeSpan)
  nameWithType.vb: BlockingCollection(Of T).TryTakeFromAny(BlockingCollection(Of T)(), ByRef T, TimeSpan)
references:
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  commentId: T:System.Collections.Generic.IReadOnlyCollection{`0}
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable{``0}
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
  nameWithType: ICollection
  commentId: T:System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  nameWithType: IEnumerable
  commentId: T:System.Collections.IEnumerable
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Queryable.AsQueryable()
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Queryable.AsQueryable``1
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  name: AsQueryable<TElement>()
  fullName: System.Linq.Queryable.AsQueryable<TElement>()
  fullname.vb: System.Linq.Queryable.AsQueryable(Of TElement)()
  name.vb: AsQueryable(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable``1
    name: AsQueryable<TElement>
    fullName: System.Linq.Queryable.AsQueryable<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable``1
    name: AsQueryable(Of TElement)
    fullName: System.Linq.Queryable.AsQueryable(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Queryable.AsQueryable<TElement>()
  nameWithType.vb: Queryable.AsQueryable(Of TElement)()
  commentId: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel()
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.ParallelEnumerable.AsParallel``1
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  name: AsParallel<TElement>()
  fullName: System.Linq.ParallelEnumerable.AsParallel<TElement>()
  fullname.vb: System.Linq.ParallelEnumerable.AsParallel(Of TElement)()
  name.vb: AsParallel(Of TElement)()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel``1
    name: AsParallel<TElement>
    fullName: System.Linq.ParallelEnumerable.AsParallel<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel``1
    name: AsParallel(Of TElement)
    fullName: System.Linq.ParallelEnumerable.AsParallel(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel<TElement>()
  nameWithType.vb: ParallelEnumerable.AsParallel(Of TElement)()
  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Aggregate``1(System.Func{{T},{T},{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  name: Aggregate<T>(Func<T, T, T>)
  fullName: System.Linq.Enumerable.Aggregate<T>(System.Func<T, T, T>)
  fullname.vb: System.Linq.Enumerable.Aggregate(Of T)(System.Func(Of T, T, T))
  name.vb: Aggregate(Of T)(Func(Of T, T, T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Aggregate``1(System.Func{``0,``0,``0})
    name: Aggregate<T>
    fullName: System.Linq.Enumerable.Aggregate<T>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Aggregate``1(System.Func{``0,``0,``0})
    name: Aggregate(Of T)
    fullName: System.Linq.Enumerable.Aggregate(Of T)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Aggregate<T>(Func<T, T, T>)
  nameWithType.vb: Enumerable.Aggregate(Of T)(Func(Of T, T, T))
  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Aggregate``2({TAccumulate},System.Func{{TAccumulate},{T},{TAccumulate}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  name: Aggregate<T, TAccumulate>(TAccumulate, Func<TAccumulate, T, TAccumulate>)
  fullName: System.Linq.Enumerable.Aggregate<T, TAccumulate>(TAccumulate, System.Func<TAccumulate, T, TAccumulate>)
  fullname.vb: System.Linq.Enumerable.Aggregate(Of T, TAccumulate)(TAccumulate, System.Func(Of TAccumulate, T, TAccumulate))
  name.vb: Aggregate(Of T, TAccumulate)(TAccumulate, Func(Of TAccumulate, T, TAccumulate))
  spec.csharp:
  - uid: System.Linq.Enumerable.Aggregate``2(``1,System.Func{``1,``0,``1})
    name: Aggregate<T, TAccumulate>
    fullName: System.Linq.Enumerable.Aggregate<T, TAccumulate>
  - name: (
    fullName: (
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Aggregate``2(``1,System.Func{``1,``0,``1})
    name: Aggregate(Of T, TAccumulate)
    fullName: System.Linq.Enumerable.Aggregate(Of T, TAccumulate)
  - name: (
    fullName: (
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Aggregate<T, TAccumulate>(TAccumulate, Func<TAccumulate, T, TAccumulate>)
  nameWithType.vb: Enumerable.Aggregate(Of T, TAccumulate)(TAccumulate, Func(Of TAccumulate, T, TAccumulate))
  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Aggregate``3({TAccumulate},System.Func{{TAccumulate},{T},{TAccumulate}},System.Func{{TAccumulate},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  name: Aggregate<T, TAccumulate, TResult>(TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.Enumerable.Aggregate<T, TAccumulate, TResult>(TAccumulate, System.Func<TAccumulate, T, TAccumulate>, System.Func<TAccumulate, TResult>)
  fullname.vb: System.Linq.Enumerable.Aggregate(Of T, TAccumulate, TResult)(TAccumulate, System.Func(Of TAccumulate, T, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of T, TAccumulate, TResult)(TAccumulate, Func(Of TAccumulate, T, TAccumulate), Func(Of TAccumulate, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Aggregate``3(``1,System.Func{``1,``0,``1},System.Func{``1,``2})
    name: Aggregate<T, TAccumulate, TResult>
    fullName: System.Linq.Enumerable.Aggregate<T, TAccumulate, TResult>
  - name: (
    fullName: (
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Aggregate``3(``1,System.Func{``1,``0,``1},System.Func{``1,``2})
    name: Aggregate(Of T, TAccumulate, TResult)
    fullName: System.Linq.Enumerable.Aggregate(Of T, TAccumulate, TResult)
  - name: (
    fullName: (
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Aggregate<T, TAccumulate, TResult>(TAccumulate, Func<TAccumulate, T, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType.vb: Enumerable.Aggregate(Of T, TAccumulate, TResult)(TAccumulate, Func(Of TAccumulate, T, TAccumulate), Func(Of TAccumulate, TResult))
  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.All``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: All<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.All<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.All(Of T)(System.Func(Of T, System.Boolean))
  name.vb: All(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.All``1(System.Func{``0,System.Boolean})
    name: All<T>
    fullName: System.Linq.Enumerable.All<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.All``1(System.Func{``0,System.Boolean})
    name: All(Of T)
    fullName: System.Linq.Enumerable.All(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.All<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.All(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Any``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  name: Any<TElement>()
  fullName: System.Linq.Enumerable.Any<TElement>()
  fullname.vb: System.Linq.Enumerable.Any(Of TElement)()
  name.vb: Any(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Any``1
    name: Any<TElement>
    fullName: System.Linq.Enumerable.Any<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Any``1
    name: Any(Of TElement)
    fullName: System.Linq.Enumerable.Any(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Any<TElement>()
  nameWithType.vb: Enumerable.Any(Of TElement)()
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Any``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: Any<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.Any<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Any(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Any(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Any``1(System.Func{``0,System.Boolean})
    name: Any<T>
    fullName: System.Linq.Enumerable.Any<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Any``1(System.Func{``0,System.Boolean})
    name: Any(Of T)
    fullName: System.Linq.Enumerable.Any(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Any<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.Any(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.AsEnumerable``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  name: AsEnumerable<TElement>()
  fullName: System.Linq.Enumerable.AsEnumerable<TElement>()
  fullname.vb: System.Linq.Enumerable.AsEnumerable(Of TElement)()
  name.vb: AsEnumerable(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.AsEnumerable``1
    name: AsEnumerable<TElement>
    fullName: System.Linq.Enumerable.AsEnumerable<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.AsEnumerable``1
    name: AsEnumerable(Of TElement)
    fullName: System.Linq.Enumerable.AsEnumerable(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.AsEnumerable<TElement>()
  nameWithType.vb: Enumerable.AsEnumerable(Of TElement)()
  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Decimal})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  name: Average<T>(Func<T, Decimal>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Decimal))
  name.vb: Average(Of T)(Func(Of T, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Decimal})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Decimal})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Decimal>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Decimal))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Double})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  name: Average<T>(Func<T, Double>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Double>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Double))
  name.vb: Average(Of T)(Func(Of T, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Double})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Double})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Double>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Double))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Int32})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  name: Average<T>(Func<T, Int32>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Int32))
  name.vb: Average(Of T)(Func(Of T, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Int32})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Int32})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Int32>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Int32))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Int64})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  name: Average<T>(Func<T, Int64>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Int64))
  name.vb: Average(Of T)(Func(Of T, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Int64})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Int64})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Int64>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Int64))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  name: Average<T>(Func<T, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of T)(Func(Of T, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  name: Average<T>(Func<T, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Nullable(Of System.Double)))
  name.vb: Average(Of T)(Func(Of T, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Double}})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Double}})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Nullable<Double>>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  name: Average<T>(Func<T, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Nullable(Of System.Int32)))
  name.vb: Average(Of T)(Func(Of T, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  name: Average<T>(Func<T, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Nullable(Of System.Int64)))
  name.vb: Average(Of T)(Func(Of T, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  name: Average<T>(Func<T, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Nullable(Of System.Single)))
  name.vb: Average(Of T)(Func(Of T, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Single}})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Nullable{System.Single}})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Nullable<Single>>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Average``1(System.Func{{T},System.Single})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  name: Average<T>(Func<T, Single>)
  fullName: System.Linq.Enumerable.Average<T>(System.Func<T, System.Single>)
  fullname.vb: System.Linq.Enumerable.Average(Of T)(System.Func(Of T, System.Single))
  name.vb: Average(Of T)(Func(Of T, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Single})
    name: Average<T>
    fullName: System.Linq.Enumerable.Average<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Func{``0,System.Single})
    name: Average(Of T)
    fullName: System.Linq.Enumerable.Average(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<T>(Func<T, Single>)
  nameWithType.vb: Enumerable.Average(Of T)(Func(Of T, Single))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Concat<T>(IEnumerable<T>)
  fullName: System.Linq.Enumerable.Concat<T>(System.Collections.Generic.IEnumerable<T>)
  fullname.vb: System.Linq.Enumerable.Concat(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Concat(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat<T>
    fullName: System.Linq.Enumerable.Concat<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of T)
    fullName: System.Linq.Enumerable.Concat(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Concat<T>(IEnumerable<T>)
  nameWithType.vb: Enumerable.Concat(Of T)(IEnumerable(Of T))
  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Append``1({T})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Append<T>(T)
  fullName: System.Linq.Enumerable.Append<T>(T)
  fullname.vb: System.Linq.Enumerable.Append(Of T)(T)
  name.vb: Append(Of T)(T)
  spec.csharp:
  - uid: System.Linq.Enumerable.Append``1(``0)
    name: Append<T>
    fullName: System.Linq.Enumerable.Append<T>
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Append``1(``0)
    name: Append(Of T)
    fullName: System.Linq.Enumerable.Append(Of T)
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Enumerable.Append<T>(T)
  nameWithType.vb: Enumerable.Append(Of T)(T)
  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Prepend``1({T})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Prepend<T>(T)
  fullName: System.Linq.Enumerable.Prepend<T>(T)
  fullname.vb: System.Linq.Enumerable.Prepend(Of T)(T)
  name.vb: Prepend(Of T)(T)
  spec.csharp:
  - uid: System.Linq.Enumerable.Prepend``1(``0)
    name: Prepend<T>
    fullName: System.Linq.Enumerable.Prepend<T>
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Prepend``1(``0)
    name: Prepend(Of T)
    fullName: System.Linq.Enumerable.Prepend(Of T)
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Enumerable.Prepend<T>(T)
  nameWithType.vb: Enumerable.Prepend(Of T)(T)
  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Contains``1({T})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: Contains<T>(T)
  fullName: System.Linq.Enumerable.Contains<T>(T)
  fullname.vb: System.Linq.Enumerable.Contains(Of T)(T)
  name.vb: Contains(Of T)(T)
  spec.csharp:
  - uid: System.Linq.Enumerable.Contains``1(``0)
    name: Contains<T>
    fullName: System.Linq.Enumerable.Contains<T>
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Contains``1(``0)
    name: Contains(Of T)
    fullName: System.Linq.Enumerable.Contains(Of T)
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Enumerable.Contains<T>(T)
  nameWithType.vb: Enumerable.Contains(Of T)(T)
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Contains``1({T},System.Collections.Generic.IEqualityComparer{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  name: Contains<T>(T, IEqualityComparer<T>)
  fullName: System.Linq.Enumerable.Contains<T>(T, System.Collections.Generic.IEqualityComparer<T>)
  fullname.vb: System.Linq.Enumerable.Contains(Of T)(T, System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Contains(Of T)(T, IEqualityComparer(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<T>
    fullName: System.Linq.Enumerable.Contains<T>
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Contains``1(``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of T)
    fullName: System.Linq.Enumerable.Contains(Of T)
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Contains<T>(T, IEqualityComparer<T>)
  nameWithType.vb: Enumerable.Contains(Of T)(T, IEqualityComparer(Of T))
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Count``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  name: Count<TElement>()
  fullName: System.Linq.Enumerable.Count<TElement>()
  fullname.vb: System.Linq.Enumerable.Count(Of TElement)()
  name.vb: Count(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Count``1
    name: Count<TElement>
    fullName: System.Linq.Enumerable.Count<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Count``1
    name: Count(Of TElement)
    fullName: System.Linq.Enumerable.Count(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Count<TElement>()
  nameWithType.vb: Enumerable.Count(Of TElement)()
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Count``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: Count<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.Count<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Count(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Count(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Count``1(System.Func{``0,System.Boolean})
    name: Count<T>
    fullName: System.Linq.Enumerable.Count<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Count``1(System.Func{``0,System.Boolean})
    name: Count(Of T)
    fullName: System.Linq.Enumerable.Count(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Count<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.Count(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.DefaultIfEmpty``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  name: DefaultIfEmpty<TElement>()
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TElement>()
  fullname.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TElement)()
  name.vb: DefaultIfEmpty(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1
    name: DefaultIfEmpty<TElement>
    fullName: System.Linq.Enumerable.DefaultIfEmpty<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1
    name: DefaultIfEmpty(Of TElement)
    fullName: System.Linq.Enumerable.DefaultIfEmpty(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.DefaultIfEmpty<TElement>()
  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TElement)()
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.DefaultIfEmpty``1({T})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  name: DefaultIfEmpty<T>(T)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<T>(T)
  fullname.vb: System.Linq.Enumerable.DefaultIfEmpty(Of T)(T)
  name.vb: DefaultIfEmpty(Of T)(T)
  spec.csharp:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1(``0)
    name: DefaultIfEmpty<T>
    fullName: System.Linq.Enumerable.DefaultIfEmpty<T>
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1(``0)
    name: DefaultIfEmpty(Of T)
    fullName: System.Linq.Enumerable.DefaultIfEmpty(Of T)
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Enumerable.DefaultIfEmpty<T>(T)
  nameWithType.vb: Enumerable.DefaultIfEmpty(Of T)(T)
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Distinct``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  name: Distinct<TElement>()
  fullName: System.Linq.Enumerable.Distinct<TElement>()
  fullname.vb: System.Linq.Enumerable.Distinct(Of TElement)()
  name.vb: Distinct(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Distinct``1
    name: Distinct<TElement>
    fullName: System.Linq.Enumerable.Distinct<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Distinct``1
    name: Distinct(Of TElement)
    fullName: System.Linq.Enumerable.Distinct(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Distinct<TElement>()
  nameWithType.vb: Enumerable.Distinct(Of TElement)()
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEqualityComparer{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Distinct<T>(IEqualityComparer<T>)
  fullName: System.Linq.Enumerable.Distinct<T>(System.Collections.Generic.IEqualityComparer<T>)
  fullname.vb: System.Linq.Enumerable.Distinct(Of T)(System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Distinct(Of T)(IEqualityComparer(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<T>
    fullName: System.Linq.Enumerable.Distinct<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of T)
    fullName: System.Linq.Enumerable.Distinct(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Distinct<T>(IEqualityComparer<T>)
  nameWithType.vb: Enumerable.Distinct(Of T)(IEqualityComparer(Of T))
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ElementAt``1(System.Int32)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ElementAt<TElement>(Int32)
  fullName: System.Linq.Enumerable.ElementAt<TElement>(System.Int32)
  fullname.vb: System.Linq.Enumerable.ElementAt(Of TElement)(System.Int32)
  name.vb: ElementAt(Of TElement)(Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.ElementAt``1(System.Int32)
    name: ElementAt<TElement>
    fullName: System.Linq.Enumerable.ElementAt<TElement>
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ElementAt``1(System.Int32)
    name: ElementAt(Of TElement)
    fullName: System.Linq.Enumerable.ElementAt(Of TElement)
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.ElementAt<TElement>(Int32)
  nameWithType.vb: Enumerable.ElementAt(Of TElement)(Int32)
  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ElementAtOrDefault``1(System.Int32)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: ElementAtOrDefault<TElement>(Int32)
  fullName: System.Linq.Enumerable.ElementAtOrDefault<TElement>(System.Int32)
  fullname.vb: System.Linq.Enumerable.ElementAtOrDefault(Of TElement)(System.Int32)
  name.vb: ElementAtOrDefault(Of TElement)(Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Int32)
    name: ElementAtOrDefault<TElement>
    fullName: System.Linq.Enumerable.ElementAtOrDefault<TElement>
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Int32)
    name: ElementAtOrDefault(Of TElement)
    fullName: System.Linq.Enumerable.ElementAtOrDefault(Of TElement)
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.ElementAtOrDefault<TElement>(Int32)
  nameWithType.vb: Enumerable.ElementAtOrDefault(Of TElement)(Int32)
  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Except<T>(IEnumerable<T>)
  fullName: System.Linq.Enumerable.Except<T>(System.Collections.Generic.IEnumerable<T>)
  fullname.vb: System.Linq.Enumerable.Except(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Except(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except<T>
    fullName: System.Linq.Enumerable.Except<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0})
    name: Except(Of T)
    fullName: System.Linq.Enumerable.Except(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Except<T>(IEnumerable<T>)
  nameWithType.vb: Enumerable.Except(Of T)(IEnumerable(Of T))
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Except<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Linq.Enumerable.Except<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  fullname.vb: System.Linq.Enumerable.Except(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Except(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<T>
    fullName: System.Linq.Enumerable.Except<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of T)
    fullName: System.Linq.Enumerable.Except(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Except<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType.vb: Enumerable.Except(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.First``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  name: First<TElement>()
  fullName: System.Linq.Enumerable.First<TElement>()
  fullname.vb: System.Linq.Enumerable.First(Of TElement)()
  name.vb: First(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.First``1
    name: First<TElement>
    fullName: System.Linq.Enumerable.First<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.First``1
    name: First(Of TElement)
    fullName: System.Linq.Enumerable.First(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.First<TElement>()
  nameWithType.vb: Enumerable.First(Of TElement)()
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.First``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: First<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.First<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.First(Of T)(System.Func(Of T, System.Boolean))
  name.vb: First(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.First``1(System.Func{``0,System.Boolean})
    name: First<T>
    fullName: System.Linq.Enumerable.First<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.First``1(System.Func{``0,System.Boolean})
    name: First(Of T)
    fullName: System.Linq.Enumerable.First(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.First<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.First(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.FirstOrDefault``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  name: FirstOrDefault<TElement>()
  fullName: System.Linq.Enumerable.FirstOrDefault<TElement>()
  fullname.vb: System.Linq.Enumerable.FirstOrDefault(Of TElement)()
  name.vb: FirstOrDefault(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.FirstOrDefault``1
    name: FirstOrDefault<TElement>
    fullName: System.Linq.Enumerable.FirstOrDefault<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.FirstOrDefault``1
    name: FirstOrDefault(Of TElement)
    fullName: System.Linq.Enumerable.FirstOrDefault(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.FirstOrDefault<TElement>()
  nameWithType.vb: Enumerable.FirstOrDefault(Of TElement)()
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.FirstOrDefault``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: FirstOrDefault<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.FirstOrDefault<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.FirstOrDefault(Of T)(System.Func(Of T, System.Boolean))
  name.vb: FirstOrDefault(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.FirstOrDefault``1(System.Func{``0,System.Boolean})
    name: FirstOrDefault<T>
    fullName: System.Linq.Enumerable.FirstOrDefault<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.FirstOrDefault``1(System.Func{``0,System.Boolean})
    name: FirstOrDefault(Of T)
    fullName: System.Linq.Enumerable.FirstOrDefault(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.FirstOrDefault<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.FirstOrDefault(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``2(System.Func{{T},{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: GroupBy<T, TKey>(Func<T, TKey>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey>(System.Func<T, TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey)(System.Func(Of T, TKey))
  name.vb: GroupBy(Of T, TKey)(Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Func{``0,``1})
    name: GroupBy<T, TKey>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Func{``0,``1})
    name: GroupBy(Of T, TKey)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey>(Func<T, TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey)(Func(Of T, TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``2(System.Func{{T},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey>(System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey)(System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey)(Func(Of T, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<T, TKey>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of T, TKey)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey)(Func(Of T, TKey), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  name: GroupBy<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement>(System.Func<T, TKey>, System.Func<T, TElement>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement)(System.Func(Of T, TKey), System.Func(Of T, TElement))
  name.vb: GroupBy(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``0,``2})
    name: GroupBy<T, TKey, TElement>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``0,``2})
    name: GroupBy(Of T, TKey, TElement)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement>(System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement)(System.Func(Of T, TKey), System.Func(Of T, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<T, TKey, TElement>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of T, TKey, TElement)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  name: GroupBy<T, TKey, TResult>(Func<T, TKey>, Func<TKey, IEnumerable<T>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey, TResult>(System.Func<T, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<T>, TResult>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey, TResult)(System.Func(Of T, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of T), TResult))
  name.vb: GroupBy(Of T, TKey, TResult)(Func(Of T, TKey), Func(Of TKey, IEnumerable(Of T), TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy<T, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy(Of T, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey, TResult>(Func<T, TKey>, Func<TKey, IEnumerable<T>, TResult>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey, TResult)(Func(Of T, TKey), Func(Of TKey, IEnumerable(Of T), TResult))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``3(System.Func{{T},{TKey}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{T}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey, TResult>(Func<T, TKey>, Func<TKey, IEnumerable<T>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey, TResult>(System.Func<T, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<T>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey, TResult)(System.Func(Of T, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of T), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey, TResult)(Func(Of T, TKey), Func(Of TKey, IEnumerable(Of T), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<T, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of T, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey, TResult>(Func<T, TKey>, Func<TKey, IEnumerable<T>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey, TResult)(Func(Of T, TKey), Func(Of TKey, IEnumerable(Of T), TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``4(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  name: GroupBy<T, TKey, TElement, TResult>(Func<T, TKey>, Func<T, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement, TResult>(System.Func<T, TKey>, System.Func<T, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement, TResult)(System.Func(Of T, TKey), System.Func(Of T, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of T, TKey, TElement, TResult)(Func(Of T, TKey), Func(Of T, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
    name: GroupBy<T, TKey, TElement, TResult>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
    name: GroupBy(Of T, TKey, TElement, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey, TElement, TResult>(Func<T, TKey>, Func<T, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey, TElement, TResult)(Func(Of T, TKey), Func(Of T, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupBy``4(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  name: GroupBy<T, TKey, TElement, TResult>(Func<T, TKey>, Func<T, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement, TResult>(System.Func<T, TKey>, System.Func<T, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement, TResult)(System.Func(Of T, TKey), System.Func(Of T, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of T, TKey, TElement, TResult)(Func(Of T, TKey), Func(Of T, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<T, TKey, TElement, TResult>
    fullName: System.Linq.Enumerable.GroupBy<T, TKey, TElement, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of T, TKey, TElement, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of T, TKey, TElement, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<T, TKey, TElement, TResult>(Func<T, TKey>, Func<T, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of T, TKey, TElement, TResult)(Func(Of T, TKey), Func(Of T, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  name: GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.Enumerable.GroupJoin<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Func<T, TKey>, System.Func<TInner, TKey>, System.Func<T, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  fullname.vb: System.Linq.Enumerable.GroupJoin(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of T, TKey), System.Func(Of TInner, TKey), System.Func(Of T, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    name: GroupJoin<T, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupJoin<T, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    name: GroupJoin(Of T, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupJoin(Of T, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, IEnumerable<TInner>, TResult>)
  nameWithType.vb: Enumerable.GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, IEnumerable(Of TInner), TResult))
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},System.Collections.Generic.IEnumerable{{TInner}},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  name: GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupJoin<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Func<T, TKey>, System.Func<TInner, TKey>, System.Func<T, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupJoin(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of T, TKey), System.Func(Of TInner, TKey), System.Func(Of T, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<T, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupJoin<T, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of T, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupJoin(Of T, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupJoin<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupJoin(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Intersect<T>(IEnumerable<T>)
  fullName: System.Linq.Enumerable.Intersect<T>(System.Collections.Generic.IEnumerable<T>)
  fullname.vb: System.Linq.Enumerable.Intersect(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Intersect(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect<T>
    fullName: System.Linq.Enumerable.Intersect<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of T)
    fullName: System.Linq.Enumerable.Intersect(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Intersect<T>(IEnumerable<T>)
  nameWithType.vb: Enumerable.Intersect(Of T)(IEnumerable(Of T))
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Intersect<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Linq.Enumerable.Intersect<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  fullname.vb: System.Linq.Enumerable.Intersect(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Intersect(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<T>
    fullName: System.Linq.Enumerable.Intersect<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of T)
    fullName: System.Linq.Enumerable.Intersect(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Intersect<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType.vb: Enumerable.Intersect(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},{TInner},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  name: Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, TInner, TResult>)
  fullName: System.Linq.Enumerable.Join<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Func<T, TKey>, System.Func<TInner, TKey>, System.Func<T, TInner, TResult>)
  fullname.vb: System.Linq.Enumerable.Join(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of T, TKey), System.Func(Of TInner, TKey), System.Func(Of T, TInner, TResult))
  name.vb: Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    name: Join<T, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.Join<T, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    name: Join(Of T, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.Join(Of T, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, TInner, TResult>)
  nameWithType.vb: Enumerable.Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, TInner, TResult))
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{{TInner}},System.Func{{T},{TKey}},System.Func{{TInner},{TKey}},System.Func{{T},{TInner},{TResult}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  name: Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.Join<T, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TInner>, System.Func<T, TKey>, System.Func<TInner, TKey>, System.Func<T, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.Join(Of T, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of T, TKey), System.Func(Of TInner, TKey), System.Func(Of T, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, TInner, TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<T, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.Join<T, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of T, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.Join(Of T, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Join<T, TInner, TKey, TResult>(IEnumerable<TInner>, Func<T, TKey>, Func<TInner, TKey>, Func<T, TInner, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.Join(Of T, TInner, TKey, TResult)(IEnumerable(Of TInner), Func(Of T, TKey), Func(Of TInner, TKey), Func(Of T, TInner, TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Last``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  name: Last<TElement>()
  fullName: System.Linq.Enumerable.Last<TElement>()
  fullname.vb: System.Linq.Enumerable.Last(Of TElement)()
  name.vb: Last(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Last``1
    name: Last<TElement>
    fullName: System.Linq.Enumerable.Last<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Last``1
    name: Last(Of TElement)
    fullName: System.Linq.Enumerable.Last(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Last<TElement>()
  nameWithType.vb: Enumerable.Last(Of TElement)()
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Last``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: Last<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.Last<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Last(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Last(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Last``1(System.Func{``0,System.Boolean})
    name: Last<T>
    fullName: System.Linq.Enumerable.Last<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Last``1(System.Func{``0,System.Boolean})
    name: Last(Of T)
    fullName: System.Linq.Enumerable.Last(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Last<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.Last(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LastOrDefault``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  name: LastOrDefault<TElement>()
  fullName: System.Linq.Enumerable.LastOrDefault<TElement>()
  fullname.vb: System.Linq.Enumerable.LastOrDefault(Of TElement)()
  name.vb: LastOrDefault(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.LastOrDefault``1
    name: LastOrDefault<TElement>
    fullName: System.Linq.Enumerable.LastOrDefault<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LastOrDefault``1
    name: LastOrDefault(Of TElement)
    fullName: System.Linq.Enumerable.LastOrDefault(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.LastOrDefault<TElement>()
  nameWithType.vb: Enumerable.LastOrDefault(Of TElement)()
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LastOrDefault``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: LastOrDefault<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.LastOrDefault<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.LastOrDefault(Of T)(System.Func(Of T, System.Boolean))
  name.vb: LastOrDefault(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.LastOrDefault``1(System.Func{``0,System.Boolean})
    name: LastOrDefault<T>
    fullName: System.Linq.Enumerable.LastOrDefault<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LastOrDefault``1(System.Func{``0,System.Boolean})
    name: LastOrDefault(Of T)
    fullName: System.Linq.Enumerable.LastOrDefault(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.LastOrDefault<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.LastOrDefault(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LongCount``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  name: LongCount<TElement>()
  fullName: System.Linq.Enumerable.LongCount<TElement>()
  fullname.vb: System.Linq.Enumerable.LongCount(Of TElement)()
  name.vb: LongCount(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.LongCount``1
    name: LongCount<TElement>
    fullName: System.Linq.Enumerable.LongCount<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LongCount``1
    name: LongCount(Of TElement)
    fullName: System.Linq.Enumerable.LongCount(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.LongCount<TElement>()
  nameWithType.vb: Enumerable.LongCount(Of TElement)()
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.LongCount``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: LongCount<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.LongCount<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.LongCount(Of T)(System.Func(Of T, System.Boolean))
  name.vb: LongCount(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.LongCount``1(System.Func{``0,System.Boolean})
    name: LongCount<T>
    fullName: System.Linq.Enumerable.LongCount<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LongCount``1(System.Func{``0,System.Boolean})
    name: LongCount(Of T)
    fullName: System.Linq.Enumerable.LongCount(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.LongCount<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.LongCount(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  name: Max<TElement>()
  fullName: System.Linq.Enumerable.Max<TElement>()
  fullname.vb: System.Linq.Enumerable.Max(Of TElement)()
  name.vb: Max(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1
    name: Max<TElement>
    fullName: System.Linq.Enumerable.Max<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1
    name: Max(Of TElement)
    fullName: System.Linq.Enumerable.Max(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TElement>()
  nameWithType.vb: Enumerable.Max(Of TElement)()
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Decimal})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  name: Max<T>(Func<T, Decimal>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Decimal))
  name.vb: Max(Of T)(Func(Of T, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Decimal})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Decimal})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Decimal>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Decimal))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Double})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  name: Max<T>(Func<T, Double>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Double>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Double))
  name.vb: Max(Of T)(Func(Of T, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Double})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Double})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Double>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Double))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Int32})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  name: Max<T>(Func<T, Int32>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Int32))
  name.vb: Max(Of T)(Func(Of T, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Int32})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Int32})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Int32>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Int32))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Int64})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  name: Max<T>(Func<T, Int64>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Int64))
  name.vb: Max(Of T)(Func(Of T, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Int64})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Int64})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Int64>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Int64))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  name: Max<T>(Func<T, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of T)(Func(Of T, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  name: Max<T>(Func<T, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Nullable(Of System.Double)))
  name.vb: Max(Of T)(Func(Of T, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Double}})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Double}})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Nullable<Double>>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  name: Max<T>(Func<T, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Nullable(Of System.Int32)))
  name.vb: Max(Of T)(Func(Of T, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  name: Max<T>(Func<T, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Nullable(Of System.Int64)))
  name.vb: Max(Of T)(Func(Of T, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  name: Max<T>(Func<T, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Nullable(Of System.Single)))
  name.vb: Max(Of T)(Func(Of T, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Single}})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Nullable{System.Single}})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Nullable<Single>>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``1(System.Func{{T},System.Single})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  name: Max<T>(Func<T, Single>)
  fullName: System.Linq.Enumerable.Max<T>(System.Func<T, System.Single>)
  fullname.vb: System.Linq.Enumerable.Max(Of T)(System.Func(Of T, System.Single))
  name.vb: Max(Of T)(Func(Of T, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Single})
    name: Max<T>
    fullName: System.Linq.Enumerable.Max<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Func{``0,System.Single})
    name: Max(Of T)
    fullName: System.Linq.Enumerable.Max(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T>(Func<T, Single>)
  nameWithType.vb: Enumerable.Max(Of T)(Func(Of T, Single))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Max``2(System.Func{{T},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: Max<T, TResult>(Func<T, TResult>)
  fullName: System.Linq.Enumerable.Max<T, TResult>(System.Func<T, TResult>)
  fullname.vb: System.Linq.Enumerable.Max(Of T, TResult)(System.Func(Of T, TResult))
  name.vb: Max(Of T, TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``2(System.Func{``0,``1})
    name: Max<T, TResult>
    fullName: System.Linq.Enumerable.Max<T, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``2(System.Func{``0,``1})
    name: Max(Of T, TResult)
    fullName: System.Linq.Enumerable.Max(Of T, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<T, TResult>(Func<T, TResult>)
  nameWithType.vb: Enumerable.Max(Of T, TResult)(Func(Of T, TResult))
  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  name: Min<TElement>()
  fullName: System.Linq.Enumerable.Min<TElement>()
  fullname.vb: System.Linq.Enumerable.Min(Of TElement)()
  name.vb: Min(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1
    name: Min<TElement>
    fullName: System.Linq.Enumerable.Min<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1
    name: Min(Of TElement)
    fullName: System.Linq.Enumerable.Min(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TElement>()
  nameWithType.vb: Enumerable.Min(Of TElement)()
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Decimal})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  name: Min<T>(Func<T, Decimal>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Decimal))
  name.vb: Min(Of T)(Func(Of T, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Decimal})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Decimal})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Decimal>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Decimal))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Double})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  name: Min<T>(Func<T, Double>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Double>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Double))
  name.vb: Min(Of T)(Func(Of T, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Double})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Double})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Double>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Double))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Int32})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  name: Min<T>(Func<T, Int32>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Int32))
  name.vb: Min(Of T)(Func(Of T, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Int32})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Int32})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Int32>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Int32))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Int64})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  name: Min<T>(Func<T, Int64>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Int64))
  name.vb: Min(Of T)(Func(Of T, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Int64})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Int64})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Int64>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Int64))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  name: Min<T>(Func<T, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of T)(Func(Of T, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  name: Min<T>(Func<T, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Nullable(Of System.Double)))
  name.vb: Min(Of T)(Func(Of T, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Double}})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Double}})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Nullable<Double>>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  name: Min<T>(Func<T, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Nullable(Of System.Int32)))
  name.vb: Min(Of T)(Func(Of T, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  name: Min<T>(Func<T, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Nullable(Of System.Int64)))
  name.vb: Min(Of T)(Func(Of T, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  name: Min<T>(Func<T, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Nullable(Of System.Single)))
  name.vb: Min(Of T)(Func(Of T, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Single}})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Nullable{System.Single}})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Nullable<Single>>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``1(System.Func{{T},System.Single})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  name: Min<T>(Func<T, Single>)
  fullName: System.Linq.Enumerable.Min<T>(System.Func<T, System.Single>)
  fullname.vb: System.Linq.Enumerable.Min(Of T)(System.Func(Of T, System.Single))
  name.vb: Min(Of T)(Func(Of T, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Single})
    name: Min<T>
    fullName: System.Linq.Enumerable.Min<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Func{``0,System.Single})
    name: Min(Of T)
    fullName: System.Linq.Enumerable.Min(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T>(Func<T, Single>)
  nameWithType.vb: Enumerable.Min(Of T)(Func(Of T, Single))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Min``2(System.Func{{T},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: Min<T, TResult>(Func<T, TResult>)
  fullName: System.Linq.Enumerable.Min<T, TResult>(System.Func<T, TResult>)
  fullname.vb: System.Linq.Enumerable.Min(Of T, TResult)(System.Func(Of T, TResult))
  name.vb: Min(Of T, TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``2(System.Func{``0,``1})
    name: Min<T, TResult>
    fullName: System.Linq.Enumerable.Min<T, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``2(System.Func{``0,``1})
    name: Min(Of T, TResult)
    fullName: System.Linq.Enumerable.Min(Of T, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<T, TResult>(Func<T, TResult>)
  nameWithType.vb: Enumerable.Min(Of T, TResult)(Func(Of T, TResult))
  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderBy``2(System.Func{{T},{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: OrderBy<T, TKey>(Func<T, TKey>)
  fullName: System.Linq.Enumerable.OrderBy<T, TKey>(System.Func<T, TKey>)
  fullname.vb: System.Linq.Enumerable.OrderBy(Of T, TKey)(System.Func(Of T, TKey))
  name.vb: OrderBy(Of T, TKey)(Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Func{``0,``1})
    name: OrderBy<T, TKey>
    fullName: System.Linq.Enumerable.OrderBy<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Func{``0,``1})
    name: OrderBy(Of T, TKey)
    fullName: System.Linq.Enumerable.OrderBy(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderBy<T, TKey>(Func<T, TKey>)
  nameWithType.vb: Enumerable.OrderBy(Of T, TKey)(Func(Of T, TKey))
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderBy``2(System.Func{{T},{TKey}},System.Collections.Generic.IComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name: OrderBy<T, TKey>(Func<T, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderBy<T, TKey>(System.Func<T, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.OrderBy(Of T, TKey)(System.Func(Of T, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of T, TKey)(Func(Of T, TKey), IComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderBy<T, TKey>
    fullName: System.Linq.Enumerable.OrderBy<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of T, TKey)
    fullName: System.Linq.Enumerable.OrderBy(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderBy<T, TKey>(Func<T, TKey>, IComparer<TKey>)
  nameWithType.vb: Enumerable.OrderBy(Of T, TKey)(Func(Of T, TKey), IComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderByDescending``2(System.Func{{T},{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: OrderByDescending<T, TKey>(Func<T, TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<T, TKey>(System.Func<T, TKey>)
  fullname.vb: System.Linq.Enumerable.OrderByDescending(Of T, TKey)(System.Func(Of T, TKey))
  name.vb: OrderByDescending(Of T, TKey)(Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Func{``0,``1})
    name: OrderByDescending<T, TKey>
    fullName: System.Linq.Enumerable.OrderByDescending<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Func{``0,``1})
    name: OrderByDescending(Of T, TKey)
    fullName: System.Linq.Enumerable.OrderByDescending(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderByDescending<T, TKey>(Func<T, TKey>)
  nameWithType.vb: Enumerable.OrderByDescending(Of T, TKey)(Func(Of T, TKey))
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.OrderByDescending``2(System.Func{{T},{TKey}},System.Collections.Generic.IComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  name: OrderByDescending<T, TKey>(Func<T, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<T, TKey>(System.Func<T, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.OrderByDescending(Of T, TKey)(System.Func(Of T, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of T, TKey)(Func(Of T, TKey), IComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<T, TKey>
    fullName: System.Linq.Enumerable.OrderByDescending<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of T, TKey)
    fullName: System.Linq.Enumerable.OrderByDescending(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderByDescending<T, TKey>(Func<T, TKey>, IComparer<TKey>)
  nameWithType.vb: Enumerable.OrderByDescending(Of T, TKey)(Func(Of T, TKey), IComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Reverse``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  name: Reverse<TElement>()
  fullName: System.Linq.Enumerable.Reverse<TElement>()
  fullname.vb: System.Linq.Enumerable.Reverse(Of TElement)()
  name.vb: Reverse(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Reverse``1
    name: Reverse<TElement>
    fullName: System.Linq.Enumerable.Reverse<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Reverse``1
    name: Reverse(Of TElement)
    fullName: System.Linq.Enumerable.Reverse(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Reverse<TElement>()
  nameWithType.vb: Enumerable.Reverse(Of TElement)()
  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Select``2(System.Func{{T},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: Select<T, TResult>(Func<T, TResult>)
  fullName: System.Linq.Enumerable.Select<T, TResult>(System.Func<T, TResult>)
  fullname.vb: System.Linq.Enumerable.Select(Of T, TResult)(System.Func(Of T, TResult))
  name.vb: Select(Of T, TResult)(Func(Of T, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Select``2(System.Func{``0,``1})
    name: Select<T, TResult>
    fullName: System.Linq.Enumerable.Select<T, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Select``2(System.Func{``0,``1})
    name: Select(Of T, TResult)
    fullName: System.Linq.Enumerable.Select(Of T, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Select<T, TResult>(Func<T, TResult>)
  nameWithType.vb: Enumerable.Select(Of T, TResult)(Func(Of T, TResult))
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Select``2(System.Func{{T},System.Int32,{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  name: Select<T, TResult>(Func<T, Int32, TResult>)
  fullName: System.Linq.Enumerable.Select<T, TResult>(System.Func<T, System.Int32, TResult>)
  fullname.vb: System.Linq.Enumerable.Select(Of T, TResult)(System.Func(Of T, System.Int32, TResult))
  name.vb: Select(Of T, TResult)(Func(Of T, Int32, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Select``2(System.Func{``0,System.Int32,``1})
    name: Select<T, TResult>
    fullName: System.Linq.Enumerable.Select<T, TResult>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Select``2(System.Func{``0,System.Int32,``1})
    name: Select(Of T, TResult)
    fullName: System.Linq.Enumerable.Select(Of T, TResult)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Select<T, TResult>(Func<T, Int32, TResult>)
  nameWithType.vb: Enumerable.Select(Of T, TResult)(Func(Of T, Int32, TResult))
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``2(System.Func{{T},System.Collections.Generic.IEnumerable{{TResult}}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  name: SelectMany<T, TResult>(Func<T, IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<T, TResult>(System.Func<T, System.Collections.Generic.IEnumerable<TResult>>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of T, TResult)(System.Func(Of T, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of T, TResult)(Func(Of T, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany<T, TResult>
    fullName: System.Linq.Enumerable.SelectMany<T, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany(Of T, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of T, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<T, TResult>(Func<T, IEnumerable<TResult>>)
  nameWithType.vb: Enumerable.SelectMany(Of T, TResult)(Func(Of T, IEnumerable(Of TResult)))
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``2(System.Func{{T},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  name: SelectMany<T, TResult>(Func<T, Int32, IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<T, TResult>(System.Func<T, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of T, TResult)(System.Func(Of T, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of T, TResult)(Func(Of T, Int32, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany<T, TResult>
    fullName: System.Linq.Enumerable.SelectMany<T, TResult>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany(Of T, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of T, TResult)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<T, TResult>(Func<T, Int32, IEnumerable<TResult>>)
  nameWithType.vb: Enumerable.SelectMany(Of T, TResult)(Func(Of T, Int32, IEnumerable(Of TResult)))
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``3(System.Func{{T},System.Collections.Generic.IEnumerable{{TCollection}}},System.Func{{T},{TCollection},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  name: SelectMany<T, TCollection, TResult>(Func<T, IEnumerable<TCollection>>, Func<T, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<T, TCollection, TResult>(System.Func<T, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<T, TCollection, TResult>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of T, TCollection, TResult)(System.Func(Of T, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of T, TCollection, TResult))
  name.vb: SelectMany(Of T, TCollection, TResult)(Func(Of T, IEnumerable(Of TCollection)), Func(Of T, TCollection, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany<T, TCollection, TResult>
    fullName: System.Linq.Enumerable.SelectMany<T, TCollection, TResult>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany(Of T, TCollection, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of T, TCollection, TResult)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<T, TCollection, TResult>(Func<T, IEnumerable<TCollection>>, Func<T, TCollection, TResult>)
  nameWithType.vb: Enumerable.SelectMany(Of T, TCollection, TResult)(Func(Of T, IEnumerable(Of TCollection)), Func(Of T, TCollection, TResult))
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SelectMany``3(System.Func{{T},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}},System.Func{{T},{TCollection},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  name: SelectMany<T, TCollection, TResult>(Func<T, Int32, IEnumerable<TCollection>>, Func<T, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<T, TCollection, TResult>(System.Func<T, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<T, TCollection, TResult>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of T, TCollection, TResult)(System.Func(Of T, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of T, TCollection, TResult))
  name.vb: SelectMany(Of T, TCollection, TResult)(Func(Of T, Int32, IEnumerable(Of TCollection)), Func(Of T, TCollection, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany<T, TCollection, TResult>
    fullName: System.Linq.Enumerable.SelectMany<T, TCollection, TResult>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany(Of T, TCollection, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of T, TCollection, TResult)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<T, TCollection, TResult>(Func<T, Int32, IEnumerable<TCollection>>, Func<T, TCollection, TResult>)
  nameWithType.vb: Enumerable.SelectMany(Of T, TCollection, TResult)(Func(Of T, Int32, IEnumerable(Of TCollection)), Func(Of T, TCollection, TResult))
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: SequenceEqual<T>(IEnumerable<T>)
  fullName: System.Linq.Enumerable.SequenceEqual<T>(System.Collections.Generic.IEnumerable<T>)
  fullname.vb: System.Linq.Enumerable.SequenceEqual(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: SequenceEqual(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0})
    name: SequenceEqual<T>
    fullName: System.Linq.Enumerable.SequenceEqual<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0})
    name: SequenceEqual(Of T)
    fullName: System.Linq.Enumerable.SequenceEqual(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SequenceEqual<T>(IEnumerable<T>)
  nameWithType.vb: Enumerable.SequenceEqual(Of T)(IEnumerable(Of T))
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: SequenceEqual<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Linq.Enumerable.SequenceEqual<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  fullname.vb: System.Linq.Enumerable.SequenceEqual(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: SequenceEqual(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SequenceEqual<T>
    fullName: System.Linq.Enumerable.SequenceEqual<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SequenceEqual(Of T)
    fullName: System.Linq.Enumerable.SequenceEqual(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SequenceEqual<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType.vb: Enumerable.SequenceEqual(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Single``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  name: Single<TElement>()
  fullName: System.Linq.Enumerable.Single<TElement>()
  fullname.vb: System.Linq.Enumerable.Single(Of TElement)()
  name.vb: Single(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Single``1
    name: Single<TElement>
    fullName: System.Linq.Enumerable.Single<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Single``1
    name: Single(Of TElement)
    fullName: System.Linq.Enumerable.Single(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.Single<TElement>()
  nameWithType.vb: Enumerable.Single(Of TElement)()
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Single``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: Single<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.Single<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Single(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Single(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Single``1(System.Func{``0,System.Boolean})
    name: Single<T>
    fullName: System.Linq.Enumerable.Single<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Single``1(System.Func{``0,System.Boolean})
    name: Single(Of T)
    fullName: System.Linq.Enumerable.Single(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Single<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.Single(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SingleOrDefault``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  name: SingleOrDefault<TElement>()
  fullName: System.Linq.Enumerable.SingleOrDefault<TElement>()
  fullname.vb: System.Linq.Enumerable.SingleOrDefault(Of TElement)()
  name.vb: SingleOrDefault(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.SingleOrDefault``1
    name: SingleOrDefault<TElement>
    fullName: System.Linq.Enumerable.SingleOrDefault<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SingleOrDefault``1
    name: SingleOrDefault(Of TElement)
    fullName: System.Linq.Enumerable.SingleOrDefault(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.SingleOrDefault<TElement>()
  nameWithType.vb: Enumerable.SingleOrDefault(Of TElement)()
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SingleOrDefault``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: SingleOrDefault<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.SingleOrDefault<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.SingleOrDefault(Of T)(System.Func(Of T, System.Boolean))
  name.vb: SingleOrDefault(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.SingleOrDefault``1(System.Func{``0,System.Boolean})
    name: SingleOrDefault<T>
    fullName: System.Linq.Enumerable.SingleOrDefault<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SingleOrDefault``1(System.Func{``0,System.Boolean})
    name: SingleOrDefault(Of T)
    fullName: System.Linq.Enumerable.SingleOrDefault(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SingleOrDefault<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.SingleOrDefault(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Skip``1(System.Int32)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: Skip<TElement>(Int32)
  fullName: System.Linq.Enumerable.Skip<TElement>(System.Int32)
  fullname.vb: System.Linq.Enumerable.Skip(Of TElement)(System.Int32)
  name.vb: Skip(Of TElement)(Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.Skip``1(System.Int32)
    name: Skip<TElement>
    fullName: System.Linq.Enumerable.Skip<TElement>
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Skip``1(System.Int32)
    name: Skip(Of TElement)
    fullName: System.Linq.Enumerable.Skip(Of TElement)
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.Skip<TElement>(Int32)
  nameWithType.vb: Enumerable.Skip(Of TElement)(Int32)
  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SkipWhile``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: SkipWhile<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.SkipWhile(Of T)(System.Func(Of T, System.Boolean))
  name.vb: SkipWhile(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Func{``0,System.Boolean})
    name: SkipWhile<T>
    fullName: System.Linq.Enumerable.SkipWhile<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Func{``0,System.Boolean})
    name: SkipWhile(Of T)
    fullName: System.Linq.Enumerable.SkipWhile(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SkipWhile<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.SkipWhile(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.SkipWhile``1(System.Func{{T},System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  name: SkipWhile<T>(Func<T, Int32, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<T>(System.Func<T, System.Int32, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.SkipWhile(Of T)(System.Func(Of T, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of T)(Func(Of T, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Func{``0,System.Int32,System.Boolean})
    name: SkipWhile<T>
    fullName: System.Linq.Enumerable.SkipWhile<T>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Func{``0,System.Int32,System.Boolean})
    name: SkipWhile(Of T)
    fullName: System.Linq.Enumerable.SkipWhile(Of T)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SkipWhile<T>(Func<T, Int32, Boolean>)
  nameWithType.vb: Enumerable.SkipWhile(Of T)(Func(Of T, Int32, Boolean))
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Decimal})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  name: Sum<T>(Func<T, Decimal>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Decimal))
  name.vb: Sum(Of T)(Func(Of T, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Decimal})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Decimal})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Decimal>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Decimal))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Double})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  name: Sum<T>(Func<T, Double>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Double>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Double))
  name.vb: Sum(Of T)(Func(Of T, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Double})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Double})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Double>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Double))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Int32})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  name: Sum<T>(Func<T, Int32>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Int32))
  name.vb: Sum(Of T)(Func(Of T, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Int32})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Int32})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Int32>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Int32))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Int64})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  name: Sum<T>(Func<T, Int64>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Int64))
  name.vb: Sum(Of T)(Func(Of T, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Int64})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Int64})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Int64>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Int64))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Decimal}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  name: Sum<T>(Func<T, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of T)(Func(Of T, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Decimal}})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Double}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  name: Sum<T>(Func<T, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Nullable(Of System.Double)))
  name.vb: Sum(Of T)(Func(Of T, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Double}})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Double}})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Nullable<Double>>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Int32}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  name: Sum<T>(Func<T, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of T)(Func(Of T, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Int32}})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Int64}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  name: Sum<T>(Func<T, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of T)(Func(Of T, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Int64}})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Nullable{System.Single}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  name: Sum<T>(Func<T, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Nullable(Of System.Single)))
  name.vb: Sum(Of T)(Func(Of T, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Single}})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Nullable{System.Single}})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Nullable<Single>>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Sum``1(System.Func{{T},System.Single})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  name: Sum<T>(Func<T, Single>)
  fullName: System.Linq.Enumerable.Sum<T>(System.Func<T, System.Single>)
  fullname.vb: System.Linq.Enumerable.Sum(Of T)(System.Func(Of T, System.Single))
  name.vb: Sum(Of T)(Func(Of T, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Single})
    name: Sum<T>
    fullName: System.Linq.Enumerable.Sum<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Func{``0,System.Single})
    name: Sum(Of T)
    fullName: System.Linq.Enumerable.Sum(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<T>(Func<T, Single>)
  nameWithType.vb: Enumerable.Sum(Of T)(Func(Of T, Single))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Take``1(System.Int32)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  name: Take<TElement>(Int32)
  fullName: System.Linq.Enumerable.Take<TElement>(System.Int32)
  fullname.vb: System.Linq.Enumerable.Take(Of TElement)(System.Int32)
  name.vb: Take(Of TElement)(Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.Take``1(System.Int32)
    name: Take<TElement>
    fullName: System.Linq.Enumerable.Take<TElement>
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Take``1(System.Int32)
    name: Take(Of TElement)
    fullName: System.Linq.Enumerable.Take(Of TElement)
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.Take<TElement>(Int32)
  nameWithType.vb: Enumerable.Take(Of TElement)(Int32)
  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.TakeWhile``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: TakeWhile<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.TakeWhile(Of T)(System.Func(Of T, System.Boolean))
  name.vb: TakeWhile(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Func{``0,System.Boolean})
    name: TakeWhile<T>
    fullName: System.Linq.Enumerable.TakeWhile<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Func{``0,System.Boolean})
    name: TakeWhile(Of T)
    fullName: System.Linq.Enumerable.TakeWhile(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.TakeWhile<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.TakeWhile(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.TakeWhile``1(System.Func{{T},System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  name: TakeWhile<T>(Func<T, Int32, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<T>(System.Func<T, System.Int32, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.TakeWhile(Of T)(System.Func(Of T, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of T)(Func(Of T, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Func{``0,System.Int32,System.Boolean})
    name: TakeWhile<T>
    fullName: System.Linq.Enumerable.TakeWhile<T>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Func{``0,System.Int32,System.Boolean})
    name: TakeWhile(Of T)
    fullName: System.Linq.Enumerable.TakeWhile(Of T)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.TakeWhile<T>(Func<T, Int32, Boolean>)
  nameWithType.vb: Enumerable.TakeWhile(Of T)(Func(Of T, Int32, Boolean))
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToArray``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  name: ToArray<TElement>()
  fullName: System.Linq.Enumerable.ToArray<TElement>()
  fullname.vb: System.Linq.Enumerable.ToArray(Of TElement)()
  name.vb: ToArray(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.ToArray``1
    name: ToArray<TElement>
    fullName: System.Linq.Enumerable.ToArray<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToArray``1
    name: ToArray(Of TElement)
    fullName: System.Linq.Enumerable.ToArray(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.ToArray<TElement>()
  nameWithType.vb: Enumerable.ToArray(Of TElement)()
  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``2(System.Func{{T},{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: ToDictionary<T, TKey>(Func<T, TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<T, TKey>(System.Func<T, TKey>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of T, TKey)(System.Func(Of T, TKey))
  name.vb: ToDictionary(Of T, TKey)(Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Func{``0,``1})
    name: ToDictionary<T, TKey>
    fullName: System.Linq.Enumerable.ToDictionary<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Func{``0,``1})
    name: ToDictionary(Of T, TKey)
    fullName: System.Linq.Enumerable.ToDictionary(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<T, TKey>(Func<T, TKey>)
  nameWithType.vb: Enumerable.ToDictionary(Of T, TKey)(Func(Of T, TKey))
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``2(System.Func{{T},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  name: ToDictionary<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<T, TKey>(System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of T, TKey)(System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of T, TKey)(Func(Of T, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary<T, TKey>
    fullName: System.Linq.Enumerable.ToDictionary<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary(Of T, TKey)
    fullName: System.Linq.Enumerable.ToDictionary(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToDictionary(Of T, TKey)(Func(Of T, TKey), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  name: ToDictionary<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>)
  fullName: System.Linq.Enumerable.ToDictionary<T, TKey, TElement>(System.Func<T, TKey>, System.Func<T, TElement>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of T, TKey, TElement)(System.Func(Of T, TKey), System.Func(Of T, TElement))
  name.vb: ToDictionary(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Func{``0,``1},System.Func{``0,``2})
    name: ToDictionary<T, TKey, TElement>
    fullName: System.Linq.Enumerable.ToDictionary<T, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Func{``0,``1},System.Func{``0,``2})
    name: ToDictionary(Of T, TKey, TElement)
    fullName: System.Linq.Enumerable.ToDictionary(Of T, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>)
  nameWithType.vb: Enumerable.ToDictionary(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement))
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToDictionary``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  name: ToDictionary<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<T, TKey, TElement>(System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of T, TKey, TElement)(System.Func(Of T, TKey), System.Func(Of T, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary<T, TKey, TElement>
    fullName: System.Linq.Enumerable.ToDictionary<T, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary(Of T, TKey, TElement)
    fullName: System.Linq.Enumerable.ToDictionary(Of T, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToDictionary(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToList``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  name: ToList<TElement>()
  fullName: System.Linq.Enumerable.ToList<TElement>()
  fullname.vb: System.Linq.Enumerable.ToList(Of TElement)()
  name.vb: ToList(Of TElement)()
  spec.csharp:
  - uid: System.Linq.Enumerable.ToList``1
    name: ToList<TElement>
    fullName: System.Linq.Enumerable.ToList<TElement>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToList``1
    name: ToList(Of TElement)
    fullName: System.Linq.Enumerable.ToList(Of TElement)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Enumerable.ToList<TElement>()
  nameWithType.vb: Enumerable.ToList(Of TElement)()
  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``2(System.Func{{T},{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  name: ToLookup<T, TKey>(Func<T, TKey>)
  fullName: System.Linq.Enumerable.ToLookup<T, TKey>(System.Func<T, TKey>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of T, TKey)(System.Func(Of T, TKey))
  name.vb: ToLookup(Of T, TKey)(Func(Of T, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Func{``0,``1})
    name: ToLookup<T, TKey>
    fullName: System.Linq.Enumerable.ToLookup<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Func{``0,``1})
    name: ToLookup(Of T, TKey)
    fullName: System.Linq.Enumerable.ToLookup(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<T, TKey>(Func<T, TKey>)
  nameWithType.vb: Enumerable.ToLookup(Of T, TKey)(Func(Of T, TKey))
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``2(System.Func{{T},{TKey}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  name: ToLookup<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<T, TKey>(System.Func<T, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of T, TKey)(System.Func(Of T, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of T, TKey)(Func(Of T, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup<T, TKey>
    fullName: System.Linq.Enumerable.ToLookup<T, TKey>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup(Of T, TKey)
    fullName: System.Linq.Enumerable.ToLookup(Of T, TKey)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToLookup(Of T, TKey)(Func(Of T, TKey), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  name: ToLookup<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>)
  fullName: System.Linq.Enumerable.ToLookup<T, TKey, TElement>(System.Func<T, TKey>, System.Func<T, TElement>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of T, TKey, TElement)(System.Func(Of T, TKey), System.Func(Of T, TElement))
  name.vb: ToLookup(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Func{``0,``1},System.Func{``0,``2})
    name: ToLookup<T, TKey, TElement>
    fullName: System.Linq.Enumerable.ToLookup<T, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Func{``0,``1},System.Func{``0,``2})
    name: ToLookup(Of T, TKey, TElement)
    fullName: System.Linq.Enumerable.ToLookup(Of T, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>)
  nameWithType.vb: Enumerable.ToLookup(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement))
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.ToLookup``3(System.Func{{T},{TKey}},System.Func{{T},{TElement}},System.Collections.Generic.IEqualityComparer{{TKey}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  name: ToLookup<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<T, TKey, TElement>(System.Func<T, TKey>, System.Func<T, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of T, TKey, TElement)(System.Func(Of T, TKey), System.Func(Of T, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup<T, TKey, TElement>
    fullName: System.Linq.Enumerable.ToLookup<T, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup(Of T, TKey, TElement)
    fullName: System.Linq.Enumerable.ToLookup(Of T, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<T, TKey, TElement>(Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToLookup(Of T, TKey, TElement)(Func(Of T, TKey), Func(Of T, TElement), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  name: Union<T>(IEnumerable<T>)
  fullName: System.Linq.Enumerable.Union<T>(System.Collections.Generic.IEnumerable<T>)
  fullname.vb: System.Linq.Enumerable.Union(Of T)(System.Collections.Generic.IEnumerable(Of T))
  name.vb: Union(Of T)(IEnumerable(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union<T>
    fullName: System.Linq.Enumerable.Union<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0})
    name: Union(Of T)
    fullName: System.Linq.Enumerable.Union(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Union<T>(IEnumerable<T>)
  nameWithType.vb: Enumerable.Union(Of T)(IEnumerable(Of T))
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{{T}},System.Collections.Generic.IEqualityComparer{{T}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  name: Union<T>(IEnumerable<T>, IEqualityComparer<T>)
  fullName: System.Linq.Enumerable.Union<T>(System.Collections.Generic.IEnumerable<T>, System.Collections.Generic.IEqualityComparer<T>)
  fullname.vb: System.Linq.Enumerable.Union(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Collections.Generic.IEqualityComparer(Of T))
  name.vb: Union(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  spec.csharp:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<T>
    fullName: System.Linq.Enumerable.Union<T>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of T)
    fullName: System.Linq.Enumerable.Union(Of T)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Union<T>(IEnumerable<T>, IEqualityComparer<T>)
  nameWithType.vb: Enumerable.Union(Of T)(IEnumerable(Of T), IEqualityComparer(Of T))
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Where``1(System.Func{{T},System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  name: Where<T>(Func<T, Boolean>)
  fullName: System.Linq.Enumerable.Where<T>(System.Func<T, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Where(Of T)(System.Func(Of T, System.Boolean))
  name.vb: Where(Of T)(Func(Of T, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Where``1(System.Func{``0,System.Boolean})
    name: Where<T>
    fullName: System.Linq.Enumerable.Where<T>
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Where``1(System.Func{``0,System.Boolean})
    name: Where(Of T)
    fullName: System.Linq.Enumerable.Where(Of T)
  - name: (
    fullName: (
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Where<T>(Func<T, Boolean>)
  nameWithType.vb: Enumerable.Where(Of T)(Func(Of T, Boolean))
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Where``1(System.Func{{T},System.Int32,System.Boolean})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  name: Where<T>(Func<T, Int32, Boolean>)
  fullName: System.Linq.Enumerable.Where<T>(System.Func<T, System.Int32, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Where(Of T)(System.Func(Of T, System.Int32, System.Boolean))
  name.vb: Where(Of T)(Func(Of T, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Where``1(System.Func{``0,System.Int32,System.Boolean})
    name: Where<T>
    fullName: System.Linq.Enumerable.Where<T>
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Where``1(System.Func{``0,System.Int32,System.Boolean})
    name: Where(Of T)
    fullName: System.Linq.Enumerable.Where(Of T)
  - name: (
    fullName: (
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Where<T>(Func<T, Int32, Boolean>)
  nameWithType.vb: Enumerable.Where(Of T)(Func(Of T, Int32, Boolean))
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Collections.Generic.IEnumerable{`0}.System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{{TSecond}},System.Func{{T},{TSecond},{TResult}})
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  name: Zip<T, TSecond, TResult>(IEnumerable<TSecond>, Func<T, TSecond, TResult>)
  fullName: System.Linq.Enumerable.Zip<T, TSecond, TResult>(System.Collections.Generic.IEnumerable<TSecond>, System.Func<T, TSecond, TResult>)
  fullname.vb: System.Linq.Enumerable.Zip(Of T, TSecond, TResult)(System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of T, TSecond, TResult))
  name.vb: Zip(Of T, TSecond, TResult)(IEnumerable(Of TSecond), Func(Of T, TSecond, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
    name: Zip<T, TSecond, TResult>
    fullName: System.Linq.Enumerable.Zip<T, TSecond, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
    name: Zip(Of T, TSecond, TResult)
    fullName: System.Linq.Enumerable.Zip(Of T, TSecond, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Zip<T, TSecond, TResult>(IEnumerable<TSecond>, Func<T, TSecond, TResult>)
  nameWithType.vb: Enumerable.Zip(Of T, TSecond, TResult)(IEnumerable(Of TSecond), Func(Of T, TSecond, TResult))
  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: false
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Queryable.AsQueryable(IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  fullName: System.Linq.Queryable
  nameWithType: Queryable
  commentId: T:System.Linq.Queryable
- uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: AsQueryable<TElement>(IEnumerable<TElement>)
  fullName: System.Linq.Queryable.AsQueryable<TElement>(System.Collections.Generic.IEnumerable<TElement>)
  fullname.vb: System.Linq.Queryable.AsQueryable(Of TElement)(System.Collections.Generic.IEnumerable(Of TElement))
  name.vb: AsQueryable(Of TElement)(IEnumerable(Of TElement))
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
    name: AsQueryable<TElement>
    fullName: System.Linq.Queryable.AsQueryable<TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
    name: AsQueryable(Of TElement)
    fullName: System.Linq.Queryable.AsQueryable(Of TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Queryable.AsQueryable<TElement>(IEnumerable<TElement>)
  nameWithType.vb: Queryable.AsQueryable(Of TElement)(IEnumerable(Of TElement))
  commentId: M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: AsParallel<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsParallel(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
    name: AsParallel<TSource>
    fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
    name: AsParallel(Of TSource)
    fullName: System.Linq.ParallelEnumerable.AsParallel(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.AsParallel(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
  isExternal: true
  name: Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.Enumerable.Aggregate<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TSource, TSource>)
  fullname.vb: System.Linq.Enumerable.Aggregate(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TSource, TSource))
  name.vb: Aggregate(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
    name: Aggregate<TSource>
    fullName: System.Linq.Enumerable.Aggregate<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
    name: Aggregate(Of TSource)
    fullName: System.Linq.Enumerable.Aggregate(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Aggregate<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>)
  nameWithType.vb: Enumerable.Aggregate(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, TSource, TSource))
  commentId: M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  fullName: System.Linq.Enumerable
  nameWithType: Enumerable
  commentId: T:System.Linq.Enumerable
- uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
  isExternal: true
  name: Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  fullname.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Aggregate(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
  spec.csharp:
  - uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
    name: Aggregate<TSource, TAccumulate>
    fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
    name: Aggregate(Of TSource, TAccumulate)
    fullName: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Aggregate<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  nameWithType.vb: Enumerable.Aggregate(Of TSource, TAccumulate)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
  commentId: M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})
- uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  isExternal: true
  name: Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate, TResult>(System.Collections.Generic.IEnumerable<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  fullname.vb: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Collections.Generic.IEnumerable(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
    name: Aggregate<TSource, TAccumulate, TResult>
    fullName: System.Linq.Enumerable.Aggregate<TSource, TAccumulate, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
    name: Aggregate(Of TSource, TAccumulate, TResult)
    fullName: System.Linq.Enumerable.Aggregate(Of TSource, TAccumulate, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Aggregate<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType.vb: Enumerable.Aggregate(Of TSource, TAccumulate, TResult)(IEnumerable(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
  commentId: M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
- uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.All<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.All(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: All(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: All<TSource>
    fullName: System.Linq.Enumerable.All<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: All(Of TSource)
    fullName: System.Linq.Enumerable.All(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.All<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.All(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Any<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Any(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
    name: Any<TSource>
    fullName: System.Linq.Enumerable.Any<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
    name: Any(Of TSource)
    fullName: System.Linq.Enumerable.Any(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Any(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Any<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Any(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Any(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Any<TSource>
    fullName: System.Linq.Enumerable.Any<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Any(Of TSource)
    fullName: System.Linq.Enumerable.Any(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Any<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.Any(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: AsEnumerable<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.AsEnumerable<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.AsEnumerable(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsEnumerable(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
    name: AsEnumerable<TSource>
    fullName: System.Linq.Enumerable.AsEnumerable<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
    name: AsEnumerable(Of TSource)
    fullName: System.Linq.Enumerable.AsEnumerable(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.AsEnumerable<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.AsEnumerable(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExternal: true
  name: Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Average<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  fullname.vb: System.Linq.Enumerable.Average(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Average<TSource>
    fullName: System.Linq.Enumerable.Average<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Average(Of TSource)
    fullName: System.Linq.Enumerable.Average(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Average<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType.vb: Enumerable.Average(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  commentId: M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
- uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Concat<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Concat(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat<TSource>
    fullName: System.Linq.Enumerable.Concat<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Concat(Of TSource)
    fullName: System.Linq.Enumerable.Concat(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Concat<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Concat(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: Append<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Append<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  fullname.vb: System.Linq.Enumerable.Append(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Append(Of TSource)(IEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Append<TSource>
    fullName: System.Linq.Enumerable.Append<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Append(Of TSource)
    fullName: System.Linq.Enumerable.Append(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  nameWithType: Enumerable.Append<TSource>(IEnumerable<TSource>, TSource)
  nameWithType.vb: Enumerable.Append(Of TSource)(IEnumerable(Of TSource), TSource)
  commentId: M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: Prepend<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Prepend<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  fullname.vb: System.Linq.Enumerable.Prepend(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Prepend(Of TSource)(IEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Prepend<TSource>
    fullName: System.Linq.Enumerable.Prepend<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Prepend(Of TSource)
    fullName: System.Linq.Enumerable.Prepend(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  nameWithType: Enumerable.Prepend<TSource>(IEnumerable<TSource>, TSource)
  nameWithType.vb: Enumerable.Prepend(Of TSource)(IEnumerable(Of TSource), TSource)
  commentId: M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: Contains<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  fullname.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: Contains(Of TSource)(IEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Contains<TSource>
    fullName: System.Linq.Enumerable.Contains<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: Contains(Of TSource)
    fullName: System.Linq.Enumerable.Contains(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource)
  nameWithType.vb: Enumerable.Contains(Of TSource)(IEnumerable(Of TSource), TSource)
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Contains<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  fullname.vb: System.Linq.Enumerable.Contains(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains<TSource>
    fullName: System.Linq.Enumerable.Contains<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
    name: Contains(Of TSource)
    fullName: System.Linq.Enumerable.Contains(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Contains<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType.vb: Enumerable.Contains(Of TSource)(IEnumerable(Of TSource), TSource, IEqualityComparer(Of TSource))
  commentId: M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Count<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Count(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
    name: Count<TSource>
    fullName: System.Linq.Enumerable.Count<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
    name: Count(Of TSource)
    fullName: System.Linq.Enumerable.Count(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Count(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Count<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Count(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Count(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Count<TSource>
    fullName: System.Linq.Enumerable.Count<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Count(Of TSource)
    fullName: System.Linq.Enumerable.Count(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Count<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.Count(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: DefaultIfEmpty<TSource>
    fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
    name: DefaultIfEmpty(Of TSource)
    fullName: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
  isExternal: true
  name: DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>(System.Collections.Generic.IEnumerable<TSource>, TSource)
  fullname.vb: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource), TSource)
  spec.csharp:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: DefaultIfEmpty<TSource>
    fullName: System.Linq.Enumerable.DefaultIfEmpty<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
    name: DefaultIfEmpty(Of TSource)
    fullName: System.Linq.Enumerable.DefaultIfEmpty(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  nameWithType: Enumerable.DefaultIfEmpty<TSource>(IEnumerable<TSource>, TSource)
  nameWithType.vb: Enumerable.DefaultIfEmpty(Of TSource)(IEnumerable(Of TSource), TSource)
  commentId: M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Distinct<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
    name: Distinct<TSource>
    fullName: System.Linq.Enumerable.Distinct<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
    name: Distinct(Of TSource)
    fullName: System.Linq.Enumerable.Distinct(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Distinct(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Distinct<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullname.vb: System.Linq.Enumerable.Distinct(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct<TSource>
    fullName: System.Linq.Enumerable.Distinct<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Distinct(Of TSource)
    fullName: System.Linq.Enumerable.Distinct(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Distinct<TSource>(IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: Enumerable.Distinct(Of TSource)(IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  commentId: M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ElementAt<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAt<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  fullname.vb: System.Linq.Enumerable.ElementAt(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAt<TSource>
    fullName: System.Linq.Enumerable.ElementAt<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAt(Of TSource)
    fullName: System.Linq.Enumerable.ElementAt(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.ElementAt<TSource>(IEnumerable<TSource>, Int32)
  nameWithType.vb: Enumerable.ElementAt(Of TSource)(IEnumerable(Of TSource), Int32)
  commentId: M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.ElementAtOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  fullname.vb: System.Linq.Enumerable.ElementAtOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAtOrDefault<TSource>
    fullName: System.Linq.Enumerable.ElementAtOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: ElementAtOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.ElementAtOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.ElementAtOrDefault<TSource>(IEnumerable<TSource>, Int32)
  nameWithType.vb: Enumerable.ElementAtOrDefault(Of TSource)(IEnumerable(Of TSource), Int32)
  commentId: M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except<TSource>
    fullName: System.Linq.Enumerable.Except<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Except(Of TSource)
    fullName: System.Linq.Enumerable.Except(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Except<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullname.vb: System.Linq.Enumerable.Except(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except<TSource>
    fullName: System.Linq.Enumerable.Except<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Except(Of TSource)
    fullName: System.Linq.Enumerable.Except(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: Enumerable.Except(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  commentId: M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: First<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: First(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
    name: First<TSource>
    fullName: System.Linq.Enumerable.First<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
    name: First(Of TSource)
    fullName: System.Linq.Enumerable.First(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.First(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.First<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.First(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: First(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: First<TSource>
    fullName: System.Linq.Enumerable.First<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: First(Of TSource)
    fullName: System.Linq.Enumerable.First(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.First<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.First(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: FirstOrDefault<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    name: FirstOrDefault<TSource>
    fullName: System.Linq.Enumerable.FirstOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    name: FirstOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.FirstOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.FirstOrDefault(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.FirstOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.FirstOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FirstOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: FirstOrDefault<TSource>
    fullName: System.Linq.Enumerable.FirstOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: FirstOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.FirstOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.FirstOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.FirstOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: GroupBy<TSource, TKey>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: GroupBy(Of TSource, TKey)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: GroupBy<TSource, TKey, TElement>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: GroupBy(Of TSource, TKey, TElement)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TElement>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TElement)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy<TSource, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
    name: GroupBy(Of TSource, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
- uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  isExternal: true
  name: GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
    name: GroupBy<TSource, TKey, TElement, TResult>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
    name: GroupBy(Of TSource, TKey, TElement, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
- uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy<TSource, TKey, TElement, TResult>
    fullName: System.Linq.Enumerable.GroupBy<TSource, TKey, TElement, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
    name: GroupBy(Of TSource, TKey, TElement, TResult)
    fullName: System.Linq.Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupBy<TSource, TKey, TElement, TResult>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupBy(Of TSource, TKey, TElement, TResult)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  fullname.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  nameWithType.vb: Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
- uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin<TOuter, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
    name: GroupJoin(Of TOuter, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.GroupJoin<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect<TSource>
    fullName: System.Linq.Enumerable.Intersect<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Intersect(Of TSource)
    fullName: System.Linq.Enumerable.Intersect(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Intersect<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullname.vb: System.Linq.Enumerable.Intersect(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect<TSource>
    fullName: System.Linq.Enumerable.Intersect<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Intersect(Of TSource)
    fullName: System.Linq.Enumerable.Intersect(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: Enumerable.Intersect(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  commentId: M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  fullname.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    name: Join<TOuter, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
    name: Join(Of TOuter, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  nameWithType.vb: Enumerable.Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
- uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExternal: true
  name: Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>(System.Collections.Generic.IEnumerable<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Collections.Generic.IEnumerable(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    name: Join<TOuter, TInner, TKey, TResult>
    fullName: System.Linq.Enumerable.Join<TOuter, TInner, TKey, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
    name: Join(Of TOuter, TInner, TKey, TResult)
    fullName: System.Linq.Enumerable.Join(Of TOuter, TInner, TKey, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Join<TOuter, TInner, TKey, TResult>(IEnumerable<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.Join(Of TOuter, TInner, TKey, TResult)(IEnumerable(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Last<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Last(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
    name: Last<TSource>
    fullName: System.Linq.Enumerable.Last<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
    name: Last(Of TSource)
    fullName: System.Linq.Enumerable.Last(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Last(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Last<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Last(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Last(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Last<TSource>
    fullName: System.Linq.Enumerable.Last<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Last(Of TSource)
    fullName: System.Linq.Enumerable.Last(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Last<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.Last(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: LastOrDefault<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LastOrDefault(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    name: LastOrDefault<TSource>
    fullName: System.Linq.Enumerable.LastOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    name: LastOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.LastOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.LastOrDefault(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LastOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.LastOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LastOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: LastOrDefault<TSource>
    fullName: System.Linq.Enumerable.LastOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: LastOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.LastOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.LastOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.LastOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: LongCount<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: LongCount(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
    name: LongCount<TSource>
    fullName: System.Linq.Enumerable.LongCount<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
    name: LongCount(Of TSource)
    fullName: System.Linq.Enumerable.LongCount(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.LongCount(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.LongCount<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.LongCount(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LongCount(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: LongCount<TSource>
    fullName: System.Linq.Enumerable.LongCount<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: LongCount(Of TSource)
    fullName: System.Linq.Enumerable.LongCount(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.LongCount<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.LongCount(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExternal: true
  name: Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Max<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Max<TSource>
    fullName: System.Linq.Enumerable.Max<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Max(Of TSource)
    fullName: System.Linq.Enumerable.Max(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType.vb: Enumerable.Max(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  commentId: M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Max<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  fullname.vb: System.Linq.Enumerable.Max(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: Max<TSource, TResult>
    fullName: System.Linq.Enumerable.Max<TSource, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: Max(Of TSource, TResult)
    fullName: System.Linq.Enumerable.Max(Of TSource, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Max<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType.vb: Enumerable.Max(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  commentId: M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExternal: true
  name: Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Min<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Min<TSource>
    fullName: System.Linq.Enumerable.Min<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Min(Of TSource)
    fullName: System.Linq.Enumerable.Min(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType.vb: Enumerable.Min(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  commentId: M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Min<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  fullname.vb: System.Linq.Enumerable.Min(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Min(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: Min<TSource, TResult>
    fullName: System.Linq.Enumerable.Min<TSource, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: Min(Of TSource, TResult)
    fullName: System.Linq.Enumerable.Min(Of TSource, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Min<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType.vb: Enumerable.Min(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  commentId: M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  fullname.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: OrderBy<TSource, TKey>
    fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: OrderBy(Of TSource, TKey)
    fullName: System.Linq.Enumerable.OrderBy(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType.vb: Enumerable.OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.OrderBy(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderBy<TSource, TKey>
    fullName: System.Linq.Enumerable.OrderBy<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderBy(Of TSource, TKey)
    fullName: System.Linq.Enumerable.OrderBy(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  nameWithType.vb: Enumerable.OrderBy(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  fullname.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: OrderByDescending<TSource, TKey>
    fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: OrderByDescending(Of TSource, TKey)
    fullName: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType.vb: Enumerable.OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExternal: true
  name: OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending<TSource, TKey>
    fullName: System.Linq.Enumerable.OrderByDescending<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
    name: OrderByDescending(Of TSource, TKey)
    fullName: System.Linq.Enumerable.OrderByDescending(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.OrderByDescending<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  nameWithType.vb: Enumerable.OrderByDescending(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
- uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Reverse<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Reverse<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Reverse(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Reverse(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
    name: Reverse<TSource>
    fullName: System.Linq.Enumerable.Reverse<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
    name: Reverse(Of TSource)
    fullName: System.Linq.Enumerable.Reverse(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Reverse<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Reverse(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TResult>)
  fullname.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: Select<TSource, TResult>
    fullName: System.Linq.Enumerable.Select<TSource, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: Select(Of TSource, TResult)
    fullName: System.Linq.Enumerable.Select(Of TSource, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>)
  nameWithType.vb: Enumerable.Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, TResult))
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
  isExternal: true
  name: Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)
  fullName: System.Linq.Enumerable.Select<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, TResult>)
  fullname.vb: System.Linq.Enumerable.Select(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  name.vb: Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
    name: Select<TSource, TResult>
    fullName: System.Linq.Enumerable.Select<TSource, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
    name: Select(Of TSource, TResult)
    fullName: System.Linq.Enumerable.Select(Of TSource, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Select<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, TResult>)
  nameWithType.vb: Enumerable.Select(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, TResult))
  commentId: M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany<TSource, TResult>
    fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany(Of TSource, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of TSource, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TResult>>)
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
- uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  isExternal: true
  name: SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of TSource, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany<TSource, TResult>
    fullName: System.Linq.Enumerable.SelectMany<TSource, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
    name: SelectMany(Of TSource, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of TSource, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<TSource, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))
  commentId: M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExternal: true
  name: SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany<TSource, TCollection, TResult>
    fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany(Of TSource, TCollection, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExternal: true
  name: SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  fullname.vb: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany<TSource, TCollection, TResult>
    fullName: System.Linq.Enumerable.SelectMany<TSource, TCollection, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
    name: SelectMany(Of TSource, TCollection, TResult)
    fullName: System.Linq.Enumerable.SelectMany(Of TSource, TCollection, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SelectMany<TSource, TCollection, TResult>(IEnumerable<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType.vb: Enumerable.SelectMany(Of TSource, TCollection, TResult)(IEnumerable(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  commentId: M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SequenceEqual<TSource>
    fullName: System.Linq.Enumerable.SequenceEqual<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: SequenceEqual(Of TSource)
    fullName: System.Linq.Enumerable.SequenceEqual(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType.vb: Enumerable.SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.SequenceEqual<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullname.vb: System.Linq.Enumerable.SequenceEqual(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SequenceEqual<TSource>
    fullName: System.Linq.Enumerable.SequenceEqual<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: SequenceEqual(Of TSource)
    fullName: System.Linq.Enumerable.SequenceEqual(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: Enumerable.SequenceEqual(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  commentId: M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Single<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Single(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
    name: Single<TSource>
    fullName: System.Linq.Enumerable.Single<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
    name: Single(Of TSource)
    fullName: System.Linq.Enumerable.Single(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Single(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Single<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Single(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Single(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Single<TSource>
    fullName: System.Linq.Enumerable.Single<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Single(Of TSource)
    fullName: System.Linq.Enumerable.Single(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Single<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.Single(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    name: SingleOrDefault<TSource>
    fullName: System.Linq.Enumerable.SingleOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
    name: SingleOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.SingleOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.SingleOrDefault(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SingleOrDefault<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.SingleOrDefault(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: SingleOrDefault<TSource>
    fullName: System.Linq.Enumerable.SingleOrDefault<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: SingleOrDefault(Of TSource)
    fullName: System.Linq.Enumerable.SingleOrDefault(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SingleOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.SingleOrDefault(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: Skip<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Skip<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  fullname.vb: System.Linq.Enumerable.Skip(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Skip<TSource>
    fullName: System.Linq.Enumerable.Skip<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Skip(Of TSource)
    fullName: System.Linq.Enumerable.Skip(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.Skip<TSource>(IEnumerable<TSource>, Int32)
  nameWithType.vb: Enumerable.Skip(Of TSource)(IEnumerable(Of TSource), Int32)
  commentId: M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: SkipWhile<TSource>
    fullName: System.Linq.Enumerable.SkipWhile<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: SkipWhile(Of TSource)
    fullName: System.Linq.Enumerable.SkipWhile(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExternal: true
  name: SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.SkipWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.SkipWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    name: SkipWhile<TSource>
    fullName: System.Linq.Enumerable.SkipWhile<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    name: SkipWhile(Of TSource)
    fullName: System.Linq.Enumerable.SkipWhile(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.SkipWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType.vb: Enumerable.SkipWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  commentId: M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Decimal>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Decimal))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Double>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Double>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Double))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int32>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int64>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Int64>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int64))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Double)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Nullable(Of Single)))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})
- uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
  isExternal: true
  name: Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  fullName: System.Linq.Enumerable.Sum<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Single>)
  fullname.vb: System.Linq.Enumerable.Sum(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  spec.csharp:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Sum<TSource>
    fullName: System.Linq.Enumerable.Sum<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
    name: Sum(Of TSource)
    fullName: System.Linq.Enumerable.Sum(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Sum<TSource>(IEnumerable<TSource>, Func<TSource, Single>)
  nameWithType.vb: Enumerable.Sum(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Single))
  commentId: M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})
- uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
  isExternal: true
  name: Take<TSource>(IEnumerable<TSource>, Int32)
  fullName: System.Linq.Enumerable.Take<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Int32)
  fullname.vb: System.Linq.Enumerable.Take(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(IEnumerable(Of TSource), Int32)
  spec.csharp:
  - uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Take<TSource>
    fullName: System.Linq.Enumerable.Take<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
    name: Take(Of TSource)
    fullName: System.Linq.Enumerable.Take(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Enumerable.Take<TSource>(IEnumerable<TSource>, Int32)
  nameWithType.vb: Enumerable.Take(Of TSource)(IEnumerable(Of TSource), Int32)
  commentId: M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: TakeWhile<TSource>
    fullName: System.Linq.Enumerable.TakeWhile<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: TakeWhile(Of TSource)
    fullName: System.Linq.Enumerable.TakeWhile(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExternal: true
  name: TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.TakeWhile<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.TakeWhile(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    name: TakeWhile<TSource>
    fullName: System.Linq.Enumerable.TakeWhile<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    name: TakeWhile(Of TSource)
    fullName: System.Linq.Enumerable.TakeWhile(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.TakeWhile<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType.vb: Enumerable.TakeWhile(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  commentId: M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: ToArray<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToArray<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.ToArray(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToArray(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
    name: ToArray<TSource>
    fullName: System.Linq.Enumerable.ToArray<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
    name: ToArray(Of TSource)
    fullName: System.Linq.Enumerable.ToArray(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToArray<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.ToArray(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: ToDictionary<TSource, TKey>
    fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: ToDictionary(Of TSource, TKey)
    fullName: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary<TSource, TKey>
    fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary(Of TSource, TKey)
    fullName: System.Linq.Enumerable.ToDictionary(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: ToDictionary<TSource, TKey, TElement>
    fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: ToDictionary(Of TSource, TKey, TElement)
    fullName: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary<TSource, TKey, TElement>
    fullName: System.Linq.Enumerable.ToDictionary<TSource, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToDictionary(Of TSource, TKey, TElement)
    fullName: System.Linq.Enumerable.ToDictionary(Of TSource, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToDictionary(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: ToList<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.ToList<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.ToList(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: ToList(Of TSource)(IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
    name: ToList<TSource>
    fullName: System.Linq.Enumerable.ToList<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
    name: ToList(Of TSource)
    fullName: System.Linq.Enumerable.ToList(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToList<TSource>(IEnumerable<TSource>)
  nameWithType.vb: Enumerable.ToList(Of TSource)(IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: ToLookup<TSource, TKey>
    fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
    name: ToLookup(Of TSource, TKey)
    fullName: System.Linq.Enumerable.ToLookup(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>)
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey))
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})
- uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup<TSource, TKey>
    fullName: System.Linq.Enumerable.ToLookup<TSource, TKey>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup(Of TSource, TKey)
    fullName: System.Linq.Enumerable.ToLookup(Of TSource, TKey)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey)(IEnumerable(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExternal: true
  name: ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: ToLookup<TSource, TKey, TElement>
    fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
    name: ToLookup(Of TSource, TKey, TElement)
    fullName: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})
- uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExternal: true
  name: ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  fullname.vb: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  spec.csharp:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup<TSource, TKey, TElement>
    fullName: System.Linq.Enumerable.ToLookup<TSource, TKey, TElement>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
    name: ToLookup(Of TSource, TKey, TElement)
    fullName: System.Linq.Enumerable.ToLookup(Of TSource, TKey, TElement)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.ToLookup<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: Enumerable.ToLookup(Of TSource, TKey, TElement)(IEnumerable(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  commentId: M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
  isExternal: true
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  fullname.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union<TSource>
    fullName: System.Linq.Enumerable.Union<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
    name: Union(Of TSource)
    fullName: System.Linq.Enumerable.Union(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)
  nameWithType.vb: Enumerable.Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource))
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})
- uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExternal: true
  name: Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.Enumerable.Union<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  fullname.vb: System.Linq.Enumerable.Union(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  spec.csharp:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union<TSource>
    fullName: System.Linq.Enumerable.Union<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
    name: Union(Of TSource)
    fullName: System.Linq.Enumerable.Union(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: Enumerable.Union(Of TSource)(IEnumerable(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  commentId: M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
  isExternal: true
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Where<TSource>
    fullName: System.Linq.Enumerable.Where<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
    name: Where(Of TSource)
    fullName: System.Linq.Enumerable.Where(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: Enumerable.Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Boolean))
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})
- uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
  isExternal: true
  name: Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.Enumerable.Where<TSource>(System.Collections.Generic.IEnumerable<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  fullname.vb: System.Linq.Enumerable.Where(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  spec.csharp:
  - uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    name: Where<TSource>
    fullName: System.Linq.Enumerable.Where<TSource>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
    name: Where(Of TSource)
    fullName: System.Linq.Enumerable.Where(Of TSource)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Where<TSource>(IEnumerable<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType.vb: Enumerable.Where(Of TSource)(IEnumerable(Of TSource), Func(Of TSource, Int32, Boolean))
  commentId: M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})
- uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  isExternal: true
  name: Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>(System.Collections.Generic.IEnumerable<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  fullname.vb: System.Linq.Enumerable.Zip(Of TFirst, TSecond, TResult)(System.Collections.Generic.IEnumerable(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  spec.csharp:
  - uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
    name: Zip<TFirst, TSecond, TResult>
    fullName: System.Linq.Enumerable.Zip<TFirst, TSecond, TResult>
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
    name: Zip(Of TFirst, TSecond, TResult)
    fullName: System.Linq.Enumerable.Zip(Of TFirst, TSecond, TResult)
  - name: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  nameWithType: Enumerable.Zip<TFirst, TSecond, TResult>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  nameWithType.vb: Enumerable.Zip(Of TFirst, TSecond, TResult)(IEnumerable(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  commentId: M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  nameWithType: System.Linq
  commentId: N:System.Linq
- uid: System.Collections.Concurrent.IProducerConsumerCollection{{T}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.IProducerConsumerCollection`1
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IProducerConsumerCollection<T>
  nameWithType.vb: IProducerConsumerCollection(Of T)
  commentId: T:System.Collections.Concurrent.IProducerConsumerCollection{`0}
- uid: System.Collections.Concurrent.IProducerConsumerCollection`1
  isExternal: false
  name: IProducerConsumerCollection<T>
  fullName: System.Collections.Concurrent.IProducerConsumerCollection<T>
  fullname.vb: System.Collections.Concurrent.IProducerConsumerCollection(Of T)
  name.vb: IProducerConsumerCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.IProducerConsumerCollection`1
    name: IProducerConsumerCollection
    fullName: System.Collections.Concurrent.IProducerConsumerCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IProducerConsumerCollection<T>
  nameWithType.vb: IProducerConsumerCollection(Of T)
  commentId: T:System.Collections.Concurrent.IProducerConsumerCollection`1
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
  nameWithType: IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection{`0}.Count
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
  nameWithType: ICollection.Count
  commentId: P:System.Collections.ICollection.Count
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  isExternal: false
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
  nameWithType: IReadOnlyCollection<T>.Count
  nameWithType.vb: IReadOnlyCollection(Of T).Count
  commentId: P:System.Collections.Generic.IReadOnlyCollection`1.Count
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
  nameWithType: ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
  nameWithType: ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  nameWithType: CancellationToken
  commentId: T:System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Collections.Concurrent.BlockingCollection`1[]
  name: BlockingCollection<T>[]
  fullName: System.Collections.Concurrent.BlockingCollection<T>[]
  fullname.vb: System.Collections.Concurrent.BlockingCollection(Of T)()
  name.vb: BlockingCollection(Of T)()
  spec.csharp:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    fullName: System.Collections.Concurrent.BlockingCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Collections.Concurrent.BlockingCollection`1
    name: BlockingCollection
    fullName: System.Collections.Concurrent.BlockingCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: ()
    fullName: ()
  nameWithType: BlockingCollection<T>[]
  nameWithType.vb: BlockingCollection(Of T)()
- uid: '{T}[]'
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  nameWithType: T[]
  nameWithType.vb: T()
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  commentId: M:System.Collections.Generic.IEnumerable{`0}.GetEnumerator
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  commentId: T:System.Collections.Generic.IEnumerator{`0}
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>.GetEnumerator()
  nameWithType.vb: IEnumerable(Of T).GetEnumerator()
  commentId: M:System.Collections.Generic.IEnumerable`1.GetEnumerator
- uid: System.Collections.Generic.IEnumerator`1
  isExternal: false
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  commentId: T:System.Collections.Generic.IEnumerator`1
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICollection.CopyTo(Array, Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
  nameWithType: Array
  commentId: T:System.Array
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IEnumerable.GetEnumerator()
  commentId: M:System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
  nameWithType: TimeSpan
  commentId: T:System.TimeSpan
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  nameWithType: OperationCanceledException
  commentId: T:System.OperationCanceledException
