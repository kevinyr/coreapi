### YamlMime:ManagedReference
items:
- uid: System.Reflection.CustomAttributeTypedArgument
  commentId: T:System.Reflection.CustomAttributeTypedArgument
  id: CustomAttributeTypedArgument
  parent: System.Reflection
  children:
  - System.Reflection.CustomAttributeTypedArgument.ArgumentType
  - System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  - System.Reflection.CustomAttributeTypedArgument.GetHashCode
  - System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  - System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  - System.Reflection.CustomAttributeTypedArgument.ToString
  - System.Reflection.CustomAttributeTypedArgument.Value
  langs:
  - csharp
  - vb
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributeTypedArgument
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 679
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents an argument of a custom attribute in the reflection-only context, or an element of an array argument.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public struct CustomAttributeTypedArgument
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Structure CustomAttributeTypedArgument
  seealso:
  - linkId: System.Reflection.CustomAttributeData
    commentId: T:System.Reflection.CustomAttributeData
  - linkId: System.Reflection.CustomAttributeNamedArgument
    commentId: T:System.Reflection.CustomAttributeNamedArgument
  - linkId: erload:System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  commentId: P:System.Reflection.CustomAttributeTypedArgument.ArgumentType
  id: ArgumentType
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: ArgumentType
  nameWithType: CustomAttributeTypedArgument.ArgumentType
  fullName: System.Reflection.CustomAttributeTypedArgument.ArgumentType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArgumentType
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 963
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the type of the argument or of the array argument element.</p>\n"
  syntax:
    content: public Type ArgumentType { get; }
    content.vb: Public ReadOnly Property ArgumentType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>A <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the type of the argument or of the array element.</p>\n"
  seealso:
  - linkId: System.Reflection.CustomAttributeTypedArgument.Value
    commentId: P:System.Reflection.CustomAttributeTypedArgument.Value
  - linkId: erload:System.Reflection.Assembly.ReflectionOnlyLoad
    commentId: Overload:System.Reflection.Assembly.ReflectionOnlyLoad
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.CustomAttributeTypedArgument.Value
  commentId: P:System.Reflection.CustomAttributeTypedArgument.Value
  id: Value
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: CustomAttributeTypedArgument.Value
  fullName: System.Reflection.CustomAttributeTypedArgument.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 970
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the value of the argument for a simple argument or for an element of an array argument; gets a collection of values for an array argument.</p>\n"
  syntax:
    content: public object Value { get; }
    content.vb: Public ReadOnly Property Value As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that represents the value of the argument or element, or a generic <xref href=\"System.Collections.ObjectModel.ReadOnlyCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the values of an array-type argument.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  commentId: M:System.Reflection.CustomAttributeTypedArgument.op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  id: op_Equality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: Equality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)
  nameWithType: CustomAttributeTypedArgument.Equality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeTypedArgument.Equality(System.Reflection.CustomAttributeTypedArgument, System.Reflection.CustomAttributeTypedArgument)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 684
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Tests whether two <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures are equivalent.</p>\n"
  syntax:
    content: public static bool operator ==(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right)
    content.vb: Public Shared Operator =(left As CustomAttributeTypedArgument, right As CustomAttributeTypedArgument) As Boolean
    parameters:
    - id: left
      type: System.Reflection.CustomAttributeTypedArgument
      description: "\n<p>The <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure to the left of the equality operator.</p>\n"
    - id: right
      type: System.Reflection.CustomAttributeTypedArgument
      description: "\n<p>The <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure to the right of the equality operator.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  commentId: M:System.Reflection.CustomAttributeTypedArgument.op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  id: op_Inequality(System.Reflection.CustomAttributeTypedArgument,System.Reflection.CustomAttributeTypedArgument)
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: Inequality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)
  nameWithType: CustomAttributeTypedArgument.Inequality(CustomAttributeTypedArgument, CustomAttributeTypedArgument)
  fullName: System.Reflection.CustomAttributeTypedArgument.Inequality(System.Reflection.CustomAttributeTypedArgument, System.Reflection.CustomAttributeTypedArgument)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 688
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Tests whether two <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures are different.</p>\n"
  syntax:
    content: public static bool operator !=(CustomAttributeTypedArgument left, CustomAttributeTypedArgument right)
    content.vb: Public Shared Operator <>(left As CustomAttributeTypedArgument, right As CustomAttributeTypedArgument) As Boolean
    parameters:
    - id: left
      type: System.Reflection.CustomAttributeTypedArgument
      description: "\n<p>The <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure to the left of the inequality operator.</p>\n"
    - id: right
      type: System.Reflection.CustomAttributeTypedArgument
      description: "\n<p>The <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structure to the right of the inequality operator.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two <xref href=\"System.Reflection.CustomAttributeTypedArgument\" data-throw-if-not-resolved=\"false\"></xref> structures are different; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  commentId: M:System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CustomAttributeTypedArgument.Equals(Object)
  fullName: System.Reflection.CustomAttributeTypedArgument.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 956
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Indicates whether this instance and a specified object are equal.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>Another object to compare to. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> and this instance are the same type and represent the same value; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - linkId: System.ValueType.Equals(System.Object)
    commentId: M:System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.CustomAttributeTypedArgument.GetHashCode
  commentId: M:System.Reflection.CustomAttributeTypedArgument.GetHashCode
  id: GetHashCode
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CustomAttributeTypedArgument.GetHashCode()
  fullName: System.Reflection.CustomAttributeTypedArgument.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 952
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\n"
  overridden: System.ValueType.GetHashCode
  seealso:
  - linkId: System.ValueType.GetHashCode
    commentId: M:System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.CustomAttributeTypedArgument.ToString
  commentId: M:System.Reflection.CustomAttributeTypedArgument.ToString
  id: ToString
  parent: System.Reflection.CustomAttributeTypedArgument
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: CustomAttributeTypedArgument.ToString()
  fullName: System.Reflection.CustomAttributeTypedArgument.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/CustomAttribute.cs
    startLine: 913
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a string consisting of the argument name, the equal sign, and a string representation of the argument value.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string consisting of the argument name, the equal sign, and a string representation of the argument value.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.CustomAttributeTypedArgument
  commentId: T:System.Reflection.CustomAttributeTypedArgument
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeTypedArgument
  nameWithType: CustomAttributeTypedArgument
  fullName: System.Reflection.CustomAttributeTypedArgument
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
