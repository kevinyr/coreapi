### YamlMime:ManagedReference
items:
- uid: System.Random
  commentId: T:System.Random
  id: Random
  parent: System
  children:
  - System.Random.#ctor
  - System.Random.#ctor(System.Int32)
  - System.Random.Next
  - System.Random.Next(System.Int32)
  - System.Random.Next(System.Int32,System.Int32)
  - System.Random.NextBytes(System.Byte[])
  - System.Random.NextDouble
  - System.Random.Sample
  langs:
  - csharp
  - vb
  name: Random
  nameWithType: Random
  fullName: System.Random
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Random
    path: src/mscorlib/src/System/Random.cs
    startLine: 19
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Represents a pseudo-random number generator, which is a device that produces a sequence of numbers that meet certain statistical requirements for randomness.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public class Random
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public Class Random
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Random.#ctor
  commentId: M:System.Random.#ctor
  id: '#ctor'
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Random()
  nameWithType: Random.Random()
  fullName: System.Random.Random()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Random.cs
    startLine: 49
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class, using a time-dependent default seed value.</p>\n"
  syntax:
    content: public Random()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Random.#ctor(System.Int32)
  commentId: M:System.Random.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Random(Int32)
  nameWithType: Random.Random(Int32)
  fullName: System.Random.Random(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Random.cs
    startLine: 53
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Random\" data-throw-if-not-resolved=\"false\"></xref> class, using the specified seed value.</p>\n"
  syntax:
    content: public Random(int Seed)
    content.vb: Public Sub New(Seed As Integer)
    parameters:
    - id: Seed
      type: System.Int32
      description: "\n<p>A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Random.Next
  commentId: M:System.Random.Next
  id: Next
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Next()
  nameWithType: Random.Next()
  fullName: System.Random.Next()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Next
    path: src/mscorlib/src/System/Random.cs
    startLine: 127
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a non-negative random integer.</p>\n"
  syntax:
    content: public virtual int Next()
    content.vb: Public Overridable Function Next As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is greater than or equal to 0 and less than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.Next(System.Int32)
  commentId: M:System.Random.Next(System.Int32)
  id: Next(System.Int32)
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Next(Int32)
  nameWithType: Random.Next(Int32)
  fullName: System.Random.Next(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Next
    path: src/mscorlib/src/System/Random.cs
    startLine: 177
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a non-negative random integer that is less than the specified maximum.</p>\n"
  syntax:
    content: public virtual int Next(int maxValue)
    content.vb: Public Overridable Function Next(maxValue As Integer) As Integer
    parameters:
    - id: maxValue
      type: System.Int32
      description: "\n<p>The exclusive upper bound of the random number to be generated. <em>maxValue</em> must be greater than or equal to 0. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is greater than or equal to 0, and less than <em>maxValue</em>; that is, the range of return values ordinarily includes 0 but not <em>maxValue</em>. However, if <em>maxValue</em> equals 0, <em>maxValue</em> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>maxValue</em> is less than 0. </p>\n"
  seealso:
  - linkId: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.Next(System.Int32,System.Int32)
  commentId: M:System.Random.Next(System.Int32,System.Int32)
  id: Next(System.Int32,System.Int32)
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Next(Int32, Int32)
  nameWithType: Random.Next(Int32, Int32)
  fullName: System.Random.Next(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Next
    path: src/mscorlib/src/System/Random.cs
    startLine: 156
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a random integer that is within a specified range.</p>\n"
  syntax:
    content: public virtual int Next(int minValue, int maxValue)
    content.vb: Public Overridable Function Next(minValue As Integer, maxValue As Integer) As Integer
    parameters:
    - id: minValue
      type: System.Int32
      description: "\n<p>The inclusive lower bound of the random number returned. </p>\n"
    - id: maxValue
      type: System.Int32
      description: "\n<p>The exclusive upper bound of the random number returned. <em>maxValue</em> must be greater than or equal to <em>minValue</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer greater than or equal to <em>minValue</em> and less than <em>maxValue</em>; that is, the range of return values includes <em>minValue</em> but not <em>maxValue</em>. If <em>minValue</em> equals <em>maxValue</em>, <em>minValue</em> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>minValue</em> is greater than <em>maxValue</em>. </p>\n"
  seealso:
  - linkId: System.Int32
    commentId: T:System.Int32
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.NextBytes(System.Byte[])
  commentId: M:System.Random.NextBytes(System.Byte[])
  id: NextBytes(System.Byte[])
  parent: System.Random
  langs:
  - csharp
  - vb
  name: NextBytes(Byte[])
  nameWithType: Random.NextBytes(Byte[])
  fullName: System.Random.NextBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NextBytes
    path: src/mscorlib/src/System/Random.cs
    startLine: 202
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Fills the elements of a specified array of bytes with random numbers.</p>\n"
  syntax:
    content: public virtual void NextBytes(byte[] buffer)
    content.vb: Public Overridable Sub NextBytes(buffer As Byte())
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>An array of bytes to contain random numbers. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>buffer</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Byte
    commentId: T:System.Byte
  nameWithType.vb: Random.NextBytes(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Random.NextBytes(System.Byte())
  name.vb: NextBytes(Byte())
- uid: System.Random.NextDouble
  commentId: M:System.Random.NextDouble
  id: NextDouble
  parent: System.Random
  langs:
  - csharp
  - vb
  name: NextDouble()
  nameWithType: Random.NextDouble()
  fullName: System.Random.NextDouble()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: NextDouble
    path: src/mscorlib/src/System/Random.cs
    startLine: 191
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a random floating-point number that is greater than or equal to 0.0, and less than 1.0.</p>\n"
  syntax:
    content: public virtual double NextDouble()
    content.vb: Public Overridable Function NextDouble As Double
    return:
      type: System.Double
      description: "\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Random.Sample
  commentId: M:System.Random.Sample
  id: Sample
  parent: System.Random
  langs:
  - csharp
  - vb
  name: Sample()
  nameWithType: Random.Sample()
  fullName: System.Random.Sample()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Random.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sample
    path: src/mscorlib/src/System/Random.cs
    startLine: 90
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Returns a random floating-point number between 0.0 and 1.0.</p>\n"
  syntax:
    content: protected virtual double Sample()
    content.vb: Protected Overridable Function Sample As Double
    return:
      type: System.Double
      description: "\n<p>A double-precision floating point number that is greater than or equal to 0.0, and less than 1.0.</p>\n"
  seealso:
  - linkId: System.Random.NextDouble
    commentId: M:System.Random.NextDouble
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
