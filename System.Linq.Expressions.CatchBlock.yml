items:
- uid: System.Linq.Expressions.CatchBlock
  commentId: T:System.Linq.Expressions.CatchBlock
  id: CatchBlock
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.CatchBlock.Body
  - System.Linq.Expressions.CatchBlock.Filter
  - System.Linq.Expressions.CatchBlock.Test
  - System.Linq.Expressions.CatchBlock.ToString
  - System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  - System.Linq.Expressions.CatchBlock.Variable
  langs:
  - csharp
  - vb
  name: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
  type: Class
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CatchBlock
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 60
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Represents a catch statement in a try block.</p>\n"
  syntax:
    content: public sealed class CatchBlock
    content.vb: Public NotInheritable Class CatchBlock
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: CatchBlock
- uid: System.Linq.Expressions.CatchBlock.Body
  commentId: P:System.Linq.Expressions.CatchBlock.Body
  id: Body
  parent: System.Linq.Expressions.CatchBlock
  langs:
  - csharp
  - vb
  name: Body
  fullName: System.Linq.Expressions.CatchBlock.Body
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Body
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 63
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the body of the catch block.</p>\n"
  syntax:
    content: public Expression Body { get; }
    content.vb: Public ReadOnly Property Body As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> object representing the catch body.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CatchBlock.Body
- uid: System.Linq.Expressions.CatchBlock.Filter
  commentId: P:System.Linq.Expressions.CatchBlock.Filter
  id: Filter
  parent: System.Linq.Expressions.CatchBlock
  langs:
  - csharp
  - vb
  name: Filter
  fullName: System.Linq.Expressions.CatchBlock.Filter
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Filter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 64
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the body of the <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> filter.</p>\n"
  syntax:
    content: public Expression Filter { get; }
    content.vb: Public ReadOnly Property Filter As Expression
    parameters: []
    return:
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref> object representing the body of the <xref href=\"System.Linq.Expressions.CatchBlock\" data-throw-if-not-resolved=\"false\"></xref> filter.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CatchBlock.Filter
- uid: System.Linq.Expressions.CatchBlock.Test
  commentId: P:System.Linq.Expressions.CatchBlock.Test
  id: Test
  parent: System.Linq.Expressions.CatchBlock
  langs:
  - csharp
  - vb
  name: Test
  fullName: System.Linq.Expressions.CatchBlock.Test
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Test
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 65
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets the type of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> this handler catches.</p>\n"
  syntax:
    content: public Type Test { get; }
    content.vb: Public ReadOnly Property Test As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object representing the type of <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> this handler catches.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CatchBlock.Test
- uid: System.Linq.Expressions.CatchBlock.Variable
  commentId: P:System.Linq.Expressions.CatchBlock.Variable
  id: Variable
  parent: System.Linq.Expressions.CatchBlock
  langs:
  - csharp
  - vb
  name: Variable
  fullName: System.Linq.Expressions.CatchBlock.Variable
  type: Property
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Variable
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 66
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Gets a reference to the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object caught by this handler.</p>\n"
  syntax:
    content: public ParameterExpression Variable { get; }
    content.vb: Public ReadOnly Property Variable As ParameterExpression
    parameters: []
    return:
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref> object representing a reference to the <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object caught by this handler.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: CatchBlock.Variable
- uid: System.Linq.Expressions.CatchBlock.ToString
  commentId: M:System.Linq.Expressions.CatchBlock.ToString
  id: ToString
  parent: System.Linq.Expressions.CatchBlock
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Linq.Expressions.CatchBlock.ToString()
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 67
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Returns a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that represents the current <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: CatchBlock.ToString()
- uid: System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  commentId: M:System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  id: Update(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)
  parent: System.Linq.Expressions.CatchBlock
  langs:
  - csharp
  - vb
  name: Update(ParameterExpression, Expression, Expression)
  fullName: System.Linq.Expressions.CatchBlock.Update(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression)
  type: Method
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Update
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 68
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Creates a new expression that is like this one, but using the supplied children. If all of the children are the same, it will return this expression.</p>\n"
  syntax:
    content: public CatchBlock Update(ParameterExpression variable, Expression filter, Expression body)
    content.vb: Public Function Update(variable As ParameterExpression, filter As Expression, body As Expression) As CatchBlock
    parameters:
    - id: variable
      type: System.Linq.Expressions.ParameterExpression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.CatchBlock.Variable\" data-throw-if-not-resolved=\"false\"></xref> property of the result.</p>\n"
    - id: filter
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.CatchBlock.Filter\" data-throw-if-not-resolved=\"false\"></xref> property of the result.</p>\n"
    - id: body
      type: System.Linq.Expressions.Expression
      description: "\n<p>The <xref href=\"System.Linq.Expressions.CatchBlock.Body\" data-throw-if-not-resolved=\"false\"></xref> property of the result.</p>\n"
    return:
      type: System.Linq.Expressions.CatchBlock
      description: "\n<p>This expression if no children are changed or an expression with the updated children.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: CatchBlock.Update(ParameterExpression, Expression, Expression)
references:
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  nameWithType: System.Linq.Expressions
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: false
  name: Expression
  fullName: System.Linq.Expressions.Expression
  commentId: T:System.Linq.Expressions.Expression
  nameWithType: Expression
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
  commentId: T:System.Type
  nameWithType: Type
- uid: System.Linq.Expressions.ParameterExpression
  parent: System.Linq.Expressions
  isExternal: false
  name: ParameterExpression
  fullName: System.Linq.Expressions.ParameterExpression
  commentId: T:System.Linq.Expressions.ParameterExpression
  nameWithType: ParameterExpression
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Linq.Expressions.CatchBlock
  parent: System.Linq.Expressions
  isExternal: false
  name: CatchBlock
  fullName: System.Linq.Expressions.CatchBlock
  commentId: T:System.Linq.Expressions.CatchBlock
  nameWithType: CatchBlock
