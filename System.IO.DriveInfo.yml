items:
- uid: System.IO.DriveInfo
  commentId: T:System.IO.DriveInfo
  id: DriveInfo
  parent: System.IO
  children:
  - System.IO.DriveInfo.#ctor(System.String)
  - System.IO.DriveInfo.AvailableFreeSpace
  - System.IO.DriveInfo.DriveFormat
  - System.IO.DriveInfo.DriveType
  - System.IO.DriveInfo.GetDrives
  - System.IO.DriveInfo.IsReady
  - System.IO.DriveInfo.Name
  - System.IO.DriveInfo.RootDirectory
  - System.IO.DriveInfo.ToString
  - System.IO.DriveInfo.TotalFreeSpace
  - System.IO.DriveInfo.TotalSize
  - System.IO.DriveInfo.VolumeLabel
  langs:
  - csharp
  - vb
  name: DriveInfo
  fullName: System.IO.DriveInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DriveInfo
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 42
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Provides access to information on a drive.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class DriveInfo : ISerializable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class DriveInfo
          Implements ISerializable
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: DriveInfo
- uid: System.IO.DriveInfo.#ctor(System.String)
  commentId: M:System.IO.DriveInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: DriveInfo(String)
  fullName: System.IO.DriveInfo.DriveInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 50
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Provides access to information on the specified drive.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public DriveInfo(string driveName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(driveName As String)
    parameters:
    - id: driveName
      type: System.String
      description: "\n<p>A valid drive path or drive letter. This can be either uppercase or lowercase, 'a' to 'z'. A null value is not valid. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The drive letter cannot be <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The first letter of <em>driveName</em> is not an uppercase or lowercase letter from 'a' to 'z'.</p>\n<p>-or-</p>\n<p>\n<em>driveName</em> does not refer to a valid drive.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DriveInfo.DriveInfo(String)
- uid: System.IO.DriveInfo.AvailableFreeSpace
  commentId: P:System.IO.DriveInfo.AvailableFreeSpace
  id: AvailableFreeSpace
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: AvailableFreeSpace
  fullName: System.IO.DriveInfo.AvailableFreeSpace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AvailableFreeSpace
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 139
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Indicates the amount of available free space on a drive, in bytes.</p>\n"
  syntax:
    content: >-
      public long AvailableFreeSpace

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property AvailableFreeSpace As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of free space available on the drive, in bytes.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.AvailableFreeSpace
- uid: System.IO.DriveInfo.DriveFormat
  commentId: P:System.IO.DriveInfo.DriveFormat
  id: DriveFormat
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: DriveFormat
  fullName: System.IO.DriveInfo.DriveFormat
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DriveFormat
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 108
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the name of the file system, such as NTFS or FAT32.</p>\n"
  syntax:
    content: >-
      public string DriveFormat

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property DriveFormat As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the file system on the specified drive.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive does not exist or is not mapped.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.DriveFormat
- uid: System.IO.DriveInfo.DriveType
  commentId: P:System.IO.DriveInfo.DriveType
  id: DriveType
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: DriveType
  fullName: System.IO.DriveInfo.DriveType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DriveType
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 100
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the drive type, such as CD-ROM, removable, network, or fixed.</p>\n"
  syntax:
    content: >-
      public DriveType DriveType

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property DriveType As DriveType
    parameters: []
    return:
      type: System.IO.DriveType
      description: "\n<p>One of the enumeration values that specifies a drive type. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.DriveType
- uid: System.IO.DriveInfo.IsReady
  commentId: P:System.IO.DriveInfo.IsReady
  id: IsReady
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: IsReady
  fullName: System.IO.DriveInfo.IsReady
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReady
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 132
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets a value that indicates whether a drive is ready.</p>\n"
  syntax:
    content: >-
      public bool IsReady

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property IsReady As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the drive is ready; <strong>false</strong> if the drive is not ready.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.IsReady
- uid: System.IO.DriveInfo.Name
  commentId: P:System.IO.DriveInfo.Name
  id: Name
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.DriveInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 96
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the name of a drive, such as C:\\.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the drive.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.Name
- uid: System.IO.DriveInfo.RootDirectory
  commentId: P:System.IO.DriveInfo.RootDirectory
  id: RootDirectory
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: RootDirectory
  fullName: System.IO.DriveInfo.RootDirectory
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RootDirectory
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 202
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the root directory of a drive.</p>\n"
  syntax:
    content: public DirectoryInfo RootDirectory { get; }
    content.vb: Public ReadOnly Property RootDirectory As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
      description: "\n<p>An object that contains the root directory of the drive.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.RootDirectory
- uid: System.IO.DriveInfo.TotalFreeSpace
  commentId: P:System.IO.DriveInfo.TotalFreeSpace
  id: TotalFreeSpace
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: TotalFreeSpace
  fullName: System.IO.DriveInfo.TotalFreeSpace
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TotalFreeSpace
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 156
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the total amount of free space available on a drive, in bytes.</p>\n"
  syntax:
    content: >-
      public long TotalFreeSpace

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property TotalFreeSpace As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The total free space available on a drive, in bytes.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive is not mapped or does not exist.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.TotalFreeSpace
- uid: System.IO.DriveInfo.TotalSize
  commentId: P:System.IO.DriveInfo.TotalSize
  id: TotalSize
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: TotalSize
  fullName: System.IO.DriveInfo.TotalSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TotalSize
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 173
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets the total size of storage space on a drive, in bytes.</p>\n"
  syntax:
    content: >-
      public long TotalSize

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property TotalSize As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The total size of the drive, in bytes.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to the drive information is denied.</p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive is not mapped or does not exist. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: DriveInfo.TotalSize
- uid: System.IO.DriveInfo.VolumeLabel
  commentId: P:System.IO.DriveInfo.VolumeLabel
  id: VolumeLabel
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: VolumeLabel
  fullName: System.IO.DriveInfo.VolumeLabel
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: VolumeLabel
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 209
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Gets or sets the volume label of a drive.</p>\n"
  syntax:
    content: >-
      public string VolumeLabel

      {
          [SecuritySafeCritical]
          get;
          [SecuritySafeCritical]
          set;
      }
    content.vb: Public Property VolumeLabel As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The volume label.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  - type: System.IO.DriveNotFoundException
    commentId: T:System.IO.DriveNotFoundException
    description: "\n<p>The drive is not mapped or does not exist.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The volume label is being set on a network or CD-ROM drive.</p>\n<p>-or-</p>\n<p>Access to the drive information is denied.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: DriveInfo.VolumeLabel
- uid: System.IO.DriveInfo.GetDrives
  commentId: M:System.IO.DriveInfo.GetDrives
  id: GetDrives
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: GetDrives()
  fullName: System.IO.DriveInfo.GetDrives()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDrives
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 192
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Retrieves the drive names of all logical drives on a computer.</p>\n"
  syntax:
    content: public static DriveInfo[] GetDrives()
    content.vb: Public Shared Function GetDrives As DriveInfo()
    return:
      type: System.IO.DriveInfo[]
      description: "\n<p>An array of type <xref href=\"System.IO.DriveInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the logical drives on a computer.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred (for example, a disk error or a drive was not ready). </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: DriveInfo.GetDrives()
- uid: System.IO.DriveInfo.ToString
  commentId: M:System.IO.DriveInfo.ToString
  id: ToString
  parent: System.IO.DriveInfo
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IO.DriveInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IO/DriveInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/IO/DriveInfo.cs
    startLine: 259
  assemblies:
  - System.IO.FileSystem.DriveInfo
  namespace: System.IO
  summary: "\n<p>Returns a drive name as a string.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The name of the drive.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: DriveInfo.ToString()
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  nameWithType: System.IO
  commentId: N:System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.IO.DriveType
  parent: System.IO
  isExternal: false
  name: DriveType
  fullName: System.IO.DriveType
  nameWithType: DriveType
  commentId: T:System.IO.DriveType
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  fullName: System.IO.DirectoryInfo
  nameWithType: DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
- uid: System.IO.DriveInfo[]
  name: DriveInfo[]
  fullName: System.IO.DriveInfo[]
  fullname.vb: System.IO.DriveInfo()
  name.vb: DriveInfo()
  spec.csharp:
  - uid: System.IO.DriveInfo
    name: DriveInfo
    fullName: System.IO.DriveInfo
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IO.DriveInfo
    name: DriveInfo
    fullName: System.IO.DriveInfo
  - name: ()
    fullName: ()
  nameWithType: DriveInfo[]
  nameWithType.vb: DriveInfo()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
  nameWithType: IOException
  commentId: T:System.IO.IOException
- uid: System.IO.DriveNotFoundException
  isExternal: false
  name: DriveNotFoundException
  fullName: System.IO.DriveNotFoundException
  nameWithType: DriveNotFoundException
  commentId: T:System.IO.DriveNotFoundException
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
  nameWithType: SecurityException
  commentId: T:System.Security.SecurityException
