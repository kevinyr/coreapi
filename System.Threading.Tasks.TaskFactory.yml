### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.TaskFactory
  commentId: T:System.Threading.Tasks.TaskFactory
  id: TaskFactory
  parent: System.Threading.Tasks
  children:
  - System.Threading.Tasks.TaskFactory.#ctor
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.CancellationToken
  - System.Threading.Tasks.TaskFactory.ContinuationOptions
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  - System.Threading.Tasks.TaskFactory.CreationOptions
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  - System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.Scheduler
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  - System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  langs:
  - csharp
  - vb
  name: TaskFactory
  nameWithType: TaskFactory
  fullName: System.Threading.Tasks.TaskFactory
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TaskFactory
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 39
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Provides support for creating and scheduling <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public class TaskFactory
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Class TaskFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Tasks.TaskFactory.#ctor
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor
  id: '#ctor'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory()
  nameWithType: TaskFactory.TaskFactory()
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 88
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the default configuration.</p>\n"
  syntax:
    content: public TaskFactory()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken)
  id: '#ctor(System.Threading.CancellationToken)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken)
  nameWithType: TaskFactory.TaskFactory(CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 109
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken)
    content.vb: Public Sub New(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(CancellationToken, TaskCreationOptions, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 204
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: Public Sub New(cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to tasks created by this <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> unless another CancellationToken is explicitly specified while calling the factory methods.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating tasks with this TaskFactory.</p>\n<p></p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating continuation tasks with this TaskFactory.</p>\n<p></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to use to schedule any Tasks created with this TaskFactory. A null value indicates that TaskScheduler.Current should be used.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>The <em>continuationOptions</em> argument specifies an invalid value.  </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)
  id: '#ctor(System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskContinuationOptions)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  nameWithType: TaskFactory.TaskFactory(TaskCreationOptions, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskContinuationOptions)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 164
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(TaskCreationOptions creationOptions, TaskContinuationOptions continuationOptions)
    content.vb: Public Sub New(creationOptions As TaskCreationOptions, continuationOptions As TaskContinuationOptions)
    parameters:
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating tasks with this TaskFactory.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> to use when creating continuation tasks with this TaskFactory.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>creationOptions</em> argument specifies an invalid <xref href=\"System.Threading.Tasks.TaskCreationOptions\" data-throw-if-not-resolved=\"false\"></xref> value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>The <em>continuationOptions</em> argument specifies an invalid value.  </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.#ctor(System.Threading.Tasks.TaskScheduler)
  id: '#ctor(System.Threading.Tasks.TaskScheduler)'
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: TaskFactory(TaskScheduler)
  nameWithType: TaskFactory.TaskFactory(TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.TaskFactory(System.Threading.Tasks.TaskScheduler)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 133
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Initializes a <xref href=\"System.Threading.Tasks.TaskFactory\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified configuration.</p>\n"
  syntax:
    content: public TaskFactory(TaskScheduler scheduler)
    content.vb: Public Sub New(scheduler As TaskScheduler)
    parameters:
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> to use to schedule any tasks created with this TaskFactory. A null value indicates that the current TaskScheduler should be used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.CancellationToken
  commentId: P:System.Threading.Tasks.TaskFactory.CancellationToken
  id: CancellationToken
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: CancellationToken
  nameWithType: TaskFactory.CancellationToken
  fullName: System.Threading.Tasks.TaskFactory.CancellationToken
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CancellationToken
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 243
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default cancellation token for this task factory.</p>\n"
  syntax:
    content: public CancellationToken CancellationToken { get; }
    content.vb: Public ReadOnly Property CancellationToken As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n<p>The default task cancellation token for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.ContinuationOptions
  commentId: P:System.Threading.Tasks.TaskFactory.ContinuationOptions
  id: ContinuationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinuationOptions
  nameWithType: TaskFactory.ContinuationOptions
  fullName: System.Threading.Tasks.TaskFactory.ContinuationOptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinuationOptions
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 275
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default task continuation options for this task factory.</p>\n"
  syntax:
    content: public TaskContinuationOptions ContinuationOptions { get; }
    content.vb: Public ReadOnly Property ContinuationOptions As TaskContinuationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The default task continuation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.CreationOptions
  commentId: P:System.Threading.Tasks.TaskFactory.CreationOptions
  id: CreationOptions
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: CreationOptions
  nameWithType: TaskFactory.CreationOptions
  fullName: System.Threading.Tasks.TaskFactory.CreationOptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreationOptions
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 265
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default task creation options for this task factory.</p>\n"
  syntax:
    content: public TaskCreationOptions CreationOptions { get; }
    content.vb: Public ReadOnly Property CreationOptions As TaskCreationOptions
    parameters: []
    return:
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The default task creation options for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.Scheduler
  commentId: P:System.Threading.Tasks.TaskFactory.Scheduler
  id: Scheduler
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: Scheduler
  nameWithType: TaskFactory.Scheduler
  fullName: System.Threading.Tasks.TaskFactory.Scheduler
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Scheduler
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 255
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Gets the default task scheduler for this task factory.</p>\n"
  syntax:
    content: public TaskScheduler Scheduler { get; }
    content.vb: Public ReadOnly Property Scheduler As TaskScheduler
    parameters: []
    return:
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The default task scheduler for this task factory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1800
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task())) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()))
  name.vb: ContinueWhenAll(Task(), Action(Of Task()))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1832
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1916
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll(Task[], Action<Task[]>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task[]>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1869
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll(Task[] tasks, Action<Task[]> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(tasks As Task(), continuationAction As Action(Of Task()), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Task(), Action(Of Task()), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task()), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Task(), Action(Of Task()), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2096
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult))
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2132
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2224
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task[],``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TResult>(Task[], Func<Task[], TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2173
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TResult>(Task[] tasks, Func<Task[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TResult)(Task(), Func(Of Task(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1944
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)())) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()))
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1977
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2065
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}[]},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>[]>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2016
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAll<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>[]> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)()), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
      description: "\n<p>The action delegate to execute when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)()), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)()), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2257
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult))
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2293
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2389
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation token to assign to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The object that is used to schedule the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>scheduler</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n<p></p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAll``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0}[],``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>[], TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAll<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAll
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2336
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation task that starts when a set of specified tasks has completed.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAll<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>[], TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAll(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult)(), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when all tasks in the <em>tasks</em> array have completed.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>A bitwise combination of the enumeration values that control the behavior of the new continuation task. The NotOn* and OnlyOn* members are not supported. </p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created task.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation task.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An element in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>continuationFunction</em> argument is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>continuationOptions</em> argument specifies an invalid value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array is empty or contains a null value.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAll(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAll(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult)(), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2530
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task)) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a <strong>null</strong> value. </p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task))
  name.vb: ContinueWhenAny(Task(), Action(Of Task))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2561
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>One of the elements in the <em>tasks</em> array has been disposed. </p>\n<p>-or-</p>\n<p>\n<em>cancellationToken</em> has already been disposed. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>tasks</em> array is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>The <em>continuationAction</em> argument is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>tasks</em> array contains a <strong>null</strong> value. </p>\n<p>-or-</p>\n<p>The <em>tasks</em> array is empty .</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2645
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny(System.Threading.Tasks.Task[],System.Action{System.Threading.Tasks.Task},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny(Task[], Action<Task>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task[], System.Action<System.Threading.Tasks.Task>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2598
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny(Task[] tasks, Action<Task> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(tasks As Task(), continuationAction As Action(Of Task), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Task(), Action(Of Task), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(System.Threading.Tasks.Task(), System.Action(Of System.Threading.Tasks.Task), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Task(), Action(Of Task), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2677
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult))
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2712
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2804
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task[],System.Func{System.Threading.Tasks.Task,``0},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TResult>(Task[], Func<Task, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TResult>(System.Threading.Tasks.Task[], System.Func<System.Threading.Tasks.Task, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2753
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TResult>(Task[] tasks, Func<Task, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TResult)(tasks As Task(), continuationFunction As Func(Of Task, TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task,{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TResult)(System.Threading.Tasks.Task(), System.Func(Of System.Threading.Tasks.Task, TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TResult)(Task(), Func(Of Task, TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2995
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult))) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)))
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 3027
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 3115
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``1(System.Threading.Tasks.Task{``0}[],System.Action{System.Threading.Tasks.Task{``0}},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[], Action<Task<TAntecedentResult>>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Action<System.Threading.Tasks.Task<TAntecedentResult>>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 3066
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task ContinueWhenAny<TAntecedentResult>(Task<TAntecedentResult>[] tasks, Action<Task<TAntecedentResult>> continuationAction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult)(tasks As Task(Of TAntecedentResult)(), continuationAction As Action(Of Task(Of TAntecedentResult)), continuationOptions As TaskContinuationOptions) As Task
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationAction
      type: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
      description: "\n<p>The action delegate to execute when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationAction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult)(Task(Of TAntecedentResult)(), Action(Of Task(Of TAntecedentResult)), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2836
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult)) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult))
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult))
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2870
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n<p>-or-</p>\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.CancellationToken,System.Threading.Tasks.TaskContinuationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, CancellationToken, TaskContinuationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2966
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, CancellationToken cancellationToken, TaskContinuationOptions continuationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), cancellationToken As CancellationToken, continuationOptions As TaskContinuationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new continuation task.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskContinuationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), CancellationToken, TaskContinuationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  id: ContinueWhenAny``2(System.Threading.Tasks.Task{``0}[],System.Func{System.Threading.Tasks.Task{``0},``1},System.Threading.Tasks.TaskContinuationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  nameWithType: TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[], Func<Task<TAntecedentResult>, TResult>, TaskContinuationOptions)
  fullName: System.Threading.Tasks.TaskFactory.ContinueWhenAny<TAntecedentResult, TResult>(System.Threading.Tasks.Task<TAntecedentResult>[], System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>, System.Threading.Tasks.TaskContinuationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContinueWhenAny
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 2913
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that will be started upon the completion of any Task in the provided set.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> ContinueWhenAny<TAntecedentResult, TResult>(Task<TAntecedentResult>[] tasks, Func<Task<TAntecedentResult>, TResult> continuationFunction, TaskContinuationOptions continuationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function ContinueWhenAny(Of TAntecedentResult, TResult)(tasks As Task(Of TAntecedentResult)(), continuationFunction As Func(Of Task(Of TAntecedentResult), TResult), continuationOptions As TaskContinuationOptions) As Task(Of TResult)
    parameters:
    - id: tasks
      type: System.Threading.Tasks.Task{{TAntecedentResult}}[]
      description: "\n<p>The array of tasks from which to continue when one task completes.</p>\n"
    - id: continuationFunction
      type: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
      description: "\n<p>The function delegate to execute asynchronously when one task in the <em>tasks</em> array completes.</p>\n"
    - id: continuationOptions
      type: System.Threading.Tasks.TaskContinuationOptions
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskContinuationOptions\" data-throw-if-not-resolved=\"false\"></xref> value that controls the behavior of the created continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TAntecedentResult
      description: "\n<p>The type of the result of the antecedent <em>tasks</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result that is returned by the <em>continuationFunction</em> delegate and associated with the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The new continuation <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The exception that is thrown when one of the elements in the <em>tasks</em> array has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>continuationFunction</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>continuationOptions</em> argument specifies an invalid TaskContinuationOptions value.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The exception that is thrown when the <em>tasks</em> array contains a null value.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>tasks</em> array is empty.</p>\n"
  nameWithType.vb: TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.ContinueWhenAny(Of TAntecedentResult, TResult)(System.Threading.Tasks.Task(Of TAntecedentResult)(), System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult), System.Threading.Tasks.TaskContinuationOptions)
  name.vb: ContinueWhenAny(Of TAntecedentResult, TResult)(Task(Of TAntecedentResult)(), Func(Of Task(Of TAntecedentResult), TResult), TaskContinuationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)
  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 952
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(Func<AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 982
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync(Func<AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Func(Of AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Action<IAsyncResult>)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 852
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult)) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(IAsyncResult, Action(Of IAsyncResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult))
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult))
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 880
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync(System.IAsyncResult,System.Action{System.IAsyncResult},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.FromAsync(IAsyncResult, Action<IAsyncResult>, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action<System.IAsyncResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 913
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method action when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task FromAsync(IAsyncResult asyncResult, Action<IAsyncResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(asyncResult As IAsyncResult, endMethod As Action(Of IAsyncResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The action delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the task that executes the end method.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(System.IAsyncResult, System.Action(Of System.IAsyncResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: FromAsync(IAsyncResult, Action(Of IAsyncResult), TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1011
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1047
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync<TArg1>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1322
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state)
    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object)
  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TResult>(Func<AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1354
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TResult>(Func<AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TResult)(beginMethod As Func(Of AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TResult)(Func(Of AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1230
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult)) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult))
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult))
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1260
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: FromAsync``1(System.IAsyncResult,System.Func{System.IAsyncResult,``0},System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.FromAsync<TResult>(IAsyncResult, Func<IAsyncResult, TResult>, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TResult>(System.IAsyncResult, System.Func<System.IAsyncResult, TResult>, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1294
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that executes an end method function when a specified <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> completes.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> FromAsync<TResult>(IAsyncResult asyncResult, Func<IAsyncResult, TResult> endMethod, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function FromAsync(Of TResult)(asyncResult As IAsyncResult, endMethod As Func(Of IAsyncResult, TResult), creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "\n<p>The IAsyncResult whose completion should trigger the processing of the <em>endMethod</em>.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The function delegate that processes the completed <em>asyncResult</em>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the task that executes the end method.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>A <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>asyncResult</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TResult)(System.IAsyncResult, System.Func(Of System.IAsyncResult, TResult), System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: FromAsync(Of TResult)(IAsyncResult, Func(Of IAsyncResult, TResult), TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1081
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1120
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync<TArg1, TArg2>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  nameWithType: TaskFactory.FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1385
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state)
    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object)
  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``2(System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``1},``0,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TResult>(System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1421
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TResult>(Func<TArg1, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TResult)(beginMethod As Func(Of TArg1, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TResult)(System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TResult)(Func(Of TArg1, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1158
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Action<IAsyncResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Action<System.IAsyncResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1201
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task FromAsync<TArg1, TArg2, TArg3>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Action<IAsyncResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Action(Of IAsyncResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Action{System.IAsyncResult}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Action(Of System.IAsyncResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Action(Of IAsyncResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1455
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``3(System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``2},``0,``1,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TResult>(System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1494
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TResult>(Func<TArg1, TArg2, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TResult)(beginMethod As Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TResult)(System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TResult)(Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1533
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object)
- uid: System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: FromAsync``4(System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult},System.Func{System.IAsyncResult,``3},``0,``1,``2,System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  nameWithType: TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>, Func<IAsyncResult, TResult>, TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.FromAsync<TArg1, TArg2, TArg3, TResult>(System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>, System.Func<System.IAsyncResult, TResult>, TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FromAsync
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 1577
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents a pair of begin and end methods that conform to the Asynchronous Programming Model pattern.</p>\n"
  syntax:
    content: public Task<TResult> FromAsync<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, AsyncCallback, object, IAsyncResult> beginMethod, Func<IAsyncResult, TResult> endMethod, TArg1 arg1, TArg2 arg2, TArg3 arg3, object state, TaskCreationOptions creationOptions)
    content.vb: Public Function FromAsync(Of TArg1, TArg2, TArg3, TResult)(beginMethod As Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), endMethod As Func(Of IAsyncResult, TResult), arg1 As TArg1, arg2 As TArg2, arg3 As TArg3, state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: beginMethod
      type: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
      description: "\n<p>The delegate that begins the asynchronous operation.</p>\n"
    - id: endMethod
      type: System.Func{System.IAsyncResult,{TResult}}
      description: "\n<p>The delegate that ends the asynchronous operation.</p>\n"
    - id: arg1
      type: '{TArg1}'
      description: "\n<p>The first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg2
      type: '{TArg2}'
      description: "\n<p>The second argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: arg3
      type: '{TArg3}'
      description: "\n<p>The third argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>beginMethod</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>The TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TArg1
      description: "\n<p>The type of the second argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg2
      description: "\n<p>The type of the third argument passed to <em>beginMethod</em> delegate.</p>\n"
    - id: TArg3
      description: "\n<p>The type of the first argument passed to the <em>beginMethod</em> delegate.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref> that represents the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>beginMethod</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>endMethod</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.FromAsync(Of TArg1, TArg2, TArg3, TResult)(System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult), System.Func(Of System.IAsyncResult, TResult), TArg1, TArg2, TArg3, System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: FromAsync(Of TArg1, TArg2, TArg3, TResult)(Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult), Func(Of IAsyncResult, TResult), TArg1, TArg2, TArg3, Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  id: StartNew(System.Action)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action)
  nameWithType: TaskFactory.StartNew(Action)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 295
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a task.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action action)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken)
  id: StartNew(System.Action,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action, CancellationToken)
  nameWithType: TaskFactory.StartNew(Action, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 322
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action action, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 393
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action action, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 352
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action action, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: action
      type: System.Action
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object)
  id: StartNew(System.Action{System.Object},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 429
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action<object> action, object state)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action(Of Object), state As Object) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously. </p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate. </p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>action</em> argument is <strong>null</strong>. </p>\n"
  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object)
  name.vb: StartNew(Action(Of Object), Object)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object, CancellationToken)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 460
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken)
  name.vb: StartNew(Action(Of Object), Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 535
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action<object> action, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action(Of Object), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Action(Of Object), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew(Action<Object>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew(Action<Object>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew(System.Action<System.Object>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 492
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task StartNew(Action<object> action, object state, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(action As Action(Of Object), state As Object, creationOptions As TaskCreationOptions) As Task
    parameters:
    - id: action
      type: System.Action{System.Object}
      description: "\n<p>The action delegate to execute asynchronously.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>action</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>action</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value.</p>\n"
  nameWithType.vb: TaskFactory.StartNew(Action(Of Object), Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(System.Action(Of System.Object), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Action(Of Object), Object, TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0})
  id: StartNew``1(System.Func{``0})
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 564
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<TResult> function)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of TResult)) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>function</em> argument is <strong>null</strong>.</p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult))
  name.vb: StartNew(Of TResult)(Func(Of TResult))
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>, CancellationToken)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 597
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken)
  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{``0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 676
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<TResult> function, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of TResult), cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Of TResult)(Func(Of TResult), CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{``0},System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew<TResult>(Func<TResult>, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<TResult>, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 631
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<TResult> function, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of TResult), creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of TResult), TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of TResult), System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Of TResult)(Func(Of TResult), TaskCreationOptions)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object)
  id: StartNew``1(System.Func{System.Object,``0},System.Object)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 706
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 741
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions,System.Threading.Tasks.TaskScheduler)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 824
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, CancellationToken cancellationToken, TaskCreationOptions creationOptions, TaskScheduler scheduler)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, cancellationToken As CancellationToken, creationOptions As TaskCreationOptions, scheduler As TaskScheduler) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskFactory.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> that will be assigned to the new task.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: scheduler
      type: System.Threading.Tasks.TaskScheduler
      description: "\n<p>The <xref href=\"System.Threading.Tasks.TaskScheduler\" data-throw-if-not-resolved=\"false\"></xref> that is used to schedule the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The provided <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> has already been disposed.</p>\n<p></p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n<p>-or-</p>\n<p>The exception that is thrown when the <em>scheduler</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.CancellationToken, System.Threading.Tasks.TaskCreationOptions, System.Threading.Tasks.TaskScheduler)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, CancellationToken, TaskCreationOptions, TaskScheduler)
- uid: System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  commentId: M:System.Threading.Tasks.TaskFactory.StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  id: StartNew``1(System.Func{System.Object,``0},System.Object,System.Threading.Tasks.TaskCreationOptions)
  parent: System.Threading.Tasks.TaskFactory
  langs:
  - csharp
  - vb
  name: StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)
  nameWithType: TaskFactory.StartNew<TResult>(Func<Object, TResult>, Object, TaskCreationOptions)
  fullName: System.Threading.Tasks.TaskFactory.StartNew<TResult>(System.Func<System.Object, TResult>, System.Object, System.Threading.Tasks.TaskCreationOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StartNew
    path: src/mscorlib/src/System/Threading/Tasks/TaskFactory.cs
    startLine: 777
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading.Tasks
  summary: "\n<p>Creates and starts a <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.NoInlining)]

      public Task<TResult> StartNew<TResult>(Func<object, TResult> function, object state, TaskCreationOptions creationOptions)
    content.vb: >-
      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function StartNew(Of TResult)(function As Func(Of Object, TResult), state As Object, creationOptions As TaskCreationOptions) As Task(Of TResult)
    parameters:
    - id: function
      type: System.Func{System.Object,{TResult}}
      description: "\n<p>A function delegate that returns the future result to be available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object containing data to be used by the <em>function</em> delegate.</p>\n"
    - id: creationOptions
      type: System.Threading.Tasks.TaskCreationOptions
      description: "\n<p>A TaskCreationOptions value that controls the behavior of the created <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the result available through the <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p></p>\n"
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The started <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The exception that is thrown when the <em>function</em> argument is null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. The exception that is thrown when the <em>creationOptions</em> argument specifies an invalid TaskCreationOptions value. For more information, see the Remarks for <xref href=\"System.Threading.Tasks.TaskFactory.FromAsync(System.Func{System.AsyncCallback,System.Object,System.IAsyncResult},System.Action{System.IAsyncResult},System.Object,System.Threading.Tasks.TaskCreationOptions)\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: TaskFactory.StartNew(Of TResult)(Func(Of Object, TResult), Object, TaskCreationOptions)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Tasks.TaskFactory.StartNew(Of TResult)(System.Func(Of System.Object, TResult), System.Object, System.Threading.Tasks.TaskCreationOptions)
  name.vb: StartNew(Of TResult)(Func(Of Object, TResult), Object, TaskCreationOptions)
references:
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.TaskCreationOptions
  commentId: T:System.Threading.Tasks.TaskCreationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskCreationOptions
  nameWithType: TaskCreationOptions
  fullName: System.Threading.Tasks.TaskCreationOptions
- uid: System.Threading.Tasks.TaskContinuationOptions
  commentId: T:System.Threading.Tasks.TaskContinuationOptions
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskContinuationOptions
  nameWithType: TaskContinuationOptions
  fullName: System.Threading.Tasks.TaskContinuationOptions
- uid: System.Threading.Tasks.TaskScheduler
  commentId: T:System.Threading.Tasks.TaskScheduler
  parent: System.Threading.Tasks
  isExternal: false
  name: TaskScheduler
  nameWithType: TaskScheduler
  fullName: System.Threading.Tasks.TaskScheduler
- uid: System.Threading.Tasks.Task[]
  name: Task[]
  nameWithType: Task[]
  fullName: System.Threading.Tasks.Task[]
  nameWithType.vb: Task()
  fullname.vb: System.Threading.Tasks.Task()
  name.vb: Task()
  spec.csharp:
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Action{System.Threading.Tasks.Task[]}
  commentId: T:System.Action{System.Threading.Tasks.Task[]}
  parent: System
  definition: System.Action`1
  name: Action<Task[]>
  nameWithType: Action<Task[]>
  fullName: System.Action<System.Threading.Tasks.Task[]>
  nameWithType.vb: Action(Of Task())
  fullname.vb: System.Action(Of System.Threading.Tasks.Task())
  name.vb: Action(Of Task())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task[],{TResult}}
  commentId: T:System.Func{System.Threading.Tasks.Task[],``0}
  parent: System
  definition: System.Func`2
  name: Func<Task[], TResult>
  nameWithType: Func<Task[], TResult>
  fullName: System.Func<System.Threading.Tasks.Task[], TResult>
  nameWithType.vb: Func(Of Task(), TResult)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(), TResult)
  name.vb: Func(Of Task(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: false
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TAntecedentResult}}[]
  name: Task<TAntecedentResult>[]
  nameWithType: Task<TAntecedentResult>[]
  fullName: System.Threading.Tasks.Task<TAntecedentResult>[]
  nameWithType.vb: Task(Of TAntecedentResult)()
  fullname.vb: System.Threading.Tasks.Task(Of TAntecedentResult)()
  name.vb: Task(Of TAntecedentResult)()
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}[]}
  commentId: T:System.Action{System.Threading.Tasks.Task{``0}[]}
  parent: System
  definition: System.Action`1
  name: Action<Task<TAntecedentResult>[]>
  nameWithType: Action<Task<TAntecedentResult>[]>
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>[]>
  nameWithType.vb: Action(Of Task(Of TAntecedentResult)())
  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult)())
  name.vb: Action(Of Task(Of TAntecedentResult)())
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}}[],{TResult}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}[],``1}
  parent: System
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>[], TResult>
  nameWithType: Func<Task<TAntecedentResult>[], TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>[], TResult>
  nameWithType.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult)(), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult)(), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Threading.Tasks.Task}
  commentId: T:System.Action{System.Threading.Tasks.Task}
  parent: System
  definition: System.Action`1
  name: Action<Task>
  nameWithType: Action<Task>
  fullName: System.Action<System.Threading.Tasks.Task>
  nameWithType.vb: Action(Of Task)
  fullname.vb: System.Action(Of System.Threading.Tasks.Task)
  name.vb: Action(Of Task)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task,{TResult}}
  commentId: T:System.Func{System.Threading.Tasks.Task,``0}
  parent: System
  definition: System.Func`2
  name: Func<Task, TResult>
  nameWithType: Func<Task, TResult>
  fullName: System.Func<System.Threading.Tasks.Task, TResult>
  nameWithType.vb: Func(Of Task, TResult)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task, TResult)
  name.vb: Func(Of Task, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Threading.Tasks.Task{{TAntecedentResult}}}
  commentId: T:System.Action{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Action`1
  name: Action<Task<TAntecedentResult>>
  nameWithType: Action<Task<TAntecedentResult>>
  fullName: System.Action<System.Threading.Tasks.Task<TAntecedentResult>>
  nameWithType.vb: Action(Of Task(Of TAntecedentResult))
  fullname.vb: System.Action(Of System.Threading.Tasks.Task(Of TAntecedentResult))
  name.vb: Action(Of Task(Of TAntecedentResult))
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Threading.Tasks.Task{{TAntecedentResult}},{TResult}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0},``1}
  parent: System
  definition: System.Func`2
  name: Func<Task<TAntecedentResult>, TResult>
  nameWithType: Func<Task<TAntecedentResult>, TResult>
  fullName: System.Func<System.Threading.Tasks.Task<TAntecedentResult>, TResult>
  nameWithType.vb: Func(Of Task(Of TAntecedentResult), TResult)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task(Of TAntecedentResult), TResult)
  name.vb: Func(Of Task(Of TAntecedentResult), TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TAntecedentResult
    nameWithType: TAntecedentResult
    fullName: TAntecedentResult
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  commentId: T:System.Func{System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`3
  name: Func<AsyncCallback, Object, IAsyncResult>
  nameWithType: Func<AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<System.AsyncCallback, System.Object, System.IAsyncResult>
  nameWithType.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  fullname.vb: System.Func(Of System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.IAsyncResult}
  commentId: T:System.Action{System.IAsyncResult}
  parent: System
  definition: System.Action`1
  name: Action<IAsyncResult>
  nameWithType: Action<IAsyncResult>
  fullName: System.Action<System.IAsyncResult>
  nameWithType.vb: Action(Of IAsyncResult)
  fullname.vb: System.Action(Of System.IAsyncResult)
  name.vb: Action(Of IAsyncResult)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`3
  commentId: T:System.Func`3
  isExternal: false
  name: Func<T1, T2, TResult>
  nameWithType: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IAsyncResult
  commentId: T:System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Func{{TArg1},System.AsyncCallback,System.Object,System.IAsyncResult}
  commentId: T:System.Func{``0,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`4
  name: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  nameWithType: Func<TArg1, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, System.AsyncCallback, System.Object, System.IAsyncResult>
  nameWithType.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  fullname.vb: System.Func(Of TArg1, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TArg1}'
  commentId: '!:TArg1'
  definition: TArg1
  name: TArg1
  nameWithType: TArg1
  fullName: TArg1
- uid: System.Func`4
  commentId: T:System.Func`4
  isExternal: false
  name: Func<T1, T2, T3, TResult>
  nameWithType: Func<T1, T2, T3, TResult>
  fullName: System.Func<T1, T2, T3, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, TResult)
  fullname.vb: System.Func(Of T1, T2, T3, TResult)
  name.vb: Func(Of T1, T2, T3, TResult)
  spec.csharp:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`4
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TArg1
  isExternal: false
  name: TArg1
  nameWithType: TArg1
  fullName: TArg1
- uid: System.Func{System.IAsyncResult,{TResult}}
  commentId: T:System.Func{System.IAsyncResult,``0}
  parent: System
  definition: System.Func`2
  name: Func<IAsyncResult, TResult>
  nameWithType: Func<IAsyncResult, TResult>
  fullName: System.Func<System.IAsyncResult, TResult>
  nameWithType.vb: Func(Of IAsyncResult, TResult)
  fullname.vb: System.Func(Of System.IAsyncResult, TResult)
  name.vb: Func(Of IAsyncResult, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TArg1},{TArg2},System.AsyncCallback,System.Object,System.IAsyncResult}
  commentId: T:System.Func{``0,``1,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`5
  name: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  nameWithType: Func<TArg1, TArg2, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult>
  nameWithType.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  fullname.vb: System.Func(Of TArg1, TArg2, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TArg2}'
  commentId: '!:TArg2'
  definition: TArg2
  name: TArg2
  nameWithType: TArg2
  fullName: TArg2
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: false
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TArg2
  isExternal: false
  name: TArg2
  nameWithType: TArg2
  fullName: TArg2
- uid: System.Func{{TArg1},{TArg2},{TArg3},System.AsyncCallback,System.Object,System.IAsyncResult}
  commentId: T:System.Func{``0,``1,``2,System.AsyncCallback,System.Object,System.IAsyncResult}
  parent: System
  definition: System.Func`6
  name: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  nameWithType: Func<TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult>
  fullName: System.Func<TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult>
  nameWithType.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  fullname.vb: System.Func(Of TArg1, TArg2, TArg3, System.AsyncCallback, System.Object, System.IAsyncResult)
  name.vb: Func(Of TArg1, TArg2, TArg3, AsyncCallback, Object, IAsyncResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TArg1
    nameWithType: TArg1
    fullName: TArg1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg2
    nameWithType: TArg2
    fullName: TArg2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TArg3
    nameWithType: TArg3
    fullName: TArg3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    nameWithType: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IAsyncResult
    name: IAsyncResult
    nameWithType: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TArg3}'
  commentId: '!:TArg3'
  definition: TArg3
  name: TArg3
  nameWithType: TArg3
  fullName: TArg3
- uid: System.Func`6
  commentId: T:System.Func`6
  isExternal: false
  name: Func<T1, T2, T3, T4, T5, TResult>
  nameWithType: Func<T1, T2, T3, T4, T5, TResult>
  fullName: System.Func<T1, T2, T3, T4, T5, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  fullname.vb: System.Func(Of T1, T2, T3, T4, T5, TResult)
  name.vb: Func(Of T1, T2, T3, T4, T5, TResult)
  spec.csharp:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`6
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T5
    nameWithType: T5
    fullName: T5
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TArg3
  isExternal: false
  name: TArg3
  nameWithType: TArg3
  fullName: TArg3
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullname.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{{TResult}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func{System.Object,{TResult}}
  commentId: T:System.Func{System.Object,`0}
  parent: System
  definition: System.Func`2
  name: Func<Object, TResult>
  nameWithType: Func<Object, TResult>
  fullName: System.Func<System.Object, TResult>
  nameWithType.vb: Func(Of Object, TResult)
  fullname.vb: System.Func(Of System.Object, TResult)
  name.vb: Func(Of Object, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
