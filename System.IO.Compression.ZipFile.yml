items:
- uid: System.IO.Compression.ZipFile
  commentId: T:System.IO.Compression.ZipFile
  id: ZipFile
  parent: System.IO.Compression
  children:
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  - System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  - System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  - System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  - System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
  - System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  - System.IO.Compression.ZipFile.OpenRead(System.String)
  langs:
  - csharp
  - vb
  name: ZipFile
  fullName: System.IO.Compression.ZipFile
  type: Class
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ZipFile
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 11
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Provides static methods for creating, extracting, and opening zip archives. </p>\n"
  syntax:
    content: public class ZipFile
    content.vb: Public Class ZipFile
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: ZipFile
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  commentId: M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String)
  id: CreateFromDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: CreateFromDirectory(String, String)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromDirectory
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 249
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Creates a zip archive that contains the files and directories from the specified directory.</p>\n"
  syntax:
    content: public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName)
    content.vb: Public Shared Sub CreateFromDirectory(sourceDirectoryName As String, destinationArchiveFileName As String)
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "\n<p>The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: destinationArchiveFileName
      type: System.String
      description: "\n<p>The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In <em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>sourceDirectoryName</em> is invalid or does not exist (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>destinationArchiveFileName</em> already exists.</p>\n<p>-or-</p>\n<p>A file in the specified directory could not be opened.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>destinationArchiveFileName</em> specifies a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission to access the directory specified in <em>sourceDirectoryName</em> or the file specified in <em>destinationArchiveFileName</em>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> contains an invalid format.</p>\n<p>-or-</p>\n<p>The zip archive does not support writing.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.CreateFromDirectory(String, String)
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  commentId: M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  id: CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: CreateFromDirectory(String, String, CompressionLevel, Boolean)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(System.String, System.String, System.IO.Compression.CompressionLevel, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromDirectory
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 13
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level, and optionally includes the base directory.</p>\n"
  syntax:
    content: public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory)
    content.vb: Public Shared Sub CreateFromDirectory(sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean)
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "\n<p>The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: destinationArchiveFileName
      type: System.String
      description: "\n<p>The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: "\n<p>One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</p>\n"
    - id: includeBaseDirectory
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to include the directory name from <em>sourceDirectoryName</em> at the root of the archive; <strong>false</strong> to include only the contents of the directory.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In <em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>sourceDirectoryName</em> is invalid or does not exist (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>destinationArchiveFileName</em> already exists.</p>\n<p>-or-</p>\n<p>A file in the specified directory could not be opened.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>destinationArchiveFileName</em> specifies a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission to access the directory specified in <em>sourceDirectoryName</em> or the file specified in <em>destinationArchiveFileName</em>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> contains an invalid format.</p>\n<p>-or-</p>\n<p>The zip archive does not support writing.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.CreateFromDirectory(String, String, CompressionLevel, Boolean)
- uid: System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  commentId: M:System.IO.Compression.ZipFile.CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  id: CreateFromDirectory(System.String,System.String,System.IO.Compression.CompressionLevel,System.Boolean,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: CreateFromDirectory(String, String, CompressionLevel, Boolean, Encoding)
  fullName: System.IO.Compression.ZipFile.CreateFromDirectory(System.String, System.String, System.IO.Compression.CompressionLevel, System.Boolean, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateFromDirectory
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 14
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Creates a zip archive that contains the files and directories from the specified directory, uses the specified compression level and character encoding for entry names, and optionally includes the base directory.</p>\n"
  syntax:
    content: public static void CreateFromDirectory(string sourceDirectoryName, string destinationArchiveFileName, CompressionLevel compressionLevel, bool includeBaseDirectory, Encoding entryNameEncoding)
    content.vb: Public Shared Sub CreateFromDirectory(sourceDirectoryName As String, destinationArchiveFileName As String, compressionLevel As CompressionLevel, includeBaseDirectory As Boolean, entryNameEncoding As Encoding)
    parameters:
    - id: sourceDirectoryName
      type: System.String
      description: "\n<p>The path to the directory to be archived, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: destinationArchiveFileName
      type: System.String
      description: "\n<p>The path of the archive to be created, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: compressionLevel
      type: System.IO.Compression.CompressionLevel
      description: "\n<p>One of the enumeration values that indicates whether to emphasize speed or compression effectiveness when creating the entry.</p>\n"
    - id: includeBaseDirectory
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to include the directory name from <em>sourceDirectoryName</em> at the root of the archive; <strong>false</strong> to include only the contents of the directory.</p>\n"
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n<p>-or-</p>\n<p>\n<em>entryNameEncoding</em> is set to a Unicode encoding other than UTF-8.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In <em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>sourceDirectoryName</em> is invalid or does not exist (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>destinationArchiveFileName</em> already exists.</p>\n<p>-or-</p>\n<p>A file in the specified directory could not be opened.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>destinationArchiveFileName</em> specifies a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission to access the directory specified in <em>sourceDirectoryName</em> or the file specified in <em>destinationArchiveFileName</em>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>sourceDirectoryName</em> or <em>destinationArchiveFileName</em> contains an invalid format.</p>\n<p>-or-</p>\n<p>The zip archive does not support writing.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.CreateFromDirectory(String, String, CompressionLevel, Boolean, Encoding)
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  commentId: M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String)
  id: ExtractToDirectory(System.String,System.String)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: ExtractToDirectory(String, String)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExtractToDirectory
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 410
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Extracts all the files in the specified zip archive to a directory on the file system.</p>\n"
  syntax:
    content: public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName)
    content.vb: Public Shared Sub ExtractToDirectory(sourceArchiveFileName As String, destinationDirectoryName As String)
    parameters:
    - id: sourceArchiveFileName
      type: System.String
      description: "\n<p>The path to the archive that is to be extracted.</p>\n"
    - id: destinationDirectoryName
      type: System.String
      description: "\n<p>The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path in <em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The directory specified by <em>destinationDirectoryName</em> already exists.</p>\n<p>-or-</p>\n<p>The name of an entry in the archive is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n<p>-or-</p>\n<p>Extracting an archive entry would create a file that is outside the directory specified by <em>destinationDirectoryName</em>. (For example, this might happen if the entry name contains parent directory accessors.) </p>\n<p>-or-</p>\n<p>An archive entry to extract has the same name as an entry that has already been extracted from the same archive.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission to access the archive or the destination directory.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> contains an invalid format.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>sourceArchiveFileName</em> was not found.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The archive specified by <em>sourceArchiveFileName</em> is not a valid zip archive.</p>\n<p>-or-</p>\n<p>An archive entry was not found or was corrupt.</p>\n<p>-or-</p>\n<p>An archive entry was compressed by using a compression method that is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.ExtractToDirectory(String, String)
- uid: System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  commentId: M:System.IO.Compression.ZipFile.ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  id: ExtractToDirectory(System.String,System.String,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: ExtractToDirectory(String, String, Encoding)
  fullName: System.IO.Compression.ZipFile.ExtractToDirectory(System.String, System.String, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExtractToDirectory
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 468
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Extracts all the files in the specified zip archive to a directory on the file system and uses the specified character encoding for entry names.</p>\n"
  syntax:
    content: public static void ExtractToDirectory(string sourceArchiveFileName, string destinationDirectoryName, Encoding entryNameEncoding)
    content.vb: Public Shared Sub ExtractToDirectory(sourceArchiveFileName As String, destinationDirectoryName As String, entryNameEncoding As Encoding)
    parameters:
    - id: sourceArchiveFileName
      type: System.String
      description: "\n<p>The path to the archive that is to be extracted.</p>\n"
    - id: destinationDirectoryName
      type: System.String
      description: "\n<p>The path to the directory in which to place the extracted files, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n<p>-or-</p>\n<p>\n<em>entryNameEncoding</em> is set to a Unicode encoding other than UTF-8.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path in <em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> exceeds the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The directory specified by <em>destinationDirectoryName</em> already exists.</p>\n<p>-or-</p>\n<p>The name of an entry in the archive is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n<p>-or-</p>\n<p>Extracting an archive entry would create a file that is outside the directory specified by <em>destinationDirectoryName</em>. (For example, this might happen if the entry name contains parent directory accessors.) </p>\n<p>-or-</p>\n<p>An archive entry to extract has the same name as an entry that has already been extracted from the same archive.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The caller does not have the required permission to access the archive or the destination directory.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destinationDirectoryName</em> or <em>sourceArchiveFileName</em> contains an invalid format.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>sourceArchiveFileName</em> was not found.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>The archive specified by <em>sourceArchiveFileName</em> is not a valid zip archive.</p>\n<p>-or-</p>\n<p>An archive entry was not found or was corrupt.</p>\n<p>-or-</p>\n<p>An archive entry was compressed by using a compression method that is not supported.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.ExtractToDirectory(String, String, Encoding)
- uid: System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
  commentId: M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode)
  id: Open(System.String,System.IO.Compression.ZipArchiveMode)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: Open(String, ZipArchiveMode)
  fullName: System.IO.Compression.ZipFile.Open(System.String, System.IO.Compression.ZipArchiveMode)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 17
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Opens a zip archive at the specified path and in the specified mode.</p>\n"
  syntax:
    content: public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode)
    content.vb: Public Shared Function Open(archiveFileName As String, mode As ZipArchiveMode) As ZipArchive
    parameters:
    - id: archiveFileName
      type: System.String
      description: "\n<p>The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that specifies the actions which are allowed on the entries in the opened archive.</p>\n"
    return:
      type: System.IO.Compression.ZipArchive
      description: "\n<p>The opened zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>archiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>archiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In <em>archiveFileName</em>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>archiveFileName</em> is invalid or does not exist (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>archiveFileName</em> could not be opened.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, but the file specified in <em>archiveFileName</em> already exists.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>archiveFileName</em> specifies a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission to access the file specified in <em>archiveFileName</em>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> specifies an invalid value.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>mode</em> is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Read\" data-throw-if-not-resolved=\"false\"></xref>, but the file specified in <em>archiveFileName</em> is not found.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>archiveFileName</em> contains an invalid format.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>\n<em>archiveFileName</em> could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, but an entry is missing or corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, but an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.Open(String, ZipArchiveMode)
- uid: System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  commentId: M:System.IO.Compression.ZipFile.Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  id: Open(System.String,System.IO.Compression.ZipArchiveMode,System.Text.Encoding)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: Open(String, ZipArchiveMode, Encoding)
  fullName: System.IO.Compression.ZipFile.Open(System.String, System.IO.Compression.ZipArchiveMode, System.Text.Encoding)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.IO.Compression.ZipFile/ref/System.IO.Compression.ZipFile.cs
    startLine: 18
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Opens a zip archive at the specified path, in the specified mode, and by using the specified character encoding for entry names.</p>\n"
  syntax:
    content: public static ZipArchive Open(string archiveFileName, ZipArchiveMode mode, Encoding entryNameEncoding)
    content.vb: Public Shared Function Open(archiveFileName As String, mode As ZipArchiveMode, entryNameEncoding As Encoding) As ZipArchive
    parameters:
    - id: archiveFileName
      type: System.String
      description: "\n<p>The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    - id: mode
      type: System.IO.Compression.ZipArchiveMode
      description: "\n<p>One of the enumeration values that specifies the actions that are allowed on the entries in the opened archive.</p>\n"
    - id: entryNameEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding to use when reading or writing entry names in this archive. Specify a value for this parameter only when an encoding is required for interoperability with zip archive tools and libraries that do not support UTF-8 encoding for entry names.</p>\n"
    return:
      type: System.IO.Compression.ZipArchive
      description: "\n<p>The opened zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>archiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n<p>-or-</p>\n<p>\n<em>entryNameEncoding</em> is set to a Unicode encoding other than UTF-8.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>archiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In <em>archiveFileName</em>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>archiveFileName</em> is invalid or does not exist (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>archiveFileName</em> could not be opened.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Create\" data-throw-if-not-resolved=\"false\"></xref>, but the file specified in <em>archiveFileName</em> already exists.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>archiveFileName</em> specifies a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission to access the file specified in <em>archiveFileName</em>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> specifies an invalid value.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>\n<em>mode</em> is set to <xref href=\"System.IO.Compression.ZipArchiveMode.Read\" data-throw-if-not-resolved=\"false\"></xref>, but the file specified in <em>archiveFileName</em> is not found.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>archiveFileName</em> contains an invalid format.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>\n<em>archiveFileName</em> could not be interpreted as a zip archive.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, but an entry is missing or corrupt and cannot be read.</p>\n<p>-or-</p>\n<p>\n<em>mode</em> is <xref href=\"System.IO.Compression.ZipArchiveMode.Update\" data-throw-if-not-resolved=\"false\"></xref>, but an entry is too large to fit into memory.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.Open(String, ZipArchiveMode, Encoding)
- uid: System.IO.Compression.ZipFile.OpenRead(System.String)
  commentId: M:System.IO.Compression.ZipFile.OpenRead(System.String)
  id: OpenRead(System.String)
  parent: System.IO.Compression.ZipFile
  langs:
  - csharp
  - vb
  name: OpenRead(String)
  fullName: System.IO.Compression.ZipFile.OpenRead(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenRead
    path: src/System.IO.Compression.ZipFile/src/System/IO/Compression/ZipFile.cs
    startLine: 36
  assemblies:
  - System.IO.Compression.ZipFile
  namespace: System.IO.Compression
  summary: "\n<p>Opens a zip archive for reading at the specified path.</p>\n"
  syntax:
    content: public static ZipArchive OpenRead(string archiveFileName)
    content.vb: Public Shared Function OpenRead(archiveFileName As String) As ZipArchive
    parameters:
    - id: archiveFileName
      type: System.String
      description: "\n<p>The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory.</p>\n"
    return:
      type: ZipArchive
      description: "\n<p>The opened zip archive.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>archiveFileName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, contains only white space, or contains at least one invalid character.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>archiveFileName</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In <em>archiveFileName</em>, the specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must not exceed 248 characters, and file names must not exceed 260 characters.</p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>\n<em>archiveFileName</em> is invalid or does not exist (for example, it is on an unmapped drive).</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<em>archiveFileName</em> could not be opened.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>archiveFileName</em> specifies a directory.</p>\n<p>-or-</p>\n<p>The caller does not have the required permission to access the file specified in <em>archiveFileName</em>.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in <em>archiveFileName</em> is not found.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>archiveFileName</em> contains an invalid format.</p>\n"
  - type: System.IO.InvalidDataException
    commentId: T:System.IO.InvalidDataException
    description: "\n<p>\n<em>archiveFileName</em> could not be interpreted as a zip archive.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ZipFile.OpenRead(String)
references:
- uid: System.IO.Compression
  isExternal: false
  name: System.IO.Compression
  fullName: System.IO.Compression
  nameWithType: System.IO.Compression
  commentId: N:System.IO.Compression
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.IO.Compression.CompressionLevel
  parent: System.IO.Compression
  isExternal: false
  name: CompressionLevel
  fullName: System.IO.Compression.CompressionLevel
  nameWithType: CompressionLevel
  commentId: T:System.IO.Compression.CompressionLevel
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  fullName: System.Text.Encoding
  nameWithType: Encoding
  commentId: T:System.Text.Encoding
- uid: System.Text
  isExternal: false
  name: System.Text
  fullName: System.Text
  nameWithType: System.Text
  commentId: N:System.Text
- uid: System.IO.Compression.ZipArchiveMode
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchiveMode
  fullName: System.IO.Compression.ZipArchiveMode
  nameWithType: ZipArchiveMode
  commentId: T:System.IO.Compression.ZipArchiveMode
- uid: System.IO.Compression.ZipArchive
  parent: System.IO.Compression
  isExternal: false
  name: ZipArchive
  fullName: System.IO.Compression.ZipArchive
  nameWithType: ZipArchive
  commentId: T:System.IO.Compression.ZipArchive
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  fullName: System.IO.PathTooLongException
  nameWithType: PathTooLongException
  commentId: T:System.IO.PathTooLongException
- uid: System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
  nameWithType: DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
  nameWithType: IOException
  commentId: T:System.IO.IOException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  nameWithType: FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
- uid: System.IO.InvalidDataException
  isExternal: false
  name: InvalidDataException
  fullName: System.IO.InvalidDataException
  nameWithType: InvalidDataException
  commentId: T:System.IO.InvalidDataException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
