items:
- uid: Microsoft.CSharp.RuntimeBinder.Binder
  commentId: T:Microsoft.CSharp.RuntimeBinder.Binder
  id: Binder
  parent: Microsoft.CSharp.RuntimeBinder
  children:
  - Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)
  - Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)
  - Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  - Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  langs:
  - csharp
  - vb
  name: Binder
  fullName: Microsoft.CSharp.RuntimeBinder.Binder
  type: Class
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Binder
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 15
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Contains factory methods to create dynamic call site binders for CSharp.</p>\n"
  syntax:
    content: public class Binder
    content.vb: Public Class Binder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: Binder
- uid: Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryOperation
    path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs
    startLine: 13
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp binary operation binder.</p>\n"
  syntax:
    content: public static CallSiteBinder BinaryOperation(CSharpBinderFlags flags, Linq.Expressions.ExpressionType operation, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function BinaryOperation(flags As CSharpBinderFlags, operation As Linq.Expressions.ExpressionType, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: operation
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The binary operation kind.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>Returns a new CSharp binary operation binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.BinaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.BinaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)
  id: Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Type)
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: Convert(CSharpBinderFlags, Type, Type)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.Convert(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 56
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp convert binder.</p>\n"
  syntax:
    content: public static CallSiteBinder Convert(CSharpBinderFlags flags, Type type, Type context)
    content.vb: Public Shared Function Convert(flags As CSharpBinderFlags, type As Type, context As Type) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The type to convert to.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp convert binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Binder.Convert(CSharpBinderFlags, Type, Type)
- uid: Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: GetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIndex
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 82
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp get index binder.</p>\n"
  syntax:
    content: public static CallSiteBinder GetIndex(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function GetIndex(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp get index binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.GetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: GetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.GetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.GetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: GetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMember
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 100
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp get member binder.</p>\n"
  syntax:
    content: public static CallSiteBinder GetMember(CSharpBinderFlags flags, string name, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function GetMember(flags As CSharpBinderFlags, name As String, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the member to get.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp get member binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.GetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: GetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.GetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.GetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: Invoke(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 119
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp invoke binder.</p>\n"
  syntax:
    content: public static CallSiteBinder Invoke(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function Invoke(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp invoke binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.Invoke(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: Invoke(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.Invoke(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.Invoke(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: InvokeConstructor(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InvokeConstructor
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 183
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp invoke constructor binder.</p>\n"
  syntax:
    content: public static CallSiteBinder InvokeConstructor(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function InvokeConstructor(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp invoke constructor binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.InvokeConstructor(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: InvokeConstructor(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.InvokeConstructor(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.InvokeConstructor(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Collections.Generic.IEnumerable{System.Type},System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: InvokeMember(CSharpBinderFlags, String, IEnumerable<Type>, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Collections.Generic.IEnumerable<System.Type>, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InvokeMember
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 146
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp invoke member binder.</p>\n"
  syntax:
    content: public static CallSiteBinder InvokeMember(CSharpBinderFlags flags, string name, IEnumerable<Type> typeArguments, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function InvokeMember(flags As CSharpBinderFlags, name As String, typeArguments As IEnumerable(Of Type), context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the member to invoke.</p>\n"
    - id: typeArguments
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "\n<p>The list of type arguments specified for this invoke.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp invoke member binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.InvokeMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Collections.Generic.IEnumerable(Of System.Type), System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: InvokeMember(CSharpBinderFlags, String, IEnumerable(Of Type), Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.InvokeMember(CSharpBinderFlags, String, IEnumerable<Type>, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.InvokeMember(CSharpBinderFlags, String, IEnumerable(Of Type), Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)
  id: IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type)
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: IsEvent(CSharpBinderFlags, String, Type)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.IsEvent(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEvent
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 200
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp is event binder.</p>\n"
  syntax:
    content: public static CallSiteBinder IsEvent(CSharpBinderFlags flags, string name, Type context)
    content.vb: Public Shared Function IsEvent(flags As CSharpBinderFlags, name As String, context As Type) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the event to look for.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp is event binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Binder.IsEvent(CSharpBinderFlags, String, Type)
- uid: Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: SetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetIndex
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 217
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp set index binder.</p>\n"
  syntax:
    content: public static CallSiteBinder SetIndex(CSharpBinderFlags flags, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function SetIndex(flags As CSharpBinderFlags, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp set index binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.SetIndex(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: SetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.SetIndex(CSharpBinderFlags, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.SetIndex(CSharpBinderFlags, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.String,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: SetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetMember
    path: src/Microsoft.CSharp/src/Microsoft/CSharp/RuntimeBinder/Binder.cs
    startLine: 237
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp set member binder.</p>\n"
  syntax:
    content: public static CallSiteBinder SetMember(CSharpBinderFlags flags, string name, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function SetMember(flags As CSharpBinderFlags, name As String, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the member to set.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: CallSiteBinder
      description: "\n<p>Returns a new CSharp set member binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.SetMember(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.String, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: SetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.SetMember(CSharpBinderFlags, String, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.SetMember(CSharpBinderFlags, String, Type, IEnumerable(Of CSharpArgumentInfo))
- uid: Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  commentId: M:Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  id: UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags,System.Linq.Expressions.ExpressionType,System.Type,System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo})
  parent: Microsoft.CSharp.RuntimeBinder.Binder
  langs:
  - csharp
  - vb
  name: UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)
  fullName: Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>)
  type: Method
  source:
    remote:
      path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryOperation
    path: src/Microsoft.CSharp/ref/Microsoft.CSharp.cs
    startLine: 23
  assemblies:
  - Microsoft.CSharp
  namespace: Microsoft.CSharp.RuntimeBinder
  summary: "\n<p>Initializes a new CSharp unary operation binder.</p>\n"
  syntax:
    content: public static CallSiteBinder UnaryOperation(CSharpBinderFlags flags, Linq.Expressions.ExpressionType operation, Type context, IEnumerable<CSharpArgumentInfo> argumentInfo)
    content.vb: Public Shared Function UnaryOperation(flags As CSharpBinderFlags, operation As Linq.Expressions.ExpressionType, context As Type, argumentInfo As IEnumerable(Of CSharpArgumentInfo)) As CallSiteBinder
    parameters:
    - id: flags
      type: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
      description: "\n<p>The flags with which to initialize the binder.</p>\n"
    - id: operation
      type: System.Linq.Expressions.ExpressionType
      description: "\n<p>The unary operation kind.</p>\n"
    - id: context
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> that indicates where this operation is used.</p>\n"
    - id: argumentInfo
      type: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
      description: "\n<p>The sequence of <xref href=\"Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo\" data-throw-if-not-resolved=\"false\"></xref> instances for the arguments to this operation.</p>\n"
    return:
      type: System.Runtime.CompilerServices.CallSiteBinder
      description: "\n<p>Returns a new CSharp unary operation binder.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.CSharp.RuntimeBinder.Binder.UnaryOperation(Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags, System.Linq.Expressions.ExpressionType, System.Type, System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo))
  name.vb: UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))
  nameWithType: Binder.UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable<CSharpArgumentInfo>)
  nameWithType.vb: Binder.UnaryOperation(CSharpBinderFlags, Linq.Expressions.ExpressionType, Type, IEnumerable(Of CSharpArgumentInfo))
references:
- uid: Microsoft.CSharp.RuntimeBinder
  isExternal: false
  name: Microsoft.CSharp.RuntimeBinder
  fullName: Microsoft.CSharp.RuntimeBinder
  nameWithType: Microsoft.CSharp.RuntimeBinder
  commentId: N:Microsoft.CSharp.RuntimeBinder
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
  parent: Microsoft.CSharp.RuntimeBinder
  isExternal: false
  name: CSharpBinderFlags
  fullName: Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
  nameWithType: CSharpBinderFlags
  commentId: T:Microsoft.CSharp.RuntimeBinder.CSharpBinderFlags
- uid: System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: Linq.Expressions.ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
  nameWithType: Linq.Expressions.ExpressionType
  commentId: T:System.Linq.Expressions.ExpressionType
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CSharpArgumentInfo>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo)
  name.vb: IEnumerable(Of CSharpArgumentInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
    name: CSharpArgumentInfo
    fullName: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
    name: CSharpArgumentInfo
    fullName: Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo
  - name: )
    fullName: )
  nameWithType: IEnumerable<CSharpArgumentInfo>
  nameWithType.vb: IEnumerable(Of CSharpArgumentInfo)
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.CSharp.RuntimeBinder.CSharpArgumentInfo}
- uid: System.Runtime.CompilerServices.CallSiteBinder
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: CallSiteBinder
  fullName: System.Runtime.CompilerServices.CallSiteBinder
  nameWithType: CallSiteBinder
  commentId: T:System.Runtime.CompilerServices.CallSiteBinder
- uid: System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  fullName: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
  nameWithType: System.Runtime.CompilerServices
  commentId: N:System.Runtime.CompilerServices
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IEnumerable<Type>
  nameWithType.vb: IEnumerable(Of Type)
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
