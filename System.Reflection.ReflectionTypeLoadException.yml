### YamlMime:ManagedReference
items:
- uid: System.Reflection.ReflectionTypeLoadException
  commentId: T:System.Reflection.ReflectionTypeLoadException
  id: ReflectionTypeLoadException
  parent: System.Reflection
  children:
  - System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])
  - System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)
  - System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  - System.Reflection.ReflectionTypeLoadException.Types
  langs:
  - csharp
  - vb
  name: ReflectionTypeLoadException
  nameWithType: ReflectionTypeLoadException
  fullName: System.Reflection.ReflectionTypeLoadException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReflectionTypeLoadException
    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>The exception that is thrown by the <xref href=\"System.Reflection.Module.GetTypes\" data-throw-if-not-resolved=\"false\"></xref> method if any of the classes in a module cannot be loaded. This class cannot be inherited.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class ReflectionTypeLoadException : SystemException, _Exception, ISerializable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class ReflectionTypeLoadException
          Inherits SystemException
          Implements _Exception, ISerializable
  inheritance:
  - System.Object
  - System.Exception
  implements:
  - System.Runtime.Serialization.ISerializable
  - System.Runtime.InteropServices._Exception
  inheritedMembers:
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Exception.GetType
  - System.Exception.Message
  - System.Exception.Data
  - System.Exception.InnerException
  - System.Exception.TargetSite
  - System.Exception.StackTrace
  - System.Exception.HelpLink
  - System.Exception.Source
  - System.Exception.HResult
  - System.Exception.SerializeObjectState
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])
  commentId: M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[])
  id: '#ctor(System.Type[],System.Exception[])'
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: ReflectionTypeLoadException(Type[], Exception[])
  nameWithType: ReflectionTypeLoadException.ReflectionTypeLoadException(Type[], Exception[])
  fullName: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type[], System.Exception[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
    startLine: 40
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.ReflectionTypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class with the given classes and their associated exceptions.</p>\n"
  syntax:
    content: public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions)
    content.vb: Public Sub New(classes As Type(), exceptions As Exception())
    parameters:
    - id: classes
      type: System.Type[]
      description: "\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values. </p>\n"
    - id: exceptions
      type: System.Exception[]
      description: "\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader. The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array. </p>\n"
  nameWithType.vb: ReflectionTypeLoadException.ReflectionTypeLoadException(Type(), Exception())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type(), System.Exception())
  name.vb: ReflectionTypeLoadException(Type(), Exception())
- uid: System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)
  commentId: M:System.Reflection.ReflectionTypeLoadException.#ctor(System.Type[],System.Exception[],System.String)
  id: '#ctor(System.Type[],System.Exception[],System.String)'
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: ReflectionTypeLoadException(Type[], Exception[], String)
  nameWithType: ReflectionTypeLoadException.ReflectionTypeLoadException(Type[], Exception[], String)
  fullName: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type[], System.Exception[], System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
    startLine: 47
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.ReflectionTypeLoadException\" data-throw-if-not-resolved=\"false\"></xref> class with the given classes, their associated exceptions, and exception descriptions.</p>\n"
  syntax:
    content: public ReflectionTypeLoadException(Type[] classes, Exception[] exceptions, string message)
    content.vb: Public Sub New(classes As Type(), exceptions As Exception(), message As String)
    parameters:
    - id: classes
      type: System.Type[]
      description: "\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain null reference (<strong>Nothing</strong> in Visual Basic) values. </p>\n"
    - id: exceptions
      type: System.Exception[]
      description: "\n<p>An array of type <strong>Exception</strong> containing the exceptions that were thrown by the class loader. The null reference (<strong>Nothing</strong> in Visual Basic) values in the <em>classes</em> array line up with the exceptions in this <em>exceptions</em> array. </p>\n"
    - id: message
      type: System.String
      description: "\n<p>A <strong>String</strong> describing the reason the exception was thrown. </p>\n"
  nameWithType.vb: ReflectionTypeLoadException.ReflectionTypeLoadException(Type(), Exception(), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.ReflectionTypeLoadException.ReflectionTypeLoadException(System.Type(), System.Exception(), System.String)
  name.vb: ReflectionTypeLoadException(Type(), Exception(), String)
- uid: System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  commentId: P:System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  id: LoaderExceptions
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: LoaderExceptions
  nameWithType: ReflectionTypeLoadException.LoaderExceptions
  fullName: System.Reflection.ReflectionTypeLoadException.LoaderExceptions
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LoaderExceptions
    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
    startLine: 63
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the array of exceptions thrown by the class loader.</p>\n"
  syntax:
    content: public Exception[] LoaderExceptions { get; }
    content.vb: Public ReadOnly Property LoaderExceptions As Exception()
    parameters: []
    return:
      type: System.Exception[]
      description: "\n<p>An array of type <strong>Exception</strong> containing the exceptions thrown by the class loader. The null values in the <xref href=\"System.Reflection.ReflectionTypeLoadException.Types\" data-throw-if-not-resolved=\"false\"></xref> array of this instance line up with the exceptions in this array.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.ReflectionTypeLoadException.Types
  commentId: P:System.Reflection.ReflectionTypeLoadException.Types
  id: Types
  parent: System.Reflection.ReflectionTypeLoadException
  langs:
  - csharp
  - vb
  name: Types
  nameWithType: ReflectionTypeLoadException.Types
  fullName: System.Reflection.ReflectionTypeLoadException.Types
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Types
    path: src/mscorlib/src/System/Reflection/ReflectionTypeLoadException.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the array of classes that were defined in the module and loaded.</p>\n"
  syntax:
    content: public Type[] Types { get; }
    content.vb: Public ReadOnly Property Types As Type()
    parameters: []
    return:
      type: System.Type[]
      description: "\n<p>An array of type <strong>Type</strong> containing the classes that were defined in the module and loaded. This array can contain some <strong>null</strong> values.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Runtime.InteropServices._Exception
  commentId: T:System.Runtime.InteropServices._Exception
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Exception
  nameWithType: _Exception
  fullName: System.Runtime.InteropServices._Exception
- uid: System.Exception.GetBaseException
  commentId: M:System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  nameWithType: Exception.GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.ToString
  commentId: M:System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  nameWithType: Exception.ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Exception
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Exception.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Exception.GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Exception.GetObjectData
    fullName: System.Exception.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.GetType
  commentId: M:System.Exception.GetType
  parent: System.Exception
  isExternal: true
  name: GetType()
  nameWithType: Exception.GetType()
  fullName: System.Exception.GetType()
  spec.csharp:
  - uid: System.Exception.GetType
    name: GetType
    nameWithType: Exception.GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetType
    name: GetType
    nameWithType: Exception.GetType
    fullName: System.Exception.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.Message
  commentId: P:System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  nameWithType: Exception.Message
  fullName: System.Exception.Message
- uid: System.Exception.Data
  commentId: P:System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  nameWithType: Exception.Data
  fullName: System.Exception.Data
- uid: System.Exception.InnerException
  commentId: P:System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  nameWithType: Exception.InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.TargetSite
  commentId: P:System.Exception.TargetSite
  parent: System.Exception
  isExternal: true
  name: TargetSite
  nameWithType: Exception.TargetSite
  fullName: System.Exception.TargetSite
- uid: System.Exception.StackTrace
  commentId: P:System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  nameWithType: Exception.StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.HelpLink
  commentId: P:System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  nameWithType: Exception.HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.Source
  commentId: P:System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  nameWithType: Exception.Source
  fullName: System.Exception.Source
- uid: System.Exception.HResult
  commentId: P:System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  nameWithType: Exception.HResult
  fullName: System.Exception.HResult
- uid: System.Exception.SerializeObjectState
  commentId: E:System.Exception.SerializeObjectState
  parent: System.Exception
  isExternal: true
  name: SerializeObjectState
  nameWithType: Exception.SerializeObjectState
  fullName: System.Exception.SerializeObjectState
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Exception[]
  name: Exception[]
  nameWithType: Exception[]
  fullName: System.Exception[]
  nameWithType.vb: Exception()
  fullname.vb: System.Exception()
  name.vb: Exception()
  spec.csharp:
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
