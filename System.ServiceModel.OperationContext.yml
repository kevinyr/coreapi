items:
- uid: System.ServiceModel.OperationContext
  commentId: T:System.ServiceModel.OperationContext
  id: OperationContext
  parent: System.ServiceModel
  children:
  - System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)
  - System.ServiceModel.OperationContext.Current
  - System.ServiceModel.OperationContext.Extensions
  - System.ServiceModel.OperationContext.IncomingMessageHeaders
  - System.ServiceModel.OperationContext.IncomingMessageProperties
  - System.ServiceModel.OperationContext.IncomingMessageVersion
  - System.ServiceModel.OperationContext.IsUserContext
  - System.ServiceModel.OperationContext.OperationCompleted
  - System.ServiceModel.OperationContext.OutgoingMessageHeaders
  - System.ServiceModel.OperationContext.OutgoingMessageProperties
  - System.ServiceModel.OperationContext.RequestContext
  langs:
  - csharp
  - vb
  name: OperationContext
  fullName: System.ServiceModel.OperationContext
  type: Class
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: OperationContext
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 13
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Provides access to the execution context of a service method.</p>\n"
  syntax:
    content: 'public sealed class OperationContext : IExtensibleObject<OperationContext>'
    content.vb: >-
      Public NotInheritable Class OperationContext
          Implements IExtensibleObject(Of OperationContext)
  inheritance:
  - System.Object
  implements:
  - System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: OperationContext
- uid: System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)
  commentId: M:System.ServiceModel.OperationContext.#ctor(System.ServiceModel.IContextChannel)
  id: '#ctor(System.ServiceModel.IContextChannel)'
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: OperationContext(IContextChannel)
  fullName: System.ServiceModel.OperationContext.OperationContext(System.ServiceModel.IContextChannel)
  type: Constructor
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 34
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified <xref href=\"System.ServiceModel.IContextChannel\" data-throw-if-not-resolved=\"false\"></xref> in a client application. </p>\n"
  syntax:
    content: public OperationContext(IContextChannel channel)
    content.vb: Public Sub New(channel As IContextChannel)
    parameters:
    - id: channel
      type: System.ServiceModel.IContextChannel
      description: "\n<p>The <xref href=\"System.ServiceModel.IContextChannel\" data-throw-if-not-resolved=\"false\"></xref> used to create a new client <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The channel is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OperationContext.OperationContext(IContextChannel)
- uid: System.ServiceModel.OperationContext.Current
  commentId: P:System.ServiceModel.OperationContext.Current
  id: Current
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.ServiceModel.OperationContext.Current
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Current
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 84
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets or sets the execution context for the current thread.</p>\n"
  syntax:
    content: public static OperationContext Current { get; set; }
    content.vb: Public Shared Property Current As OperationContext
    parameters: []
    return:
      type: System.ServiceModel.OperationContext
      description: "\n<p>The <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref> that represents the messaging and execution context of the current method.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
  nameWithType: OperationContext.Current
- uid: System.ServiceModel.OperationContext.Extensions
  commentId: P:System.ServiceModel.OperationContext.Extensions
  id: Extensions
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: Extensions
  fullName: System.ServiceModel.OperationContext.Extensions
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Extensions
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 131
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the collection of service extensions from the current message context.</p>\n"
  syntax:
    content: public IExtensionCollection<OperationContext> Extensions { get; }
    content.vb: Public ReadOnly Property Extensions As IExtensionCollection(Of OperationContext)
    parameters: []
    return:
      type: System.ServiceModel.IExtensionCollection{System.ServiceModel.OperationContext}
      description: "\n<p>A collection of extensions of <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}.Extensions
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.Extensions
- uid: System.ServiceModel.OperationContext.IncomingMessageHeaders
  commentId: P:System.ServiceModel.OperationContext.IncomingMessageHeaders
  id: IncomingMessageHeaders
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: IncomingMessageHeaders
  fullName: System.ServiceModel.OperationContext.IncomingMessageHeaders
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IncomingMessageHeaders
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 198
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the incoming message headers for the <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MessageHeaders IncomingMessageHeaders { get; }
    content.vb: Public ReadOnly Property IncomingMessageHeaders As MessageHeaders
    parameters: []
    return:
      type: System.ServiceModel.Channels.MessageHeaders
      description: "\n<p>A <xref href=\"System.ServiceModel.Channels.MessageHeaders\" data-throw-if-not-resolved=\"false\"></xref> object that contains the incoming message headers.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.IncomingMessageHeaders
- uid: System.ServiceModel.OperationContext.IncomingMessageProperties
  commentId: P:System.ServiceModel.OperationContext.IncomingMessageProperties
  id: IncomingMessageProperties
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: IncomingMessageProperties
  fullName: System.ServiceModel.OperationContext.IncomingMessageProperties
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IncomingMessageProperties
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 210
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the message properties for the incoming message in the <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MessageProperties IncomingMessageProperties { get; }
    content.vb: Public ReadOnly Property IncomingMessageProperties As MessageProperties
    parameters: []
    return:
      type: System.ServiceModel.Channels.MessageProperties
      description: "\n<p>A <xref href=\"System.ServiceModel.Channels.MessageProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains the message properties on the incoming message.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.IncomingMessageProperties
- uid: System.ServiceModel.OperationContext.IncomingMessageVersion
  commentId: P:System.ServiceModel.OperationContext.IncomingMessageVersion
  id: IncomingMessageVersion
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: IncomingMessageVersion
  fullName: System.ServiceModel.OperationContext.IncomingMessageVersion
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IncomingMessageVersion
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 222
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the incoming SOAP message version for the <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MessageVersion IncomingMessageVersion { get; }
    content.vb: Public ReadOnly Property IncomingMessageVersion As MessageVersion
    parameters: []
    return:
      type: System.ServiceModel.Channels.MessageVersion
      description: "\n<p>The SOAP version of the incoming message.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.IncomingMessageVersion
- uid: System.ServiceModel.OperationContext.IsUserContext
  commentId: P:System.ServiceModel.OperationContext.IsUserContext
  id: IsUserContext
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: IsUserContext
  fullName: System.ServiceModel.OperationContext.IsUserContext
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IsUserContext
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 123
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>This property is intended for system use and should not be called by users.</p>\n"
  syntax:
    content: public bool IsUserContext { get; }
    content.vb: Public ReadOnly Property IsUserContext As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.IsUserContext
- uid: System.ServiceModel.OperationContext.OutgoingMessageHeaders
  commentId: P:System.ServiceModel.OperationContext.OutgoingMessageHeaders
  id: OutgoingMessageHeaders
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: OutgoingMessageHeaders
  fullName: System.ServiceModel.OperationContext.OutgoingMessageHeaders
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: OutgoingMessageHeaders
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 166
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the outgoing message headers for the active <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MessageHeaders OutgoingMessageHeaders { get; }
    content.vb: Public ReadOnly Property OutgoingMessageHeaders As MessageHeaders
    parameters: []
    return:
      type: System.ServiceModel.Channels.MessageHeaders
      description: "\n<p>A <xref href=\"System.ServiceModel.Channels.MessageHeaders\" data-throw-if-not-resolved=\"false\"></xref> object that contains outbound message headers for the active <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.OutgoingMessageHeaders
- uid: System.ServiceModel.OperationContext.OutgoingMessageProperties
  commentId: P:System.ServiceModel.OperationContext.OutgoingMessageProperties
  id: OutgoingMessageProperties
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: OutgoingMessageProperties
  fullName: System.ServiceModel.OperationContext.OutgoingMessageProperties
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: OutgoingMessageProperties
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 182
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets the message properties for the outbound message in the active <xref href=\"System.ServiceModel.OperationContext\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MessageProperties OutgoingMessageProperties { get; }
    content.vb: Public ReadOnly Property OutgoingMessageProperties As MessageProperties
    parameters: []
    return:
      type: System.ServiceModel.Channels.MessageProperties
      description: "\n<p>A <xref href=\"System.ServiceModel.Channels.MessageProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains the message properties on the outbound message.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: OperationContext.OutgoingMessageProperties
- uid: System.ServiceModel.OperationContext.RequestContext
  commentId: P:System.ServiceModel.OperationContext.RequestContext
  id: RequestContext
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: RequestContext
  fullName: System.ServiceModel.OperationContext.RequestContext
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: RequestContext
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 239
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets or sets the <xref href=\"System.ServiceModel.Channels.RequestContext\" data-throw-if-not-resolved=\"false\"></xref> implementation for this method.</p>\n"
  syntax:
    content: public RequestContext RequestContext { get; set; }
    content.vb: Public Property RequestContext As RequestContext
    parameters: []
    return:
      type: System.ServiceModel.Channels.RequestContext
      description: "\n<p>An <xref href=\"System.ServiceModel.Channels.RequestContext\" data-throw-if-not-resolved=\"false\"></xref> implementation, or null if there is no request context.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: OperationContext.RequestContext
- uid: System.ServiceModel.OperationContext.OperationCompleted
  commentId: E:System.ServiceModel.OperationContext.OperationCompleted
  id: OperationCompleted
  parent: System.ServiceModel.OperationContext
  langs:
  - csharp
  - vb
  name: OperationCompleted
  fullName: System.ServiceModel.OperationContext.OperationCompleted
  type: Event
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: OperationCompleted
    path: src/System.Private.ServiceModel/src/System/ServiceModel/OperationContext.cs
    startLine: 32
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Occurs when the operation has completed. </p>\n"
  syntax:
    content: public event EventHandler OperationCompleted
    content.vb: Public Event OperationCompleted As EventHandler
    return:
      type: System.EventHandler
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: OperationContext.OperationCompleted
references:
- uid: System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  fullName: System.ServiceModel
  nameWithType: System.ServiceModel
  commentId: N:System.ServiceModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}
  parent: System.ServiceModel
  definition: System.ServiceModel.IExtensibleObject`1
  name: IExtensibleObject<OperationContext>
  fullName: System.ServiceModel.IExtensibleObject<System.ServiceModel.OperationContext>
  fullname.vb: System.ServiceModel.IExtensibleObject(Of System.ServiceModel.OperationContext)
  name.vb: IExtensibleObject(Of OperationContext)
  spec.csharp:
  - uid: System.ServiceModel.IExtensibleObject`1
    name: IExtensibleObject
    fullName: System.ServiceModel.IExtensibleObject
  - name: <
    fullName: <
  - uid: System.ServiceModel.OperationContext
    name: OperationContext
    fullName: System.ServiceModel.OperationContext
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ServiceModel.IExtensibleObject`1
    name: IExtensibleObject
    fullName: System.ServiceModel.IExtensibleObject
  - name: '(Of '
    fullName: '(Of '
  - uid: System.ServiceModel.OperationContext
    name: OperationContext
    fullName: System.ServiceModel.OperationContext
  - name: )
    fullName: )
  nameWithType: IExtensibleObject<OperationContext>
  nameWithType.vb: IExtensibleObject(Of OperationContext)
  commentId: T:System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.ServiceModel.IExtensibleObject`1
  isExternal: false
  name: IExtensibleObject<T>
  fullName: System.ServiceModel.IExtensibleObject<T>
  fullname.vb: System.ServiceModel.IExtensibleObject(Of T)
  name.vb: IExtensibleObject(Of T)
  spec.csharp:
  - uid: System.ServiceModel.IExtensibleObject`1
    name: IExtensibleObject
    fullName: System.ServiceModel.IExtensibleObject
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ServiceModel.IExtensibleObject`1
    name: IExtensibleObject
    fullName: System.ServiceModel.IExtensibleObject
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IExtensibleObject<T>
  nameWithType.vb: IExtensibleObject(Of T)
  commentId: T:System.ServiceModel.IExtensibleObject`1
- uid: System.ServiceModel.IContextChannel
  parent: System.ServiceModel
  isExternal: false
  name: IContextChannel
  fullName: System.ServiceModel.IContextChannel
  nameWithType: IContextChannel
  commentId: T:System.ServiceModel.IContextChannel
- uid: System.ServiceModel.OperationContext
  parent: System.ServiceModel
  isExternal: false
  name: OperationContext
  fullName: System.ServiceModel.OperationContext
  nameWithType: OperationContext
  commentId: T:System.ServiceModel.OperationContext
- uid: System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}.Extensions
  parent: System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}
  definition: System.ServiceModel.IExtensibleObject`1.Extensions
  name: Extensions
  fullName: System.ServiceModel.IExtensibleObject<System.ServiceModel.OperationContext>.Extensions
  fullname.vb: System.ServiceModel.IExtensibleObject(Of System.ServiceModel.OperationContext).Extensions
  nameWithType: IExtensibleObject<OperationContext>.Extensions
  nameWithType.vb: IExtensibleObject(Of OperationContext).Extensions
  commentId: P:System.ServiceModel.IExtensibleObject{System.ServiceModel.OperationContext}.Extensions
- uid: System.ServiceModel.IExtensionCollection{System.ServiceModel.OperationContext}
  parent: System.ServiceModel
  definition: System.ServiceModel.IExtensionCollection`1
  name: IExtensionCollection<OperationContext>
  fullName: System.ServiceModel.IExtensionCollection<System.ServiceModel.OperationContext>
  fullname.vb: System.ServiceModel.IExtensionCollection(Of System.ServiceModel.OperationContext)
  name.vb: IExtensionCollection(Of OperationContext)
  spec.csharp:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: <
    fullName: <
  - uid: System.ServiceModel.OperationContext
    name: OperationContext
    fullName: System.ServiceModel.OperationContext
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: System.ServiceModel.OperationContext
    name: OperationContext
    fullName: System.ServiceModel.OperationContext
  - name: )
    fullName: )
  nameWithType: IExtensionCollection<OperationContext>
  nameWithType.vb: IExtensionCollection(Of OperationContext)
  commentId: T:System.ServiceModel.IExtensionCollection{System.ServiceModel.OperationContext}
- uid: System.ServiceModel.IExtensibleObject`1.Extensions
  isExternal: false
  name: Extensions
  fullName: System.ServiceModel.IExtensibleObject<T>.Extensions
  fullname.vb: System.ServiceModel.IExtensibleObject(Of T).Extensions
  nameWithType: IExtensibleObject<T>.Extensions
  nameWithType.vb: IExtensibleObject(Of T).Extensions
  commentId: P:System.ServiceModel.IExtensibleObject`1.Extensions
- uid: System.ServiceModel.IExtensionCollection`1
  isExternal: false
  name: IExtensionCollection<T>
  fullName: System.ServiceModel.IExtensionCollection<T>
  fullname.vb: System.ServiceModel.IExtensionCollection(Of T)
  name.vb: IExtensionCollection(Of T)
  spec.csharp:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IExtensionCollection<T>
  nameWithType.vb: IExtensionCollection(Of T)
  commentId: T:System.ServiceModel.IExtensionCollection`1
- uid: System.ServiceModel.Channels.MessageHeaders
  parent: System.ServiceModel.Channels
  isExternal: false
  name: MessageHeaders
  fullName: System.ServiceModel.Channels.MessageHeaders
  nameWithType: MessageHeaders
  commentId: T:System.ServiceModel.Channels.MessageHeaders
- uid: System.ServiceModel.Channels
  isExternal: false
  name: System.ServiceModel.Channels
  fullName: System.ServiceModel.Channels
  nameWithType: System.ServiceModel.Channels
  commentId: N:System.ServiceModel.Channels
- uid: System.ServiceModel.Channels.MessageProperties
  parent: System.ServiceModel.Channels
  isExternal: false
  name: MessageProperties
  fullName: System.ServiceModel.Channels.MessageProperties
  nameWithType: MessageProperties
  commentId: T:System.ServiceModel.Channels.MessageProperties
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: false
  name: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
  nameWithType: MessageVersion
  commentId: T:System.ServiceModel.Channels.MessageVersion
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.ServiceModel.Channels.RequestContext
  parent: System.ServiceModel.Channels
  isExternal: false
  name: RequestContext
  fullName: System.ServiceModel.Channels.RequestContext
  nameWithType: RequestContext
  commentId: T:System.ServiceModel.Channels.RequestContext
- uid: System.EventHandler
  parent: System
  isExternal: false
  name: EventHandler
  fullName: System.EventHandler
  nameWithType: EventHandler
  commentId: T:System.EventHandler
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
