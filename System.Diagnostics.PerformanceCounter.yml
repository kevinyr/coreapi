### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.PerformanceCounter
  commentId: T:System.Diagnostics.PerformanceCounter
  id: PerformanceCounter
  parent: System.Diagnostics
  children:
  - System.Diagnostics.PerformanceCounter.#ctor
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  - System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  - System.Diagnostics.PerformanceCounter.BeginInit
  - System.Diagnostics.PerformanceCounter.CategoryName
  - System.Diagnostics.PerformanceCounter.Close
  - System.Diagnostics.PerformanceCounter.CounterHelp
  - System.Diagnostics.PerformanceCounter.CounterName
  - System.Diagnostics.PerformanceCounter.CounterType
  - System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  - System.Diagnostics.PerformanceCounter.EndInit
  - System.Diagnostics.PerformanceCounter.Increment
  - System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  - System.Diagnostics.PerformanceCounter.InstanceLifetime
  - System.Diagnostics.PerformanceCounter.InstanceName
  - System.Diagnostics.PerformanceCounter.MachineName
  - System.Diagnostics.PerformanceCounter.NextSample
  - System.Diagnostics.PerformanceCounter.NextValue
  - System.Diagnostics.PerformanceCounter.RawValue
  - System.Diagnostics.PerformanceCounter.ReadOnly
  - System.Diagnostics.PerformanceCounter.RemoveInstance
  langs:
  - csharp
  - vb
  name: PerformanceCounter
  nameWithType: PerformanceCounter
  fullName: System.Diagnostics.PerformanceCounter
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PerformanceCounter
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 32
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Represents a Windows NT performance counter component.</p>\n"
  syntax:
    content: public sealed class PerformanceCounter
    content.vb: Public NotInheritable Class PerformanceCounter
  seealso:
  - linkId: System.Diagnostics.PerformanceCounterType
    commentId: T:System.Diagnostics.PerformanceCounterType
  - linkId: System.Diagnostics.CounterCreationData
    commentId: T:System.Diagnostics.CounterCreationData
  - linkId: System.Diagnostics.CounterCreationDataCollection
    commentId: T:System.Diagnostics.CounterCreationDataCollection
  - linkId: System.Diagnostics.CounterSample
    commentId: T:System.Diagnostics.CounterSample
  - linkId: System.Diagnostics.CounterSampleCalculator
    commentId: T:System.Diagnostics.CounterSampleCalculator
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  commentId: F:System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  id: DefaultFileMappingSize
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: DefaultFileMappingSize
  nameWithType: PerformanceCounter.DefaultFileMappingSize
  fullName: System.Diagnostics.PerformanceCounter.DefaultFileMappingSize
  type: Field
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultFileMappingSize
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 35
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Specifies the size, in bytes, of the global memory shared by performance counters. The default size is 524,288 bytes.</p>\n"
  syntax:
    content: >-
      [Obsolete("This field has been deprecated and is not used.  Use machine.config or an application configuration file to set the size of the PerformanceCounter file mapping.")]

      public static int DefaultFileMappingSize
    content.vb: >-
      <Obsolete("This field has been deprecated and is not used.  Use machine.config or an application configuration file to set the size of the PerformanceCounter file mapping.")>

      Public Shared DefaultFileMappingSize As Integer
    return:
      type: System.Int32
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This field has been deprecated and is not used.  Use machine.config or an application configuration file to set the size of the PerformanceCounter file mapping.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.PerformanceCounter.#ctor
  commentId: M:System.Diagnostics.PerformanceCounter.#ctor
  id: '#ctor'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: PerformanceCounter()
  nameWithType: PerformanceCounter.PerformanceCounter()
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 36
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new, read-only instance of the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class, without associating the instance with any system or custom performance counter.</p>\n"
  syntax:
    content: public PerformanceCounter()
    content.vb: Public Sub New
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  commentId: M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: PerformanceCounter(String, String)
  nameWithType: PerformanceCounter.PerformanceCounter(String, String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 37
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new, read-only instance of the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category have a single instance.</p>\n"
  syntax:
    content: public PerformanceCounter(string categoryName, string counterName)
    content.vb: Public Sub New(categoryName As String, counterName As String)
    parameters:
    - id: categoryName
      type: System.String
      description: "\n<p>The name of the performance counter category (performance object) with which this performance counter is associated. </p>\n"
    - id: counterName
      type: System.String
      description: "\n<p>The name of the performance counter. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>categoryName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>\n<em>counterName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The category specified does not exist. </p>\n<p>-or-</p>\n<p>The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.</p>\n<p>-or-</p>\n<p>\n<em>categoryName</em> and <em>counterName</em> have been localized into different languages.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>categoryName</em> or <em>counterName</em> is <strong>null</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  commentId: M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: PerformanceCounter(String, String, Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String, String, Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 38
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new, read-only or read/write instance of the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class and associates it with the specified system or custom performance counter on the local computer. This constructor requires that the category contain a single instance.</p>\n"
  syntax:
    content: public PerformanceCounter(string categoryName, string counterName, bool readOnly)
    content.vb: Public Sub New(categoryName As String, counterName As String, readOnly As Boolean)
    parameters:
    - id: categoryName
      type: System.String
      description: "\n<p>The name of the performance counter category (performance object) with which this performance counter is associated. </p>\n"
    - id: counterName
      type: System.String
      description: "\n<p>The name of the performance counter. </p>\n"
    - id: readOnly
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to access the counter in read-only mode (although the counter itself could be read/write); <strong>false</strong> to access the counter in read/write mode. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>categoryName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The <em>counterName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The category specified does not exist. (if <em>readOnly</em> is <strong>true</strong>). </p>\n<p>-or- </p>\n<p>The category specified is not a .NET Framework custom category (if <em>readOnly</em> is <strong>false</strong>). </p>\n<p>-or-</p>\n<p>The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.</p>\n<p>-or-</p>\n<p>\n<em>categoryName</em> and <em>counterName</em> have been localized into different languages.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>categoryName</em> or <em>counterName</em> is <strong>null</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  commentId: M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: PerformanceCounter(String, String, String)
  nameWithType: PerformanceCounter.PerformanceCounter(String, String, String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 39
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new, read-only instance of the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class and associates it with the specified system or custom performance counter and category instance on the local computer.</p>\n"
  syntax:
    content: public PerformanceCounter(string categoryName, string counterName, string instanceName)
    content.vb: Public Sub New(categoryName As String, counterName As String, instanceName As String)
    parameters:
    - id: categoryName
      type: System.String
      description: "\n<p>The name of the performance counter category (performance object) with which this performance counter is associated. </p>\n"
    - id: counterName
      type: System.String
      description: "\n<p>The name of the performance counter. </p>\n"
    - id: instanceName
      type: System.String
      description: "\n<p>The name of the performance counter category instance, or an empty string (\"\"), if the category contains a single instance. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>categoryName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>\n<em>counterName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The category specified is not valid. </p>\n<p>-or-</p>\n<p>The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.</p>\n<p>-or-</p>\n<p>\n<em>instanceName</em> is longer than 127 characters.</p>\n<p>-or-</p>\n<p>\n<em>categoryName</em> and <em>counterName</em> have been localized into different languages.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>categoryName</em> or <em>counterName</em> is <strong>null</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  commentId: M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.Boolean)
  id: '#ctor(System.String,System.String,System.String,System.Boolean)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: PerformanceCounter(String, String, String, Boolean)
  nameWithType: PerformanceCounter.PerformanceCounter(String, String, String, Boolean)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(System.String, System.String, System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 40
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new, read-only or read/write instance of the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class and associates it with the specified system or custom performance counter and category instance on the local computer.</p>\n"
  syntax:
    content: public PerformanceCounter(string categoryName, string counterName, string instanceName, bool readOnly)
    content.vb: Public Sub New(categoryName As String, counterName As String, instanceName As String, readOnly As Boolean)
    parameters:
    - id: categoryName
      type: System.String
      description: "\n<p>The name of the performance counter category (performance object) with which this performance counter is associated. </p>\n"
    - id: counterName
      type: System.String
      description: "\n<p>The name of the performance counter. </p>\n"
    - id: instanceName
      type: System.String
      description: "\n<p>The name of the performance counter category instance, or an empty string (\"\"), if the category contains a single instance. </p>\n"
    - id: readOnly
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to access a counter in read-only mode; <strong>false</strong> to access a counter in read/write mode. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>categoryName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>\n<em>counterName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The read/write permission setting requested is invalid for this counter.</p>\n<p>-or- </p>\n<p>The category specified does not exist (if <em>readOnly</em> is <strong>true</strong>). </p>\n<p>-or- </p>\n<p>The category specified is not a .NET Framework custom category (if <em>readOnly</em> is <strong>false</strong>). </p>\n<p>-or-</p>\n<p>The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.</p>\n<p>-or-</p>\n<p>\n<em>instanceName</em> is longer than 127 characters.</p>\n<p>-or-</p>\n<p>\n<em>categoryName</em> and <em>counterName</em> have been localized into different languages.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>categoryName</em> or <em>counterName</em> is <strong>null</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:System.Diagnostics.PerformanceCounter.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: PerformanceCounter(String, String, String, String)
  nameWithType: PerformanceCounter.PerformanceCounter(String, String, String, String)
  fullName: System.Diagnostics.PerformanceCounter.PerformanceCounter(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 41
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new, read-only instance of the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> class and associates it with the specified system or custom performance counter and category instance, on the specified computer.</p>\n"
  syntax:
    content: public PerformanceCounter(string categoryName, string counterName, string instanceName, string machineName)
    content.vb: Public Sub New(categoryName As String, counterName As String, instanceName As String, machineName As String)
    parameters:
    - id: categoryName
      type: System.String
      description: "\n<p>The name of the performance counter category (performance object) with which this performance counter is associated. </p>\n"
    - id: counterName
      type: System.String
      description: "\n<p>The name of the performance counter. </p>\n"
    - id: instanceName
      type: System.String
      description: "\n<p>The name of the performance counter category instance, or an empty string (\"\"), if the category contains a single instance. </p>\n"
    - id: machineName
      type: System.String
      description: "\n<p>The computer on which the performance counter and its associated category exist. </p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>categoryName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>\n<em>counterName</em> is an empty string (\"\").</p>\n<p>-or- </p>\n<p>The read/write permission setting requested is invalid for this counter.</p>\n<p>-or- </p>\n<p>The counter does not exist on the specified computer. </p>\n<p>-or-</p>\n<p>The category specified is marked as multi-instance and requires the performance counter to be created with an instance name.</p>\n<p>-or-</p>\n<p>\n<em>instanceName</em> is longer than 127 characters.</p>\n<p>-or-</p>\n<p>\n<em>categoryName</em> and <em>counterName</em> have been localized into different languages.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>machineName</em> parameter is not valid. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>categoryName</em> or <em>counterName</em> is <strong>null</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.CategoryName
  commentId: P:System.Diagnostics.PerformanceCounter.CategoryName
  id: CategoryName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: CategoryName
  nameWithType: PerformanceCounter.CategoryName
  fullName: System.Diagnostics.PerformanceCounter.CategoryName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CategoryName
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 42
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the name of the performance counter category for this performance counter.</p>\n"
  syntax:
    content: public string CategoryName { get; set; }
    content.vb: Public Property CategoryName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the performance counter category (performance object) with which this performance counter is associated.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.CategoryName\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  seealso:
  - linkId: System.Diagnostics.Process.ProcessName
    commentId: P:System.Diagnostics.Process.ProcessName
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.CounterHelp
  commentId: P:System.Diagnostics.PerformanceCounter.CounterHelp
  id: CounterHelp
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: CounterHelp
  nameWithType: PerformanceCounter.CounterHelp
  fullName: System.Diagnostics.PerformanceCounter.CounterHelp
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterHelp
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 44
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets the description for this performance counter.</p>\n"
  syntax:
    content: public string CounterHelp { get; }
    content.vb: Public ReadOnly Property CounterHelp As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A description of the item or quantity that this performance counter measures.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance is not associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.PerformanceCounter.CounterName
  commentId: P:System.Diagnostics.PerformanceCounter.CounterName
  id: CounterName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: CounterName
  nameWithType: PerformanceCounter.CounterName
  fullName: System.Diagnostics.PerformanceCounter.CounterName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterName
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 45
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the name of the performance counter that is associated with this <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public string CounterName { get; set; }
    content.vb: Public Property CounterName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the counter, which generally describes the quantity being counted. This name is displayed in the list of counters of the Performance Counter Manager MMC snap in's Add Counters dialog box.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.CounterName\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.CounterType
  commentId: P:System.Diagnostics.PerformanceCounter.CounterType
  id: CounterType
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: CounterType
  nameWithType: PerformanceCounter.CounterType
  fullName: System.Diagnostics.PerformanceCounter.CounterType
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CounterType
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 47
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets the counter type of the associated performance counter.</p>\n"
  syntax:
    content: public PerformanceCounterType CounterType { get; }
    content.vb: Public ReadOnly Property CounterType As PerformanceCounterType
    parameters: []
    return:
      type: System.Diagnostics.PerformanceCounterType
      description: "\n<p>A <xref href=\"System.Diagnostics.PerformanceCounterType\" data-throw-if-not-resolved=\"false\"></xref> that describes both how the counter interacts with a monitoring application and the nature of the values it contains (for example, calculated or uncalculated).</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The instance is not correctly associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  seealso:
  - linkId: System.Diagnostics.PerformanceCounterType
    commentId: T:System.Diagnostics.PerformanceCounterType
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.PerformanceCounter.InstanceLifetime
  commentId: P:System.Diagnostics.PerformanceCounter.InstanceLifetime
  id: InstanceLifetime
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: InstanceLifetime
  nameWithType: PerformanceCounter.InstanceLifetime
  fullName: System.Diagnostics.PerformanceCounter.InstanceLifetime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InstanceLifetime
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 48
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the lifetime of a process.</p>\n"
  syntax:
    content: public PerformanceCounterInstanceLifetime InstanceLifetime { get; set; }
    content.vb: Public Property InstanceLifetime As PerformanceCounterInstanceLifetime
    parameters: []
    return:
      type: System.Diagnostics.PerformanceCounterInstanceLifetime
      description: "\n<p>One of the <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> values. The default is <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Global\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value set is not a member of the <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> enumeration. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> is set after the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> has been initialized.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.InstanceName
  commentId: P:System.Diagnostics.PerformanceCounter.InstanceName
  id: InstanceName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: InstanceName
  nameWithType: PerformanceCounter.InstanceName
  fullName: System.Diagnostics.PerformanceCounter.InstanceName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InstanceName
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 50
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets an instance name for this performance counter.</p>\n"
  syntax:
    content: public string InstanceName { get; set; }
    content.vb: Public Property InstanceName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the performance counter category instance, or an empty string (\"\"), if the counter is a single-instance counter.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.MachineName
  commentId: P:System.Diagnostics.PerformanceCounter.MachineName
  id: MachineName
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: MachineName
  nameWithType: PerformanceCounter.MachineName
  fullName: System.Diagnostics.PerformanceCounter.MachineName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MachineName
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 52
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the computer name for this performance counter </p>\n"
  syntax:
    content: public string MachineName { get; set; }
    content.vb: Public Property MachineName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The server on which the performance counter and its associated category reside.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.MachineName\" data-throw-if-not-resolved=\"false\"></xref> format is invalid. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.RawValue
  commentId: P:System.Diagnostics.PerformanceCounter.RawValue
  id: RawValue
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: RawValue
  nameWithType: PerformanceCounter.RawValue
  fullName: System.Diagnostics.PerformanceCounter.RawValue
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RawValue
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 54
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the raw, or uncalculated, value of this counter.</p>\n"
  syntax:
    content: public long RawValue { get; set; }
    content.vb: Public Property RawValue As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The raw value of the counter.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>You are trying to set the counter's raw value, but the counter is read-only.</p>\n<p>-or- </p>\n<p>The instance is not correctly associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.ReadOnly
  commentId: P:System.Diagnostics.PerformanceCounter.ReadOnly
  id: ReadOnly
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: ReadOnly
  nameWithType: PerformanceCounter.ReadOnly
  fullName: System.Diagnostics.PerformanceCounter.ReadOnly
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOnly
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 55
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets a value indicating whether this <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance is in read-only mode.</p>\n"
  syntax:
    content: public bool ReadOnly { get; set; }
    content.vb: Public Property ReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong>, if the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance is in read-only mode (even if the counter itself is a custom .NET Framework counter); <strong>false</strong> if it is in read/write mode. The default is the value set by the constructor.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.BeginInit
  commentId: M:System.Diagnostics.PerformanceCounter.BeginInit
  id: BeginInit
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: BeginInit()
  nameWithType: PerformanceCounter.BeginInit()
  fullName: System.Diagnostics.PerformanceCounter.BeginInit()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginInit
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 57
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Begins the initialization of a <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance used on a form or by another component. The initialization occurs at runtime.</p>\n"
  syntax:
    content: public void BeginInit()
    content.vb: Public Sub BeginInit
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.Close
  commentId: M:System.Diagnostics.PerformanceCounter.Close
  id: Close
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: Close()
  nameWithType: PerformanceCounter.Close()
  fullName: System.Diagnostics.PerformanceCounter.Close()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Close
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 58
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Closes the performance counter and frees all the resources allocated by this performance counter instance.</p>\n"
  syntax:
    content: public void Close()
    content.vb: Public Sub Close
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.EndInit
  commentId: M:System.Diagnostics.PerformanceCounter.EndInit
  id: EndInit
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: EndInit()
  nameWithType: PerformanceCounter.EndInit()
  fullName: System.Diagnostics.PerformanceCounter.EndInit()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EndInit
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 59
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Ends the initialization of a <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> instance that is used on a form or by another component. The initialization occurs at runtime.</p>\n"
  syntax:
    content: public void EndInit()
    content.vb: Public Sub
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.Increment
  commentId: M:System.Diagnostics.PerformanceCounter.Increment
  id: Increment
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: Increment()
  nameWithType: PerformanceCounter.Increment()
  fullName: System.Diagnostics.PerformanceCounter.Increment()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 60
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Increments the associated performance counter by one through an efficient atomic operation.</p>\n"
  syntax:
    content: public long Increment()
    content.vb: Public Function Increment As Long
    return:
      type: System.Int64
      description: "\n<p>The incremented counter value.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The counter is read-only, so the application cannot increment it.</p>\n<p>-or- </p>\n<p>The instance is not correctly associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  commentId: M:System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  id: IncrementBy(System.Int64)
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: IncrementBy(Int64)
  nameWithType: PerformanceCounter.IncrementBy(Int64)
  fullName: System.Diagnostics.PerformanceCounter.IncrementBy(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IncrementBy
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 61
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Increments or decrements the value of the associated performance counter by a specified amount through an efficient atomic operation.</p>\n"
  syntax:
    content: public long IncrementBy(long value)
    content.vb: Public Function IncrementBy(value As Long) As Long
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>The value to increment by. (A negative value decrements the counter.) </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new counter value.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The counter is read-only, so the application cannot increment it.</p>\n<p>-or- </p>\n<p>The instance is not correctly associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.NextSample
  commentId: M:System.Diagnostics.PerformanceCounter.NextSample
  id: NextSample
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: NextSample()
  nameWithType: PerformanceCounter.NextSample()
  fullName: System.Diagnostics.PerformanceCounter.NextSample()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextSample
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 62
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Obtains a counter sample, and returns the raw, or uncalculated, value for it.</p>\n"
  syntax:
    content: public CounterSample NextSample()
    content.vb: Public Function NextSample As CounterSample
    return:
      type: System.Diagnostics.CounterSample
      description: "\n<p>A <xref href=\"System.Diagnostics.CounterSample\" data-throw-if-not-resolved=\"false\"></xref> that represents the next raw value that the system obtains for this counter.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The instance is not correctly associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.NextValue
  commentId: M:System.Diagnostics.PerformanceCounter.NextValue
  id: NextValue
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: NextValue()
  nameWithType: PerformanceCounter.NextValue()
  fullName: System.Diagnostics.PerformanceCounter.NextValue()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextValue
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 63
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Obtains a counter sample and returns the calculated value for it.</p>\n"
  syntax:
    content: public float NextValue()
    content.vb: Public Function NextValue As Single
    return:
      type: System.Single
      description: "\n<p>The next calculated value that the system obtains for this counter.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The instance is not correctly associated with a performance counter. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Code that is executing without administrative privileges attempted to read a performance counter.</p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.PerformanceCounter.RemoveInstance
  commentId: M:System.Diagnostics.PerformanceCounter.RemoveInstance
  id: RemoveInstance
  parent: System.Diagnostics.PerformanceCounter
  langs:
  - csharp
  - vb
  name: RemoveInstance()
  nameWithType: PerformanceCounter.RemoveInstance()
  fullName: System.Diagnostics.PerformanceCounter.RemoveInstance()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveInstance
    path: src/System.Diagnostics.PerformanceCounter/ref/System.Diagnostics.PerformanceCounter.cs
    startLine: 64
  assemblies:
  - System.Diagnostics.PerformanceCounter
  namespace: System.Diagnostics
  summary: "\n<p>Deletes the category instance specified by the <xref href=\"System.Diagnostics.PerformanceCounter\" data-throw-if-not-resolved=\"false\"></xref> object <xref href=\"System.Diagnostics.PerformanceCounter.InstanceName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public void RemoveInstance()
    content.vb: Public Sub RemoveInstance
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This counter is read-only, so any instance that is associated with the category cannot be removed.</p>\n<p>-or- </p>\n<p>The instance is not correctly associated with a performance counter. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.PerformanceCounter.InstanceLifetime\" data-throw-if-not-resolved=\"false\"></xref> property is set to <xref href=\"System.Diagnostics.PerformanceCounterInstanceLifetime.Process\" data-throw-if-not-resolved=\"false\"></xref>  when using global shared memory.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when accessing a system API. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Me), which does not support performance counters. </p>\n"
  see:
  - linkId: System.Diagnostics.PerformanceCounterPermission
    commentId: T:System.Diagnostics.PerformanceCounterPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.PerformanceCounterType
  commentId: T:System.Diagnostics.PerformanceCounterType
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterType
  nameWithType: PerformanceCounterType
  fullName: System.Diagnostics.PerformanceCounterType
- uid: System.Diagnostics.PerformanceCounterInstanceLifetime
  commentId: T:System.Diagnostics.PerformanceCounterInstanceLifetime
  parent: System.Diagnostics
  isExternal: false
  name: PerformanceCounterInstanceLifetime
  nameWithType: PerformanceCounterInstanceLifetime
  fullName: System.Diagnostics.PerformanceCounterInstanceLifetime
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.CounterSample
  commentId: T:System.Diagnostics.CounterSample
  parent: System.Diagnostics
  isExternal: false
  name: CounterSample
  nameWithType: CounterSample
  fullName: System.Diagnostics.CounterSample
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ComponentModel.Win32Exception
  commentId: T:System.ComponentModel.Win32Exception
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
