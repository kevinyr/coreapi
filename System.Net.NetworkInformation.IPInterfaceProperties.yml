### YamlMime:ManagedReference
items:
- uid: System.Net.NetworkInformation.IPInterfaceProperties
  commentId: T:System.Net.NetworkInformation.IPInterfaceProperties
  id: IPInterfaceProperties
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.IPInterfaceProperties.#ctor
  - System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  - System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
  - System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
  - System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  - System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  - System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  - System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  langs:
  - csharp
  - vb
  name: IPInterfaceProperties
  nameWithType: IPInterfaceProperties
  fullName: System.Net.NetworkInformation.IPInterfaceProperties
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPInterfaceProperties
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 10
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about network interfaces that support Internet Protocol version 4 (IPv4) or Internet Protocol version 6 (IPv6).</p>\n"
  syntax:
    content: public abstract class IPInterfaceProperties
    content.vb: Public MustInherit Class IPInterfaceProperties
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.NetworkInformation.IPInterfaceProperties.#ctor
  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: IPInterfaceProperties()
  nameWithType: IPInterfaceProperties.IPInterfaceProperties()
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IPInterfaceProperties()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 174
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected IPInterfaceProperties()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  id: AnycastAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: AnycastAddresses
  nameWithType: IPInterfaceProperties.AnycastAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.AnycastAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AnycastAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 40
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the anycast IP addresses assigned to this interface.</p>\n"
  syntax:
    content: public abstract IPAddressInformationCollection AnycastAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property AnycastAddresses As IPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.IPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the anycast addresses for this interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  id: DhcpServerAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: DhcpServerAddresses
  nameWithType: IPInterfaceProperties.DhcpServerAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DhcpServerAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DhcpServerAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 55
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the addresses of Dynamic Host Configuration Protocol (DHCP) servers for this interface.</p>\n"
  syntax:
    content: public abstract IPAddressCollection DhcpServerAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property DhcpServerAddresses As IPAddressCollection
    parameters: []
    return:
      type: IPAddressCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the address information for DHCP servers, or an empty array if no servers are found.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  id: DnsAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: DnsAddresses
  nameWithType: IPInterfaceProperties.DnsAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DnsAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DnsAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 45
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the addresses of Domain Name System (DNS) servers for this interface.</p>\n"
  syntax:
    content: public abstract IPAddressCollection DnsAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property DnsAddresses As IPAddressCollection
    parameters: []
    return:
      type: IPAddressCollection
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the DNS server addresses.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  id: DnsSuffix
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: DnsSuffix
  nameWithType: IPInterfaceProperties.DnsSuffix
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.DnsSuffix
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DnsSuffix
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 20
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the Domain Name System (DNS) suffix associated with this interface.</p>\n"
  syntax:
    content: public abstract string DnsSuffix { get; }
    content.vb: Public MustOverride ReadOnly Property DnsSuffix As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the DNS suffix for this interface, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if there is no DNS suffix for the interface.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows 2000. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  id: GatewayAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: GatewayAddresses
  nameWithType: IPInterfaceProperties.GatewayAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GatewayAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GatewayAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 50
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the IPv4 network gateway addresses for this interface.</p>\n"
  syntax:
    content: public abstract GatewayIPAddressInformationCollection GatewayAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property GatewayAddresses As GatewayIPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.GatewayIPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the address information for network gateways, or an empty array if no gateways are found.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  id: IsDnsEnabled
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: IsDnsEnabled
  nameWithType: IPInterfaceProperties.IsDnsEnabled
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IsDnsEnabled
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDnsEnabled
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 15
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether NetBt is configured to use DNS name resolution on this interface.</p>\n"
  syntax:
    content: public abstract bool IsDnsEnabled { get; }
    content.vb: Public MustOverride ReadOnly Property IsDnsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if NetBt is configured to use DNS name resolution on this interface; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  id: IsDynamicDnsEnabled
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: IsDynamicDnsEnabled
  nameWithType: IPInterfaceProperties.IsDynamicDnsEnabled
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.IsDynamicDnsEnabled
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDynamicDnsEnabled
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 25
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether this interface is configured to automatically register its IP address information with the Domain Name System (DNS).</p>\n"
  syntax:
    content: public abstract bool IsDynamicDnsEnabled { get; }
    content.vb: Public MustOverride ReadOnly Property IsDynamicDnsEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this interface is configured to automatically register a mapping between its dynamic IP address and static domain names; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  id: MulticastAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: MulticastAddresses
  nameWithType: IPInterfaceProperties.MulticastAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.MulticastAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 35
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the multicast addresses assigned to this interface.</p>\n"
  syntax:
    content: public abstract MulticastIPAddressInformationCollection MulticastAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property MulticastAddresses As MulticastIPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.MulticastIPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the multicast addresses for this interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  id: UnicastAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: UnicastAddresses
  nameWithType: IPInterfaceProperties.UnicastAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.UnicastAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnicastAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 30
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the unicast addresses assigned to this interface.</p>\n"
  syntax:
    content: public abstract UnicastIPAddressInformationCollection UnicastAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property UnicastAddresses As UnicastIPAddressInformationCollection
    parameters: []
    return:
      type: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.UnicastIPAddressInformationCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the unicast addresses for this interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  commentId: P:System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  id: WinsServersAddresses
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: WinsServersAddresses
  nameWithType: IPInterfaceProperties.WinsServersAddresses
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.WinsServersAddresses
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WinsServersAddresses
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 60
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the addresses of Windows Internet Name Service (WINS) servers.</p>\n"
  syntax:
    content: public abstract IPAddressCollection WinsServersAddresses { get; }
    content.vb: Public MustOverride ReadOnly Property WinsServersAddresses As IPAddressCollection
    parameters: []
    return:
      type: IPAddressCollection
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPAddressCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the address information for WINS servers, or an empty array if no servers are found.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties
  id: GetIPv4Properties
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: GetIPv4Properties()
  nameWithType: IPInterfaceProperties.GetIPv4Properties()
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv4Properties()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPv4Properties
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 66
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol version 4 (IPv4) configuration data for this network interface.</p>\n"
  syntax:
    content: public abstract IPv4InterfaceProperties GetIPv4Properties()
    content.vb: Public MustOverride Function GetIPv4Properties As IPv4InterfaceProperties
    return:
      type: System.Net.NetworkInformation.IPv4InterfaceProperties
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPv4InterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains IPv4 configuration data, or <strong>null</strong> if no data is available for the interface.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The interface does not support the IPv4 protocol.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
  commentId: M:System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties
  id: GetIPv6Properties
  parent: System.Net.NetworkInformation.IPInterfaceProperties
  langs:
  - csharp
  - vb
  name: GetIPv6Properties()
  nameWithType: IPInterfaceProperties.GetIPv6Properties()
  fullName: System.Net.NetworkInformation.IPInterfaceProperties.GetIPv6Properties()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPv6Properties
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPInterfaceProperties.cs
    startLine: 72
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides Internet Protocol version 6 (IPv6) configuration data for this network interface.</p>\n"
  syntax:
    content: public abstract IPv6InterfaceProperties GetIPv6Properties()
    content.vb: Public MustOverride Function GetIPv6Properties As IPv6InterfaceProperties
    return:
      type: System.Net.NetworkInformation.IPv6InterfaceProperties
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPv6InterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> object that contains IPv6 configuration data.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>The interface does not support the IPv6 protocol.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Net.NetworkInformation
  commentId: N:System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  nameWithType: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Net.NetworkInformation.IPAddressInformationCollection
  commentId: T:System.Net.NetworkInformation.IPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPAddressInformationCollection
  nameWithType: IPAddressInformationCollection
  fullName: System.Net.NetworkInformation.IPAddressInformationCollection
- uid: System.Net.NetworkInformation.IPAddressCollection
  commentId: T:System.Net.NetworkInformation.IPAddressCollection
  isExternal: false
  name: IPAddressCollection
  nameWithType: IPAddressCollection
  fullName: System.Net.NetworkInformation.IPAddressCollection
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
  commentId: T:System.Net.NetworkInformation.GatewayIPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: GatewayIPAddressInformationCollection
  nameWithType: GatewayIPAddressInformationCollection
  fullName: System.Net.NetworkInformation.GatewayIPAddressInformationCollection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
  commentId: T:System.Net.NetworkInformation.MulticastIPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: MulticastIPAddressInformationCollection
  nameWithType: MulticastIPAddressInformationCollection
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformationCollection
- uid: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
  commentId: T:System.Net.NetworkInformation.UnicastIPAddressInformationCollection
  parent: System.Net.NetworkInformation
  isExternal: false
  name: UnicastIPAddressInformationCollection
  nameWithType: UnicastIPAddressInformationCollection
  fullName: System.Net.NetworkInformation.UnicastIPAddressInformationCollection
- uid: System.Net.NetworkInformation.IPv4InterfaceProperties
  commentId: T:System.Net.NetworkInformation.IPv4InterfaceProperties
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPv4InterfaceProperties
  nameWithType: IPv4InterfaceProperties
  fullName: System.Net.NetworkInformation.IPv4InterfaceProperties
- uid: System.Net.NetworkInformation.IPv6InterfaceProperties
  commentId: T:System.Net.NetworkInformation.IPv6InterfaceProperties
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPv6InterfaceProperties
  nameWithType: IPv6InterfaceProperties
  fullName: System.Net.NetworkInformation.IPv6InterfaceProperties
- uid: System.PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.Net.NetworkInformation.NetworkInformationException
  commentId: T:System.Net.NetworkInformation.NetworkInformationException
  isExternal: false
  name: NetworkInformationException
  nameWithType: NetworkInformationException
  fullName: System.Net.NetworkInformation.NetworkInformationException
