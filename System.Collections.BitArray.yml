### YamlMime:ManagedReference
items:
- uid: System.Collections.BitArray
  commentId: T:System.Collections.BitArray
  id: BitArray
  parent: System.Collections
  children:
  - System.Collections.BitArray.#ctor(System.Boolean[])
  - System.Collections.BitArray.#ctor(System.Byte[])
  - System.Collections.BitArray.#ctor(System.Collections.BitArray)
  - System.Collections.BitArray.#ctor(System.Int32)
  - System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  - System.Collections.BitArray.#ctor(System.Int32[])
  - System.Collections.BitArray.And(System.Collections.BitArray)
  - System.Collections.BitArray.Get(System.Int32)
  - System.Collections.BitArray.GetEnumerator
  - System.Collections.BitArray.Item(System.Int32)
  - System.Collections.BitArray.Length
  - System.Collections.BitArray.Not
  - System.Collections.BitArray.Or(System.Collections.BitArray)
  - System.Collections.BitArray.Set(System.Int32,System.Boolean)
  - System.Collections.BitArray.SetAll(System.Boolean)
  - System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.BitArray.System#Collections#ICollection#Count
  - System.Collections.BitArray.System#Collections#ICollection#IsSynchronized
  - System.Collections.BitArray.System#Collections#ICollection#SyncRoot
  - System.Collections.BitArray.Xor(System.Collections.BitArray)
  langs:
  - csharp
  - vb
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BitArray
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 21
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Manages a compact array of bit values, which are represented as Booleans, where <strong>true</strong> indicates that the bit is on (1) and <strong>false</strong> indicates the bit is off (0).</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public sealed class BitArray : ICollection, IEnumerable, ICloneable
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public NotInheritable Class BitArray
          Implements ICollection, IEnumerable, ICloneable
  seealso:
  - linkId: System.Collections.Specialized.BitVector32
    commentId: T:System.Collections.Specialized.BitVector32
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Collections.BitArray.#ctor(System.Boolean[])
  commentId: M:System.Collections.BitArray.#ctor(System.Boolean[])
  id: '#ctor(System.Boolean[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Boolean[])
  nameWithType: BitArray.BitArray(Boolean[])
  fullName: System.Collections.BitArray.BitArray(System.Boolean[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 112
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified array of Booleans.</p>\n"
  syntax:
    content: public BitArray(bool[] values)
    content.vb: Public Sub New(values As Boolean())
    parameters:
    - id: values
      type: System.Boolean[]
      description: "\n<p>An array of Booleans to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: BitArray.BitArray(Boolean())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.BitArray(System.Boolean())
  name.vb: BitArray(Boolean())
- uid: System.Collections.BitArray.#ctor(System.Byte[])
  commentId: M:System.Collections.BitArray.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Byte[])
  nameWithType: BitArray.BitArray(Byte[])
  fullName: System.Collections.BitArray.BitArray(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 67
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified array of bytes.</p>\n"
  syntax:
    content: public BitArray(byte[] bytes)
    content.vb: Public Sub New(bytes As Byte())
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>An array of bytes containing the values to copy, where each byte represents eight consecutive bits. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>bytes</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: BitArray.BitArray(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.BitArray(System.Byte())
  name.vb: BitArray(Byte())
- uid: System.Collections.BitArray.#ctor(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.#ctor(System.Collections.BitArray)
  id: '#ctor(System.Collections.BitArray)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(BitArray)
  nameWithType: BitArray.BitArray(BitArray)
  fullName: System.Collections.BitArray.BitArray(System.Collections.BitArray)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 161
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public BitArray(BitArray bits)
    content.vb: Public Sub New(bits As BitArray)
    parameters:
    - id: bits
      type: System.Collections.BitArray
      description: "\n<p>The <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bits</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.#ctor(System.Int32)
  commentId: M:System.Collections.BitArray.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Int32)
  nameWithType: BitArray.BitArray(Int32)
  fullName: System.Collections.BitArray.BitArray(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 32
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that can hold the specified number of bit values, which are initially set to <strong>false</strong>.</p>\n"
  syntax:
    content: public BitArray(int length)
    content.vb: Public Sub New(length As Integer)
    parameters:
    - id: length
      type: System.Int32
      description: "\n<p>The number of bit values in the new <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Int32, Boolean)
  nameWithType: BitArray.BitArray(Int32, Boolean)
  fullName: System.Collections.BitArray.BitArray(System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 42
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that can hold the specified number of bit values, which are initially set to the specified value.</p>\n"
  syntax:
    content: public BitArray(int length, bool defaultValue)
    content.vb: Public Sub New(length As Integer, defaultValue As Boolean)
    parameters:
    - id: length
      type: System.Int32
      description: "\n<p>The number of bit values in the new <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: defaultValue
      type: System.Boolean
      description: "\n<p>The Boolean value to assign to each bit. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.#ctor(System.Int32[])
  commentId: M:System.Collections.BitArray.#ctor(System.Int32[])
  id: '#ctor(System.Int32[])'
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: BitArray(Int32[])
  nameWithType: BitArray.BitArray(Int32[])
  fullName: System.Collections.BitArray.BitArray(System.Int32[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 138
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> class that contains bit values copied from the specified array of 32-bit integers.</p>\n"
  syntax:
    content: public BitArray(int[] values)
    content.vb: Public Sub New(values As Integer())
    parameters:
    - id: values
      type: System.Int32[]
      description: "\n<p>An array of integers containing the values to copy, where each integer represents 32 consecutive bits. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>values</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>values</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  nameWithType.vb: BitArray.BitArray(Int32())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.BitArray(System.Int32())
  name.vb: BitArray(Int32())
- uid: System.Collections.BitArray.Item(System.Int32)
  commentId: P:System.Collections.BitArray.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: BitArray.Item[Int32]
  fullName: System.Collections.BitArray.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 176
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Gets or sets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As Boolean
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get or set. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The value of the bit at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.BitArray.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.BitArray.Count
    commentId: P:System.Collections.BitArray.Count
  nameWithType.vb: BitArray.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Collections.BitArray.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.BitArray.Length
  commentId: P:System.Collections.BitArray.Length
  id: Length
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: BitArray.Length
  fullName: System.Collections.BitArray.Length
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Length
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 315
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Gets or sets the number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int Length { get; set; }
    content.vb: Public Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The property is set to a value that is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.System#Collections#ICollection#Count
  commentId: P:System.Collections.BitArray.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: ICollection.Count
  nameWithType: BitArray.ICollection.Count
  fullName: System.Collections.BitArray.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.Count
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 20
  assemblies:
  - System.Collections
  namespace: System.Collections
  syntax:
    content: int ICollection.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.ICollection.Count
  nameWithType.vb: BitArray.System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.Count
- uid: System.Collections.BitArray.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.BitArray.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: BitArray.ICollection.IsSynchronized
  fullName: System.Collections.BitArray.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 21
  assemblies:
  - System.Collections
  namespace: System.Collections
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: BitArray.System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.BitArray.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.BitArray.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: BitArray.ICollection.SyncRoot
  fullName: System.Collections.BitArray.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 22
  assemblies:
  - System.Collections
  namespace: System.Collections
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: BitArray.System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.BitArray.And(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.And(System.Collections.BitArray)
  id: And(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: And(BitArray)
  nameWithType: BitArray.And(BitArray)
  fullName: System.Collections.BitArray.And(System.Collections.BitArray)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: And
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 240
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Performs the bitwise AND operation between the elements of the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object will be modified to store the result of the bitwise AND operation.</p>\n"
  syntax:
    content: public BitArray And(BitArray value)
    content.vb: Public Function And(value As BitArray) As BitArray
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: "\n<p>The array with which to perform the bitwise AND operation. </p>\n"
    return:
      type: System.Collections.BitArray
      description: "\n<p>An array containing the result of the bitwise AND operation, which is a reference to the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> and the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> do not have the same number of elements. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Get(System.Int32)
  commentId: M:System.Collections.BitArray.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Get(Int32)
  nameWithType: BitArray.Get(Int32)
  fullName: System.Collections.BitArray.Get(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Get
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 191
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Gets the value of the bit at a specific position in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Get(int index)
    content.vb: Public Function Get(index As Integer) As Boolean
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the value to get. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The value of the bit at position <em>index</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.GetEnumerator
  commentId: M:System.Collections.BitArray.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: BitArray.GetEnumerator()
  fullName: System.Collections.BitArray.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 437
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator that iterates through the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the entire <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Not
  commentId: M:System.Collections.BitArray.Not
  id: Not
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Not()
  nameWithType: BitArray.Not()
  fullName: System.Collections.BitArray.Not()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Not
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 305
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Inverts all the bit values in the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>, so that elements set to <strong>true</strong> are changed to <strong>false</strong>, and elements set to <strong>false</strong> are changed to <strong>true</strong>.</p>\n"
  syntax:
    content: public BitArray Not()
    content.vb: Public Function Not As BitArray
    return:
      type: System.Collections.BitArray
      description: "\n<p>The current instance with inverted bit values.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Or(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.Or(System.Collections.BitArray)
  id: Or(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Or(BitArray)
  nameWithType: BitArray.Or(BitArray)
  fullName: System.Collections.BitArray.Or(System.Collections.BitArray)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Or
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 262
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Performs the bitwise OR operation between the elements of the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object and the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object will be modified to store the result of the bitwise OR operation.</p>\n"
  syntax:
    content: public BitArray Or(BitArray value)
    content.vb: Public Function Or(value As BitArray) As BitArray
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: "\n<p>The array with which to perform the bitwise OR operation. </p>\n"
    return:
      type: System.Collections.BitArray
      description: "\n<p>An array containing the result of the bitwise OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> and the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> do not have the same number of elements. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.Set(System.Int32,System.Boolean)
  commentId: M:System.Collections.BitArray.Set(System.Int32,System.Boolean)
  id: Set(System.Int32,System.Boolean)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Set(Int32, Boolean)
  nameWithType: BitArray.Set(Int32, Boolean)
  fullName: System.Collections.BitArray.Set(System.Int32, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Set
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 206
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Sets the bit at a specific position in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> to the specified value.</p>\n"
  syntax:
    content: public void Set(int index, bool value)
    content.vb: Public Sub Set(index As Integer, value As Boolean)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the bit to set. </p>\n"
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to assign to the bit. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than or equal to the number of elements in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.SetAll(System.Boolean)
  commentId: M:System.Collections.BitArray.SetAll(System.Boolean)
  id: SetAll(System.Boolean)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: SetAll(Boolean)
  nameWithType: BitArray.SetAll(Boolean)
  fullName: System.Collections.BitArray.SetAll(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetAll
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 224
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Sets all bits in the <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> to the specified value.</p>\n"
  syntax:
    content: public void SetAll(bool value)
    content.vb: Public Sub SetAll(value As Boolean)
    parameters:
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to assign to all bits. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.BitArray.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: ICollection.CopyTo(Array, Int32)
  nameWithType: BitArray.ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.BitArray.System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections/ref/System.Collections.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.CopyTo
    path: src/System.Collections/ref/System.Collections.cs
    startLine: 30
  assemblies:
  - System.Collections
  namespace: System.Collections
  syntax:
    content: void ICollection.CopyTo(Array array, int index)
    content.vb: Sub System.Collections.ICollection.CopyTo(array As Array, index As Integer) Implements ICollection.CopyTo
    parameters:
    - id: array
      type: System.Array
    - id: index
      type: System.Int32
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  nameWithType.vb: BitArray.System.Collections.ICollection.CopyTo(Array, Int32)
  name.vb: System.Collections.ICollection.CopyTo(Array, Int32)
- uid: System.Collections.BitArray.Xor(System.Collections.BitArray)
  commentId: M:System.Collections.BitArray.Xor(System.Collections.BitArray)
  id: Xor(System.Collections.BitArray)
  parent: System.Collections.BitArray
  langs:
  - csharp
  - vb
  name: Xor(BitArray)
  nameWithType: BitArray.Xor(BitArray)
  fullName: System.Collections.BitArray.Xor(System.Collections.BitArray)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/BitArray.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Xor
    path: src/mscorlib/src/System/Collections/BitArray.cs
    startLine: 284
  assemblies:
  - System.Collections
  namespace: System.Collections
  summary: "\n<p>Performs the bitwise exclusive OR operation between the elements of the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object against the corresponding elements in the specified array. The current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object will be modified to store the result of the bitwise exclusive OR operation.</p>\n"
  syntax:
    content: public BitArray Xor(BitArray value)
    content.vb: Public Function Xor(value As BitArray) As BitArray
    parameters:
    - id: value
      type: System.Collections.BitArray
      description: "\n<p>The array with which to perform the bitwise exclusive OR operation. </p>\n"
    return:
      type: System.Collections.BitArray
      description: "\n<p>An array containing the result of the bitwise exclusive OR operation, which is a reference to the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> and the current <xref href=\"System.Collections.BitArray\" data-throw-if-not-resolved=\"false\"></xref> do not have the same number of elements. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Boolean[]
  name: Boolean[]
  nameWithType: Boolean[]
  fullName: System.Boolean[]
  nameWithType.vb: Boolean()
  fullname.vb: System.Boolean()
  name.vb: Boolean()
  spec.csharp:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.BitArray
  commentId: T:System.Collections.BitArray
  parent: System.Collections
  isExternal: false
  name: BitArray
  nameWithType: BitArray
  fullName: System.Collections.BitArray
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
