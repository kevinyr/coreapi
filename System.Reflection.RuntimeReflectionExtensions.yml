items:
- uid: System.Reflection.RuntimeReflectionExtensions
  commentId: T:System.Reflection.RuntimeReflectionExtensions
  id: RuntimeReflectionExtensions
  parent: System.Reflection
  children:
  - System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  - System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  langs:
  - csharp
  - vb
  name: RuntimeReflectionExtensions
  fullName: System.Reflection.RuntimeReflectionExtensions
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RuntimeReflectionExtensions
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 8
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Provides methods that retrieve information about types at run time.</p>\n"
  syntax:
    content: public static class RuntimeReflectionExtensions
    content.vb: Public Module RuntimeReflectionExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  nameWithType: RuntimeReflectionExtensions
- uid: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  id: GetMethodInfo(System.Delegate)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetMethodInfo(Delegate)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetMethodInfo(System.Delegate)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodInfo
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 80
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Gets an object that represents the method represented by the specified delegate.</p>\n"
  syntax:
    content: public static MethodInfo GetMethodInfo(this Delegate del)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethodInfo(del As  Delegate) As MethodInfo
    parameters:
    - id: del
      type: System.Delegate
      description: "\n<p>The delegate to examine.</p>\n"
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>An object that represents the method.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetMethodInfo(Delegate)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  id: GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeBaseDefinition(MethodInfo)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeBaseDefinition(System.Reflection.MethodInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeBaseDefinition
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 67
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves an object that represents the specified method on the direct or indirect base class where the method was first declared.</p>\n"
  syntax:
    content: public static MethodInfo GetRuntimeBaseDefinition(this MethodInfo method)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeBaseDefinition(method As MethodInfo) As MethodInfo
    parameters:
    - id: method
      type: System.Reflection.MethodInfo
      description: "\n<p>The method to retrieve information about.</p>\n"
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>An object that represents the specified method's initial declaration on a base class.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeBaseDefinition(MethodInfo)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type,System.String)
  id: GetRuntimeEvent(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeEvent(Type, String)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvent(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeEvent
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 52
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves an object that represents the specified event.</p>\n"
  syntax:
    content: public static EventInfo GetRuntimeEvent(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeEvent(type As Type, name As String) As EventInfo
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the event.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    return:
      type: System.Reflection.EventInfo
      description: "\n<p>An object that represents the specified event, or <strong>null</strong> if the event is not found.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvent(Type, String)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  id: GetRuntimeEvents(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeEvents(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeEvents(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeEvents
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 29
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection that represents all the events defined on a specified type.</p>\n"
  syntax:
    content: public static IEnumerable<EventInfo> GetRuntimeEvents(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeEvents(type As Type) As IEnumerable(Of EventInfo)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the events.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
      description: "\n<p>A collection of events for the specified type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeEvents(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type,System.String)
  id: GetRuntimeField(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeField(Type, String)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeField(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeField
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 62
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves an object that represents a specified field.</p>\n"
  syntax:
    content: public static FieldInfo GetRuntimeField(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeField(type As Type, name As String) As FieldInfo
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the field.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the field.</p>\n"
    return:
      type: System.Reflection.FieldInfo
      description: "\n<p>An object that represents the specified field, or <strong>null</strong> if the field is not found.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeField(Type, String)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  id: GetRuntimeFields(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeFields(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeFields(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeFields
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 41
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection that represents all the fields defined on a specified type.</p>\n"
  syntax:
    content: public static IEnumerable<FieldInfo> GetRuntimeFields(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeFields(type As Type) As IEnumerable(Of FieldInfo)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the fields.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
      description: "\n<p>A collection of fields for the specified type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeFields(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  id: GetRuntimeInterfaceMap(System.Reflection.TypeInfo,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeInterfaceMap(TypeInfo, Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeInterfaceMap(System.Reflection.TypeInfo, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeInterfaceMap
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 72
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Returns an interface mapping for the specified type and the specified interface.</p>\n"
  syntax:
    content: public static InterfaceMapping GetRuntimeInterfaceMap(this TypeInfo typeInfo, Type interfaceType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeInterfaceMap(typeInfo As TypeInfo, interfaceType As Type) As InterfaceMapping
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: "\n<p>The type to retrieve a mapping for.</p>\n"
    - id: interfaceType
      type: System.Type
      description: "\n<p>The interface to retrieve a mapping for.</p>\n"
    return:
      type: System.Reflection.InterfaceMapping
      description: "\n<p>An object that represents the interface mapping for the specified interface and type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeInterfaceMap(TypeInfo, Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type,System.String,System.Type[])
  id: GetRuntimeMethod(System.Type,System.String,System.Type[])
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeMethod(Type, String, Type[])
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type, System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeMethod
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 57
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves an object that represents a specified method.</p>\n"
  syntax:
    content: public static MethodInfo GetRuntimeMethod(this Type type, string name, Type[] parameters)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeMethod(type As Type, name As String, parameters As Type()) As MethodInfo
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the method.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the method.</p>\n"
    - id: parameters
      type: System.Type[]
      description: "\n<p>An array that contains the method's parameters.</p>\n"
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>An object that represents the specified method, or <strong>null</strong> if the method is not found.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethod(System.Type, System.String, System.Type())
  name.vb: GetRuntimeMethod(Type, String, Type())
  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type[])
  nameWithType.vb: RuntimeReflectionExtensions.GetRuntimeMethod(Type, String, Type())
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  id: GetRuntimeMethods(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeMethods(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeMethods(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeMethods
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 35
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection that represents all methods defined on a specified type.</p>\n"
  syntax:
    content: public static IEnumerable<MethodInfo> GetRuntimeMethods(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeMethods(type As Type) As IEnumerable(Of MethodInfo)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the methods.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
      description: "\n<p>A collection of methods for the specified type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeMethods(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  id: GetRuntimeProperties(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeProperties(Type)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperties(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeProperties
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 24
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves a collection that represents all the properties defined on a specified type.</p>\n"
  syntax:
    content: public static IEnumerable<PropertyInfo> GetRuntimeProperties(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeProperties(type As Type) As IEnumerable(Of PropertyInfo)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the properties.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: "\n<p>A collection of properties for the specified type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperties(Type)
- uid: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  commentId: M:System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type,System.String)
  id: GetRuntimeProperty(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.RuntimeReflectionExtensions
  langs:
  - csharp
  - vb
  name: GetRuntimeProperty(Type, String)
  fullName: System.Reflection.RuntimeReflectionExtensions.GetRuntimeProperty(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRuntimeProperty
    path: src/mscorlib/src/System/Reflection/RuntimeReflectionExtensions.cs
    startLine: 47
  assemblies:
  - System.Reflection.Extensions
  namespace: System.Reflection
  summary: "\n<p>Retrieves an object that represents a specified property.</p>\n"
  syntax:
    content: public static PropertyInfo GetRuntimeProperty(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetRuntimeProperty(type As Type, name As String) As PropertyInfo
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type that contains the property.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the property.</p>\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\n<p>An object that represents the specified property, or <strong>null</strong> if the property is not found.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RuntimeReflectionExtensions.GetRuntimeProperty(Type, String)
references:
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  fullName: System.Delegate
  nameWithType: Delegate
  commentId: T:System.Delegate
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
  nameWithType: MethodInfo
  commentId: T:System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  fullName: System.Reflection.EventInfo
  nameWithType: EventInfo
  commentId: T:System.Reflection.EventInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)
  name.vb: IEnumerable(Of EventInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.EventInfo
    name: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.EventInfo
    name: EventInfo
    fullName: System.Reflection.EventInfo
  - name: )
    fullName: )
  nameWithType: IEnumerable<EventInfo>
  nameWithType.vb: IEnumerable(Of EventInfo)
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  fullName: System.Reflection.FieldInfo
  nameWithType: FieldInfo
  commentId: T:System.Reflection.FieldInfo
- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)
  name.vb: IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: )
    fullName: )
  nameWithType: IEnumerable<FieldInfo>
  nameWithType.vb: IEnumerable(Of FieldInfo)
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
- uid: System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  fullName: System.Reflection.TypeInfo
  nameWithType: TypeInfo
  commentId: T:System.Reflection.TypeInfo
- uid: System.Reflection.InterfaceMapping
  parent: System.Reflection
  isExternal: false
  name: InterfaceMapping
  fullName: System.Reflection.InterfaceMapping
  nameWithType: InterfaceMapping
  commentId: T:System.Reflection.InterfaceMapping
- uid: System.Type[]
  name: Type[]
  fullName: System.Type[]
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    fullName: System.Type
  - name: ()
    fullName: ()
  nameWithType: Type[]
  nameWithType.vb: Type()
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)
  name.vb: IEnumerable(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: )
    fullName: )
  nameWithType: IEnumerable<MethodInfo>
  nameWithType.vb: IEnumerable(Of MethodInfo)
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: )
    fullName: )
  nameWithType: IEnumerable<PropertyInfo>
  nameWithType.vb: IEnumerable(Of PropertyInfo)
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  fullName: System.Reflection.PropertyInfo
  nameWithType: PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
