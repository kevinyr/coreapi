### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpReceiveResult
  commentId: T:System.Net.Sockets.UdpReceiveResult
  id: UdpReceiveResult
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)
  - System.Net.Sockets.UdpReceiveResult.Buffer
  - System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)
  - System.Net.Sockets.UdpReceiveResult.Equals(System.Object)
  - System.Net.Sockets.UdpReceiveResult.GetHashCode
  - System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  - System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  - System.Net.Sockets.UdpReceiveResult.RemoteEndPoint
  langs:
  - csharp
  - vb
  name: UdpReceiveResult
  nameWithType: UdpReceiveResult
  fullName: System.Net.Sockets.UdpReceiveResult
  type: Struct
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UdpReceiveResult
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 6
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Presents UDP receive result information from a call to the <xref href=\"System.Net.Sockets.UdpClient.ReceiveAsync\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: 'public struct UdpReceiveResult : IEquatable<UdpReceiveResult>'
    content.vb: >-
      Public Structure UdpReceiveResult
          Implements IEquatable(Of UdpReceiveResult)
  implements:
  - System.IEquatable{System.Net.Sockets.UdpReceiveResult}
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.UdpReceiveResult.#ctor(System.Byte[],System.Net.IPEndPoint)
  id: '#ctor(System.Byte[],System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: UdpReceiveResult(Byte[], IPEndPoint)
  nameWithType: UdpReceiveResult.UdpReceiveResult(Byte[], IPEndPoint)
  fullName: System.Net.Sockets.UdpReceiveResult.UdpReceiveResult(System.Byte[], System.Net.IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 484
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public UdpReceiveResult(byte[] buffer, IPEndPoint remoteEndPoint)
    content.vb: Public Sub New(buffer As Byte(), remoteEndPoint As IPEndPoint)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>A buffer for data to receive in the UDP packet.</p>\n"
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
      description: "\n<p>The remote endpoint of the UDP packet.</p>\n"
  nameWithType.vb: UdpReceiveResult.UdpReceiveResult(Byte(), IPEndPoint)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.UdpReceiveResult.UdpReceiveResult(System.Byte(), System.Net.IPEndPoint)
  name.vb: UdpReceiveResult(Byte(), IPEndPoint)
- uid: System.Net.Sockets.UdpReceiveResult.Buffer
  commentId: P:System.Net.Sockets.UdpReceiveResult.Buffer
  id: Buffer
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: Buffer
  nameWithType: UdpReceiveResult.Buffer
  fullName: System.Net.Sockets.UdpReceiveResult.Buffer
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Buffer
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 27
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a buffer with the data received in the UDP packet.</p>\n"
  syntax:
    content: public byte[] Buffer { get; }
    content.vb: Public ReadOnly Property Buffer As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>Returns <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array with the data received in the UDP packet.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.UdpReceiveResult.RemoteEndPoint
  commentId: P:System.Net.Sockets.UdpReceiveResult.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: UdpReceiveResult.RemoteEndPoint
  fullName: System.Net.Sockets.UdpReceiveResult.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoteEndPoint
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 35
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the remote endpoint from which the UDP packet was received. </p>\n"
  syntax:
    content: public IPEndPoint RemoteEndPoint { get; }
    content.vb: Public ReadOnly Property RemoteEndPoint As IPEndPoint
    parameters: []
    return:
      type: IPEndPoint
      description: "\n<p>Returns <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The remote endpoint from which the UDP packet was received.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)
  commentId: M:System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)
  id: Equals(System.Net.Sockets.UdpReceiveResult)
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: Equals(UdpReceiveResult)
  nameWithType: UdpReceiveResult.Equals(UdpReceiveResult)
  fullName: System.Net.Sockets.UdpReceiveResult.Equals(System.Net.Sockets.UdpReceiveResult)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 58
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public bool Equals(UdpReceiveResult other)
    content.vb: Public Function Equals(other As UdpReceiveResult) As Boolean
    parameters:
    - id: other
      type: System.Net.Sockets.UdpReceiveResult
      description: "\n<p>The object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if <em>other</em> is an instance of <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> and equals the value of the instance; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Net.Sockets.UdpReceiveResult}.Equals(System.Net.Sockets.UdpReceiveResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.UdpReceiveResult.Equals(System.Object)
  commentId: M:System.Net.Sockets.UdpReceiveResult.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: UdpReceiveResult.Equals(Object)
  fullName: System.Net.Sockets.UdpReceiveResult.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 48
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> and equals the value of the instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.UdpReceiveResult.GetHashCode
  commentId: M:System.Net.Sockets.UdpReceiveResult.GetHashCode
  id: GetHashCode
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: UdpReceiveResult.GetHashCode()
  fullName: System.Net.Sockets.UdpReceiveResult.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 43
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  commentId: M:System.Net.Sockets.UdpReceiveResult.op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  id: op_Equality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: Equality(UdpReceiveResult, UdpReceiveResult)
  nameWithType: UdpReceiveResult.Equality(UdpReceiveResult, UdpReceiveResult)
  fullName: System.Net.Sockets.UdpReceiveResult.Equality(System.Net.Sockets.UdpReceiveResult, System.Net.Sockets.UdpReceiveResult)
  type: Operator
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 63
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Tests whether two specified <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> instances are equivalent.</p>\n"
  syntax:
    content: public static bool operator ==(UdpReceiveResult left, UdpReceiveResult right)
    content.vb: Public Shared Operator =(left As UdpReceiveResult, right As UdpReceiveResult) As Boolean
    parameters:
    - id: left
      type: System.Net.Sockets.UdpReceiveResult
      description: "\n<p>The <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the left of the equality operator.</p>\n"
    - id: right
      type: System.Net.Sockets.UdpReceiveResult
      description: "\n<p>The <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the right of the equality operator.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  commentId: M:System.Net.Sockets.UdpReceiveResult.op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  id: op_Inequality(System.Net.Sockets.UdpReceiveResult,System.Net.Sockets.UdpReceiveResult)
  parent: System.Net.Sockets.UdpReceiveResult
  langs:
  - csharp
  - vb
  name: Inequality(UdpReceiveResult, UdpReceiveResult)
  nameWithType: UdpReceiveResult.Inequality(UdpReceiveResult, UdpReceiveResult)
  fullName: System.Net.Sockets.UdpReceiveResult.Inequality(System.Net.Sockets.UdpReceiveResult, System.Net.Sockets.UdpReceiveResult)
  type: Operator
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Net.Sockets/src/System/Net/Sockets/UdpReceiveResult.cs
    startLine: 68
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Tests whether two specified <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(UdpReceiveResult left, UdpReceiveResult right)
    content.vb: Public Shared Operator <>(left As UdpReceiveResult, right As UdpReceiveResult) As Boolean
    parameters:
    - id: left
      type: System.Net.Sockets.UdpReceiveResult
      description: "\n<p>The <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the left of the not equal operator.</p>\n"
    - id: right
      type: System.Net.Sockets.UdpReceiveResult
      description: "\n<p>The <xref href=\"System.Net.Sockets.UdpReceiveResult\" data-throw-if-not-resolved=\"false\"></xref> instance that is to the right of the not equal operator.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are unequal; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.IEquatable{System.Net.Sockets.UdpReceiveResult}
  commentId: T:System.IEquatable{System.Net.Sockets.UdpReceiveResult}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<UdpReceiveResult>
  nameWithType: IEquatable<UdpReceiveResult>
  fullName: System.IEquatable<System.Net.Sockets.UdpReceiveResult>
  nameWithType.vb: IEquatable(Of UdpReceiveResult)
  fullname.vb: System.IEquatable(Of System.Net.Sockets.UdpReceiveResult)
  name.vb: IEquatable(Of UdpReceiveResult)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: false
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  isExternal: false
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.IEquatable{System.Net.Sockets.UdpReceiveResult}.Equals(System.Net.Sockets.UdpReceiveResult)
  commentId: M:System.IEquatable{System.Net.Sockets.UdpReceiveResult}.Equals(System.Net.Sockets.UdpReceiveResult)
  parent: System.IEquatable{System.Net.Sockets.UdpReceiveResult}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(UdpReceiveResult)
  nameWithType: IEquatable<UdpReceiveResult>.Equals(UdpReceiveResult)
  fullName: System.IEquatable<System.Net.Sockets.UdpReceiveResult>.Equals(System.Net.Sockets.UdpReceiveResult)
  nameWithType.vb: IEquatable(Of UdpReceiveResult).Equals(UdpReceiveResult)
  fullname.vb: System.IEquatable(Of System.Net.Sockets.UdpReceiveResult).Equals(System.Net.Sockets.UdpReceiveResult)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<UdpReceiveResult>.Equals
    fullName: System.IEquatable<System.Net.Sockets.UdpReceiveResult>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of UdpReceiveResult).Equals
    fullName: System.IEquatable(Of System.Net.Sockets.UdpReceiveResult).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    nameWithType: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.UdpReceiveResult
  commentId: T:System.Net.Sockets.UdpReceiveResult
  parent: System.Net.Sockets
  isExternal: false
  name: UdpReceiveResult
  nameWithType: UdpReceiveResult
  fullName: System.Net.Sockets.UdpReceiveResult
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: false
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
