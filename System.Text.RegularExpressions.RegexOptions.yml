items:
- uid: System.Text.RegularExpressions.RegexOptions
  commentId: T:System.Text.RegularExpressions.RegexOptions
  id: RegexOptions
  parent: System.Text.RegularExpressions
  children:
  - System.Text.RegularExpressions.RegexOptions.Compiled
  - System.Text.RegularExpressions.RegexOptions.CultureInvariant
  - System.Text.RegularExpressions.RegexOptions.ECMAScript
  - System.Text.RegularExpressions.RegexOptions.ExplicitCapture
  - System.Text.RegularExpressions.RegexOptions.IgnoreCase
  - System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace
  - System.Text.RegularExpressions.RegexOptions.Multiline
  - System.Text.RegularExpressions.RegexOptions.None
  - System.Text.RegularExpressions.RegexOptions.RightToLeft
  - System.Text.RegularExpressions.RegexOptions.Singleline
  langs:
  - csharp
  - vb
  name: RegexOptions
  fullName: System.Text.RegularExpressions.RegexOptions
  type: Enum
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RegexOptions
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 6
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Provides enumerated values to use to set regular expression options.</p>\n"
  syntax:
    content: >-
      [Flags]

      public enum RegexOptions
    content.vb: >-
      <Flags>

      Public Enum RegexOptions
  seealso:
  - type: System.Text.RegularExpressions.Regex.Options
    commentId: P:System.Text.RegularExpressions.Regex.Options
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
  nameWithType: RegexOptions
- uid: System.Text.RegularExpressions.RegexOptions.Compiled
  commentId: F:System.Text.RegularExpressions.RegexOptions.Compiled
  id: Compiled
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: Compiled
  fullName: System.Text.RegularExpressions.RegexOptions.Compiled
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Compiled
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 13
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies that the regular expression is compiled to an assembly. This yields faster execution but increases startup time. This value should not be assigned to the <xref href=\"System.Text.RegularExpressions.RegexCompilationInfo.Options\" data-throw-if-not-resolved=\"false\"></xref> property when calling the <xref href=\"System.Text.RegularExpressions.Regex.CompileToAssembly(System.Text.RegularExpressions.RegexCompilationInfo[],System.Reflection.AssemblyName)\" data-throw-if-not-resolved=\"false\"></xref> method. For more information, see the \"Compiled Regular Expressions\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: Compiled = 8
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.Compiled
- uid: System.Text.RegularExpressions.RegexOptions.CultureInvariant
  commentId: F:System.Text.RegularExpressions.RegexOptions.CultureInvariant
  id: CultureInvariant
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: CultureInvariant
  fullName: System.Text.RegularExpressions.RegexOptions.CultureInvariant
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CultureInvariant
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 23
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies that cultural differences in language is ignored. For more information, see the \"Comparison Using the Invariant Culture\" section in the Regular Expression Options topic.</p>\n"
  syntax:
    content: CultureInvariant = 512
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.CultureInvariant
- uid: System.Text.RegularExpressions.RegexOptions.ECMAScript
  commentId: F:System.Text.RegularExpressions.RegexOptions.ECMAScript
  id: ECMAScript
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: ECMAScript
  fullName: System.Text.RegularExpressions.RegexOptions.ECMAScript
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECMAScript
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 22
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Enables ECMAScript-compliant behavior for the expression. This value can be used only in conjunction with the <xref href=\"System.Text.RegularExpressions.RegexOptions.IgnoreCase\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Text.RegularExpressions.RegexOptions.Multiline\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Text.RegularExpressions.RegexOptions.Compiled\" data-throw-if-not-resolved=\"false\"></xref> values. The use of this value with any other values results in an exception.</p>\n<p>For more information on the <xref href=\"System.Text.RegularExpressions.RegexOptions.ECMAScript\" data-throw-if-not-resolved=\"false\"></xref> option, see the \"ECMAScript Matching Behavior\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: ECMAScript = 256
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.ECMAScript
- uid: System.Text.RegularExpressions.RegexOptions.ExplicitCapture
  commentId: F:System.Text.RegularExpressions.RegexOptions.ExplicitCapture
  id: ExplicitCapture
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: ExplicitCapture
  fullName: System.Text.RegularExpressions.RegexOptions.ExplicitCapture
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExplicitCapture
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 12
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies that the only valid captures are explicitly named or numbered groups of the form (?<name>…). This allows unnamed parentheses to act as noncapturing groups without the syntactic clumsiness of the expression (?:…). For more information, see the \"Explicit Captures Only\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: ExplicitCapture = 4
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.ExplicitCapture
- uid: System.Text.RegularExpressions.RegexOptions.IgnoreCase
  commentId: F:System.Text.RegularExpressions.RegexOptions.IgnoreCase
  id: IgnoreCase
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: IgnoreCase
  fullName: System.Text.RegularExpressions.RegexOptions.IgnoreCase
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IgnoreCase
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 10
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies case-insensitive matching. For more information, see the \"Case-Insensitive Matching \" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: IgnoreCase = 1
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.IgnoreCase
- uid: System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace
  commentId: F:System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace
  id: IgnorePatternWhitespace
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: IgnorePatternWhitespace
  fullName: System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IgnorePatternWhitespace
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 15
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Eliminates unescaped white space from the pattern and enables comments marked with #. However, this value does not affect or eliminate white space in , numeric , or tokens that mark the beginning of individual . For more information, see the \"Ignore White Space\" section of the Regular Expression Options topic. </p>\n"
  syntax:
    content: IgnorePatternWhitespace = 32
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.IgnorePatternWhitespace
- uid: System.Text.RegularExpressions.RegexOptions.Multiline
  commentId: F:System.Text.RegularExpressions.RegexOptions.Multiline
  id: Multiline
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: Multiline
  fullName: System.Text.RegularExpressions.RegexOptions.Multiline
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiline
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 11
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Multiline mode. Changes the meaning of ^ and $ so they match at the beginning and end, respectively, of any line, and not just the beginning and end of the entire string. For more information, see the \"Multiline Mode\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: Multiline = 2
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.Multiline
- uid: System.Text.RegularExpressions.RegexOptions.None
  commentId: F:System.Text.RegularExpressions.RegexOptions.None
  id: None
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: None
  fullName: System.Text.RegularExpressions.RegexOptions.None
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 9
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies that no options are set. For more information about the default behavior of the regular expression engine, see the \"Default Options\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: None = 0
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.None
- uid: System.Text.RegularExpressions.RegexOptions.RightToLeft
  commentId: F:System.Text.RegularExpressions.RegexOptions.RightToLeft
  id: RightToLeft
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: RightToLeft
  fullName: System.Text.RegularExpressions.RegexOptions.RightToLeft
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightToLeft
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 16
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies that the search will be from right to left instead of from left to right. For more information, see the \"Right-to-Left Mode\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: RightToLeft = 64
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.RightToLeft
- uid: System.Text.RegularExpressions.RegexOptions.Singleline
  commentId: F:System.Text.RegularExpressions.RegexOptions.Singleline
  id: Singleline
  parent: System.Text.RegularExpressions.RegexOptions
  langs:
  - csharp
  - vb
  name: Singleline
  fullName: System.Text.RegularExpressions.RegexOptions.Singleline
  type: Field
  source:
    remote:
      path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Singleline
    path: src/System.Text.RegularExpressions/src/System/Text/RegularExpressions/RegexOptions.cs
    startLine: 14
  assemblies:
  - System.Text.RegularExpressions
  namespace: System.Text.RegularExpressions
  summary: "\n<p>Specifies single-line mode. Changes the meaning of the dot (.) so it matches every character (instead of every character except \\n). For more information, see the \"Single-line Mode\" section in the Regular Expression Options topic. </p>\n"
  syntax:
    content: Singleline = 16
    return:
      type: System.Text.RegularExpressions.RegexOptions
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
  nameWithType: RegexOptions.Singleline
references:
- uid: System.Text.RegularExpressions
  isExternal: false
  name: System.Text.RegularExpressions
  fullName: System.Text.RegularExpressions
  nameWithType: System.Text.RegularExpressions
  commentId: N:System.Text.RegularExpressions
- uid: System.Text.RegularExpressions.RegexOptions
  parent: System.Text.RegularExpressions
  isExternal: false
  name: RegexOptions
  fullName: System.Text.RegularExpressions.RegexOptions
  nameWithType: RegexOptions
  commentId: T:System.Text.RegularExpressions.RegexOptions
