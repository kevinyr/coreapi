### YamlMime:ManagedReference
items:
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  id: IPAddress
  parent: System.Net
  children:
  - System.Net.IPAddress.#ctor(System.Byte[])
  - System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  - System.Net.IPAddress.#ctor(System.Int64)
  - System.Net.IPAddress.AddressFamily
  - System.Net.IPAddress.Any
  - System.Net.IPAddress.Broadcast
  - System.Net.IPAddress.Equals(System.Object)
  - System.Net.IPAddress.GetAddressBytes
  - System.Net.IPAddress.GetHashCode
  - System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  - System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  - System.Net.IPAddress.IPv6Any
  - System.Net.IPAddress.IPv6Loopback
  - System.Net.IPAddress.IPv6None
  - System.Net.IPAddress.IsIPv4MappedToIPv6
  - System.Net.IPAddress.IsIPv6LinkLocal
  - System.Net.IPAddress.IsIPv6Multicast
  - System.Net.IPAddress.IsIPv6SiteLocal
  - System.Net.IPAddress.IsIPv6Teredo
  - System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  - System.Net.IPAddress.Loopback
  - System.Net.IPAddress.MapToIPv4
  - System.Net.IPAddress.MapToIPv6
  - System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  - System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  - System.Net.IPAddress.None
  - System.Net.IPAddress.Parse(System.String)
  - System.Net.IPAddress.ScopeId
  - System.Net.IPAddress.ToString
  - System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  langs:
  - csharp
  - vb
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
  type: Class
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPAddress
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 14
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an Internet Protocol (IP) address.</p>\n"
  syntax:
    content: public class IPAddress
    content.vb: Public Class IPAddress
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.IPAddress.Any
  commentId: F:System.Net.IPAddress.Any
  id: Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Any
  nameWithType: IPAddress.Any
  fullName: System.Net.IPAddress.Any
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 16
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an IP address that indicates that the server must listen for client activity on all network interfaces. This field is read-only.</p>\n"
  syntax:
    content: public static readonly IPAddress Any
    content.vb: Public Shared ReadOnly Any As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.Broadcast
  commentId: F:System.Net.IPAddress.Broadcast
  id: Broadcast
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Broadcast
  nameWithType: IPAddress.Broadcast
  fullName: System.Net.IPAddress.Broadcast
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Broadcast
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 18
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides the IP broadcast address. This field is read-only.</p>\n"
  syntax:
    content: public static readonly IPAddress Broadcast
    content.vb: Public Shared ReadOnly Broadcast As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.IPv6Any
  commentId: F:System.Net.IPAddress.IPv6Any
  id: IPv6Any
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPv6Any
  nameWithType: IPAddress.IPv6Any
  fullName: System.Net.IPAddress.IPv6Any
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6Any
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 23
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>The <xref href=\"System.Net.Sockets.Socket.Bind(System.Net.EndPoint)\" data-throw-if-not-resolved=\"false\"></xref> method uses the <xref href=\"System.Net.IPAddress.IPv6Any\" data-throw-if-not-resolved=\"false\"></xref> field to indicate that a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> must listen for client activity on all network interfaces.</p>\n"
  syntax:
    content: public static readonly IPAddress IPv6Any
    content.vb: Public Shared ReadOnly IPv6Any As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.IPv6Loopback
  commentId: F:System.Net.IPAddress.IPv6Loopback
  id: IPv6Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPv6Loopback
  nameWithType: IPAddress.IPv6Loopback
  fullName: System.Net.IPAddress.IPv6Loopback
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6Loopback
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 24
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides the IP loopback address. This property is read-only.</p>\n"
  syntax:
    content: public static readonly IPAddress IPv6Loopback
    content.vb: Public Shared ReadOnly IPv6Loopback As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.IPv6None
  commentId: F:System.Net.IPAddress.IPv6None
  id: IPv6None
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPv6None
  nameWithType: IPAddress.IPv6None
  fullName: System.Net.IPAddress.IPv6None
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6None
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 25
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an IP address that indicates that no network interface should be used. This property is read-only.</p>\n"
  syntax:
    content: public static readonly IPAddress IPv6None
    content.vb: Public Shared ReadOnly IPv6None As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.Loopback
  commentId: F:System.Net.IPAddress.Loopback
  id: Loopback
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Loopback
  nameWithType: IPAddress.Loopback
  fullName: System.Net.IPAddress.Loopback
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loopback
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 17
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides the IP loopback address. This field is read-only.</p>\n"
  syntax:
    content: public static readonly IPAddress Loopback
    content.vb: Public Shared ReadOnly Loopback As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.None
  commentId: F:System.Net.IPAddress.None
  id: None
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: None
  nameWithType: IPAddress.None
  fullName: System.Net.IPAddress.None
  type: Field
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: None
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 19
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides an IP address that indicates that no network interface should be used. This field is read-only.</p>\n"
  syntax:
    content: public static readonly IPAddress None
    content.vb: Public Shared ReadOnly None As IPAddress
    return:
      type: System.Net.IPAddress
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.IPAddress.#ctor(System.Byte[])
  commentId: M:System.Net.IPAddress.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPAddress(Byte[])
  nameWithType: IPAddress.IPAddress(Byte[])
  fullName: System.Net.IPAddress.IPAddress(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 165
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class with the address specified as a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  syntax:
    content: public IPAddress(byte[] address)
    content.vb: Public Sub New(address As Byte())
    parameters:
    - id: address
      type: System.Byte[]
      description: "\n<p>The byte array value of the IP address. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>address</em> contains a bad IP address. </p>\n"
  nameWithType.vb: IPAddress.IPAddress(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.IPAddress.IPAddress(System.Byte())
  name.vb: IPAddress(Byte())
- uid: System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  commentId: M:System.Net.IPAddress.#ctor(System.Byte[],System.Int64)
  id: '#ctor(System.Byte[],System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPAddress(Byte[], Int64)
  nameWithType: IPAddress.IPAddress(Byte[], Int64)
  fullName: System.Net.IPAddress.IPAddress(System.Byte[], System.Int64)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 123
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class with the address specified as a <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array and the specified scope identifier.</p>\n"
  syntax:
    content: public IPAddress(byte[] address, long scopeid)
    content.vb: Public Sub New(address As Byte(), scopeid As Long)
    parameters:
    - id: address
      type: System.Byte[]
      description: "\n<p>The byte array value of the IP address. </p>\n"
    - id: scopeid
      type: System.Int64
      description: "\n<p>The long value of the scope identifier. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>address</em> contains a bad IP address. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>scopeid</em> &lt; 0 or </p>\n<p>\n<em>scopeid</em> &gt; 0x00000000FFFFFFFF </p>\n"
  nameWithType.vb: IPAddress.IPAddress(Byte(), Int64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.IPAddress.IPAddress(System.Byte(), System.Int64)
  name.vb: IPAddress(Byte(), Int64)
- uid: System.Net.IPAddress.#ctor(System.Int64)
  commentId: M:System.Net.IPAddress.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IPAddress(Int64)
  nameWithType: IPAddress.IPAddress(Int64)
  fullName: System.Net.IPAddress.IPAddress(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 108
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> class with the address specified as an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public IPAddress(long newAddress)
    content.vb: Public Sub New(newAddress As Long)
    parameters:
    - id: newAddress
      type: System.Int64
      description: "\n<p>The long value of the IP address. For example, the value 0x2414188f in big-endian format would be the IP address \"143.24.20.36\". </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>newAddress</em> &lt; 0 or </p>\n<p>\n<em>newAddress</em> &gt; 0x00000000FFFFFFFF </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.AddressFamily
  commentId: P:System.Net.IPAddress.AddressFamily
  id: AddressFamily
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: AddressFamily
  nameWithType: IPAddress.AddressFamily
  fullName: System.Net.IPAddress.AddressFamily
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressFamily
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 245
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets the address family of the IP address.</p>\n"
  syntax:
    content: public AddressFamily AddressFamily { get; }
    content.vb: Public ReadOnly Property AddressFamily As AddressFamily
    parameters: []
    return:
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>Returns <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> for IPv4 or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> for IPv6.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv4MappedToIPv6
  commentId: P:System.Net.IPAddress.IsIPv4MappedToIPv6
  id: IsIPv4MappedToIPv6
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv4MappedToIPv6
  nameWithType: IPAddress.IsIPv4MappedToIPv6
  fullName: System.Net.IPAddress.IsIPv4MappedToIPv6
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv4MappedToIPv6
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 427
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the IP address is an IPv4-mapped IPv6 address.</p>\n"
  syntax:
    content: public bool IsIPv4MappedToIPv6 { get; }
    content.vb: Public ReadOnly Property IsIPv4MappedToIPv6 As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the IP address is an IPv4-mapped IPv6 address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6LinkLocal
  commentId: P:System.Net.IPAddress.IsIPv6LinkLocal
  id: IsIPv6LinkLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6LinkLocal
  nameWithType: IPAddress.IsIPv6LinkLocal
  fullName: System.Net.IPAddress.IsIPv6LinkLocal
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6LinkLocal
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 395
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 link local address.</p>\n"
  syntax:
    content: public bool IsIPv6LinkLocal { get; }
    content.vb: Public ReadOnly Property IsIPv6LinkLocal As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 link local address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6Multicast
  commentId: P:System.Net.IPAddress.IsIPv6Multicast
  id: IsIPv6Multicast
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6Multicast
  nameWithType: IPAddress.IsIPv6Multicast
  fullName: System.Net.IPAddress.IsIPv6Multicast
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6Multicast
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 382
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 multicast global address.</p>\n"
  syntax:
    content: public bool IsIPv6Multicast { get; }
    content.vb: Public ReadOnly Property IsIPv6Multicast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 multicast global address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6SiteLocal
  commentId: P:System.Net.IPAddress.IsIPv6SiteLocal
  id: IsIPv6SiteLocal
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6SiteLocal
  nameWithType: IPAddress.IsIPv6SiteLocal
  fullName: System.Net.IPAddress.IsIPv6SiteLocal
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6SiteLocal
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 408
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 site local address.</p>\n"
  syntax:
    content: public bool IsIPv6SiteLocal { get; }
    content.vb: Public ReadOnly Property IsIPv6SiteLocal As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 site local address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.IsIPv6Teredo
  commentId: P:System.Net.IPAddress.IsIPv6Teredo
  id: IsIPv6Teredo
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsIPv6Teredo
  nameWithType: IPAddress.IsIPv6Teredo
  fullName: System.Net.IPAddress.IsIPv6Teredo
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsIPv6Teredo
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 416
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets whether the address is an IPv6 Teredo address.</p>\n"
  syntax:
    content: public bool IsIPv6Teredo { get; }
    content.vb: Public ReadOnly Property IsIPv6Teredo As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the IP address is an IPv6 Teredo address; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.BeginGetUnicastAddresses(System.AsyncCallback,System.Object)
  - linkId: System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.EndGetUnicastAddresses(System.IAsyncResult)
  - linkId: System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
    commentId: M:System.Net.NetworkInformation.IPGlobalProperties.GetUnicastAddresses
  - linkId: System.Net.Sockets.IPProtectionLevel
    commentId: T:System.Net.Sockets.IPProtectionLevel
  - linkId: System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
    commentId: M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)
  - linkId: System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
    commentId: M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)
  - linkId: System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
    commentId: M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.IPAddress.ScopeId
  commentId: P:System.Net.IPAddress.ScopeId
  id: ScopeId
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: ScopeId
  nameWithType: IPAddress.ScopeId
  fullName: System.Net.IPAddress.ScopeId
  type: Property
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ScopeId
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 266
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Gets or sets the IPv6 address scope identifier.</p>\n"
  syntax:
    content: public long ScopeId { get; set; }
    content.vb: Public Property ScopeId As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>A long integer that specifies the scope of the address.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>\n<strong>AddressFamily</strong> = <strong>InterNetwork</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>scopeId</em> &lt; 0</p>\n<p>- or -</p>\n<ul><li>\n<p>\n<em>scopeId</em> &gt; 0x00000000FFFFFFFF  </p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.Equals(System.Object)
  commentId: M:System.Net.IPAddress.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: IPAddress.Equals(Object)
  fullName: System.Net.IPAddress.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 486
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Compares two IP addresses.</p>\n"
  syntax:
    content: public override bool Equals(object comparand)
    content.vb: Public Overrides Function Equals(comparand As Object) As Boolean
    parameters:
    - id: comparand
      type: System.Object
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance to compare to the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two addresses are equal; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPAddress.GetAddressBytes
  commentId: M:System.Net.IPAddress.GetAddressBytes
  id: GetAddressBytes
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: GetAddressBytes()
  nameWithType: IPAddress.GetAddressBytes()
  fullName: System.Net.IPAddress.GetAddressBytes()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAddressBytes
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 219
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Provides a copy of the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> as an array of bytes.</p>\n"
  syntax:
    content: public byte[] GetAddressBytes()
    content.vb: Public Function GetAddressBytes As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.GetHashCode
  commentId: M:System.Net.IPAddress.GetHashCode
  id: GetHashCode
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: IPAddress.GetHashCode()
  fullName: System.Net.IPAddress.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 491
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Returns a hash value for an IP address.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An integer hash value.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  id: HostToNetworkOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: HostToNetworkOrder(Int16)
  nameWithType: IPAddress.HostToNetworkOrder(Int16)
  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostToNetworkOrder
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 335
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a short value from host byte order to network byte order.</p>\n"
  syntax:
    content: public static short HostToNetworkOrder(short host)
    content.vb: Public Shared Function HostToNetworkOrder(host As Short) As Short
    parameters:
    - id: host
      type: System.Int16
      description: "\n<p>The number to convert, expressed in host byte order. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A short value, expressed in network byte order.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  id: HostToNetworkOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: HostToNetworkOrder(Int32)
  nameWithType: IPAddress.HostToNetworkOrder(Int32)
  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostToNetworkOrder
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 325
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an integer value from host byte order to network byte order.</p>\n"
  syntax:
    content: public static int HostToNetworkOrder(int host)
    content.vb: Public Shared Function HostToNetworkOrder(host As Integer) As Integer
    parameters:
    - id: host
      type: System.Int32
      description: "\n<p>The number to convert, expressed in host byte order. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer value, expressed in network byte order.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  id: HostToNetworkOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: HostToNetworkOrder(Int64)
  nameWithType: IPAddress.HostToNetworkOrder(Int64)
  fullName: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HostToNetworkOrder
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 315
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a long value from host byte order to network byte order.</p>\n"
  syntax:
    content: public static long HostToNetworkOrder(long host)
    content.vb: Public Shared Function HostToNetworkOrder(host As Long) As Long
    parameters:
    - id: host
      type: System.Int64
      description: "\n<p>The number to convert, expressed in host byte order. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A long value, expressed in network byte order.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
    commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  commentId: M:System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  id: IsLoopback(System.Net.IPAddress)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: IsLoopback(IPAddress)
  nameWithType: IPAddress.IsLoopback(IPAddress)
  fullName: System.Net.IPAddress.IsLoopback(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLoopback
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 359
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Indicates whether the specified IP address is the loopback address.</p>\n"
  syntax:
    content: public static bool IsLoopback(IPAddress address)
    content.vb: Public Shared Function IsLoopback(address As IPAddress) As Boolean
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>address</em> is the loopback address; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.MapToIPv4
  commentId: M:System.Net.IPAddress.MapToIPv4
  id: MapToIPv4
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: MapToIPv4()
  nameWithType: IPAddress.MapToIPv4()
  fullName: System.Net.IPAddress.MapToIPv4()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapToIPv4
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 539
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Maps the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object to an IPv4 address.</p>\n"
  syntax:
    content: public IPAddress MapToIPv4()
    content.vb: Public Function MapToIPv4 As IPAddress
    return:
      type: System.Net.IPAddress
      description: "\n<p>Returns <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An IPv4 address.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.MapToIPv6
  commentId: M:System.Net.IPAddress.MapToIPv6
  id: MapToIPv6
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: MapToIPv6()
  nameWithType: IPAddress.MapToIPv6()
  fullName: System.Net.IPAddress.MapToIPv6()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapToIPv6
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 521
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Maps the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> object to an IPv6 address.</p>\n"
  syntax:
    content: public IPAddress MapToIPv6()
    content.vb: Public Function MapToIPv6 As IPAddress
    return:
      type: System.Net.IPAddress
      description: "\n<p>Returns <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An IPv6 address.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  id: NetworkToHostOrder(System.Int16)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: NetworkToHostOrder(Int16)
  nameWithType: IPAddress.NetworkToHostOrder(Int16)
  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int16)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkToHostOrder
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 354
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a short value from network byte order to host byte order.</p>\n"
  syntax:
    content: public static short NetworkToHostOrder(short network)
    content.vb: Public Shared Function NetworkToHostOrder(network As Short) As Short
    parameters:
    - id: network
      type: System.Int16
      description: "\n<p>The number to convert, expressed in network byte order. </p>\n"
    return:
      type: System.Int16
      description: "\n<p>A short value, expressed in host byte order.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  id: NetworkToHostOrder(System.Int32)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: NetworkToHostOrder(Int32)
  nameWithType: IPAddress.NetworkToHostOrder(Int32)
  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkToHostOrder
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 349
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an integer value from network byte order to host byte order.</p>\n"
  syntax:
    content: public static int NetworkToHostOrder(int network)
    content.vb: Public Shared Function NetworkToHostOrder(network As Integer) As Integer
    parameters:
    - id: network
      type: System.Int32
      description: "\n<p>The number to convert, expressed in network byte order. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer value, expressed in host byte order.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  commentId: M:System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  id: NetworkToHostOrder(System.Int64)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: NetworkToHostOrder(Int64)
  nameWithType: IPAddress.NetworkToHostOrder(Int64)
  fullName: System.Net.IPAddress.NetworkToHostOrder(System.Int64)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkToHostOrder
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 344
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts a long value from network byte order to host byte order.</p>\n"
  syntax:
    content: public static long NetworkToHostOrder(long network)
    content.vb: Public Shared Function NetworkToHostOrder(network As Long) As Long
    parameters:
    - id: network
      type: System.Int64
      description: "\n<p>The number to convert, expressed in network byte order. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>A long value, expressed in host byte order.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress.HostToNetworkOrder(System.Int64)
    commentId: M:System.Net.IPAddress.HostToNetworkOrder(System.Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.Parse(System.String)
  commentId: M:System.Net.IPAddress.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: IPAddress.Parse(String)
  fullName: System.Net.IPAddress.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 209
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an IP address string to an <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public static IPAddress Parse(string ipString)
    content.vb: Public Shared Function Parse(ipString As String) As IPAddress
    parameters:
    - id: ipString
      type: System.String
      description: "\n<p>A string that contains an IP address in dotted-quad notation for IPv4 and in colon-hexadecimal notation for IPv6. </p>\n"
    return:
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ipString</em> is <strong>null</strong>. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>ipString</em> is not a valid IP address. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.IPAddress.ToString
  commentId: M:System.Net.IPAddress.ToString
  id: ToString
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: IPAddress.ToString()
  fullName: System.Net.IPAddress.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 303
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Converts an Internet address to its standard notation.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that contains the IP address in either IPv4 dotted-quad or in IPv6 colon-hexadecimal notation.</p>\n"
  overridden: System.Object.ToString
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>The address family is <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> and the address is bad. </p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  commentId: M:System.Net.IPAddress.TryParse(System.String,System.Net.IPAddress@)
  id: TryParse(System.String,System.Net.IPAddress@)
  parent: System.Net.IPAddress
  langs:
  - csharp
  - vb
  name: TryParse(String, out IPAddress)
  nameWithType: IPAddress.TryParse(String, out IPAddress)
  fullName: System.Net.IPAddress.TryParse(System.String, out System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Net.Primitives/src/System/Net/IPAddress.cs
    startLine: 203
  assemblies:
  - System.Net.Primitives
  namespace: System.Net
  summary: "\n<p>Determines whether a string is a valid IP address.</p>\n"
  syntax:
    content: public static bool TryParse(string ipString, out IPAddress address)
    content.vb: Public Shared Function TryParse(ipString As String, ByRef address As IPAddress) As Boolean
    parameters:
    - id: ipString
      type: System.String
      description: "\n<p>The string to validate.</p>\n"
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> version of the string.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>ipString</em> was able to be parsed as an IP address; otherwise, <strong>false</strong>.</p>\n"
  nameWithType.vb: IPAddress.TryParse(String, ByRef IPAddress)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.IPAddress.TryParse(System.String, ByRef System.Net.IPAddress)
  name.vb: TryParse(String, ByRef IPAddress)
references:
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Sockets.AddressFamily
  commentId: T:System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  nameWithType: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  commentId: T:System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
