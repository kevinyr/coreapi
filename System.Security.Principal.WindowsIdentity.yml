### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsIdentity
  commentId: T:System.Security.Principal.WindowsIdentity
  id: WindowsIdentity
  parent: System.Security.Principal
  children:
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String)
  - System.Security.Principal.WindowsIdentity.AccessToken
  - System.Security.Principal.WindowsIdentity.AuthenticationType
  - System.Security.Principal.WindowsIdentity.Claims
  - System.Security.Principal.WindowsIdentity.Clone
  - System.Security.Principal.WindowsIdentity.DefaultIssuer
  - System.Security.Principal.WindowsIdentity.Dispose
  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetAnonymous
  - System.Security.Principal.WindowsIdentity.GetCurrent
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  - System.Security.Principal.WindowsIdentity.Groups
  - System.Security.Principal.WindowsIdentity.ImpersonationLevel
  - System.Security.Principal.WindowsIdentity.IsAnonymous
  - System.Security.Principal.WindowsIdentity.IsAuthenticated
  - System.Security.Principal.WindowsIdentity.IsGuest
  - System.Security.Principal.WindowsIdentity.IsSystem
  - System.Security.Principal.WindowsIdentity.Name
  - System.Security.Principal.WindowsIdentity.Owner
  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  - System.Security.Principal.WindowsIdentity.User
  langs:
  - csharp
  - vb
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
  type: Class
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WindowsIdentity
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 190
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Represents a Windows user.</p>\n"
  syntax:
    content: 'public class WindowsIdentity : ClaimsIdentity, IIdentity, IDisposable'
    content.vb: >-
      Public Class WindowsIdentity
          Inherits ClaimsIdentity
          Implements IIdentity, IDisposable
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsIdentity
  implements:
  - System.Security.Principal.IIdentity
  - System.IDisposable
  inheritedMembers:
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  commentId: F:System.Security.Principal.WindowsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
  type: Field
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIssuer
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 192
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Identifies the name of the default <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> issuer.</p>\n"
  syntax:
    content: public const string DefaultIssuer = "AD AUTHORITY"
    content.vb: Public Const DefaultIssuer As String = "AD AUTHORITY"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 193
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified Windows account token.</p>\n"
  syntax:
    content: public WindowsIdentity(IntPtr userToken)
    content.vb: Public Sub New(userToken As IntPtr)
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "\n<p>The account token for the user on whose behalf the code is running. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>userToken</em> is 0.</p>\n<p>-or-</p>\n<p>\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>A Win32 error occurred.</p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  id: '#ctor(System.IntPtr,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(IntPtr, String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr, String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.IntPtr, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 194
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified Windows account token and the specified authentication type.</p>\n"
  syntax:
    content: public WindowsIdentity(IntPtr userToken, string type)
    content.vb: Public Sub New(userToken As IntPtr, type As String)
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "\n<p>The account token for the user on whose behalf the code is running. </p>\n"
    - id: type
      type: System.String
      description: "\n<p>(Informational use only.) The type of authentication used to identify the user. For more information, see Remarks.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>userToken</em> is 0.</p>\n<p>-or-</p>\n<p>\n<em>userToken</em> is duplicated and invalid for impersonation.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>A Win32 error occurred.</p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  commentId: M:System.Security.Principal.WindowsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 195
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class for the user represented by the specified User Principal Name (UPN).</p>\n"
  syntax:
    content: public WindowsIdentity(string sUserPrincipalName)
    content.vb: Public Sub New(sUserPrincipalName As String)
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "\n<p>The UPN for the user on whose behalf the code is running. </p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\n<p>-or-</p>\n<p>The computer is not running Windows 2003 or later.</p>\n<p>-or-</p>\n<p>The user is not a member of the domain the computer is attached to.</p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  commentId: P:System.Security.Principal.WindowsIdentity.AccessToken
  id: AccessToken
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AccessToken
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 196
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets this <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\" data-throw-if-not-resolved=\"false\"></xref> for this <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> instance. </p>\n"
  syntax:
    content: >-
      public SafeAccessTokenHandle AccessToken

      {
          [SecurityCritical]
          get;
      }
    content.vb: Public ReadOnly Property AccessToken As SafeAccessTokenHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "\n<p>Returns a <xref href=\"Microsoft.Win32.SafeHandles.SafeAccessTokenHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  commentId: P:System.Security.Principal.WindowsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticationType
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 197
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the type of authentication used to identify the user.</p>\n"
  syntax:
    content: public override sealed string AuthenticationType { get; }
    content.vb: Public NotOverridable Overrides ReadOnly Property AuthenticationType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The type of authentication used to identify the user.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.AuthenticationType
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Windows returned the Windows NT status code STATUS_ACCESS_DENIED.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n<p>-or-</p>\n<p>The computer is not attached to a Windows 2003 or later domain.</p>\n<p>-or-</p>\n<p>The computer is not running Windows 2003 or later.</p>\n<p>-or-</p>\n<p>The user is not a member of the domain the computer is attached to.</p>\n"
  modifiers.csharp:
  - public
  - override
  - sealed
  - get
  modifiers.vb:
  - Public
  - Overrides
  - NotOverridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Claims
  commentId: P:System.Security.Principal.WindowsIdentity.Claims
  id: Claims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 198
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets all claims for the user represented by this Windows identity.</p>\n"
  syntax:
    content: public override IEnumerable<Claim> Claims { get; }
    content.vb: Public Overrides ReadOnly Property Claims As IEnumerable(Of Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>A collection of claims for this <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.Claims
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Groups
  commentId: P:System.Security.Principal.WindowsIdentity.Groups
  id: Groups
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Groups
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 199
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the groups the current Windows user belongs to.</p>\n"
  syntax:
    content: public IdentityReferenceCollection Groups { get; }
    content.vb: Public ReadOnly Property Groups As IdentityReferenceCollection
    parameters: []
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "\n<p>An object representing the groups the current Windows user belongs to.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  commentId: P:System.Security.Principal.WindowsIdentity.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImpersonationLevel
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 200
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the impersonation level for the user.</p>\n"
  syntax:
    content: public TokenImpersonationLevel ImpersonationLevel { get; }
    content.vb: Public ReadOnly Property ImpersonationLevel As TokenImpersonationLevel
    parameters: []
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "\n<p>One of the enumeration values that specifies the impersonation level. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  commentId: P:System.Security.Principal.WindowsIdentity.IsAnonymous
  id: IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAnonymous
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 201
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value that indicates whether the user account is identified as an anonymous account by the system.</p>\n"
  syntax:
    content: public virtual bool IsAnonymous { get; }
    content.vb: Public Overridable ReadOnly Property IsAnonymous As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user account is an anonymous account; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  commentId: P:System.Security.Principal.WindowsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 202
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value indicating whether the user has been authenticated by Windows.</p>\n"
  syntax:
    content: public override bool IsAuthenticated { get; }
    content.vb: Public Overrides ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user was authenticated; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  commentId: P:System.Security.Principal.WindowsIdentity.IsGuest
  id: IsGuest
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGuest
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 203
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType.Guest\" data-throw-if-not-resolved=\"false\"></xref> account by the system.</p>\n"
  syntax:
    content: public virtual bool IsGuest { get; }
    content.vb: Public Overridable ReadOnly Property IsGuest As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType.Guest\" data-throw-if-not-resolved=\"false\"></xref> account; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  commentId: P:System.Security.Principal.WindowsIdentity.IsSystem
  id: IsSystem
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSystem
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 204
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets a value indicating whether the user account is identified as a <xref href=\"System.Security.Principal.WindowsAccountType.System\" data-throw-if-not-resolved=\"false\"></xref> account by the system.</p>\n"
  syntax:
    content: public virtual bool IsSystem { get; }
    content.vb: Public Overridable ReadOnly Property IsSystem As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the user account is a <xref href=\"System.Security.Principal.WindowsAccountType.System\" data-throw-if-not-resolved=\"false\"></xref> account; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Name
  commentId: P:System.Security.Principal.WindowsIdentity.Name
  id: Name
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 205
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the user's Windows logon name.</p>\n"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The Windows logon name of the user on whose behalf the code is being run.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Owner
  commentId: P:System.Security.Principal.WindowsIdentity.Owner
  id: Owner
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Owner
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 206
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the security identifier (SID) for the token owner.</p>\n"
  syntax:
    content: public SecurityIdentifier Owner { get; }
    content.vb: Public ReadOnly Property Owner As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>An object for the token owner.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.User
  commentId: P:System.Security.Principal.WindowsIdentity.User
  id: User
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
  type: Property
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: User
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 207
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Gets the security identifier (SID) for the user.</p>\n"
  syntax:
    content: public SecurityIdentifier User { get; }
    content.vb: Public ReadOnly Property User As SecurityIdentifier
    parameters: []
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "\n<p>An object for the user.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Principal.WindowsIdentity.Clone
  commentId: M:System.Security.Principal.WindowsIdentity.Clone
  id: Clone
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 208
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Creates a new  object that is a copy of the current instance.</p>\n"
  syntax:
    content: public override ClaimsIdentity Clone()
    content.vb: Public Overrides Function Clone As ClaimsIdentity
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>A copy of the current instance.</p>\n"
  overridden: System.Security.Claims.ClaimsIdentity.Clone
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Security.Principal.WindowsIdentity.Dispose
  commentId: M:System.Security.Principal.WindowsIdentity.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 209
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Releases all resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  commentId: M:System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 210
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources. </p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  commentId: M:System.Security.Principal.WindowsIdentity.GetAnonymous
  id: GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAnonymous
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 211
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that you can use as a sentinel value in your code to represent an anonymous user. The property value does not represent the built-in anonymous identity used by the Windows operating system.</p>\n"
  syntax:
    content: public static WindowsIdentity GetAnonymous()
    content.vb: Public Shared Function GetAnonymous As WindowsIdentity
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents an anonymous user.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent
  id: GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 212
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current Windows user.</p>\n"
  syntax:
    content: public static WindowsIdentity GetCurrent()
    content.vb: Public Shared Function GetCurrent As WindowsIdentity
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents the current user.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the correct permissions. </p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  id: GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 213
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Windows identity for either the thread or the process, depending on the value of the <em>ifImpersonating</em> parameter.</p>\n"
  syntax:
    content: public static WindowsIdentity GetCurrent(bool ifImpersonating)
    content.vb: Public Shared Function GetCurrent(ifImpersonating As Boolean) As WindowsIdentity
    parameters:
    - id: ifImpersonating
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to return the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> only if the thread is currently impersonating; <strong>false</strong> to return the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref>   of the thread if it is impersonating or the <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> of the process if the thread is not currently impersonating.</p>\n"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents a Windows user.</p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  commentId: M:System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  id: GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrent
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 214
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Returns a <xref href=\"System.Security.Principal.WindowsIdentity\" data-throw-if-not-resolved=\"false\"></xref> object that represents the current Windows user, using the specified desired token access level.</p>\n"
  syntax:
    content: public static WindowsIdentity GetCurrent(TokenAccessLevels desiredAccess)
    content.vb: Public Shared Function GetCurrent(desiredAccess As TokenAccessLevels) As WindowsIdentity
    parameters:
    - id: desiredAccess
      type: System.Security.Principal.TokenAccessLevels
      description: "\n<p>A bitwise combination of the enumeration values. </p>\n"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "\n<p>An object that represents the current user.</p>\n"
  see:
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: RunImpersonated(SafeAccessTokenHandle, Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle, Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Action)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunImpersonated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 215
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Runs the specified action as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\" data-throw-if-not-resolved=\"false\"></xref>, you can use <xref href=\"System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\" data-throw-if-not-resolved=\"false\"></xref> and provide your function directly as a parameter.</p>\n"
  syntax:
    content: public static void RunImpersonated(SafeAccessTokenHandle safeAccessTokenHandle, Action action)
    content.vb: Public Shared Sub RunImpersonated(safeAccessTokenHandle As SafeAccessTokenHandle, action As Action)
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\n"
    - id: action
      type: System.Action
      description: "\n<p>The System.Action to run. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  commentId: M:System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  - vb
  name: RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated<T>(SafeAccessTokenHandle, Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated<T>(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func<T>)
  type: Method
  source:
    remote:
      path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RunImpersonated
    path: src/System.Security.Principal.Windows/ref/System.Security.Principal.Windows.cs
    startLine: 216
  assemblies:
  - System.Security.Principal.Windows
  namespace: System.Security.Principal
  summary: "\n<p>Runs the specified function as the impersonated Windows identity. Instead of using an impersonated method call and running your function in <xref href=\"System.Security.Principal.WindowsImpersonationContext\" data-throw-if-not-resolved=\"false\"></xref>, you can use <xref href=\"System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)\" data-throw-if-not-resolved=\"false\"></xref> and provide your function directly as a parameter.</p>\n"
  syntax:
    content: public static T RunImpersonated<T>(SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func)
    content.vb: Public Shared Function RunImpersonated(Of T)(safeAccessTokenHandle As SafeAccessTokenHandle, func As Func(Of T)) As T
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "\n<p>The SafeAccessTokenHandle of the impersonated Windows identity.</p>\n"
    - id: func
      type: System.Func{{T}}
      description: "\n<p>The System.Func to run.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of object used by and returned by the function.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>Returns the result of the function.</p>\n"
  nameWithType.vb: WindowsIdentity.RunImpersonated(Of T)(SafeAccessTokenHandle, Func(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Principal.WindowsIdentity.RunImpersonated(Of T)(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle, System.Func(Of T))
  name.vb: RunImpersonated(Of T)(SafeAccessTokenHandle, Func(Of T))
references:
- uid: System.Security.Principal
  commentId: N:System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  nameWithType: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Claims.ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Principal.IIdentity
  commentId: T:System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
    name: AddClaim
    nameWithType: ClaimsIdentity.AddClaim
    fullName: System.Security.Claims.ClaimsIdentity.AddClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
    name: AddClaim
    nameWithType: ClaimsIdentity.AddClaim
    fullName: System.Security.Claims.ClaimsIdentity.AddClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  nameWithType.vb: ClaimsIdentity.AddClaims(IEnumerable(Of Claim))
  fullname.vb: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: AddClaims(IEnumerable(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    name: AddClaims
    nameWithType: ClaimsIdentity.AddClaims
    fullName: System.Security.Claims.ClaimsIdentity.AddClaims
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
    name: AddClaims
    nameWithType: ClaimsIdentity.AddClaims
    fullName: System.Security.Claims.ClaimsIdentity.AddClaims
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
    name: TryRemoveClaim
    nameWithType: ClaimsIdentity.TryRemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
    name: TryRemoveClaim
    nameWithType: ClaimsIdentity.TryRemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
    name: RemoveClaim
    nameWithType: ClaimsIdentity.RemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
    name: RemoveClaim
    nameWithType: ClaimsIdentity.RemoveClaim
    fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>)
  nameWithType.vb: ClaimsIdentity.FindAll(Predicate(Of Claim))
  fullname.vb: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindAll(Predicate(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
    name: FindAll
    nameWithType: ClaimsIdentity.FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
    name: FindAll
    nameWithType: ClaimsIdentity.FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
    name: FindAll
    nameWithType: ClaimsIdentity.FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
    name: FindAll
    nameWithType: ClaimsIdentity.FindAll
    fullName: System.Security.Claims.ClaimsIdentity.FindAll
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>)
  nameWithType.vb: ClaimsIdentity.HasClaim(Predicate(Of Claim))
  fullname.vb: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: HasClaim(Predicate(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
    name: HasClaim
    nameWithType: ClaimsIdentity.HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
    name: HasClaim
    nameWithType: ClaimsIdentity.HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: HasClaim(String, String)
  nameWithType: ClaimsIdentity.HasClaim(String, String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
    name: HasClaim
    nameWithType: ClaimsIdentity.HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
    name: HasClaim
    nameWithType: ClaimsIdentity.HasClaim
    fullName: System.Security.Claims.ClaimsIdentity.HasClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>)
  nameWithType.vb: ClaimsIdentity.FindFirst(Predicate(Of Claim))
  fullname.vb: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindFirst(Predicate(Of Claim))
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
    name: FindFirst
    nameWithType: ClaimsIdentity.FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
    name: FindFirst
    nameWithType: ClaimsIdentity.FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
    name: FindFirst
    nameWithType: ClaimsIdentity.FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
    name: FindFirst
    nameWithType: ClaimsIdentity.FindFirst
    fullName: System.Security.Claims.ClaimsIdentity.FindFirst
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ClaimsIdentity.GetObjectData
    fullName: System.Security.Claims.ClaimsIdentity.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: ClaimsIdentity.GetObjectData
    fullName: System.Security.Claims.ClaimsIdentity.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
    name: CreateClaim
    nameWithType: ClaimsIdentity.CreateClaim
    fullName: System.Security.Claims.ClaimsIdentity.CreateClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: System.IO.BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
    name: CreateClaim
    nameWithType: ClaimsIdentity.CreateClaim
    fullName: System.Security.Claims.ClaimsIdentity.CreateClaim
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.BinaryReader
    name: BinaryReader
    nameWithType: BinaryReader
    fullName: System.IO.BinaryReader
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
    name: WriteTo
    nameWithType: ClaimsIdentity.WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
    name: WriteTo
    nameWithType: ClaimsIdentity.WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: true
  name: WriteTo(BinaryWriter, Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[])
  nameWithType.vb: ClaimsIdentity.WriteTo(BinaryWriter, Byte())
  fullname.vb: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
    name: WriteTo
    nameWithType: ClaimsIdentity.WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
    name: WriteTo
    nameWithType: ClaimsIdentity.WriteTo
    fullName: System.Security.Claims.ClaimsIdentity.WriteTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IO.BinaryWriter
    name: BinaryWriter
    nameWithType: BinaryWriter
    fullName: System.IO.BinaryWriter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Claims.ClaimsIdentity.Actor
  commentId: P:System.Security.Claims.ClaimsIdentity.Actor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  commentId: P:System.Security.Claims.ClaimsIdentity.BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  commentId: P:System.Security.Claims.ClaimsIdentity.CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
- uid: System.Security.Claims.ClaimsIdentity.Label
  commentId: P:System.Security.Claims.ClaimsIdentity.Label
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  commentId: P:System.Security.Claims.ClaimsIdentity.RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  commentId: P:System.Security.Claims.ClaimsIdentity.AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.Claims
  commentId: P:System.Security.Claims.ClaimsIdentity.Claims
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Security.Principal.IdentityReferenceCollection
  commentId: T:System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  nameWithType: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.Security.Principal.TokenImpersonationLevel
  commentId: T:System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: false
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  commentId: P:System.Security.Claims.ClaimsIdentity.IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Name
  commentId: P:System.Security.Claims.ClaimsIdentity.Name
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
- uid: System.Security.Principal.SecurityIdentifier
  commentId: T:System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Claims.ClaimsIdentity.Clone
  commentId: M:System.Security.Claims.ClaimsIdentity.Clone
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  spec.csharp:
  - uid: System.Security.Claims.ClaimsIdentity.Clone
    name: Clone
    nameWithType: ClaimsIdentity.Clone
    fullName: System.Security.Claims.ClaimsIdentity.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.Claims.ClaimsIdentity.Clone
    name: Clone
    nameWithType: ClaimsIdentity.Clone
    fullName: System.Security.Claims.ClaimsIdentity.Clone
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Principal.WindowsIdentity
  commentId: T:System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.TokenAccessLevels
  commentId: T:System.Security.Principal.TokenAccessLevels
  parent: System.Security.Principal
  isExternal: false
  name: TokenAccessLevels
  nameWithType: TokenAccessLevels
  fullName: System.Security.Principal.TokenAccessLevels
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
