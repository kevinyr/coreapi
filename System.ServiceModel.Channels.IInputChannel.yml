items:
- uid: System.ServiceModel.Channels.IInputChannel
  commentId: T:System.ServiceModel.Channels.IInputChannel
  id: IInputChannel
  parent: System.ServiceModel.Channels
  children:
  - System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)
  - System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)
  - System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)
  - System.ServiceModel.Channels.IInputChannel.LocalAddress
  - System.ServiceModel.Channels.IInputChannel.Receive
  - System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)
  - System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)
  - System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)
  langs:
  - csharp
  - vb
  name: IInputChannel
  fullName: System.ServiceModel.Channels.IInputChannel
  type: Interface
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IInputChannel
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 11
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Defines the interface that a channel must implement to receive a message. </p>\n"
  syntax:
    content: 'public interface IInputChannel : IChannel, ICommunicationObject'
    content.vb: >-
      Public Interface IInputChannel
          Inherits IChannel
  inheritedMembers:
  - System.ServiceModel.Channels.IChannel.GetProperty``1
  - System.ServiceModel.ICommunicationObject.State
  - System.ServiceModel.ICommunicationObject.Closed
  - System.ServiceModel.ICommunicationObject.Closing
  - System.ServiceModel.ICommunicationObject.Faulted
  - System.ServiceModel.ICommunicationObject.Opened
  - System.ServiceModel.ICommunicationObject.Opening
  - System.ServiceModel.ICommunicationObject.Abort
  - System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)
  - System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)
  - System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  - System.ServiceModel.ICommunicationObject.Close
  - System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)
  - System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)
  - System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)
  - System.ServiceModel.ICommunicationObject.Open
  - System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  nameWithType: IInputChannel
- uid: System.ServiceModel.Channels.IInputChannel.LocalAddress
  commentId: P:System.ServiceModel.Channels.IInputChannel.LocalAddress
  id: LocalAddress
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: LocalAddress
  fullName: System.ServiceModel.Channels.IInputChannel.LocalAddress
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: LocalAddress
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 13
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Gets the address on which the input channel receives messages. </p>\n"
  syntax:
    content: EndpointAddress LocalAddress { get; }
    content.vb: ReadOnly Property LocalAddress As EndpointAddress
    parameters: []
    return:
      type: System.ServiceModel.EndpointAddress
      description: "\n<p>The <xref href=\"System.ServiceModel.EndpointAddress\" data-throw-if-not-resolved=\"false\"></xref> on which the input channel receives messages. </p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  nameWithType: IInputChannel.LocalAddress
- uid: System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback,System.Object)
  id: BeginReceive(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: BeginReceive(AsyncCallback, Object)
  fullName: System.ServiceModel.Channels.IInputChannel.BeginReceive(System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: BeginReceive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 17
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Begins an asynchronous operation to receive a message that has a state object associated with it. </p>\n"
  syntax:
    content: IAsyncResult BeginReceive(AsyncCallback callback, object state)
    content.vb: Function BeginReceive(callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that receives the notification of the asynchronous operation completion.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous message reception. </p>\n"
  nameWithType: IInputChannel.BeginReceive(AsyncCallback, Object)
- uid: System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: BeginReceive(TimeSpan, AsyncCallback, Object)
  fullName: System.ServiceModel.Channels.IInputChannel.BeginReceive(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: BeginReceive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 18
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </p>\n"
  syntax:
    content: IAsyncResult BeginReceive(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Function BeginReceive(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that specifies the interval of time to wait for a message to become available.</p>\n"
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that receives the notification of the asynchronous operation completion.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous receive operation.</p>\n"
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The specified <em>timeout</em> is exceeded before the operation is completed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than zero.</p>\n"
  nameWithType: IInputChannel.BeginReceive(TimeSpan, AsyncCallback, Object)
- uid: System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: BeginTryReceive(TimeSpan, AsyncCallback, Object)
  fullName: System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: BeginTryReceive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 22
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Begins an asynchronous operation to receive a message that has a specified time out and state object associated with it. </p>\n"
  syntax:
    content: IAsyncResult BeginTryReceive(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Function BeginTryReceive(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that specifies the interval of time to wait for a message to become available.</p>\n"
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that receives the notification of the asynchronous operation completion.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous receive operation.</p>\n"
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The specified <em>timeout</em> is exceeded before the operation is completed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than zero.</p>\n"
  nameWithType: IInputChannel.BeginTryReceive(TimeSpan, AsyncCallback, Object)
- uid: System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)
  commentId: M:System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)
  id: BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: BeginWaitForMessage(TimeSpan, AsyncCallback, Object)
  fullName: System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan, System.AsyncCallback, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: BeginWaitForMessage
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 26
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Begins an asynchronous wait-for-a-message-to-arrive operation that has a specified time out and state object associated with it. </p>\n"
  syntax:
    content: IAsyncResult BeginWaitForMessage(TimeSpan timeout, AsyncCallback callback, object state)
    content.vb: Function BeginWaitForMessage(timeout As TimeSpan, callback As AsyncCallback, state As Object) As IAsyncResult
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that specifies the interval of time to wait for a message to become available.</p>\n"
    - id: callback
      type: System.AsyncCallback
      description: "\n<p>The <xref href=\"System.AsyncCallback\" data-throw-if-not-resolved=\"false\"></xref> delegate that receives the notification of the asynchronous operation completion.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>An object, specified by the application, that contains state information associated with the asynchronous operation.</p>\n"
    return:
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that references the asynchronous operation to wait for a message to arrive.</p>\n"
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The specified <em>timeout</em> is exceeded before the operation is completed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than zero.</p>\n"
  nameWithType: IInputChannel.BeginWaitForMessage(TimeSpan, AsyncCallback, Object)
- uid: System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)
  commentId: M:System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)
  id: EndReceive(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: EndReceive(IAsyncResult)
  fullName: System.ServiceModel.Channels.IInputChannel.EndReceive(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: EndReceive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 19
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Completes an asynchronous operation to receive a message. </p>\n"
  syntax:
    content: Message EndReceive(IAsyncResult result)
    content.vb: Function EndReceive(result As IAsyncResult) As Message
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> returned by a call to one of the <xref href=\"System.ServiceModel.Channels.IInputChannel.BeginReceive\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    return:
      type: System.ServiceModel.Channels.Message
      description: "\n<p>The <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref> received. </p>\n"
  nameWithType: IInputChannel.EndReceive(IAsyncResult)
- uid: System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)
  commentId: M:System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)
  id: EndTryReceive(System.IAsyncResult,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: EndTryReceive(IAsyncResult, out Message)
  fullName: System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult, out System.ServiceModel.Channels.Message)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: EndTryReceive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 23
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Completes the specified asynchronous operation to receive a message.</p>\n"
  syntax:
    content: bool EndTryReceive(IAsyncResult result, out Message message)
    content.vb: Function EndTryReceive(result As IAsyncResult, ByRef message As Message) As Boolean
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> returned by a call to the <xref href=\"System.ServiceModel.Channels.IInputChannel.BeginTryReceive(System.TimeSpan,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "\n<p>The <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref> received. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a message is received before the specified interval of time elapses; otherwise <strong>false</strong>.</p>\n"
  fullName.vb: System.ServiceModel.Channels.IInputChannel.EndTryReceive(System.IAsyncResult, ByRef System.ServiceModel.Channels.Message)
  name.vb: EndTryReceive(IAsyncResult, ByRef Message)
  nameWithType: IInputChannel.EndTryReceive(IAsyncResult, out Message)
  nameWithType.vb: IInputChannel.EndTryReceive(IAsyncResult, ByRef Message)
- uid: System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)
  commentId: M:System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)
  id: EndWaitForMessage(System.IAsyncResult)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: EndWaitForMessage(IAsyncResult)
  fullName: System.ServiceModel.Channels.IInputChannel.EndWaitForMessage(System.IAsyncResult)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: EndWaitForMessage
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 27
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Completes the specified asynchronous wait-for-a-message operation.</p>\n"
  syntax:
    content: bool EndWaitForMessage(IAsyncResult result)
    content.vb: Function EndWaitForMessage(result As IAsyncResult) As Boolean
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> that identifies the <xref href=\"System.ServiceModel.Channels.IInputChannel.BeginWaitForMessage(System.TimeSpan,System.AsyncCallback,System.Object)\" data-throw-if-not-resolved=\"false\"></xref> operation to finish, and from which to retrieve an end result.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a message has arrived before the <em>timeout</em> has been exceeded; otherwise <strong>false</strong>.</p>\n"
  nameWithType: IInputChannel.EndWaitForMessage(IAsyncResult)
- uid: System.ServiceModel.Channels.IInputChannel.Receive
  commentId: M:System.ServiceModel.Channels.IInputChannel.Receive
  id: Receive
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: Receive()
  fullName: System.ServiceModel.Channels.IInputChannel.Receive()
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Receive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 15
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Returns the message received, if one is available. If a message is not available, blocks for a default interval of time.</p>\n"
  syntax:
    content: Message Receive()
    content.vb: Function Receive As Message
    return:
      type: System.ServiceModel.Channels.Message
      description: "\n<p>The <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref> received. </p>\n"
  nameWithType: IInputChannel.Receive()
- uid: System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)
  commentId: M:System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)
  id: Receive(System.TimeSpan)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: Receive(TimeSpan)
  fullName: System.ServiceModel.Channels.IInputChannel.Receive(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Receive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 16
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Returns the message received, if one is available. If a message is not available, blocks for a specified interval of time.</p>\n"
  syntax:
    content: Message Receive(TimeSpan timeout)
    content.vb: Function Receive(timeout As TimeSpan) As Message
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that specifies how long the receive operation has to complete before timing out and throwing a <xref href=\"System.TimeoutException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.ServiceModel.Channels.Message
      description: "\n<p>The <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref> received. </p>\n"
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The specified <em>timeout</em> is exceeded before the operation is completed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than zero.</p>\n"
  nameWithType: IInputChannel.Receive(TimeSpan)
- uid: System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)
  commentId: M:System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)
  id: TryReceive(System.TimeSpan,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: TryReceive(TimeSpan, out Message)
  fullName: System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan, out System.ServiceModel.Channels.Message)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: TryReceive
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 21
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Tries to receive a message within a specified interval of time. </p>\n"
  syntax:
    content: bool TryReceive(TimeSpan timeout, out Message message)
    content.vb: Function TryReceive(timeout As TimeSpan, ByRef message As Message) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The <xref href=\"System.IAsyncResult\" data-throw-if-not-resolved=\"false\"></xref> returned by a call to one of the <xref href=\"System.ServiceModel.Channels.IInputChannel.BeginReceive\" data-throw-if-not-resolved=\"false\"></xref> methods.</p>\n"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "\n<p>The <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref> received. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a message is received before the <em>timeout</em> has been exceeded; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The specified <em>timeout</em> is exceeded before the operation is completed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than zero.</p>\n"
  fullName.vb: System.ServiceModel.Channels.IInputChannel.TryReceive(System.TimeSpan, ByRef System.ServiceModel.Channels.Message)
  name.vb: TryReceive(TimeSpan, ByRef Message)
  nameWithType: IInputChannel.TryReceive(TimeSpan, out Message)
  nameWithType.vb: IInputChannel.TryReceive(TimeSpan, ByRef Message)
- uid: System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)
  commentId: M:System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)
  id: WaitForMessage(System.TimeSpan)
  parent: System.ServiceModel.Channels.IInputChannel
  langs:
  - csharp
  - vb
  name: WaitForMessage(TimeSpan)
  fullName: System.ServiceModel.Channels.IInputChannel.WaitForMessage(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: WaitForMessage
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Channels/IInputChannel.cs
    startLine: 25
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Channels
  summary: "\n<p>Returns a value that indicates whether a message has arrived within a specified interval of time.</p>\n"
  syntax:
    content: bool WaitForMessage(TimeSpan timeout)
    content.vb: Function WaitForMessage(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> specifies the maximum interval of time to wait for a message to arrive before timing out.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a message has arrived before the <em>timeout</em> has been exceeded; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "\n<p>The specified <em>timeout</em> is exceeded before the operation is completed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The timeout specified is less than zero.</p>\n"
  nameWithType: IInputChannel.WaitForMessage(TimeSpan)
references:
- uid: System.ServiceModel.Channels
  isExternal: false
  name: System.ServiceModel.Channels
  fullName: System.ServiceModel.Channels
  nameWithType: System.ServiceModel.Channels
  commentId: N:System.ServiceModel.Channels
- uid: System.ServiceModel.Channels.IChannel.GetProperty``1
  parent: System.ServiceModel.Channels.IChannel
  definition: System.ServiceModel.Channels.IChannel.GetProperty``1
  isExternal: false
  name: GetProperty<T>()
  fullName: System.ServiceModel.Channels.IChannel.GetProperty<T>()
  fullname.vb: System.ServiceModel.Channels.IChannel.GetProperty(Of T)()
  name.vb: GetProperty(Of T)()
  spec.csharp:
  - uid: System.ServiceModel.Channels.IChannel.GetProperty``1
    name: GetProperty<T>
    fullName: System.ServiceModel.Channels.IChannel.GetProperty<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.Channels.IChannel.GetProperty``1
    name: GetProperty(Of T)
    fullName: System.ServiceModel.Channels.IChannel.GetProperty(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IChannel.GetProperty<T>()
  nameWithType.vb: IChannel.GetProperty(Of T)()
  commentId: M:System.ServiceModel.Channels.IChannel.GetProperty``1
- uid: System.ServiceModel.ICommunicationObject.State
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: State
  fullName: System.ServiceModel.ICommunicationObject.State
  nameWithType: ICommunicationObject.State
  commentId: P:System.ServiceModel.ICommunicationObject.State
- uid: System.ServiceModel.ICommunicationObject.Closed
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Closed
  fullName: System.ServiceModel.ICommunicationObject.Closed
  nameWithType: ICommunicationObject.Closed
  commentId: E:System.ServiceModel.ICommunicationObject.Closed
- uid: System.ServiceModel.ICommunicationObject.Closing
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Closing
  fullName: System.ServiceModel.ICommunicationObject.Closing
  nameWithType: ICommunicationObject.Closing
  commentId: E:System.ServiceModel.ICommunicationObject.Closing
- uid: System.ServiceModel.ICommunicationObject.Faulted
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Faulted
  fullName: System.ServiceModel.ICommunicationObject.Faulted
  nameWithType: ICommunicationObject.Faulted
  commentId: E:System.ServiceModel.ICommunicationObject.Faulted
- uid: System.ServiceModel.ICommunicationObject.Opened
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Opened
  fullName: System.ServiceModel.ICommunicationObject.Opened
  nameWithType: ICommunicationObject.Opened
  commentId: E:System.ServiceModel.ICommunicationObject.Opened
- uid: System.ServiceModel.ICommunicationObject.Opening
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Opening
  fullName: System.ServiceModel.ICommunicationObject.Opening
  nameWithType: ICommunicationObject.Opening
  commentId: E:System.ServiceModel.ICommunicationObject.Opening
- uid: System.ServiceModel.ICommunicationObject.Abort
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Abort()
  fullName: System.ServiceModel.ICommunicationObject.Abort()
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.Abort
    name: Abort
    fullName: System.ServiceModel.ICommunicationObject.Abort
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.Abort
    name: Abort
    fullName: System.ServiceModel.ICommunicationObject.Abort
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.Abort()
  commentId: M:System.ServiceModel.ICommunicationObject.Abort
- uid: System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: BeginClose(AsyncCallback, Object)
  fullName: System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)
    name: BeginClose
    fullName: System.ServiceModel.ICommunicationObject.BeginClose
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)
    name: BeginClose
    fullName: System.ServiceModel.ICommunicationObject.BeginClose
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.BeginClose(AsyncCallback, Object)
  commentId: M:System.ServiceModel.ICommunicationObject.BeginClose(System.AsyncCallback,System.Object)
- uid: System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: BeginClose(TimeSpan, AsyncCallback, Object)
  fullName: System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: BeginClose
    fullName: System.ServiceModel.ICommunicationObject.BeginClose
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
    name: BeginClose
    fullName: System.ServiceModel.ICommunicationObject.BeginClose
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.BeginClose(TimeSpan, AsyncCallback, Object)
  commentId: M:System.ServiceModel.ICommunicationObject.BeginClose(System.TimeSpan,System.AsyncCallback,System.Object)
- uid: System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: BeginOpen(AsyncCallback, Object)
  fullName: System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)
    name: BeginOpen
    fullName: System.ServiceModel.ICommunicationObject.BeginOpen
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)
    name: BeginOpen
    fullName: System.ServiceModel.ICommunicationObject.BeginOpen
  - name: (
    fullName: (
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.BeginOpen(AsyncCallback, Object)
  commentId: M:System.ServiceModel.ICommunicationObject.BeginOpen(System.AsyncCallback,System.Object)
- uid: System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: BeginOpen(TimeSpan, AsyncCallback, Object)
  fullName: System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan, System.AsyncCallback, System.Object)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: BeginOpen
    fullName: System.ServiceModel.ICommunicationObject.BeginOpen
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
    name: BeginOpen
    fullName: System.ServiceModel.ICommunicationObject.BeginOpen
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.AsyncCallback
    name: AsyncCallback
    fullName: System.AsyncCallback
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.BeginOpen(TimeSpan, AsyncCallback, Object)
  commentId: M:System.ServiceModel.ICommunicationObject.BeginOpen(System.TimeSpan,System.AsyncCallback,System.Object)
- uid: System.ServiceModel.ICommunicationObject.Close
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Close()
  fullName: System.ServiceModel.ICommunicationObject.Close()
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.Close
    name: Close
    fullName: System.ServiceModel.ICommunicationObject.Close
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.Close
    name: Close
    fullName: System.ServiceModel.ICommunicationObject.Close
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.Close()
  commentId: M:System.ServiceModel.ICommunicationObject.Close
- uid: System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: Close(TimeSpan)
  fullName: System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)
    name: Close
    fullName: System.ServiceModel.ICommunicationObject.Close
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)
    name: Close
    fullName: System.ServiceModel.ICommunicationObject.Close
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.Close(TimeSpan)
  commentId: M:System.ServiceModel.ICommunicationObject.Close(System.TimeSpan)
- uid: System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: EndClose(IAsyncResult)
  fullName: System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)
    name: EndClose
    fullName: System.ServiceModel.ICommunicationObject.EndClose
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)
    name: EndClose
    fullName: System.ServiceModel.ICommunicationObject.EndClose
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.EndClose(IAsyncResult)
  commentId: M:System.ServiceModel.ICommunicationObject.EndClose(System.IAsyncResult)
- uid: System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: EndOpen(IAsyncResult)
  fullName: System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)
    name: EndOpen
    fullName: System.ServiceModel.ICommunicationObject.EndOpen
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)
    name: EndOpen
    fullName: System.ServiceModel.ICommunicationObject.EndOpen
  - name: (
    fullName: (
  - uid: System.IAsyncResult
    name: IAsyncResult
    fullName: System.IAsyncResult
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.EndOpen(IAsyncResult)
  commentId: M:System.ServiceModel.ICommunicationObject.EndOpen(System.IAsyncResult)
- uid: System.ServiceModel.ICommunicationObject.Open
  parent: System.ServiceModel.ICommunicationObject
  isExternal: false
  name: Open()
  fullName: System.ServiceModel.ICommunicationObject.Open()
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.Open
    name: Open
    fullName: System.ServiceModel.ICommunicationObject.Open
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.Open
    name: Open
    fullName: System.ServiceModel.ICommunicationObject.Open
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.Open()
  commentId: M:System.ServiceModel.ICommunicationObject.Open
- uid: System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)
  parent: System.ServiceModel.ICommunicationObject
  isExternal: true
  name: Open(TimeSpan)
  fullName: System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)
  spec.csharp:
  - uid: System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)
    name: Open
    fullName: System.ServiceModel.ICommunicationObject.Open
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)
    name: Open
    fullName: System.ServiceModel.ICommunicationObject.Open
  - name: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICommunicationObject.Open(TimeSpan)
  commentId: M:System.ServiceModel.ICommunicationObject.Open(System.TimeSpan)
- uid: System.ServiceModel.Channels.IChannel
  parent: System.ServiceModel.Channels
  isExternal: false
  name: IChannel
  fullName: System.ServiceModel.Channels.IChannel
  nameWithType: IChannel
  commentId: T:System.ServiceModel.Channels.IChannel
- uid: System.ServiceModel.ICommunicationObject
  parent: System.ServiceModel
  isExternal: false
  name: ICommunicationObject
  fullName: System.ServiceModel.ICommunicationObject
  nameWithType: ICommunicationObject
  commentId: T:System.ServiceModel.ICommunicationObject
- uid: System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  fullName: System.ServiceModel
  nameWithType: System.ServiceModel
  commentId: N:System.ServiceModel
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: false
  name: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
  nameWithType: EndpointAddress
  commentId: T:System.ServiceModel.EndpointAddress
- uid: System.AsyncCallback
  parent: System
  isExternal: false
  name: AsyncCallback
  fullName: System.AsyncCallback
  nameWithType: AsyncCallback
  commentId: T:System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IAsyncResult
  parent: System
  isExternal: false
  name: IAsyncResult
  fullName: System.IAsyncResult
  nameWithType: IAsyncResult
  commentId: T:System.IAsyncResult
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
  nameWithType: TimeSpan
  commentId: T:System.TimeSpan
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: false
  name: Message
  fullName: System.ServiceModel.Channels.Message
  nameWithType: Message
  commentId: T:System.ServiceModel.Channels.Message
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.TimeoutException
  parent: System
  isExternal: false
  name: TimeoutException
  fullName: System.TimeoutException
  nameWithType: TimeoutException
  commentId: T:System.TimeoutException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
