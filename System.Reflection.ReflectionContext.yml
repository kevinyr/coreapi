### YamlMime:ManagedReference
items:
- uid: System.Reflection.ReflectionContext
  commentId: T:System.Reflection.ReflectionContext
  id: ReflectionContext
  parent: System.Reflection
  children:
  - System.Reflection.ReflectionContext.#ctor
  - System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  - System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  langs:
  - csharp
  - vb
  name: ReflectionContext
  nameWithType: ReflectionContext
  fullName: System.Reflection.ReflectionContext
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReflectionContext
    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
    startLine: 19
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents a context that can provide reflection objects.</p>\n"
  syntax:
    content: public abstract class ReflectionContext
    content.vb: Public MustInherit Class ReflectionContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.ReflectionContext.#ctor
  commentId: M:System.Reflection.ReflectionContext.#ctor
  id: '#ctor'
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: ReflectionContext()
  nameWithType: ReflectionContext.ReflectionContext()
  fullName: System.Reflection.ReflectionContext.ReflectionContext()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
    startLine: 21
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.ReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected ReflectionContext()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  commentId: M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  id: GetTypeForObject(System.Object)
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: GetTypeForObject(Object)
  nameWithType: ReflectionContext.GetTypeForObject(Object)
  fullName: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTypeForObject
    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the representation of the type of the specified object in this reflection context.</p>\n"
  syntax:
    content: public virtual TypeInfo GetTypeForObject(object value)
    content.vb: Public Overridable Function GetTypeForObject(value As Object) As TypeInfo
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to represent.</p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>An object that represents the type of the specified object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  commentId: M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  id: MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: MapAssembly(Assembly)
  nameWithType: ReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MapAssembly
    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
    startLine: 23
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context.</p>\n"
  syntax:
    content: public abstract Assembly MapAssembly(Assembly assembly)
    content.vb: Public MustOverride Function MapAssembly(assembly As Assembly) As Assembly
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "\n<p>The external representation of the assembly to represent in this context.</p>\n"
    return:
      type: System.Reflection.Assembly
      description: "\n<p>The representation of the assembly in this reflection context.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  id: MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.ReflectionContext
  langs:
  - csharp
  - vb
  name: MapType(TypeInfo)
  nameWithType: ReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MapType
    path: src/mscorlib/src/System/Reflection/ReflectionContext.cs
    startLine: 25
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the representation, in this reflection context, of a type represented by an object from another reflection context.</p>\n"
  syntax:
    content: public abstract TypeInfo MapType(TypeInfo type)
    content.vb: Public MustOverride Function MapType(type As TypeInfo) As TypeInfo
    parameters:
    - id: type
      type: System.Reflection.TypeInfo
      description: "\n<p>The external representation of the type to represent in this context.</p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>The representation of the type in this reflection context..</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
