### YamlMime:ManagedReference
items:
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  id: FileInfo
  parent: System.IO
  children:
  - System.IO.FileInfo.#ctor(System.String)
  - System.IO.FileInfo.AppendText
  - System.IO.FileInfo.CopyTo(System.String)
  - System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  - System.IO.FileInfo.Create
  - System.IO.FileInfo.CreateText
  - System.IO.FileInfo.Delete
  - System.IO.FileInfo.Directory
  - System.IO.FileInfo.DirectoryName
  - System.IO.FileInfo.Exists
  - System.IO.FileInfo.IsReadOnly
  - System.IO.FileInfo.Length
  - System.IO.FileInfo.MoveTo(System.String)
  - System.IO.FileInfo.Name
  - System.IO.FileInfo.Open(System.IO.FileMode)
  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  - System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.FileInfo.OpenRead
  - System.IO.FileInfo.OpenText
  - System.IO.FileInfo.OpenWrite
  - System.IO.FileInfo.ToString
  langs:
  - csharp
  - vb
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
  type: Class
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileInfo
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 16
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Provides properties and instance methods for the creation, copying, deletion, moving, and opening of files, and aids in the creation of <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> objects. This class cannot be inherited.</p>\n"
  syntax:
    content: 'public sealed class FileInfo : FileSystemInfo'
    content.vb: >-
      Public NotInheritable Class FileInfo
          Inherits FileSystemInfo
  seealso:
  - linkId: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - linkId: System.IO.DriveInfo
    commentId: T:System.IO.DriveInfo
  inheritance:
  - System.Object
  - System.IO.FileSystemInfo
  inheritedMembers:
  - System.IO.FileSystemInfo.FullPath
  - System.IO.FileSystemInfo.OriginalPath
  - System.IO.FileSystemInfo.Attributes
  - System.IO.FileSystemInfo.CreationTime
  - System.IO.FileSystemInfo.CreationTimeUtc
  - System.IO.FileSystemInfo.Extension
  - System.IO.FileSystemInfo.FullName
  - System.IO.FileSystemInfo.LastAccessTime
  - System.IO.FileSystemInfo.LastAccessTimeUtc
  - System.IO.FileSystemInfo.LastWriteTime
  - System.IO.FileSystemInfo.LastWriteTimeUtc
  - System.IO.FileSystemInfo.Refresh
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.IO.FileInfo.#ctor(System.String)
  commentId: M:System.IO.FileInfo.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: FileInfo(String)
  nameWithType: FileInfo.FileInfo(String)
  fullName: System.IO.FileInfo.FileInfo(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 23
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> class, which acts as a wrapper for a file path.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileInfo(string fileName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(fileName As String)
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The fully qualified name of the new file, or the relative file name. Do not end the path with the directory separator character.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>fileName</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The file name is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>Access to <em>fileName</em> is denied. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>fileName</em> contains a colon (:) in the middle of the string. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Directory
  commentId: P:System.IO.FileInfo.Directory
  id: Directory
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Directory
  nameWithType: FileInfo.Directory
  fullName: System.IO.FileInfo.Directory
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Directory
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 90
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets an instance of the parent directory.</p>\n"
  syntax:
    content: public DirectoryInfo Directory { get; }
    content.vb: Public ReadOnly Property Directory As DirectoryInfo
    parameters: []
    return:
      type: System.IO.DirectoryInfo
      description: "\n<p>A <xref href=\"System.IO.DirectoryInfo\" data-throw-if-not-resolved=\"false\"></xref> object representing the parent directory of this file.</p>\n"
  exceptions:
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileInfo.DirectoryName
  commentId: P:System.IO.FileInfo.DirectoryName
  id: DirectoryName
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: DirectoryName
  nameWithType: FileInfo.DirectoryName
  fullName: System.IO.FileInfo.DirectoryName
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DirectoryName
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 80
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a string representing the directory's full path.</p>\n"
  syntax:
    content: >-
      public string DirectoryName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property DirectoryName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string representing the directory's full path.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<strong>null</strong> was passed in for the directory name. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The fully qualified path is 260 or more characters.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileInfo.Exists
  commentId: P:System.IO.FileInfo.Exists
  id: Exists
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Exists
  nameWithType: FileInfo.Exists
  fullName: System.IO.FileInfo.Exists
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exists
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 205
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether a file exists.</p>\n"
  syntax:
    content: >-
      public override bool Exists

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overrides ReadOnly Property Exists As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the file exists; <strong>false</strong> if the file does not exist or if the file is a directory.</p>\n"
  overridden: System.IO.FileSystemInfo.Exists
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileInfo.IsReadOnly
  commentId: P:System.IO.FileInfo.IsReadOnly
  id: IsReadOnly
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: FileInfo.IsReadOnly
  fullName: System.IO.FileInfo.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 101
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets or sets a value that determines if the current file is read only.</p>\n"
  syntax:
    content: public bool IsReadOnly { get; set; }
    content.vb: Public Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current file is read only; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file described by the current <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object could not be found.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurred while opening the file.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>This operation is not supported on the current platform.</p>\n<p>-or- </p>\n<p>The caller does not have the required permission.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The user does not have write permission, but attempted to set this property to <strong>false</strong>.</p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Length
  commentId: P:System.IO.FileInfo.Length
  id: Length
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: FileInfo.Length
  fullName: System.IO.FileInfo.Length
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 66
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the size, in bytes, of the current file.</p>\n"
  syntax:
    content: >-
      public long Length

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property Length As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The size of the current file in bytes.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>\n<xref href=\"System.IO.FileSystemInfo.Refresh\" data-throw-if-not-resolved=\"false\"></xref> cannot update the state of the file or directory. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file does not exist.</p>\n<p>-or- </p>\n<p>The <strong>Length</strong> property is called for a directory. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.IO.FileInfo.Name
  commentId: P:System.IO.FileInfo.Name
  id: Name
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: FileInfo.Name
  fullName: System.IO.FileInfo.Name
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 60
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Gets the name of the file.</p>\n"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the file.</p>\n"
  overridden: System.IO.FileSystemInfo.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.IO.FileInfo.AppendText
  commentId: M:System.IO.FileInfo.AppendText
  id: AppendText
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: AppendText()
  nameWithType: FileInfo.AppendText()
  fullName: System.IO.FileInfo.AppendText()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendText
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 129
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that appends text to the file represented by this instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public StreamWriter AppendText()
    content.vb: Public Function AppendText As StreamWriter
    return:
      type: System.IO.StreamWriter
      description: "\n<p>A new <strong>StreamWriter</strong>.</p>\n"
  seealso:
  - linkId: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.CopyTo(System.String)
  commentId: M:System.IO.FileInfo.CopyTo(System.String)
  id: CopyTo(System.String)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: CopyTo(String)
  nameWithType: FileInfo.CopyTo(String)
  fullName: System.IO.FileInfo.CopyTo(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 145
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Copies an existing file to a new file, disallowing the overwriting of an existing file.</p>\n"
  syntax:
    content: public FileInfo CopyTo(string destFileName)
    content.vb: Public Function CopyTo(destFileName As String) As FileInfo
    parameters:
    - id: destFileName
      type: System.String
      description: "\n<p>The name of the new file to copy to. </p>\n"
    return:
      type: System.IO.FileInfo
      description: "\n<p>A new file with a fully qualified path.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurs, or the destination file already exists. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>A directory path is passed in, or the file is being moved to a different drive. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destFileName</em> contains a colon (:) within the string but does not specify the volume. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  commentId: M:System.IO.FileInfo.CopyTo(System.String,System.Boolean)
  id: CopyTo(System.String,System.Boolean)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: CopyTo(String, Boolean)
  nameWithType: FileInfo.CopyTo(String, Boolean)
  fullName: System.IO.FileInfo.CopyTo(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 167
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Copies an existing file to a new file, allowing the overwriting of an existing file.</p>\n"
  syntax:
    content: public FileInfo CopyTo(string destFileName, bool overwrite)
    content.vb: Public Function CopyTo(destFileName As String, overwrite As Boolean) As FileInfo
    parameters:
    - id: destFileName
      type: System.String
      description: "\n<p>The name of the new file to copy to. </p>\n"
    - id: overwrite
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to allow an existing file to be overwritten; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.IO.FileInfo
      description: "\n<p>A new file, or an overwrite of an existing file if <em>overwrite</em> is <strong>true</strong>. If the file exists and <em>overwrite</em> is <strong>false</strong>, an <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref> is thrown.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An error occurs, or the destination file already exists and <em>overwrite</em> is <strong>false</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The directory specified in <em>destFileName</em> does not exist.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>A directory path is passed in, or the file is being moved to a different drive. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destFileName</em> contains a colon (:) in the middle of the string. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Create
  commentId: M:System.IO.FileInfo.Create
  id: Create
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: FileInfo.Create()
  fullName: System.IO.FileInfo.Create()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 179
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a file.</p>\n"
  syntax:
    content: public FileStream Create()
    content.vb: Public Function Create As FileStream
    return:
      type: System.IO.FileStream
      description: "\n<p>A new file.</p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.CreateText
  commentId: M:System.IO.FileInfo.CreateText
  id: CreateText
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: CreateText()
  nameWithType: FileInfo.CreateText()
  fullName: System.IO.FileInfo.CreateText()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateText
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 123
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that writes a new text file.</p>\n"
  syntax:
    content: public StreamWriter CreateText()
    content.vb: Public Function CreateText As StreamWriter
    return:
      type: System.IO.StreamWriter
      description: "\n<p>A new <strong>StreamWriter</strong>.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The file name is a directory. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The disk is read-only. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  seealso:
  - linkId: System.IO.StreamWriter
    commentId: T:System.IO.StreamWriter
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Delete
  commentId: M:System.IO.FileInfo.Delete
  id: Delete
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Delete()
  nameWithType: FileInfo.Delete()
  fullName: System.IO.FileInfo.Delete()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Delete
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 194
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Permanently deletes a file.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override void Delete()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Sub Delete
  overridden: System.IO.FileSystemInfo.Delete
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The target file is open or memory-mapped on a computer running Microsoft Windows NT.</p>\n<p>-or-</p>\n<p>There is an open handle on the file, and the operating system is Windows XP or earlier. This open handle can result from enumerating directories and files. For more information, see How to: Enumerate Directories and Files. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The path is a directory. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.IO.FileInfo.MoveTo(System.String)
  commentId: M:System.IO.FileInfo.MoveTo(System.String)
  id: MoveTo(System.String)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: MoveTo(String)
  nameWithType: FileInfo.MoveTo(String)
  fullName: System.IO.FileInfo.MoveTo(System.String)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveTo
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 260
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Moves a specified file to a new location, providing the option to specify a new file name.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void MoveTo(string destFileName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub MoveTo(destFileName As String)
    parameters:
    - id: destFileName
      type: System.String
      description: "\n<p>The path to move the file to, which can specify a different file name. </p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs, such as the destination file already exists or the destination device is not ready. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>destFileName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>destFileName</em> is empty, contains only white spaces, or contains invalid characters. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>destFileName</em> is read-only or is a directory. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>destFileName</em> contains a colon (:) in the middle of the string. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Open(System.IO.FileMode)
  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode)
  id: Open(System.IO.FileMode)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Open(FileMode)
  nameWithType: FileInfo.Open(FileMode)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 222
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file in the specified mode.</p>\n"
  syntax:
    content: public FileStream Open(FileMode mode)
    content.vb: Public Function Open(mode As FileMode) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>A <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> constant specifying the mode (for example, <strong>Open</strong> or <strong>Append</strong>) in which to open the file. </p>\n"
    return:
      type: System.IO.FileStream
      description: "\n<p>A file opened in the specified mode, with read/write access and unshared.</p>\n"
  exceptions:
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The file is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Open(FileMode, FileAccess)
  nameWithType: FileInfo.Open(FileMode, FileAccess)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 227
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file in the specified mode with read, write, or read/write access.</p>\n"
  syntax:
    content: public FileStream Open(FileMode mode, FileAccess access)
    content.vb: Public Function Open(mode As FileMode, access As FileAccess) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>A <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> constant specifying the mode (for example, <strong>Open</strong> or <strong>Append</strong>) in which to open the file. </p>\n"
    - id: access
      type: System.IO.FileAccess
      description: "\n<p>A <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> constant specifying whether to open the file with <strong>Read</strong>, <strong>Write</strong>, or <strong>ReadWrite</strong> file access. </p>\n"
    return:
      type: System.IO.FileStream
      description: "\n<p>A <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object opened in the specified mode and access, and unshared.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  commentId: M:System.IO.FileInfo.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: Open(FileMode, FileAccess, FileShare)
  nameWithType: FileInfo.Open(FileMode, FileAccess, FileShare)
  fullName: System.IO.FileInfo.Open(System.IO.FileMode, System.IO.FileAccess, System.IO.FileShare)
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 232
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Opens a file in the specified mode with read, write, or read/write access and the specified sharing option.</p>\n"
  syntax:
    content: public FileStream Open(FileMode mode, FileAccess access, FileShare share)
    content.vb: Public Function Open(mode As FileMode, access As FileAccess, share As FileShare) As FileStream
    parameters:
    - id: mode
      type: System.IO.FileMode
      description: "\n<p>A <xref href=\"System.IO.FileMode\" data-throw-if-not-resolved=\"false\"></xref> constant specifying the mode (for example, <strong>Open</strong> or <strong>Append</strong>) in which to open the file. </p>\n"
    - id: access
      type: System.IO.FileAccess
      description: "\n<p>A <xref href=\"System.IO.FileAccess\" data-throw-if-not-resolved=\"false\"></xref> constant specifying whether to open the file with <strong>Read</strong>, <strong>Write</strong>, or <strong>ReadWrite</strong> file access. </p>\n"
    - id: share
      type: System.IO.FileShare
      description: "\n<p>A <xref href=\"System.IO.FileShare\" data-throw-if-not-resolved=\"false\"></xref> constant specifying the type of access other <strong>FileStream</strong> objects have to this file. </p>\n"
    return:
      type: System.IO.FileStream
      description: "\n<p>A <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object opened with the specified mode, access, and sharing options.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.OpenRead
  commentId: M:System.IO.FileInfo.OpenRead
  id: OpenRead
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: OpenRead()
  nameWithType: FileInfo.OpenRead()
  fullName: System.IO.FileInfo.OpenRead()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenRead
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 238
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a read-only <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public FileStream OpenRead()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function OpenRead As FileStream
    return:
      type: System.IO.FileStream
      description: "\n<p>A new read-only <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The file is already open. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.OpenText
  commentId: M:System.IO.FileInfo.OpenText
  id: OpenText
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: OpenText()
  nameWithType: FileInfo.OpenText()
  fullName: System.IO.FileInfo.OpenText()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenText
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 116
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> with UTF8 encoding that reads from an existing text file.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public StreamReader OpenText()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function OpenText As StreamReader
    return:
      type: System.IO.StreamReader
      description: "\n<p>A new <strong>StreamReader</strong> with UTF8 encoding.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file is not found. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>\n<em>path</em> is read-only or is a directory. </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The specified path is invalid, such as being on an unmapped drive. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.UTF8
    commentId: P:System.Text.Encoding.UTF8
  - linkId: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.OpenWrite
  commentId: M:System.IO.FileInfo.OpenWrite
  id: OpenWrite
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: OpenWrite()
  nameWithType: FileInfo.OpenWrite()
  fullName: System.IO.FileInfo.OpenWrite()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenWrite
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 246
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Creates a write-only <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public FileStream OpenWrite()
    content.vb: Public Function OpenWrite As FileStream
    return:
      type: System.IO.FileStream
      description: "\n<p>A write-only unshared <xref href=\"System.IO.FileStream\" data-throw-if-not-resolved=\"false\"></xref> object for a new or existing file.</p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The path specified when creating an instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only or is a directory.  </p>\n"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "\n<p>The path specified when creating an instance of the <xref href=\"System.IO.FileInfo\" data-throw-if-not-resolved=\"false\"></xref> object is invalid, such as being on an unmapped drive. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.IO.FileInfo.ToString
  commentId: M:System.IO.FileInfo.ToString
  id: ToString
  parent: System.IO.FileInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FileInfo.ToString()
  fullName: System.IO.FileInfo.ToString()
  type: Method
  source:
    remote:
      path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.IO.FileSystem/src/System/IO/FileInfo.cs
    startLine: 294
  assemblies:
  - System.IO.FileSystem
  namespace: System.IO
  summary: "\n<p>Returns the path as a string.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string representing the path.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IO.FileSystemInfo
  commentId: T:System.IO.FileSystemInfo
  parent: System.IO
  isExternal: false
  name: FileSystemInfo
  nameWithType: FileSystemInfo
  fullName: System.IO.FileSystemInfo
- uid: System.IO.FileSystemInfo.FullPath
  commentId: F:System.IO.FileSystemInfo.FullPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullPath
  nameWithType: FileSystemInfo.FullPath
  fullName: System.IO.FileSystemInfo.FullPath
- uid: System.IO.FileSystemInfo.OriginalPath
  commentId: F:System.IO.FileSystemInfo.OriginalPath
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: OriginalPath
  nameWithType: FileSystemInfo.OriginalPath
  fullName: System.IO.FileSystemInfo.OriginalPath
- uid: System.IO.FileSystemInfo.Attributes
  commentId: P:System.IO.FileSystemInfo.Attributes
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Attributes
  nameWithType: FileSystemInfo.Attributes
  fullName: System.IO.FileSystemInfo.Attributes
- uid: System.IO.FileSystemInfo.CreationTime
  commentId: P:System.IO.FileSystemInfo.CreationTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTime
  nameWithType: FileSystemInfo.CreationTime
  fullName: System.IO.FileSystemInfo.CreationTime
- uid: System.IO.FileSystemInfo.CreationTimeUtc
  commentId: P:System.IO.FileSystemInfo.CreationTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: CreationTimeUtc
  nameWithType: FileSystemInfo.CreationTimeUtc
  fullName: System.IO.FileSystemInfo.CreationTimeUtc
- uid: System.IO.FileSystemInfo.Extension
  commentId: P:System.IO.FileSystemInfo.Extension
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Extension
  nameWithType: FileSystemInfo.Extension
  fullName: System.IO.FileSystemInfo.Extension
- uid: System.IO.FileSystemInfo.FullName
  commentId: P:System.IO.FileSystemInfo.FullName
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: FullName
  nameWithType: FileSystemInfo.FullName
  fullName: System.IO.FileSystemInfo.FullName
- uid: System.IO.FileSystemInfo.LastAccessTime
  commentId: P:System.IO.FileSystemInfo.LastAccessTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTime
  nameWithType: FileSystemInfo.LastAccessTime
  fullName: System.IO.FileSystemInfo.LastAccessTime
- uid: System.IO.FileSystemInfo.LastAccessTimeUtc
  commentId: P:System.IO.FileSystemInfo.LastAccessTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastAccessTimeUtc
  nameWithType: FileSystemInfo.LastAccessTimeUtc
  fullName: System.IO.FileSystemInfo.LastAccessTimeUtc
- uid: System.IO.FileSystemInfo.LastWriteTime
  commentId: P:System.IO.FileSystemInfo.LastWriteTime
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTime
  nameWithType: FileSystemInfo.LastWriteTime
  fullName: System.IO.FileSystemInfo.LastWriteTime
- uid: System.IO.FileSystemInfo.LastWriteTimeUtc
  commentId: P:System.IO.FileSystemInfo.LastWriteTimeUtc
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: LastWriteTimeUtc
  nameWithType: FileSystemInfo.LastWriteTimeUtc
  fullName: System.IO.FileSystemInfo.LastWriteTimeUtc
- uid: System.IO.FileSystemInfo.Refresh
  commentId: M:System.IO.FileSystemInfo.Refresh
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Refresh()
  nameWithType: FileSystemInfo.Refresh()
  fullName: System.IO.FileSystemInfo.Refresh()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    nameWithType: FileSystemInfo.Refresh
    fullName: System.IO.FileSystemInfo.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Refresh
    name: Refresh
    nameWithType: FileSystemInfo.Refresh
    fullName: System.IO.FileSystemInfo.Refresh
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.DirectoryInfo
  commentId: T:System.IO.DirectoryInfo
  parent: System.IO
  isExternal: false
  name: DirectoryInfo
  nameWithType: DirectoryInfo
  fullName: System.IO.DirectoryInfo
- uid: System.IO.FileSystemInfo.Exists
  commentId: P:System.IO.FileSystemInfo.Exists
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Exists
  nameWithType: FileSystemInfo.Exists
  fullName: System.IO.FileSystemInfo.Exists
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.FileSystemInfo.Name
  commentId: P:System.IO.FileSystemInfo.Name
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Name
  nameWithType: FileSystemInfo.Name
  fullName: System.IO.FileSystemInfo.Name
- uid: System.IO.StreamWriter
  commentId: T:System.IO.StreamWriter
  parent: System.IO
  isExternal: false
  name: StreamWriter
  nameWithType: StreamWriter
  fullName: System.IO.StreamWriter
- uid: System.IO.FileInfo
  commentId: T:System.IO.FileInfo
  parent: System.IO
  isExternal: false
  name: FileInfo
  nameWithType: FileInfo
  fullName: System.IO.FileInfo
- uid: System.IO.FileStream
  commentId: T:System.IO.FileStream
  parent: System.IO
  isExternal: false
  name: FileStream
  nameWithType: FileStream
  fullName: System.IO.FileStream
- uid: System.IO.FileSystemInfo.Delete
  commentId: M:System.IO.FileSystemInfo.Delete
  parent: System.IO.FileSystemInfo
  isExternal: false
  name: Delete()
  nameWithType: FileSystemInfo.Delete()
  fullName: System.IO.FileSystemInfo.Delete()
  spec.csharp:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    nameWithType: FileSystemInfo.Delete
    fullName: System.IO.FileSystemInfo.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IO.FileSystemInfo.Delete
    name: Delete
    nameWithType: FileSystemInfo.Delete
    fullName: System.IO.FileSystemInfo.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.FileMode
  commentId: T:System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.FileAccess
  commentId: T:System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.FileShare
  commentId: T:System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.StreamReader
  commentId: T:System.IO.StreamReader
  parent: System.IO
  isExternal: false
  name: StreamReader
  nameWithType: StreamReader
  fullName: System.IO.StreamReader
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  nameWithType: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IO.DirectoryNotFoundException
  commentId: T:System.IO.DirectoryNotFoundException
  isExternal: false
  name: DirectoryNotFoundException
  nameWithType: DirectoryNotFoundException
  fullName: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
