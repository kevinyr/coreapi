### YamlMime:ManagedReference
items:
- uid: System.Xml.XPath.XPathItem
  commentId: T:System.Xml.XPath.XPathItem
  id: XPathItem
  parent: System.Xml.XPath
  children:
  - System.Xml.XPath.XPathItem.IsNode
  - System.Xml.XPath.XPathItem.TypedValue
  - System.Xml.XPath.XPathItem.Value
  - System.Xml.XPath.XPathItem.ValueAs(System.Type)
  - System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XPath.XPathItem.ValueAsBoolean
  - System.Xml.XPath.XPathItem.ValueAsDateTime
  - System.Xml.XPath.XPathItem.ValueAsDouble
  - System.Xml.XPath.XPathItem.ValueAsInt
  - System.Xml.XPath.XPathItem.ValueAsLong
  - System.Xml.XPath.XPathItem.ValueType
  langs:
  - csharp
  - vb
  name: XPathItem
  nameWithType: XPathItem
  fullName: System.Xml.XPath.XPathItem
  type: Class
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XPathItem
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 9
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>Represents an item in the XQuery 1.0 and XPath 2.0 Data Model.</p>\n"
  syntax:
    content: public abstract class XPathItem
    content.vb: Public MustInherit Class XPathItem
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.XPath.XPathItem.IsNode
  commentId: P:System.Xml.XPath.XPathItem.IsNode
  id: IsNode
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: IsNode
  nameWithType: XPathItem.IsNode
  fullName: System.Xml.XPath.XPathItem.IsNode
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNode
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 19
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the item represents an XPath node or an atomic value.</p>\n"
  syntax:
    content: public abstract bool IsNode { get; }
    content.vb: Public MustOverride ReadOnly Property IsNode As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the item represents an XPath node; <strong>false</strong> if the item represents an atomic value.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.TypedValue
  commentId: P:System.Xml.XPath.XPathItem.TypedValue
  id: TypedValue
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: TypedValue
  nameWithType: XPathItem.TypedValue
  fullName: System.Xml.XPath.XPathItem.TypedValue
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypedValue
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 25
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the current item as a boxed object of the most appropriate .NET FrameworkÂ 2.0 type according to its schema type.</p>\n"
  syntax:
    content: public abstract object TypedValue { get; }
    content.vb: Public MustOverride ReadOnly Property TypedValue As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The current item as a boxed object of the most appropriate .NET Framework type.</p>\n"
  seealso:
  - linkId: System.Xml.XPath.XPathItem.Value
    commentId: P:System.Xml.XPath.XPathItem.Value
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.Value
  commentId: P:System.Xml.XPath.XPathItem.Value
  id: Value
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: XPathItem.Value
  fullName: System.Xml.XPath.XPathItem.Value
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 24
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the <strong>string</strong> value of the item.</p>\n"
  syntax:
    content: public abstract string Value { get; }
    content.vb: Public MustOverride ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The <strong>string</strong> value of the item.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueAsBoolean
  commentId: P:System.Xml.XPath.XPathItem.ValueAsBoolean
  id: ValueAsBoolean
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAsBoolean
  nameWithType: XPathItem.ValueAsBoolean
  fullName: System.Xml.XPath.XPathItem.ValueAsBoolean
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAsBoolean
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 27
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the item's value as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract bool ValueAsBoolean { get; }
    content.vb: Public MustOverride ReadOnly Property ValueAsBoolean As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>The item's value as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast to <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> is not valid.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueAsDateTime
  commentId: P:System.Xml.XPath.XPathItem.ValueAsDateTime
  id: ValueAsDateTime
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAsDateTime
  nameWithType: XPathItem.ValueAsDateTime
  fullName: System.Xml.XPath.XPathItem.ValueAsDateTime
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAsDateTime
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 28
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the item's value as a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract DateTime ValueAsDateTime { get; }
    content.vb: Public MustOverride ReadOnly Property ValueAsDateTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>The item's value as a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast to <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> is not valid.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueAsDouble
  commentId: P:System.Xml.XPath.XPathItem.ValueAsDouble
  id: ValueAsDouble
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAsDouble
  nameWithType: XPathItem.ValueAsDouble
  fullName: System.Xml.XPath.XPathItem.ValueAsDouble
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAsDouble
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 29
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the item's value as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract double ValueAsDouble { get; }
    content.vb: Public MustOverride ReadOnly Property ValueAsDouble As Double
    parameters: []
    return:
      type: System.Double
      description: "\n<p>The item's value as a <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast to <xref href=\"System.Double\" data-throw-if-not-resolved=\"false\"></xref> is not valid.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The attempted cast resulted in an overflow.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueAsInt
  commentId: P:System.Xml.XPath.XPathItem.ValueAsInt
  id: ValueAsInt
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAsInt
  nameWithType: XPathItem.ValueAsInt
  fullName: System.Xml.XPath.XPathItem.ValueAsInt
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAsInt
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 30
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the item's value as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract int ValueAsInt { get; }
    content.vb: Public MustOverride ReadOnly Property ValueAsInt As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The item's value as an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast to <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> is not valid.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The attempted cast resulted in an overflow.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueAsLong
  commentId: P:System.Xml.XPath.XPathItem.ValueAsLong
  id: ValueAsLong
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAsLong
  nameWithType: XPathItem.ValueAsLong
  fullName: System.Xml.XPath.XPathItem.ValueAsLong
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAsLong
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 31
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the item's value as an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract long ValueAsLong { get; }
    content.vb: Public MustOverride ReadOnly Property ValueAsLong As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The item's value as an <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast to <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> is not valid.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The attempted cast resulted in an overflow.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueType
  commentId: P:System.Xml.XPath.XPathItem.ValueType
  id: ValueType
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueType
  nameWithType: XPathItem.ValueType
  fullName: System.Xml.XPath.XPathItem.ValueType
  type: Property
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueType
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 26
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, gets the .NET FrameworkÂ 2.0 type of the item.</p>\n"
  syntax:
    content: public abstract Type ValueType { get; }
    content.vb: Public MustOverride ReadOnly Property ValueType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The .NET Framework type of the item. The default value is <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Xml.XPath.XPathItem.TypedValue
    commentId: P:System.Xml.XPath.XPathItem.TypedValue
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XPath.XPathItem.ValueAs(System.Type)
  commentId: M:System.Xml.XPath.XPathItem.ValueAs(System.Type)
  id: ValueAs(System.Type)
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAs(Type)
  nameWithType: XPathItem.ValueAs(Type)
  fullName: System.Xml.XPath.XPathItem.ValueAs(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAs
    path: src/System.Xml.XPath/src/System/Xml/XPath/XPathItem.cs
    startLine: 32
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>Returns the item's value as the specified type.</p>\n"
  syntax:
    content: public virtual object ValueAs(Type returnType)
    content.vb: Public Overridable Function ValueAs(returnType As Type) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type to return the item value as.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the item as the type requested.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the target type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The attempted cast resulted in an overflow.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XPath.XPathItem.ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ValueAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XPath.XPathItem
  langs:
  - csharp
  - vb
  name: ValueAs(Type, IXmlNamespaceResolver)
  nameWithType: XPathItem.ValueAs(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XPath.XPathItem.ValueAs(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.XPath/ref/System.Xml.XPath.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueAs
    path: src/System.Xml.XPath/ref/System.Xml.XPath.cs
    startLine: 82
  assemblies:
  - System.Xml.XPath
  namespace: System.Xml.XPath
  summary: "\n<p>When overridden in a derived class, returns the item's value as the type specified using the <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object specified to resolve namespace prefixes.</p>\n"
  syntax:
    content: public abstract object ValueAs(Type returnType, IXmlNamespaceResolver nsResolver)
    content.vb: Public MustOverride Function ValueAs(returnType As Type, nsResolver As IXmlNamespaceResolver) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type to return the item's value as.</p>\n"
    - id: nsResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>The <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object used to resolve namespace prefixes.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the item as the type requested.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The item's value is not in the correct format for the target type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The attempted cast resulted in an overflow.</p>\n"
  seealso:
  - linkId: System.Xml.IXmlNamespaceResolver
    commentId: T:System.Xml.IXmlNamespaceResolver
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Xml.XPath
  commentId: N:System.Xml.XPath
  isExternal: false
  name: System.Xml.XPath
  nameWithType: System.Xml.XPath
  fullName: System.Xml.XPath
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.IXmlNamespaceResolver
  commentId: T:System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: false
  name: IXmlNamespaceResolver
  nameWithType: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
