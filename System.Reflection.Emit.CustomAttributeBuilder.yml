### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.CustomAttributeBuilder
  commentId: T:System.Reflection.Emit.CustomAttributeBuilder
  id: CustomAttributeBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])
  - System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])
  - System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])
  - System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])
  langs:
  - csharp
  - vb
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributeBuilder
    path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
    startLine: 26
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Helps build custom attributes.</p>\n"
  syntax:
    content: >-
      [HostProtection(MayLeakOnAbort = true)]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_CustomAttributeBuilder))]

      [ComVisible(true)]

      public class CustomAttributeBuilder : _CustomAttributeBuilder
    content.vb: >-
      <HostProtection(MayLeakOnAbort:=True)>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_CustomAttributeBuilder))>

      <ComVisible(True)>

      Public Class CustomAttributeBuilder
          Implements _CustomAttributeBuilder
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])
  commentId: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[])
  id: '#ctor(System.Reflection.ConstructorInfo,System.Object[])'
  parent: System.Reflection.Emit.CustomAttributeBuilder
  langs:
  - csharp
  - vb
  name: CustomAttributeBuilder(ConstructorInfo, Object[])
  nameWithType: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object[])
  fullName: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
    startLine: 34
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Initializes an instance of the <strong>CustomAttributeBuilder</strong> class given the constructor for the custom attribute and the arguments to the constructor.</p>\n"
  syntax:
    content: public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs)
    content.vb: Public Sub New(con As ConstructorInfo, constructorArgs As Object())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: constructorArgs
      type: System.Object[]
      description: "\n<p>The arguments to the constructor of the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>con</em> is static or private.</p>\n<p>-or- </p>\n<p>The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.</p>\n<p>-or- </p>\n<p>The type of supplied argument does not match the type of the parameter declared in the constructor. </p>\n<p>-or-</p>\n<p>A supplied argument is a reference type other than <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>constructorArgs</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object())
  name.vb: CustomAttributeBuilder(ConstructorInfo, Object())
- uid: System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])
  commentId: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])
  id: '#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.FieldInfo[],System.Object[])'
  parent: System.Reflection.Emit.CustomAttributeBuilder
  langs:
  - csharp
  - vb
  name: CustomAttributeBuilder(ConstructorInfo, Object[], FieldInfo[], Object[])
  nameWithType: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object[], FieldInfo[], Object[])
  fullName: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.FieldInfo[], System.Object[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
    startLine: 52
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Initializes an instance of the <strong>CustomAttributeBuilder</strong> class given the constructor for the custom attribute, the arguments to the constructor, and a set of named field/value pairs.</p>\n"
  syntax:
    content: public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, FieldInfo[] namedFields, object[] fieldValues)
    content.vb: Public Sub New(con As ConstructorInfo, constructorArgs As Object(), namedFields As FieldInfo(), fieldValues As Object())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: constructorArgs
      type: System.Object[]
      description: "\n<p>The arguments to the constructor of the custom attribute. </p>\n"
    - id: namedFields
      type: System.Reflection.FieldInfo[]
      description: "\n<p>Named fields of the custom attribute. </p>\n"
    - id: fieldValues
      type: System.Object[]
      description: "\n<p>Values for the named fields of the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The lengths of the <em>namedFields</em> and <em>fieldValues</em> arrays are different.</p>\n<p>-or- </p>\n<p>\n<em>con</em> is static or private.</p>\n<p>-or- </p>\n<p>The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.</p>\n<p>-or- </p>\n<p>The type of supplied argument does not match the type of the parameter declared in the constructor.</p>\n<p>-or- </p>\n<p>The types of the field values do not match the types of the named fields.</p>\n<p>-or- </p>\n<p>The field does not belong to the same class or base class as the constructor. </p>\n<p>-or-</p>\n<p>A supplied argument or named field is a reference type other than <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One of the parameters is <strong>null</strong>. </p>\n"
  nameWithType.vb: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object(), FieldInfo(), Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object(), System.Reflection.FieldInfo(), System.Object())
  name.vb: CustomAttributeBuilder(ConstructorInfo, Object(), FieldInfo(), Object())
- uid: System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])
  commentId: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])
  id: '#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[])'
  parent: System.Reflection.Emit.CustomAttributeBuilder
  langs:
  - csharp
  - vb
  name: CustomAttributeBuilder(ConstructorInfo, Object[], PropertyInfo[], Object[])
  nameWithType: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object[], PropertyInfo[], Object[])
  fullName: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.PropertyInfo[], System.Object[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
    startLine: 43
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Initializes an instance of the <strong>CustomAttributeBuilder</strong> class given the constructor for the custom attribute, the arguments to the constructor, and a set of named property or value pairs.</p>\n"
  syntax:
    content: public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues)
    content.vb: Public Sub New(con As ConstructorInfo, constructorArgs As Object(), namedProperties As PropertyInfo(), propertyValues As Object())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: constructorArgs
      type: System.Object[]
      description: "\n<p>The arguments to the constructor of the custom attribute. </p>\n"
    - id: namedProperties
      type: System.Reflection.PropertyInfo[]
      description: "\n<p>Named properties of the custom attribute. </p>\n"
    - id: propertyValues
      type: System.Object[]
      description: "\n<p>Values for the named properties of the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The lengths of the <em>namedProperties</em> and <em>propertyValues</em> arrays are different.</p>\n<p>-or- </p>\n<p>\n<em>con</em> is static or private.</p>\n<p>-or- </p>\n<p>The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.</p>\n<p>-or- </p>\n<p>The type of supplied argument does not match the type of the parameter declared in the constructor.</p>\n<p>-or- </p>\n<p>The types of the property values do not match the types of the named properties.</p>\n<p>-or- </p>\n<p>A property has no setter method.</p>\n<p>-or- </p>\n<p>The property does not belong to the same class or base class as the constructor. </p>\n<p>-or-</p>\n<p>A supplied argument or named property is a reference type other than <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One of the parameters is <strong>null</strong>. </p>\n"
  nameWithType.vb: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object(), PropertyInfo(), Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object(), System.Reflection.PropertyInfo(), System.Object())
  name.vb: CustomAttributeBuilder(ConstructorInfo, Object(), PropertyInfo(), Object())
- uid: System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])
  commentId: M:System.Reflection.Emit.CustomAttributeBuilder.#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])
  id: '#ctor(System.Reflection.ConstructorInfo,System.Object[],System.Reflection.PropertyInfo[],System.Object[],System.Reflection.FieldInfo[],System.Object[])'
  parent: System.Reflection.Emit.CustomAttributeBuilder
  langs:
  - csharp
  - vb
  name: CustomAttributeBuilder(ConstructorInfo, Object[], PropertyInfo[], Object[], FieldInfo[], Object[])
  nameWithType: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object[], PropertyInfo[], Object[], FieldInfo[], Object[])
  fullName: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object[], System.Reflection.PropertyInfo[], System.Object[], System.Reflection.FieldInfo[], System.Object[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/Emit/CustomAttributeBuilder.cs
    startLine: 61
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Initializes an instance of the <strong>CustomAttributeBuilder</strong> class given the constructor for the custom attribute, the arguments to the constructor, a set of named property or value pairs, and a set of named field or value pairs.</p>\n"
  syntax:
    content: public CustomAttributeBuilder(ConstructorInfo con, object[] constructorArgs, PropertyInfo[] namedProperties, object[] propertyValues, FieldInfo[] namedFields, object[] fieldValues)
    content.vb: Public Sub New(con As ConstructorInfo, constructorArgs As Object(), namedProperties As PropertyInfo(), propertyValues As Object(), namedFields As FieldInfo(), fieldValues As Object())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: constructorArgs
      type: System.Object[]
      description: "\n<p>The arguments to the constructor of the custom attribute. </p>\n"
    - id: namedProperties
      type: System.Reflection.PropertyInfo[]
      description: "\n<p>Named properties of the custom attribute. </p>\n"
    - id: propertyValues
      type: System.Object[]
      description: "\n<p>Values for the named properties of the custom attribute. </p>\n"
    - id: namedFields
      type: System.Reflection.FieldInfo[]
      description: "\n<p>Named fields of the custom attribute. </p>\n"
    - id: fieldValues
      type: System.Object[]
      description: "\n<p>Values for the named fields of the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The lengths of the <em>namedProperties</em> and <em>propertyValues</em> arrays are different.</p>\n<p>-or- </p>\n<p>The lengths of the <em>namedFields</em> and <em>fieldValues</em> arrays are different.</p>\n<p>-or- </p>\n<p>\n<em>con</em> is static or private.</p>\n<p>-or- </p>\n<p>The number of supplied arguments does not match the number of parameters of the constructor as required by the calling convention of the constructor.</p>\n<p>-or- </p>\n<p>The type of supplied argument does not match the type of the parameter declared in the constructor.</p>\n<p>-or- </p>\n<p>The types of the property values do not match the types of the named properties.</p>\n<p>-or- </p>\n<p>The types of the field values do not match the types of the corresponding field types.</p>\n<p>-or- </p>\n<p>A property has no setter.</p>\n<p>-or- </p>\n<p>The property or field does not belong to the same class or base class as the constructor. </p>\n<p>-or-</p>\n<p>A supplied argument, named property, or named field is a reference type other than <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One of the parameters is <strong>null</strong>. </p>\n"
  nameWithType.vb: CustomAttributeBuilder.CustomAttributeBuilder(ConstructorInfo, Object(), PropertyInfo(), Object(), FieldInfo(), Object())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.CustomAttributeBuilder.CustomAttributeBuilder(System.Reflection.ConstructorInfo, System.Object(), System.Reflection.PropertyInfo(), System.Object(), System.Reflection.FieldInfo(), System.Object())
  name.vb: CustomAttributeBuilder(ConstructorInfo, Object(), PropertyInfo(), Object(), FieldInfo(), Object())
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Reflection.FieldInfo[]
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: System.Reflection.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullname.vb: System.Reflection.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.PropertyInfo[]
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  nameWithType.vb: PropertyInfo()
  fullname.vb: System.Reflection.PropertyInfo()
  name.vb: PropertyInfo()
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
