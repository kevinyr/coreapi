### YamlMime:ManagedReference
items:
- uid: System.Collections.DictionaryBase
  commentId: T:System.Collections.DictionaryBase
  id: DictionaryBase
  parent: System.Collections
  children:
  - System.Collections.DictionaryBase.#ctor
  - System.Collections.DictionaryBase.Clear
  - System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  - System.Collections.DictionaryBase.Count
  - System.Collections.DictionaryBase.Dictionary
  - System.Collections.DictionaryBase.GetEnumerator
  - System.Collections.DictionaryBase.InnerHashtable
  - System.Collections.DictionaryBase.OnClear
  - System.Collections.DictionaryBase.OnClearComplete
  - System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  - System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: DictionaryBase
  nameWithType: DictionaryBase
  fullName: System.Collections.DictionaryBase
  type: Class
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DictionaryBase
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 17
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Provides the <strong>abstract</strong> base class for a strongly typed collection of key/value pairs.</p>\n"
  syntax:
    content: 'public abstract class DictionaryBase : IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public MustInherit Class DictionaryBase
          Implements IDictionary, ICollection, IEnumerable
  seealso:
  - linkId: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - linkId: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  - linkId: System.Collections.Generic
    commentId: N:System.Collections.Generic
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Collections.DictionaryBase.#ctor
  commentId: M:System.Collections.DictionaryBase.#ctor
  id: '#ctor'
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: DictionaryBase()
  nameWithType: DictionaryBase.DictionaryBase()
  fullName: System.Collections.DictionaryBase.DictionaryBase()
  type: Constructor
  source:
    remote:
      path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Collections.NonGeneric/ref/System.Collections.NonGeneric.cs
    startLine: 114
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected DictionaryBase()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Collections.DictionaryBase.Count
  commentId: P:System.Collections.DictionaryBase.Count
  id: Count
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: DictionaryBase.Count
  fullName: System.Collections.DictionaryBase.Count
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 36
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Collections.DictionaryBase.Dictionary
  commentId: P:System.Collections.DictionaryBase.Dictionary
  id: Dictionary
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
  fullName: System.Collections.DictionaryBase.Dictionary
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dictionary
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 31
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the list of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected IDictionary Dictionary { get; }
    content.vb: Protected ReadOnly Property Dictionary As IDictionary
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: "\n<p>An <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> representing the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance itself.</p>\n"
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.DictionaryBase.InnerHashtable
  commentId: P:System.Collections.DictionaryBase.InnerHashtable
  id: InnerHashtable
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
  fullName: System.Collections.DictionaryBase.InnerHashtable
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerHashtable
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 21
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the list of elements contained in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected Hashtable InnerHashtable { get; }
    content.vb: Protected ReadOnly Property InnerHashtable As Hashtable
    parameters: []
    return:
      type: System.Collections.Hashtable
      description: "\n<p>A <xref href=\"System.Collections.Hashtable\" data-throw-if-not-resolved=\"false\"></xref> representing the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance itself.</p>\n"
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: DictionaryBase.ICollection.IsSynchronized
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 52
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread safe).</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  - linkId: System.Collections.ICollection.SyncRoot
    commentId: P:System.Collections.ICollection.SyncRoot
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: DictionaryBase.System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  commentId: P:System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: DictionaryBase.ICollection.SyncRoot
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 62
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.ICollection.IsSynchronized
    commentId: P:System.Collections.ICollection.IsSynchronized
  - linkId: System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
    commentId: M:System.Collections.Hashtable.Synchronized(System.Collections.Hashtable)
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: DictionaryBase.System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.IsFixedSize
  nameWithType: DictionaryBase.IDictionary.IsFixedSize
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsFixedSize
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 47
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size.</p>\n"
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.IsReadOnly
  nameWithType: DictionaryBase.IDictionary.IsReadOnly
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsReadOnly
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 42
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether a <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Item[Object]
  nameWithType: DictionaryBase.IDictionary.Item[Object]
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.this[]
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 77
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the value associated with the specified key.</p>\n"
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key whose value to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value associated with the specified key. If the specified key is not found, attempting to get it returns <strong>null</strong>, and attempting to set it creates a new element using the specified key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The property is set and the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The property is set, <em>key</em> does not exist in the collection, and the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Item(Object)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Keys
  nameWithType: DictionaryBase.IDictionary.Keys
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Keys
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 57
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the keys in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - linkId: System.Collections.IDictionary.Values
    commentId: P:System.Collections.IDictionary.Values
  implements:
  - System.Collections.IDictionary.Keys
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.Keys
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  commentId: P:System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Values
  nameWithType: DictionaryBase.IDictionary.Values
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Values
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 67
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> object containing the values in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - linkId: System.Collections.IDictionary.Keys
    commentId: P:System.Collections.IDictionary.Keys
  implements:
  - System.Collections.IDictionary.Values
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.Values
- uid: System.Collections.DictionaryBase.Clear
  commentId: M:System.Collections.DictionaryBase.Clear
  id: Clear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: DictionaryBase.Clear()
  fullName: System.Collections.DictionaryBase.Clear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 137
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Clears the contents of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  implements:
  - System.Collections.IDictionary.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: DictionaryBase.CopyTo(Array, Int32)
  fullName: System.Collections.DictionaryBase.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 72
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> elements to a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the <xref href=\"System.Collections.DictionaryEntry\" data-throw-if-not-resolved=\"false\"></xref> objects copied from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>index</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  seealso:
  - linkId: System.Array
    commentId: T:System.Array
  - linkId: System.Collections.DictionaryEntry
    commentId: T:System.Collections.DictionaryEntry
  - linkId: System.Collections.DictionaryBase.GetEnumerator
    commentId: M:System.Collections.DictionaryBase.GetEnumerator
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.DictionaryBase.GetEnumerator
  commentId: M:System.Collections.DictionaryBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DictionaryBase.GetEnumerator()
  fullName: System.Collections.DictionaryBase.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 165
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public IDictionaryEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IDictionaryEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IDictionaryEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  seealso:
  - linkId: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.DictionaryBase.OnClear
  commentId: M:System.Collections.DictionaryBase.OnClear
  id: OnClear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnClear()
  nameWithType: DictionaryBase.OnClear()
  fullName: System.Collections.DictionaryBase.OnClear()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnClear
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 188
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before clearing the contents of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnClear()
    content.vb: Protected Overridable Sub OnClear
  seealso:
  - linkId: System.Collections.DictionaryBase.OnClearComplete
    commentId: M:System.Collections.DictionaryBase.OnClearComplete
  - linkId: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnClearComplete
  commentId: M:System.Collections.DictionaryBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnClearComplete()
  nameWithType: DictionaryBase.OnClearComplete()
  fullName: System.Collections.DictionaryBase.OnClearComplete()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnClearComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 208
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after clearing the contents of the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnClearComplete()
    content.vb: Protected Overridable Sub OnClearComplete
  seealso:
  - linkId: System.Collections.DictionaryBase.OnClear
    commentId: M:System.Collections.DictionaryBase.OnClear
  - linkId: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  id: OnGet(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnGet(Object, Object)
  nameWithType: DictionaryBase.OnGet(Object, Object)
  fullName: System.Collections.DictionaryBase.OnGet(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnGet
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 175
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the element with the specified key and value in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual object OnGet(object key, object currentValue)
    content.vb: Protected Overridable Function OnGet(key As Object, currentValue As Object) As Object
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to get. </p>\n"
    - id: currentValue
      type: System.Object
      description: "\n<p>The current value of the element associated with <em>key</em>. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> containing the element with the specified key and value.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  id: OnInsert(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnInsert(Object, Object)
  nameWithType: DictionaryBase.OnInsert(Object, Object)
  fullName: System.Collections.DictionaryBase.OnInsert(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnInsert
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 184
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before inserting a new element into the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnInsert(object key, object value)
    content.vb: Protected Overridable Sub OnInsert(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to insert. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to insert. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  id: OnInsertComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnInsertComplete(Object, Object)
  nameWithType: DictionaryBase.OnInsertComplete(Object, Object)
  fullName: System.Collections.DictionaryBase.OnInsertComplete(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnInsertComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 204
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after inserting a new element into the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnInsertComplete(object key, object value)
    content.vb: Protected Overridable Sub OnInsertComplete(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to insert. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to insert. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  id: OnRemove(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnRemove(Object, Object)
  nameWithType: DictionaryBase.OnRemove(Object, Object)
  fullName: System.Collections.DictionaryBase.OnRemove(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRemove
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 192
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before removing an element from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnRemove(object key, object value)
    content.vb: Protected Overridable Sub OnRemove(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to remove. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to remove. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnClear
    commentId: M:System.Collections.DictionaryBase.OnClear
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  id: OnRemoveComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnRemoveComplete(Object, Object)
  nameWithType: DictionaryBase.OnRemoveComplete(Object, Object)
  fullName: System.Collections.DictionaryBase.OnRemoveComplete(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnRemoveComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 212
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after removing an element from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnRemoveComplete(object key, object value)
    content.vb: Protected Overridable Sub OnRemoveComplete(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to remove. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to remove. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnClearComplete
    commentId: M:System.Collections.DictionaryBase.OnClearComplete
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  id: OnSet(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnSet(Object, Object, Object)
  nameWithType: DictionaryBase.OnSet(Object, Object, Object)
  fullName: System.Collections.DictionaryBase.OnSet(System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSet
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 180
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes before setting a value in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnSet(object key, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSet(key As Object, oldValue As Object, newValue As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to locate. </p>\n"
    - id: oldValue
      type: System.Object
      description: "\n<p>The old value of the element associated with <em>key</em>. </p>\n"
    - id: newValue
      type: System.Object
      description: "\n<p>The new value of the element associated with <em>key</em>. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  id: OnSetComplete(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnSetComplete(Object, Object, Object)
  nameWithType: DictionaryBase.OnSetComplete(Object, Object, Object)
  fullName: System.Collections.DictionaryBase.OnSetComplete(System.Object, System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnSetComplete
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 200
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes after setting a value in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void OnSetComplete(object key, object oldValue, object newValue)
    content.vb: Protected Overridable Sub OnSetComplete(key As Object, oldValue As Object, newValue As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to locate. </p>\n"
    - id: oldValue
      type: System.Object
      description: "\n<p>The old value of the element associated with <em>key</em>. </p>\n"
    - id: newValue
      type: System.Object
      description: "\n<p>The new value of the element associated with <em>key</em>. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  id: OnValidate(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: OnValidate(Object, Object)
  nameWithType: DictionaryBase.OnValidate(Object, Object)
  fullName: System.Collections.DictionaryBase.OnValidate(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnValidate
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 196
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Performs additional custom processes when validating the element with the specified key and value.</p>\n"
  syntax:
    content: protected virtual void OnValidate(object key, object value)
    content.vb: Protected Overridable Sub OnValidate(key As Object, value As Object)
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to validate. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to validate. </p>\n"
  seealso:
  - linkId: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - linkId: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
    commentId: M:System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Add(Object, Object)
  nameWithType: DictionaryBase.IDictionary.Add(Object, Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Add
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 121
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an element with the specified key and value into the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to add.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value of the element to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>An element with the same key already exists in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  - linkId: System.Collections.IDictionary.Item(System.Object)
    commentId: P:System.Collections.IDictionary.Item(System.Object)
  - linkId: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Add(Object, Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Contains(Object)
  nameWithType: DictionaryBase.IDictionary.Contains(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Contains
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 116
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> contains a specific key.</p>\n"
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Contains(Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IDictionary.Remove(Object)
  nameWithType: DictionaryBase.IDictionary.Remove(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Remove
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 144
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to remove.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.IDictionary.Add(System.Object,System.Object)
    commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  - linkId: System.Collections.IDictionary.Remove(System.Object)
    commentId: M:System.Collections.IDictionary.Remove(System.Object)
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: DictionaryBase.System.Collections.IDictionary.Remove(Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  commentId: M:System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  nameWithType: DictionaryBase.IEnumerable.GetEnumerator()
  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/System.Collections.NonGeneric/src/System/Collections/DictionaryBase.cs
    startLine: 170
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that iterates through the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Collections.DictionaryBase\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Collections.IDictionaryEnumerator
    commentId: T:System.Collections.IDictionaryEnumerator
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  nameWithType.vb: DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
references:
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Hashtable
  commentId: T:System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.IsFixedSize
  commentId: P:System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.IDictionary.IsReadOnly
  commentId: P:System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.IDictionary.Item(System.Object)
  commentId: P:System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  nameWithType: IDictionary.Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: IDictionary.Item(Object)
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    nameWithType: IDictionary.Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    nameWithType: IDictionary.Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Keys
  commentId: P:System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  nameWithType: IDictionary.Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.IDictionary.Values
  commentId: P:System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  nameWithType: IDictionary.Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IDictionary.Clear
  commentId: M:System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  nameWithType: IDictionary.Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    nameWithType: IDictionary.Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    nameWithType: IDictionary.Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.IDictionary.GetEnumerator
  commentId: M:System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  nameWithType: IDictionary.GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    nameWithType: IDictionary.GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    nameWithType: IDictionary.GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  nameWithType: IDictionary.Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    nameWithType: IDictionary.Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    nameWithType: IDictionary.Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  commentId: M:System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  nameWithType: IDictionary.Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    nameWithType: IDictionary.Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    nameWithType: IDictionary.Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Remove(System.Object)
  commentId: M:System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  nameWithType: IDictionary.Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    nameWithType: IDictionary.Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    nameWithType: IDictionary.Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
