items:
- uid: System.IO.FileSystemEventArgs
  commentId: T:System.IO.FileSystemEventArgs
  id: FileSystemEventArgs
  parent: System.IO
  children:
  - System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)
  - System.IO.FileSystemEventArgs.ChangeType
  - System.IO.FileSystemEventArgs.FullPath
  - System.IO.FileSystemEventArgs.Name
  langs:
  - csharp
  - vb
  name: FileSystemEventArgs
  fullName: System.IO.FileSystemEventArgs
  type: Class
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FileSystemEventArgs
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 16
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Provides data for the directory events: <xref href=\"System.IO.FileSystemWatcher.Changed\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemWatcher.Created\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.IO.FileSystemWatcher.Deleted\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: 'public class FileSystemEventArgs : EventArgs'
    content.vb: >-
      Public Class FileSystemEventArgs
          Inherits EventArgs
  seealso:
  - type: System.IO.FileSystemWatcher.Changed
    commentId: E:System.IO.FileSystemWatcher.Changed
  - type: System.IO.FileSystemWatcher.Created
    commentId: E:System.IO.FileSystemWatcher.Created
  - type: System.IO.FileSystemWatcher.Deleted
    commentId: E:System.IO.FileSystemWatcher.Deleted
  - type: System.IO.FileSystemEventHandler
    commentId: T:System.IO.FileSystemEventHandler
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.InternalBufferOverflowException
    commentId: T:System.IO.InternalBufferOverflowException
  - type: System.IO.NotifyFilters
    commentId: T:System.IO.NotifyFilters
  - type: System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnCreated(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
    commentId: M:System.IO.FileSystemWatcher.OnDeleted(System.IO.FileSystemEventArgs)
  - type: System.IO.FileSystemWatcher.Path
    commentId: P:System.IO.FileSystemWatcher.Path
  - type: System.IO.RenamedEventArgs
    commentId: T:System.IO.RenamedEventArgs
  - type: System.IO.RenamedEventHandler
    commentId: T:System.IO.RenamedEventHandler
  - type: System.IO.WaitForChangedResult
    commentId: T:System.IO.WaitForChangedResult
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: FileSystemEventArgs
- uid: System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)
  commentId: M:System.IO.FileSystemEventArgs.#ctor(System.IO.WatcherChangeTypes,System.String,System.String)
  id: '#ctor(System.IO.WatcherChangeTypes,System.String,System.String)'
  parent: System.IO.FileSystemEventArgs
  langs:
  - csharp
  - vb
  name: FileSystemEventArgs(WatcherChangeTypes, String, String)
  fullName: System.IO.FileSystemEventArgs.FileSystemEventArgs(System.IO.WatcherChangeTypes, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 18
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.IO.FileSystemEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public FileSystemEventArgs(WatcherChangeTypes changeType, string directory, string name)
    content.vb: Public Sub New(changeType As WatcherChangeTypes, directory As String, name As String)
    parameters:
    - id: changeType
      type: System.IO.WatcherChangeTypes
      description: "\n<p>One of the <xref href=\"System.IO.WatcherChangeTypes\" data-throw-if-not-resolved=\"false\"></xref> values, which represents the kind of change detected in the file system. </p>\n"
    - id: directory
      type: System.String
      description: "\n<p>The root directory of the affected file or directory. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the affected file or directory. </p>\n"
  seealso:
  - type: System.IO.FileSystemWatcher
    commentId: T:System.IO.FileSystemWatcher
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FileSystemEventArgs.FileSystemEventArgs(WatcherChangeTypes, String, String)
- uid: System.IO.FileSystemEventArgs.ChangeType
  commentId: P:System.IO.FileSystemEventArgs.ChangeType
  id: ChangeType
  parent: System.IO.FileSystemEventArgs
  langs:
  - csharp
  - vb
  name: ChangeType
  fullName: System.IO.FileSystemEventArgs.ChangeType
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeType
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 19
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets the type of directory event that occurred.</p>\n"
  syntax:
    content: public WatcherChangeTypes ChangeType { get; }
    content.vb: Public ReadOnly Property ChangeType As WatcherChangeTypes
    parameters: []
    return:
      type: System.IO.WatcherChangeTypes
      description: "\n<p>One of the <xref href=\"System.IO.WatcherChangeTypes\" data-throw-if-not-resolved=\"false\"></xref> values that represents the kind of change detected in the file system.</p>\n"
  seealso:
  - type: System.IO.WatcherChangeTypes
    commentId: T:System.IO.WatcherChangeTypes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FileSystemEventArgs.ChangeType
- uid: System.IO.FileSystemEventArgs.FullPath
  commentId: P:System.IO.FileSystemEventArgs.FullPath
  id: FullPath
  parent: System.IO.FileSystemEventArgs
  langs:
  - csharp
  - vb
  name: FullPath
  fullName: System.IO.FileSystemEventArgs.FullPath
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullPath
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 20
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets the fully qualifed path of the affected file or directory.</p>\n"
  syntax:
    content: public string FullPath { get; }
    content.vb: Public ReadOnly Property FullPath As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The path of the affected file or directory.</p>\n"
  see:
  - type: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FileSystemEventArgs.FullPath
- uid: System.IO.FileSystemEventArgs.Name
  commentId: P:System.IO.FileSystemEventArgs.Name
  id: Name
  parent: System.IO.FileSystemEventArgs
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.IO.FileSystemEventArgs.Name
  type: Property
  source:
    remote:
      path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.IO.FileSystem.Watcher/ref/System.IO.FileSystem.Watcher.cs
    startLine: 21
  assemblies:
  - System.IO.FileSystem.Watcher
  namespace: System.IO
  summary: "\n<p>Gets the name of the affected file or directory.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the affected file or directory.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FileSystemEventArgs.Name
references:
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  commentId: N:System.IO
  nameWithType: System.IO
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  fullName: System.EventArgs
  commentId: T:System.EventArgs
  nameWithType: EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  fullName: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  nameWithType: EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.IO.WatcherChangeTypes
  parent: System.IO
  isExternal: false
  name: WatcherChangeTypes
  fullName: System.IO.WatcherChangeTypes
  commentId: T:System.IO.WatcherChangeTypes
  nameWithType: WatcherChangeTypes
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
