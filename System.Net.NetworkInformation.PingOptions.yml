items:
- uid: System.Net.NetworkInformation.PingOptions
  commentId: T:System.Net.NetworkInformation.PingOptions
  id: PingOptions
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.PingOptions.#ctor
  - System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
  - System.Net.NetworkInformation.PingOptions.DontFragment
  - System.Net.NetworkInformation.PingOptions.Ttl
  langs:
  - csharp
  - vb
  name: PingOptions
  fullName: System.Net.NetworkInformation.PingOptions
  type: Class
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PingOptions
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 54
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Used to control how <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data packets are transmitted.</p>\n"
  syntax:
    content: public class PingOptions
    content.vb: Public Class PingOptions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: PingOptions
- uid: System.Net.NetworkInformation.PingOptions.#ctor
  commentId: M:System.Net.NetworkInformation.PingOptions.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: PingOptions()
  fullName: System.Net.NetworkInformation.PingOptions.PingOptions()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 56
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public PingOptions()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: PingOptions.PingOptions()
- uid: System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
  commentId: M:System.Net.NetworkInformation.PingOptions.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: PingOptions(Int32, Boolean)
  fullName: System.Net.NetworkInformation.PingOptions.PingOptions(System.Int32, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 57
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.PingOptions\" data-throw-if-not-resolved=\"false\"></xref> class and sets the Time to Live and fragmentation values.</p>\n"
  syntax:
    content: public PingOptions(int ttl, bool dontFragment)
    content.vb: Public Sub New(ttl As Integer, dontFragment As Boolean)
    parameters:
    - id: ttl
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value greater than zero that specifies the number of times that the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data packets can be forwarded.</p>\n"
    - id: dontFragment
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to prevent data sent to the remote host from being fragmented; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>ttl </em>is less than or equal to zero.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: PingOptions.PingOptions(Int32, Boolean)
- uid: System.Net.NetworkInformation.PingOptions.DontFragment
  commentId: P:System.Net.NetworkInformation.PingOptions.DontFragment
  id: DontFragment
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: DontFragment
  fullName: System.Net.NetworkInformation.PingOptions.DontFragment
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DontFragment
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 58
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that controls fragmentation of the data sent to the remote host.</p>\n"
  syntax:
    content: public bool DontFragment { get; set; }
    content.vb: Public Property DontFragment As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the data cannot be sent in multiple packets; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: PingOptions.DontFragment
- uid: System.Net.NetworkInformation.PingOptions.Ttl
  commentId: P:System.Net.NetworkInformation.PingOptions.Ttl
  id: Ttl
  parent: System.Net.NetworkInformation.PingOptions
  langs:
  - csharp
  - vb
  name: Ttl
  fullName: System.Net.NetworkInformation.PingOptions.Ttl
  type: Property
  source:
    remote:
      path: src/System.Net.Ping/ref/System.Net.Ping.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ttl
    path: src/System.Net.Ping/ref/System.Net.Ping.cs
    startLine: 59
  assemblies:
  - System.Net.Ping
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets or sets the number of routing nodes that can forward the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data before it is discarded.</p>\n"
  syntax:
    content: public int Ttl { get; set; }
    content.vb: Public Property Ttl As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the number of times the <xref href=\"System.Net.NetworkInformation.Ping\" data-throw-if-not-resolved=\"false\"></xref> data packets can be forwarded. The default is 128.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value specified for a set operation is less than or equal to zero.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: PingOptions.Ttl
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
  commentId: N:System.Net.NetworkInformation
  nameWithType: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
