### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions
  commentId: T:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions
  id: ECDsaCertificateExtensions
  parent: System.Security.Cryptography.X509Certificates
  children:
  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  - System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  langs:
  - csharp
  - vb
  name: ECDsaCertificateExtensions
  nameWithType: ECDsaCertificateExtensions
  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ECDsaCertificateExtensions
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 18
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Provides extension methods for retrieving <xref href=\"System.Security.Cryptography.ECDsa\" data-throw-if-not-resolved=\"false\"></xref> implementations for the\npublic and private keys of a <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate.</p>\n"
  syntax:
    content: public static class ECDsaCertificateExtensions
    content.vb: Public Module ECDsaCertificateExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  isExtensionMethod: true
  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions
  langs:
  - csharp
  - vb
  name: GetECDsaPrivateKey(X509Certificate2)
  nameWithType: ECDsaCertificateExtensions.GetECDsaPrivateKey(X509Certificate2)
  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPrivateKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetECDsaPrivateKey
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 20
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the <xref href=\"System.Security.Cryptography.ECDsa\" data-throw-if-not-resolved=\"false\"></xref> private key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate.</p>\n"
  syntax:
    content: public static ECDsa GetECDsaPrivateKey(this X509Certificate2 certificate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetECDsaPrivateKey(certificate As X509Certificate2) As ECDsa
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\n<p>The certificate. </p>\n"
    return:
      type: System.Security.Cryptography.ECDsa
      description: "\n<p>The private key, or <strong>null</strong> if the certificate does not have an ECDsa private key. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>certificate</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  commentId: M:System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  id: GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  isExtensionMethod: true
  parent: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions
  langs:
  - csharp
  - vb
  name: GetECDsaPublicKey(X509Certificate2)
  nameWithType: ECDsaCertificateExtensions.GetECDsaPublicKey(X509Certificate2)
  fullName: System.Security.Cryptography.X509Certificates.ECDsaCertificateExtensions.GetECDsaPublicKey(System.Security.Cryptography.X509Certificates.X509Certificate2)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetECDsaPublicKey
    path: src/System.Security.Cryptography.X509Certificates/ref/System.Security.Cryptography.X509Certificates.cs
    startLine: 21
  assemblies:
  - System.Security.Cryptography.X509Certificates
  namespace: System.Security.Cryptography.X509Certificates
  summary: "\n<p>Gets the <xref href=\"System.Security.Cryptography.ECDsa\" data-throw-if-not-resolved=\"false\"></xref> public key from the <xref href=\"System.Security.Cryptography.X509Certificates.X509Certificate2\" data-throw-if-not-resolved=\"false\"></xref> certificate.</p>\n"
  syntax:
    content: public static ECDsa GetECDsaPublicKey(this X509Certificate2 certificate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetECDsaPublicKey(certificate As X509Certificate2) As ECDsa
    parameters:
    - id: certificate
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\n<p>The certificate. </p>\n"
    return:
      type: System.Security.Cryptography.ECDsa
      description: "\n<p>The public key, or <strong>null</strong> if the certificate does not have an ECDsa public key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>certificate</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The handle is invalid. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  nameWithType: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
- uid: System.Security.Cryptography.ECDsa
  commentId: T:System.Security.Cryptography.ECDsa
  parent: System.Security.Cryptography
  isExternal: false
  name: ECDsa
  nameWithType: ECDsa
  fullName: System.Security.Cryptography.ECDsa
- uid: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  fullName: System.Security.Cryptography
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  commentId: T:System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
