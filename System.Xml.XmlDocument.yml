items:
- uid: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  id: XmlDocument
  parent: System.Xml
  children:
  - System.Xml.XmlDocument.#ctor
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  - System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  - System.Xml.XmlDocument.BaseURI
  - System.Xml.XmlDocument.CloneNode(System.Boolean)
  - System.Xml.XmlDocument.CreateAttribute(System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  - System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateCDataSection(System.String)
  - System.Xml.XmlDocument.CreateComment(System.String)
  - System.Xml.XmlDocument.CreateDocumentFragment
  - System.Xml.XmlDocument.CreateElement(System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String)
  - System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  - System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  - System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  - System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  - System.Xml.XmlDocument.CreateTextNode(System.String)
  - System.Xml.XmlDocument.CreateWhitespace(System.String)
  - System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  - System.Xml.XmlDocument.DocumentElement
  - System.Xml.XmlDocument.GetElementsByTagName(System.String)
  - System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  - System.Xml.XmlDocument.Implementation
  - System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  - System.Xml.XmlDocument.InnerText
  - System.Xml.XmlDocument.InnerXml
  - System.Xml.XmlDocument.IsReadOnly
  - System.Xml.XmlDocument.Load(System.IO.Stream)
  - System.Xml.XmlDocument.Load(System.IO.TextReader)
  - System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  - System.Xml.XmlDocument.LoadXml(System.String)
  - System.Xml.XmlDocument.LocalName
  - System.Xml.XmlDocument.Name
  - System.Xml.XmlDocument.NameTable
  - System.Xml.XmlDocument.NodeChanged
  - System.Xml.XmlDocument.NodeChanging
  - System.Xml.XmlDocument.NodeInserted
  - System.Xml.XmlDocument.NodeInserting
  - System.Xml.XmlDocument.NodeRemoved
  - System.Xml.XmlDocument.NodeRemoving
  - System.Xml.XmlDocument.NodeType
  - System.Xml.XmlDocument.OwnerDocument
  - System.Xml.XmlDocument.ParentNode
  - System.Xml.XmlDocument.PreserveWhitespace
  - System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  - System.Xml.XmlDocument.Save(System.IO.Stream)
  - System.Xml.XmlDocument.Save(System.IO.TextWriter)
  - System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  - System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  langs:
  - csharp
  - vb
  name: XmlDocument
  fullName: System.Xml.XmlDocument
  type: Class
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlDocument
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 108
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Represents an XML document. </p>\n<p>You can use this class to load, validate, edit, add, and position XML in a document. For examples, see the Tasks section on this page. </p>\n"
  syntax:
    content: 'public class XmlDocument : XmlNode, IEnumerable'
    content.vb: >-
      Public Class XmlDocument
          Inherits XmlNode
          Implements IEnumerable
  inheritance:
  - System.Object
  - System.Xml.XmlNode
  implements:
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Xml.XmlNode.Attributes
  - System.Xml.XmlNode.ChildNodes
  - System.Xml.XmlNode.FirstChild
  - System.Xml.XmlNode.HasChildNodes
  - System.Xml.XmlNode.Item(System.String)
  - System.Xml.XmlNode.Item(System.String,System.String)
  - System.Xml.XmlNode.LastChild
  - System.Xml.XmlNode.NamespaceURI
  - System.Xml.XmlNode.NextSibling
  - System.Xml.XmlNode.OuterXml
  - System.Xml.XmlNode.Prefix
  - System.Xml.XmlNode.PreviousSibling
  - System.Xml.XmlNode.PreviousText
  - System.Xml.XmlNode.Value
  - System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.GetEnumerator
  - System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  - System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  - System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Normalize
  - System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.RemoveAll
  - System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  - System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  - System.Xml.XmlNode.Supports(System.String,System.String)
  - System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: XmlDocument
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
- uid: System.Xml.XmlDocument.#ctor
  commentId: M:System.Xml.XmlDocument.#ctor
  id: '#ctor'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: XmlDocument()
  fullName: System.Xml.XmlDocument.XmlDocument()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 110
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public XmlDocument()
    content.vb: Public Sub New
  seealso:
  - type: System.Xml.XmlDocument.Load(System.String)
    commentId: M:System.Xml.XmlDocument.Load(System.String)
  - type: System.Xml.XmlDocument.LoadXml(System.String)
    commentId: M:System.Xml.XmlDocument.LoadXml(System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.XmlDocument()
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  commentId: M:System.Xml.XmlDocument.#ctor(System.Xml.XmlImplementation)
  id: '#ctor(System.Xml.XmlImplementation)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: XmlDocument(XmlImplementation)
  fullName: System.Xml.XmlDocument.XmlDocument(System.Xml.XmlImplementation)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 111
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <strong>XmlDocument</strong> class with the specified <xref href=\"System.Xml.XmlImplementation\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected XmlDocument(XmlImplementation imp)
    content.vb: Protected Sub New(imp As XmlImplementation)
    parameters:
    - id: imp
      type: System.Xml.XmlImplementation
      description: "\n<p>The <strong>XmlImplementation</strong> to use. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: XmlDocument.XmlDocument(XmlImplementation)
- uid: System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  commentId: M:System.Xml.XmlDocument.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: XmlDocument(XmlNameTable)
  fullName: System.Xml.XmlDocument.XmlDocument(System.Xml.XmlNameTable)
  type: Constructor
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 112
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <strong>XmlDocument</strong> class with the specified <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XmlDocument(XmlNameTable nt)
    content.vb: Public Sub New(nt As XmlNameTable)
    parameters:
    - id: nt
      type: System.Xml.XmlNameTable
      description: "\n<p>The <strong>XmlNameTable</strong> to use. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.XmlDocument(XmlNameTable)
- uid: System.Xml.XmlDocument.BaseURI
  commentId: P:System.Xml.XmlDocument.BaseURI
  id: BaseURI
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: BaseURI
  fullName: System.Xml.XmlDocument.BaseURI
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseURI
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 113
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the base URI of the current node.</p>\n"
  syntax:
    content: public override string BaseURI { get; }
    content.vb: Public Overrides ReadOnly Property BaseURI As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The location from which the node was loaded.</p>\n"
  overridden: System.Xml.XmlNode.BaseURI
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.BaseURI
- uid: System.Xml.XmlDocument.DocumentElement
  commentId: P:System.Xml.XmlDocument.DocumentElement
  id: DocumentElement
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: DocumentElement
  fullName: System.Xml.XmlDocument.DocumentElement
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DocumentElement
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 114
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the root <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> for the document.</p>\n"
  syntax:
    content: public XmlElement DocumentElement { get; }
    content.vb: Public ReadOnly Property DocumentElement As XmlElement
    parameters: []
    return:
      type: System.Xml.XmlElement
      description: "\n<p>The <strong>XmlElement</strong> that represents the root of the XML document tree. If no root exists, <strong>null</strong> is returned.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlDocument.DocumentElement
- uid: System.Xml.XmlDocument.Implementation
  commentId: P:System.Xml.XmlDocument.Implementation
  id: Implementation
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Implementation
  fullName: System.Xml.XmlDocument.Implementation
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Implementation
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 115
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlImplementation\" data-throw-if-not-resolved=\"false\"></xref> object for the current document.</p>\n"
  syntax:
    content: public XmlImplementation Implementation { get; }
    content.vb: Public ReadOnly Property Implementation As XmlImplementation
    parameters: []
    return:
      type: System.Xml.XmlImplementation
      description: "\n<p>The <strong>XmlImplementation</strong> object for the current document.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlDocument.Implementation
- uid: System.Xml.XmlDocument.InnerText
  commentId: P:System.Xml.XmlDocument.InnerText
  id: InnerText
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: InnerText
  fullName: System.Xml.XmlDocument.InnerText
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerText
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 116
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Throws an <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> in all cases.</p>\n"
  syntax:
    content: public override string InnerText { set; }
    content.vb: Public Overrides WriteOnly Property InnerText As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The values of the node and all its child nodes.</p>\n"
  overridden: System.Xml.XmlNode.InnerText
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In all cases.</p>\n"
  modifiers.csharp:
  - public
  - override
  - set
  modifiers.vb:
  - Public
  - Overrides
  - WriteOnly
  nameWithType: XmlDocument.InnerText
- uid: System.Xml.XmlDocument.InnerXml
  commentId: P:System.Xml.XmlDocument.InnerXml
  id: InnerXml
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: InnerXml
  fullName: System.Xml.XmlDocument.InnerXml
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InnerXml
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 117
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets or sets the markup representing the children of the current node.</p>\n"
  syntax:
    content: public override string InnerXml { get; set; }
    content.vb: Public Overrides Property InnerXml As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The markup of the children of the current node.</p>\n"
  overridden: System.Xml.XmlNode.InnerXml
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML specified when setting this property is not well-formed. </p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: XmlDocument.InnerXml
- uid: System.Xml.XmlDocument.IsReadOnly
  commentId: P:System.Xml.XmlDocument.IsReadOnly
  id: IsReadOnly
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: IsReadOnly
  fullName: System.Xml.XmlDocument.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 118
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the current node is read-only.</p>\n"
  syntax:
    content: public override bool IsReadOnly { get; }
    content.vb: Public Overrides ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node is read-only; otherwise <strong>false</strong>. <strong>XmlDocument</strong> nodes always return <strong>false</strong>.</p>\n"
  overridden: System.Xml.XmlNode.IsReadOnly
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.IsReadOnly
- uid: System.Xml.XmlDocument.LocalName
  commentId: P:System.Xml.XmlDocument.LocalName
  id: LocalName
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: LocalName
  fullName: System.Xml.XmlDocument.LocalName
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalName
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 119
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the local name of the node.</p>\n"
  syntax:
    content: public override string LocalName { get; }
    content.vb: Public Overrides ReadOnly Property LocalName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>For <strong>XmlDocument</strong> nodes, the local name is #document.</p>\n"
  overridden: System.Xml.XmlNode.LocalName
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.LocalName
- uid: System.Xml.XmlDocument.Name
  commentId: P:System.Xml.XmlDocument.Name
  id: Name
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Xml.XmlDocument.Name
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 120
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the qualified name of the node.</p>\n"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>For <strong>XmlDocument</strong> nodes, the name is #document.</p>\n"
  overridden: System.Xml.XmlNode.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.Name
- uid: System.Xml.XmlDocument.NameTable
  commentId: P:System.Xml.XmlDocument.NameTable
  id: NameTable
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NameTable
  fullName: System.Xml.XmlDocument.NameTable
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 121
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> associated with this implementation.</p>\n"
  syntax:
    content: public XmlNameTable NameTable { get; }
    content.vb: Public ReadOnly Property NameTable As XmlNameTable
    parameters: []
    return:
      type: System.Xml.XmlNameTable
      description: "\n<p>An <strong>XmlNameTable</strong> enabling you to get the atomized version of a string within the document.</p>\n"
  seealso:
  - type: System.Xml.XmlNameTable
    commentId: T:System.Xml.XmlNameTable
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: XmlDocument.NameTable
- uid: System.Xml.XmlDocument.NodeType
  commentId: P:System.Xml.XmlDocument.NodeType
  id: NodeType
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeType
  fullName: System.Xml.XmlDocument.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 122
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the type of the current node.</p>\n"
  syntax:
    content: public override XmlNodeType NodeType { get; }
    content.vb: Public Overrides ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The node type. For <strong>XmlDocument</strong> nodes, this value is XmlNodeType.Document.</p>\n"
  overridden: System.Xml.XmlNode.NodeType
  seealso:
  - type: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.NodeType
- uid: System.Xml.XmlDocument.OwnerDocument
  commentId: P:System.Xml.XmlDocument.OwnerDocument
  id: OwnerDocument
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: OwnerDocument
  fullName: System.Xml.XmlDocument.OwnerDocument
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OwnerDocument
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 123
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> to which the current node belongs.</p>\n"
  syntax:
    content: public override XmlDocument OwnerDocument { get; }
    content.vb: Public Overrides ReadOnly Property OwnerDocument As XmlDocument
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: "\n<p>For <strong>XmlDocument</strong> nodes (<xref href=\"System.Xml.XmlDocument.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equals XmlNodeType.Document), this property always returns <strong>null</strong>.</p>\n"
  overridden: System.Xml.XmlNode.OwnerDocument
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.OwnerDocument
- uid: System.Xml.XmlDocument.ParentNode
  commentId: P:System.Xml.XmlDocument.ParentNode
  id: ParentNode
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: ParentNode
  fullName: System.Xml.XmlDocument.ParentNode
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParentNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 124
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets the parent node of this node (for nodes that can have parents).</p>\n"
  syntax:
    content: public override XmlNode ParentNode { get; }
    content.vb: Public Overrides ReadOnly Property ParentNode As XmlNode
    parameters: []
    return:
      type: System.Xml.XmlNode
      description: "\n<p>Always returns <strong>null</strong>.</p>\n"
  overridden: System.Xml.XmlNode.ParentNode
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: XmlDocument.ParentNode
- uid: System.Xml.XmlDocument.PreserveWhitespace
  commentId: P:System.Xml.XmlDocument.PreserveWhitespace
  id: PreserveWhitespace
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: PreserveWhitespace
  fullName: System.Xml.XmlDocument.PreserveWhitespace
  type: Property
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreserveWhitespace
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 125
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to preserve white space in element content.</p>\n"
  syntax:
    content: public bool PreserveWhitespace { get; set; }
    content.vb: Public Property PreserveWhitespace As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to preserve white space; otherwise <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.PreserveWhitespace
- uid: System.Xml.XmlDocument.NodeChanged
  commentId: E:System.Xml.XmlDocument.NodeChanged
  id: NodeChanged
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeChanged
  fullName: System.Xml.XmlDocument.NodeChanged
  type: Event
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeChanged
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 126
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Occurs when the <xref href=\"System.Xml.XmlNode.Value\" data-throw-if-not-resolved=\"false\"></xref> of a node belonging to this document has been changed.</p>\n"
  syntax:
    content: public event XmlNodeChangedEventHandler NodeChanged
    content.vb: Public Event NodeChanged As XmlNodeChangedEventHandler
    return:
      type: System.Xml.XmlNodeChangedEventHandler
  seealso:
  - type: System.Xml.XmlNodeChangedEventArgs
    commentId: T:System.Xml.XmlNodeChangedEventArgs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.NodeChanged
- uid: System.Xml.XmlDocument.NodeChanging
  commentId: E:System.Xml.XmlDocument.NodeChanging
  id: NodeChanging
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeChanging
  fullName: System.Xml.XmlDocument.NodeChanging
  type: Event
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeChanging
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 127
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Occurs when the <xref href=\"System.Xml.XmlNode.Value\" data-throw-if-not-resolved=\"false\"></xref> of a node belonging to this document is about to be changed.</p>\n"
  syntax:
    content: public event XmlNodeChangedEventHandler NodeChanging
    content.vb: Public Event NodeChanging As XmlNodeChangedEventHandler
    return:
      type: System.Xml.XmlNodeChangedEventHandler
  seealso:
  - type: System.Xml.XmlNodeChangedEventArgs
    commentId: T:System.Xml.XmlNodeChangedEventArgs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.NodeChanging
- uid: System.Xml.XmlDocument.NodeInserted
  commentId: E:System.Xml.XmlDocument.NodeInserted
  id: NodeInserted
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeInserted
  fullName: System.Xml.XmlDocument.NodeInserted
  type: Event
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeInserted
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 128
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Occurs when a node belonging to this document has been inserted into another node.</p>\n"
  syntax:
    content: public event XmlNodeChangedEventHandler NodeInserted
    content.vb: Public Event NodeInserted As XmlNodeChangedEventHandler
    return:
      type: System.Xml.XmlNodeChangedEventHandler
  seealso:
  - type: System.Xml.XmlNodeChangedEventArgs
    commentId: T:System.Xml.XmlNodeChangedEventArgs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.NodeInserted
- uid: System.Xml.XmlDocument.NodeInserting
  commentId: E:System.Xml.XmlDocument.NodeInserting
  id: NodeInserting
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeInserting
  fullName: System.Xml.XmlDocument.NodeInserting
  type: Event
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeInserting
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 129
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Occurs when a node belonging to this document is about to be inserted into another node.</p>\n"
  syntax:
    content: public event XmlNodeChangedEventHandler NodeInserting
    content.vb: Public Event NodeInserting As XmlNodeChangedEventHandler
    return:
      type: System.Xml.XmlNodeChangedEventHandler
  seealso:
  - type: System.Xml.XmlNodeChangedEventArgs
    commentId: T:System.Xml.XmlNodeChangedEventArgs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.NodeInserting
- uid: System.Xml.XmlDocument.NodeRemoved
  commentId: E:System.Xml.XmlDocument.NodeRemoved
  id: NodeRemoved
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeRemoved
  fullName: System.Xml.XmlDocument.NodeRemoved
  type: Event
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeRemoved
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 130
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Occurs when a node belonging to this document has been removed from its parent.</p>\n"
  syntax:
    content: public event XmlNodeChangedEventHandler NodeRemoved
    content.vb: Public Event NodeRemoved As XmlNodeChangedEventHandler
    return:
      type: System.Xml.XmlNodeChangedEventHandler
  seealso:
  - type: System.Xml.XmlNodeChangedEventArgs
    commentId: T:System.Xml.XmlNodeChangedEventArgs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.NodeRemoved
- uid: System.Xml.XmlDocument.NodeRemoving
  commentId: E:System.Xml.XmlDocument.NodeRemoving
  id: NodeRemoving
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: NodeRemoving
  fullName: System.Xml.XmlDocument.NodeRemoving
  type: Event
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeRemoving
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 131
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Occurs when a node belonging to this document is about to be removed from the document.</p>\n"
  syntax:
    content: public event XmlNodeChangedEventHandler NodeRemoving
    content.vb: Public Event NodeRemoving As XmlNodeChangedEventHandler
    return:
      type: System.Xml.XmlNodeChangedEventHandler
  seealso:
  - type: System.Xml.XmlNodeChangedEventArgs
    commentId: T:System.Xml.XmlNodeChangedEventArgs
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.NodeRemoving
- uid: System.Xml.XmlDocument.CloneNode(System.Boolean)
  commentId: M:System.Xml.XmlDocument.CloneNode(System.Boolean)
  id: CloneNode(System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CloneNode(Boolean)
  fullName: System.Xml.XmlDocument.CloneNode(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloneNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 132
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates a duplicate of this node.</p>\n"
  syntax:
    content: public override XmlNode CloneNode(bool deep)
    content.vb: Public Overrides Function CloneNode(deep As Boolean) As XmlNode
    parameters:
    - id: deep
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to recursively clone the subtree under the specified node; <strong>false</strong> to clone only the node itself. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The cloned <strong>XmlDocument</strong> node.</p>\n"
  overridden: System.Xml.XmlNode.CloneNode(System.Boolean)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: XmlDocument.CloneNode(Boolean)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String)
  commentId: M:System.Xml.XmlDocument.CreateAttribute(System.String)
  id: CreateAttribute(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateAttribute(String)
  fullName: System.Xml.XmlDocument.CreateAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 133
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the specified <xref href=\"System.Xml.XmlDocument.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XmlAttribute CreateAttribute(string name)
    content.vb: Public Function CreateAttribute(name As String) As XmlAttribute
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute. If the name contains a colon, the <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref> property reflects the part of the name preceding the first colon and the <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> property reflects the part of the name following the first colon. The <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> remains empty unless the prefix is a recognized built-in prefix such as xmlns. In this case <strong>NamespaceURI</strong> has a value of http://www.w3.org/2000/xmlns/. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The new <strong>XmlAttribute</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.CreateAttribute(String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String)
  id: CreateAttribute(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateAttribute(String, String)
  fullName: System.Xml.XmlDocument.CreateAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 134
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the specified qualified name and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XmlAttribute CreateAttribute(string qualifiedName, string namespaceURI)
    content.vb: Public Function CreateAttribute(qualifiedName As String, namespaceURI As String) As XmlAttribute
    parameters:
    - id: qualifiedName
      type: System.String
      description: "\n<p>The qualified name of the attribute. If the name contains a colon then the <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref> property will reflect the part of the name preceding the colon and the <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> property will reflect the part of the name after the colon. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespaceURI of the attribute. If the qualified name includes a prefix of xmlns, then this parameter must be http://www.w3.org/2000/xmlns/. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The new <strong>XmlAttribute</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.CreateAttribute(String, String)
- uid: System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateAttribute(System.String,System.String,System.String)
  id: CreateAttribute(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateAttribute(String, String, String)
  fullName: System.Xml.XmlDocument.CreateAttribute(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateAttribute
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 135
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlAttribute\" data-throw-if-not-resolved=\"false\"></xref> with the specified <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlAttribute CreateAttribute(string prefix, string localName, string namespaceURI)
    content.vb: Public Overridable Function CreateAttribute(prefix As String, localName As String, namespaceURI As String) As XmlAttribute
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the attribute (if any). String.Empty and <strong>null</strong> are equivalent. </p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the attribute. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute (if any). String.Empty and <strong>null</strong> are equivalent. If <em>prefix</em> is xmlns, then this parameter must be http://www.w3.org/2000/xmlns/; otherwise an exception is thrown. </p>\n"
    return:
      type: System.Xml.XmlAttribute
      description: "\n<p>The new <strong>XmlAttribute</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateAttribute(String, String, String)
- uid: System.Xml.XmlDocument.CreateCDataSection(System.String)
  commentId: M:System.Xml.XmlDocument.CreateCDataSection(System.String)
  id: CreateCDataSection(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateCDataSection(String)
  fullName: System.Xml.XmlDocument.CreateCDataSection(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateCDataSection
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 136
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlCDataSection\" data-throw-if-not-resolved=\"false\"></xref> containing the specified data.</p>\n"
  syntax:
    content: public virtual XmlCDataSection CreateCDataSection(string data)
    content.vb: Public Overridable Function CreateCDataSection(data As String) As XmlCDataSection
    parameters:
    - id: data
      type: System.String
      description: "\n<p>The content of the new <strong>XmlCDataSection</strong>. </p>\n"
    return:
      type: System.Xml.XmlCDataSection
      description: "\n<p>The new <strong>XmlCDataSection</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateCDataSection(String)
- uid: System.Xml.XmlDocument.CreateComment(System.String)
  commentId: M:System.Xml.XmlDocument.CreateComment(System.String)
  id: CreateComment(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateComment(String)
  fullName: System.Xml.XmlDocument.CreateComment(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateComment
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 137
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlComment\" data-throw-if-not-resolved=\"false\"></xref> containing the specified data.</p>\n"
  syntax:
    content: public virtual XmlComment CreateComment(string data)
    content.vb: Public Overridable Function CreateComment(data As String) As XmlComment
    parameters:
    - id: data
      type: System.String
      description: "\n<p>The content of the new <strong>XmlComment</strong>. </p>\n"
    return:
      type: System.Xml.XmlComment
      description: "\n<p>The new <strong>XmlComment</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateComment(String)
- uid: System.Xml.XmlDocument.CreateDocumentFragment
  commentId: M:System.Xml.XmlDocument.CreateDocumentFragment
  id: CreateDocumentFragment
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateDocumentFragment()
  fullName: System.Xml.XmlDocument.CreateDocumentFragment()
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDocumentFragment
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 138
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlDocumentFragment\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlDocumentFragment CreateDocumentFragment()
    content.vb: Public Overridable Function CreateDocumentFragment As XmlDocumentFragment
    return:
      type: System.Xml.XmlDocumentFragment
      description: "\n<p>The new <strong>XmlDocumentFragment</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateDocumentFragment()
- uid: System.Xml.XmlDocument.CreateElement(System.String)
  commentId: M:System.Xml.XmlDocument.CreateElement(System.String)
  id: CreateElement(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateElement(String)
  fullName: System.Xml.XmlDocument.CreateElement(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateElement
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 139
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an element with the specified name.</p>\n"
  syntax:
    content: public XmlElement CreateElement(string name)
    content.vb: Public Function CreateElement(name As String) As XmlElement
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element. If the name contains a colon then the <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref> property reflects the part of the name preceding the colon and the <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> property reflects the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </p>\n"
    return:
      type: System.Xml.XmlElement
      description: "\n<p>The new <strong>XmlElement</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.CreateElement(String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateElement(System.String,System.String)
  id: CreateElement(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateElement(String, String)
  fullName: System.Xml.XmlDocument.CreateElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateElement
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 140
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref> with the qualified name and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public XmlElement CreateElement(string qualifiedName, string namespaceURI)
    content.vb: Public Function CreateElement(qualifiedName As String, namespaceURI As String) As XmlElement
    parameters:
    - id: qualifiedName
      type: System.String
      description: "\n<p>The qualified name of the element. If the name contains a colon then the <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref> property will reflect the part of the name preceding the colon and the <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> property will reflect the part of the name after the colon. The qualified name cannot include a prefix of'xmlns'. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element. </p>\n"
    return:
      type: System.Xml.XmlElement
      description: "\n<p>The new <strong>XmlElement</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlDocument.CreateElement(String, String)
- uid: System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateElement(System.String,System.String,System.String)
  id: CreateElement(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateElement(String, String, String)
  fullName: System.Xml.XmlDocument.CreateElement(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateElement
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 141
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an element with the specified <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlElement CreateElement(string prefix, string localName, string namespaceURI)
    content.vb: Public Overridable Function CreateElement(prefix As String, localName As String, namespaceURI As String) As XmlElement
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the new element (if any). String.Empty and <strong>null</strong> are equivalent. </p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the new element. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the new element (if any). String.Empty and <strong>null</strong> are equivalent. </p>\n"
    return:
      type: System.Xml.XmlElement
      description: "\n<p>The new <xref href=\"System.Xml.XmlElement\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateElement(String, String, String)
- uid: System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateNode(System.String,System.String,System.String)
  id: CreateNode(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateNode(String, String, String)
  fullName: System.Xml.XmlDocument.CreateNode(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 142
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> with the specified node type, <xref href=\"System.Xml.XmlDocument.Name\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlNode CreateNode(string nodeTypeString, string name, string namespaceURI)
    content.vb: Public Overridable Function CreateNode(nodeTypeString As String, name As String, namespaceURI As String) As XmlNode
    parameters:
    - id: nodeTypeString
      type: System.String
      description: "\n<p>String version of the <xref href=\"System.Xml.XmlNodeType\" data-throw-if-not-resolved=\"false\"></xref> of the new node. This parameter must be one of the values listed in the table below. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the new node. If the name contains a colon, it is parsed into <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> components. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the new node. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The new <strong>XmlNode</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name; or <em>nodeTypeString</em> is not one of the strings listed below. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateNode(String, String, String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateNode(XmlNodeType, String, String)
  fullName: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 143
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> with the specified <xref href=\"System.Xml.XmlNodeType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.Name\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlNode CreateNode(XmlNodeType type, string name, string namespaceURI)
    content.vb: Public Overridable Function CreateNode(type As XmlNodeType, name As String, namespaceURI As String) As XmlNode
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "\n<p>The <strong>XmlNodeType</strong> of the new node. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the new node. If the name contains a colon then it is parsed into <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> components. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the new node. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The new <strong>XmlNode</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateNode(XmlNodeType, String, String)
- uid: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  id: CreateNode(System.Xml.XmlNodeType,System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateNode(XmlNodeType, String, String, String)
  fullName: System.Xml.XmlDocument.CreateNode(System.Xml.XmlNodeType, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 144
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates a <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> with the specified <xref href=\"System.Xml.XmlNodeType\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlNode.Prefix\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Xml.XmlDocument.Name\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlNode CreateNode(XmlNodeType type, string prefix, string name, string namespaceURI)
    content.vb: Public Overridable Function CreateNode(type As XmlNodeType, prefix As String, name As String, namespaceURI As String) As XmlNode
    parameters:
    - id: type
      type: System.Xml.XmlNodeType
      description: "\n<p>The <strong>XmlNodeType</strong> of the new node. </p>\n"
    - id: prefix
      type: System.String
      description: "\n<p>The prefix of the new node. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The local name of the new node. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the new node. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The new <strong>XmlNode</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The name was not provided and the <strong>XmlNodeType</strong> requires a name. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateNode(XmlNodeType, String, String, String)
- uid: System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateProcessingInstruction(System.String,System.String)
  id: CreateProcessingInstruction(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateProcessingInstruction(String, String)
  fullName: System.Xml.XmlDocument.CreateProcessingInstruction(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProcessingInstruction
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 145
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlProcessingInstruction\" data-throw-if-not-resolved=\"false\"></xref> with the specified name and data.</p>\n"
  syntax:
    content: public virtual XmlProcessingInstruction CreateProcessingInstruction(string target, string data)
    content.vb: Public Overridable Function CreateProcessingInstruction(target As String, data As String) As XmlProcessingInstruction
    parameters:
    - id: target
      type: System.String
      description: "\n<p>The name of the processing instruction. </p>\n"
    - id: data
      type: System.String
      description: "\n<p>The data for the processing instruction. </p>\n"
    return:
      type: System.Xml.XmlProcessingInstruction
      description: "\n<p>The new <strong>XmlProcessingInstruction</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateProcessingInstruction(String, String)
- uid: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  commentId: M:System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  id: CreateSignificantWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateSignificantWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateSignificantWhitespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateSignificantWhitespace
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 146
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlSignificantWhitespace\" data-throw-if-not-resolved=\"false\"></xref> node.</p>\n"
  syntax:
    content: public virtual XmlSignificantWhitespace CreateSignificantWhitespace(string text)
    content.vb: Public Overridable Function CreateSignificantWhitespace(text As String) As XmlSignificantWhitespace
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The string must contain only the following characters &#20; &#10; &#13; and &#9; </p>\n"
    return:
      type: System.Xml.XmlSignificantWhitespace
      description: "\n<p>A new <strong>XmlSignificantWhitespace</strong> node.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateSignificantWhitespace(String)
- uid: System.Xml.XmlDocument.CreateTextNode(System.String)
  commentId: M:System.Xml.XmlDocument.CreateTextNode(System.String)
  id: CreateTextNode(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateTextNode(String)
  fullName: System.Xml.XmlDocument.CreateTextNode(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateTextNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 147
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlText\" data-throw-if-not-resolved=\"false\"></xref> with the specified text.</p>\n"
  syntax:
    content: public virtual XmlText CreateTextNode(string text)
    content.vb: Public Overridable Function CreateTextNode(text As String) As XmlText
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The text for the Text node. </p>\n"
    return:
      type: System.Xml.XmlText
      description: "\n<p>The new <strong>XmlText</strong> node.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateTextNode(String)
- uid: System.Xml.XmlDocument.CreateWhitespace(System.String)
  commentId: M:System.Xml.XmlDocument.CreateWhitespace(System.String)
  id: CreateWhitespace(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateWhitespace(String)
  fullName: System.Xml.XmlDocument.CreateWhitespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateWhitespace
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 148
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlWhitespace\" data-throw-if-not-resolved=\"false\"></xref> node.</p>\n"
  syntax:
    content: public virtual XmlWhitespace CreateWhitespace(string text)
    content.vb: Public Overridable Function CreateWhitespace(text As String) As XmlWhitespace
    parameters:
    - id: text
      type: System.String
      description: "\n<p>The string must contain only the following characters &#20; &#10; &#13; and &#9; </p>\n"
    return:
      type: System.Xml.XmlWhitespace
      description: "\n<p>A new <strong>XmlWhitespace</strong> node.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateWhitespace(String)
- uid: System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  commentId: M:System.Xml.XmlDocument.CreateXmlDeclaration(System.String,System.String,System.String)
  id: CreateXmlDeclaration(System.String,System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: CreateXmlDeclaration(String, String, String)
  fullName: System.Xml.XmlDocument.CreateXmlDeclaration(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateXmlDeclaration
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 149
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlDeclaration\" data-throw-if-not-resolved=\"false\"></xref> node with the specified values.</p>\n"
  syntax:
    content: public virtual XmlDeclaration CreateXmlDeclaration(string version, string encoding, string standalone)
    content.vb: Public Overridable Function CreateXmlDeclaration(version As String, encoding As String, standalone As String) As XmlDeclaration
    parameters:
    - id: version
      type: System.String
      description: "\n<p>The version must be \"1.0\". </p>\n"
    - id: encoding
      type: System.String
      description: "\n<p>The value of the encoding attribute. This is the encoding that is used when you save the <xref href=\"System.Xml.XmlDocument\" data-throw-if-not-resolved=\"false\"></xref> to a file or a stream; therefore, it must be set to a string supported by the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class, otherwise <xref href=\"System.Xml.XmlDocument.Save(System.String)\" data-throw-if-not-resolved=\"false\"></xref> fails. If this is <strong>null</strong> or String.Empty, the <strong>Save</strong> method does not write an encoding attribute on the XML declaration and therefore the default encoding, UTF-8, is used.</p>\n<p>Note: If the <strong>XmlDocument</strong> is saved to either a <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> or an <xref href=\"System.Xml.XmlTextWriter\" data-throw-if-not-resolved=\"false\"></xref>, this encoding value is discarded. Instead, the encoding of the <strong>TextWriter</strong> or the <strong>XmlTextWriter</strong> is used. This ensures that the XML written out can be read back using the correct encoding. </p>\n"
    - id: standalone
      type: System.String
      description: "\n<p>The value must be either \"yes\" or \"no\". If this is <strong>null</strong> or String.Empty, the <strong>Save</strong> method does not write a standalone attribute on the XML declaration. </p>\n"
    return:
      type: System.Xml.XmlDeclaration
      description: "\n<p>The new <strong>XmlDeclaration</strong> node.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The values of <em>version</em> or <em>standalone</em> are something other than the ones specified above. </p>\n"
  seealso:
  - type: System.Xml.XmlDeclaration
    commentId: T:System.Xml.XmlDeclaration
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.CreateXmlDeclaration(String, String, String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  commentId: M:System.Xml.XmlDocument.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: GetElementsByTagName(String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementsByTagName
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 150
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns an <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all descendant elements that match the specified <xref href=\"System.Xml.XmlDocument.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlNodeList GetElementsByTagName(string name)
    content.vb: Public Overridable Function GetElementsByTagName(name As String) As XmlNodeList
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name to match. It is matched against the <strong>Name</strong> property of the matching node. The special value \"*\" matches all tags. </p>\n"
    return:
      type: System.Xml.XmlNodeList
      description: "\n<p>An <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all matching nodes. If no nodes match <em>name</em>, the returned collection will be empty.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.GetElementsByTagName(String)
- uid: System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  commentId: M:System.Xml.XmlDocument.GetElementsByTagName(System.String,System.String)
  id: GetElementsByTagName(System.String,System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: GetElementsByTagName(String, String)
  fullName: System.Xml.XmlDocument.GetElementsByTagName(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementsByTagName
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 151
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Returns an <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all descendant elements that match the specified <xref href=\"System.Xml.XmlDocument.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlNode.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual XmlNodeList GetElementsByTagName(string localName, string namespaceURI)
    content.vb: Public Overridable Function GetElementsByTagName(localName As String, namespaceURI As String) As XmlNodeList
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The LocalName to match. The special value \"*\" matches all tags. </p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>NamespaceURI to match. </p>\n"
    return:
      type: System.Xml.XmlNodeList
      description: "\n<p>An <xref href=\"System.Xml.XmlNodeList\" data-throw-if-not-resolved=\"false\"></xref> containing a list of all matching nodes. If no nodes match the specified <em>localName</em> and <em>namespaceURI</em>, the returned collection will be empty.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.GetElementsByTagName(String, String)
- uid: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  id: ImportNode(System.Xml.XmlNode,System.Boolean)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: ImportNode(XmlNode, Boolean)
  fullName: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ImportNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 152
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Imports a node from another document to the current document.</p>\n"
  syntax:
    content: public virtual XmlNode ImportNode(XmlNode node, bool deep)
    content.vb: Public Overridable Function ImportNode(node As XmlNode, deep As Boolean) As XmlNode
    parameters:
    - id: node
      type: System.Xml.XmlNode
      description: "\n<p>The node being imported. </p>\n"
    - id: deep
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to perform a deep clone; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The imported <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Calling this method on a node type which cannot be imported. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.ImportNode(XmlNode, Boolean)
- uid: System.Xml.XmlDocument.Load(System.IO.Stream)
  commentId: M:System.Xml.XmlDocument.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Load(Stream)
  fullName: System.Xml.XmlDocument.Load(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 153
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Loads the XML document from the specified stream.</p>\n"
  syntax:
    content: public virtual void Load(Stream inStream)
    content.vb: Public Overridable Sub Load(inStream As Stream)
    parameters:
    - id: inStream
      type: System.IO.Stream
      description: "\n<p>The stream containing the XML document to load. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>There is a load or parse error in the XML. In this case, a <xref href=\"System.IO.FileNotFoundException\" data-throw-if-not-resolved=\"false\"></xref> is raised. </p>\n"
  seealso:
  - type: System.Xml.Schema.ValidationEventArgs
    commentId: T:System.Xml.Schema.ValidationEventArgs
  - type: System.Xml.Schema.XmlSeverityType
    commentId: T:System.Xml.Schema.XmlSeverityType
  - type: System.Xml.XmlValidatingReader.Schemas
    commentId: P:System.Xml.XmlValidatingReader.Schemas
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.Load(Stream)
- uid: System.Xml.XmlDocument.Load(System.IO.TextReader)
  commentId: M:System.Xml.XmlDocument.Load(System.IO.TextReader)
  id: Load(System.IO.TextReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Load(TextReader)
  fullName: System.Xml.XmlDocument.Load(System.IO.TextReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 154
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Loads the XML document from the specified <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Load(TextReader txtReader)
    content.vb: Public Overridable Sub Load(txtReader As TextReader)
    parameters:
    - id: txtReader
      type: System.IO.TextReader
      description: "\n<p>The <strong>TextReader</strong> used to feed the XML data into the document. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>There is a load or parse error in the XML. In this case, the document remains empty. </p>\n"
  seealso:
  - type: System.IO.StreamReader
    commentId: T:System.IO.StreamReader
  - type: System.Xml.Schema.ValidationEventArgs
    commentId: T:System.Xml.Schema.ValidationEventArgs
  - type: System.Xml.Schema.XmlSeverityType
    commentId: T:System.Xml.Schema.XmlSeverityType
  - type: System.Xml.XmlValidatingReader.Schemas
    commentId: P:System.Xml.XmlValidatingReader.Schemas
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.Load(TextReader)
- uid: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  commentId: M:System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Load(XmlReader)
  fullName: System.Xml.XmlDocument.Load(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Load
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 155
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Loads the XML document from the specified <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Load(XmlReader reader)
    content.vb: Public Overridable Sub Load(reader As XmlReader)
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The <strong>XmlReader</strong> used to feed the XML data into the document. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>There is a load or parse error in the XML. In this case, the document remains empty. </p>\n"
  seealso:
  - type: System.Xml.Schema.ValidationEventArgs
    commentId: T:System.Xml.Schema.ValidationEventArgs
  - type: System.Xml.Schema.XmlSeverityType
    commentId: T:System.Xml.Schema.XmlSeverityType
  - type: System.Xml.XmlValidatingReader.Schemas
    commentId: P:System.Xml.XmlValidatingReader.Schemas
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.Load(XmlReader)
- uid: System.Xml.XmlDocument.LoadXml(System.String)
  commentId: M:System.Xml.XmlDocument.LoadXml(System.String)
  id: LoadXml(System.String)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: LoadXml(String)
  fullName: System.Xml.XmlDocument.LoadXml(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LoadXml
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 156
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Loads the XML document from the specified string.</p>\n"
  syntax:
    content: public virtual void LoadXml(string xml)
    content.vb: Public Overridable Sub LoadXml(xml As String)
    parameters:
    - id: xml
      type: System.String
      description: "\n<p>String containing the XML document to load. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>There is a load or parse error in the XML. In this case, the document remains empty. </p>\n"
  seealso:
  - type: System.Xml.XmlDocument.PreserveWhitespace
    commentId: P:System.Xml.XmlDocument.PreserveWhitespace
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.LoadXml(String)
- uid: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  commentId: M:System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  id: ReadNode(System.Xml.XmlReader)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: ReadNode(XmlReader)
  fullName: System.Xml.XmlDocument.ReadNode(System.Xml.XmlReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadNode
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 157
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlNode\" data-throw-if-not-resolved=\"false\"></xref> object based on the information in the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. The reader must be positioned on a node or attribute.</p>\n"
  syntax:
    content: public virtual XmlNode ReadNode(XmlReader reader)
    content.vb: Public Overridable Function ReadNode(reader As XmlReader) As XmlNode
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The XML source </p>\n"
    return:
      type: System.Xml.XmlNode
      description: "\n<p>The new <strong>XmlNode</strong> or <strong>null</strong> if no more nodes exist.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The reader is positioned on a node type that does not translate to a valid DOM node (for example, EndElement or EndEntity). </p>\n"
  seealso:
  - type: System.Xml.XmlReader
    commentId: T:System.Xml.XmlReader
  - type: System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
    commentId: M:System.Xml.XmlDocument.ImportNode(System.Xml.XmlNode,System.Boolean)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.ReadNode(XmlReader)
- uid: System.Xml.XmlDocument.Save(System.IO.Stream)
  commentId: M:System.Xml.XmlDocument.Save(System.IO.Stream)
  id: Save(System.IO.Stream)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Save(Stream)
  fullName: System.Xml.XmlDocument.Save(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 158
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves the XML document to the specified stream.</p>\n"
  syntax:
    content: public virtual void Save(Stream outStream)
    content.vb: Public Overridable Sub Save(outStream As Stream)
    parameters:
    - id: outStream
      type: System.IO.Stream
      description: "\n<p>The stream to which you want to save. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.Save(Stream)
- uid: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  commentId: M:System.Xml.XmlDocument.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Save(TextWriter)
  fullName: System.Xml.XmlDocument.Save(System.IO.TextWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 159
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves the XML document to the specified <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Save(TextWriter writer)
    content.vb: Public Overridable Sub Save(writer As TextWriter)
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "\n<p>The <strong>TextWriter</strong> to which you want to save. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.Save(TextWriter)
- uid: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  commentId: M:System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  id: Save(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: Save(XmlWriter)
  fullName: System.Xml.XmlDocument.Save(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Save
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 160
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves the XML document to the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Save(XmlWriter w)
    content.vb: Public Overridable Sub Save(w As XmlWriter)
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The operation would not result in a well formed XML document (for example, no document element or duplicate XML declarations). </p>\n"
  seealso:
  - type: System.Xml.XmlTextWriter.Formatting
    commentId: P:System.Xml.XmlTextWriter.Formatting
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: XmlDocument.Save(XmlWriter)
- uid: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  commentId: M:System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  id: WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteContentTo(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteContentTo
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 161
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves all the children of the <strong>XmlDocument</strong> node to the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override void WriteContentTo(XmlWriter xw)
    content.vb: Public Overrides Sub WriteContentTo(xw As XmlWriter)
    parameters:
    - id: xw
      type: System.Xml.XmlWriter
      description: "\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\n"
  overridden: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: XmlDocument.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  commentId: M:System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  id: WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlDocument
  langs:
  - csharp
  - vb
  name: WriteTo(XmlWriter)
  fullName: System.Xml.XmlDocument.WriteTo(System.Xml.XmlWriter)
  type: Method
  source:
    remote:
      path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Xml.XmlDocument/ref/System.Xml.XmlDocument.cs
    startLine: 162
  assemblies:
  - System.Xml.XmlDocument
  namespace: System.Xml
  summary: "\n<p>Saves the <strong>XmlDocument</strong> node to the specified <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override void WriteTo(XmlWriter w)
    content.vb: Public Overrides Sub WriteTo(w As XmlWriter)
    parameters:
    - id: w
      type: System.Xml.XmlWriter
      description: "\n<p>The <strong>XmlWriter</strong> to which you want to save. </p>\n"
  overridden: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: XmlDocument.WriteTo(XmlWriter)
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
  commentId: N:System.Xml
  nameWithType: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  fullName: System.Xml.XmlNode
  commentId: T:System.Xml.XmlNode
  nameWithType: XmlNode
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  nameWithType: IEnumerable
- uid: System.Xml.XmlNode.Attributes
  parent: System.Xml.XmlNode
  isExternal: false
  name: Attributes
  fullName: System.Xml.XmlNode.Attributes
  commentId: P:System.Xml.XmlNode.Attributes
  nameWithType: XmlNode.Attributes
- uid: System.Xml.XmlNode.ChildNodes
  parent: System.Xml.XmlNode
  isExternal: false
  name: ChildNodes
  fullName: System.Xml.XmlNode.ChildNodes
  commentId: P:System.Xml.XmlNode.ChildNodes
  nameWithType: XmlNode.ChildNodes
- uid: System.Xml.XmlNode.FirstChild
  parent: System.Xml.XmlNode
  isExternal: false
  name: FirstChild
  fullName: System.Xml.XmlNode.FirstChild
  commentId: P:System.Xml.XmlNode.FirstChild
  nameWithType: XmlNode.FirstChild
- uid: System.Xml.XmlNode.HasChildNodes
  parent: System.Xml.XmlNode
  isExternal: false
  name: HasChildNodes
  fullName: System.Xml.XmlNode.HasChildNodes
  commentId: P:System.Xml.XmlNode.HasChildNodes
  nameWithType: XmlNode.HasChildNodes
- uid: System.Xml.XmlNode.Item(System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: Item[String]
  fullName: System.Xml.XmlNode.Item[System.String]
  fullname.vb: System.Xml.XmlNode.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Xml.XmlNode.Item(System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: '['
    fullName: '['
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Xml.XmlNode.Item(System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  commentId: P:System.Xml.XmlNode.Item(System.String)
  nameWithType: XmlNode.Item[String]
  nameWithType.vb: XmlNode.Item(String)
- uid: System.Xml.XmlNode.Item(System.String,System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: Item[String, String]
  fullName: System.Xml.XmlNode.Item[System.String, System.String]
  fullname.vb: System.Xml.XmlNode.Item(System.String, System.String)
  name.vb: Item(String, String)
  spec.csharp:
  - uid: System.Xml.XmlNode.Item(System.String,System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: '['
    fullName: '['
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Xml.XmlNode.Item(System.String,System.String)
    name: Item
    fullName: System.Xml.XmlNode.Item
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  commentId: P:System.Xml.XmlNode.Item(System.String,System.String)
  nameWithType: XmlNode.Item[String, String]
  nameWithType.vb: XmlNode.Item(String, String)
- uid: System.Xml.XmlNode.LastChild
  parent: System.Xml.XmlNode
  isExternal: false
  name: LastChild
  fullName: System.Xml.XmlNode.LastChild
  commentId: P:System.Xml.XmlNode.LastChild
  nameWithType: XmlNode.LastChild
- uid: System.Xml.XmlNode.NamespaceURI
  parent: System.Xml.XmlNode
  isExternal: false
  name: NamespaceURI
  fullName: System.Xml.XmlNode.NamespaceURI
  commentId: P:System.Xml.XmlNode.NamespaceURI
  nameWithType: XmlNode.NamespaceURI
- uid: System.Xml.XmlNode.NextSibling
  parent: System.Xml.XmlNode
  isExternal: false
  name: NextSibling
  fullName: System.Xml.XmlNode.NextSibling
  commentId: P:System.Xml.XmlNode.NextSibling
  nameWithType: XmlNode.NextSibling
- uid: System.Xml.XmlNode.OuterXml
  parent: System.Xml.XmlNode
  isExternal: false
  name: OuterXml
  fullName: System.Xml.XmlNode.OuterXml
  commentId: P:System.Xml.XmlNode.OuterXml
  nameWithType: XmlNode.OuterXml
- uid: System.Xml.XmlNode.Prefix
  parent: System.Xml.XmlNode
  isExternal: false
  name: Prefix
  fullName: System.Xml.XmlNode.Prefix
  commentId: P:System.Xml.XmlNode.Prefix
  nameWithType: XmlNode.Prefix
- uid: System.Xml.XmlNode.PreviousSibling
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousSibling
  fullName: System.Xml.XmlNode.PreviousSibling
  commentId: P:System.Xml.XmlNode.PreviousSibling
  nameWithType: XmlNode.PreviousSibling
- uid: System.Xml.XmlNode.PreviousText
  parent: System.Xml.XmlNode
  isExternal: false
  name: PreviousText
  fullName: System.Xml.XmlNode.PreviousText
  commentId: P:System.Xml.XmlNode.PreviousText
  nameWithType: XmlNode.PreviousText
- uid: System.Xml.XmlNode.Value
  parent: System.Xml.XmlNode
  isExternal: false
  name: Value
  fullName: System.Xml.XmlNode.Value
  commentId: P:System.Xml.XmlNode.Value
  nameWithType: XmlNode.Value
- uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: AppendChild(XmlNode)
  fullName: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
    name: AppendChild
    fullName: System.Xml.XmlNode.AppendChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
    name: AppendChild
    fullName: System.Xml.XmlNode.AppendChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.AppendChild(System.Xml.XmlNode)
  nameWithType: XmlNode.AppendChild(XmlNode)
- uid: System.Xml.XmlNode.GetEnumerator
  parent: System.Xml.XmlNode
  isExternal: false
  name: GetEnumerator()
  fullName: System.Xml.XmlNode.GetEnumerator()
  spec.csharp:
  - uid: System.Xml.XmlNode.GetEnumerator
    name: GetEnumerator
    fullName: System.Xml.XmlNode.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.GetEnumerator
    name: GetEnumerator
    fullName: System.Xml.XmlNode.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.GetEnumerator
  nameWithType: XmlNode.GetEnumerator()
- uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: GetNamespaceOfPrefix(String)
  fullName: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
    name: GetNamespaceOfPrefix
    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
    name: GetNamespaceOfPrefix
    fullName: System.Xml.XmlNode.GetNamespaceOfPrefix
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.GetNamespaceOfPrefix(System.String)
  nameWithType: XmlNode.GetNamespaceOfPrefix(String)
- uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: GetPrefixOfNamespace(String)
  fullName: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  spec.csharp:
  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
    name: GetPrefixOfNamespace
    fullName: System.Xml.XmlNode.GetPrefixOfNamespace
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
    name: GetPrefixOfNamespace
    fullName: System.Xml.XmlNode.GetPrefixOfNamespace
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.GetPrefixOfNamespace(System.String)
  nameWithType: XmlNode.GetPrefixOfNamespace(String)
- uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertAfter(XmlNode, XmlNode)
  fullName: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode, System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertAfter
    fullName: System.Xml.XmlNode.InsertAfter
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertAfter
    fullName: System.Xml.XmlNode.InsertAfter
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.InsertAfter(System.Xml.XmlNode,System.Xml.XmlNode)
  nameWithType: XmlNode.InsertAfter(XmlNode, XmlNode)
- uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: InsertBefore(XmlNode, XmlNode)
  fullName: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode, System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertBefore
    fullName: System.Xml.XmlNode.InsertBefore
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
    name: InsertBefore
    fullName: System.Xml.XmlNode.InsertBefore
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.InsertBefore(System.Xml.XmlNode,System.Xml.XmlNode)
  nameWithType: XmlNode.InsertBefore(XmlNode, XmlNode)
- uid: System.Xml.XmlNode.Normalize
  parent: System.Xml.XmlNode
  isExternal: false
  name: Normalize()
  fullName: System.Xml.XmlNode.Normalize()
  spec.csharp:
  - uid: System.Xml.XmlNode.Normalize
    name: Normalize
    fullName: System.Xml.XmlNode.Normalize
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.Normalize
    name: Normalize
    fullName: System.Xml.XmlNode.Normalize
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.Normalize
  nameWithType: XmlNode.Normalize()
- uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: PrependChild(XmlNode)
  fullName: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
    name: PrependChild
    fullName: System.Xml.XmlNode.PrependChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
    name: PrependChild
    fullName: System.Xml.XmlNode.PrependChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.PrependChild(System.Xml.XmlNode)
  nameWithType: XmlNode.PrependChild(XmlNode)
- uid: System.Xml.XmlNode.RemoveAll
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveAll()
  fullName: System.Xml.XmlNode.RemoveAll()
  spec.csharp:
  - uid: System.Xml.XmlNode.RemoveAll
    name: RemoveAll
    fullName: System.Xml.XmlNode.RemoveAll
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.RemoveAll
    name: RemoveAll
    fullName: System.Xml.XmlNode.RemoveAll
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.RemoveAll
  nameWithType: XmlNode.RemoveAll()
- uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: RemoveChild(XmlNode)
  fullName: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
    name: RemoveChild
    fullName: System.Xml.XmlNode.RemoveChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
    name: RemoveChild
    fullName: System.Xml.XmlNode.RemoveChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.RemoveChild(System.Xml.XmlNode)
  nameWithType: XmlNode.RemoveChild(XmlNode)
- uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  parent: System.Xml.XmlNode
  isExternal: false
  name: ReplaceChild(XmlNode, XmlNode)
  fullName: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode, System.Xml.XmlNode)
  spec.csharp:
  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
    name: ReplaceChild
    fullName: System.Xml.XmlNode.ReplaceChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
    name: ReplaceChild
    fullName: System.Xml.XmlNode.ReplaceChild
  - name: (
    fullName: (
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlNode
    name: XmlNode
    fullName: System.Xml.XmlNode
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.ReplaceChild(System.Xml.XmlNode,System.Xml.XmlNode)
  nameWithType: XmlNode.ReplaceChild(XmlNode, XmlNode)
- uid: System.Xml.XmlNode.Supports(System.String,System.String)
  parent: System.Xml.XmlNode
  isExternal: true
  name: Supports(String, String)
  fullName: System.Xml.XmlNode.Supports(System.String, System.String)
  spec.csharp:
  - uid: System.Xml.XmlNode.Supports(System.String,System.String)
    name: Supports
    fullName: System.Xml.XmlNode.Supports
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.Supports(System.String,System.String)
    name: Supports
    fullName: System.Xml.XmlNode.Supports
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.Supports(System.String,System.String)
  nameWithType: XmlNode.Supports(String, String)
- uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  parent: System.Xml.XmlNode
  isExternal: false
  name: IEnumerable.GetEnumerator()
  fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    fullName: System.Xml.XmlNode.System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.System#Collections#IEnumerable#GetEnumerator
  nameWithType: XmlNode.IEnumerable.GetEnumerator()
  nameWithType.vb: XmlNode.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  nameWithType: Queryable.AsQueryable()
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel()
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  commentId: N:System.Collections
  nameWithType: System.Collections
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
- uid: System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  fullName: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  nameWithType: Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  nameWithType: ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
- uid: System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  fullName: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  nameWithType: Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  commentId: N:System.Linq
  nameWithType: System.Linq
- uid: System.Xml.XmlImplementation
  parent: System.Xml
  isExternal: false
  name: XmlImplementation
  fullName: System.Xml.XmlImplementation
  commentId: T:System.Xml.XmlImplementation
  nameWithType: XmlImplementation
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: XmlNameTable
  fullName: System.Xml.XmlNameTable
  commentId: T:System.Xml.XmlNameTable
  nameWithType: XmlNameTable
- uid: System.Xml.XmlNode.BaseURI
  parent: System.Xml.XmlNode
  isExternal: false
  name: BaseURI
  fullName: System.Xml.XmlNode.BaseURI
  commentId: P:System.Xml.XmlNode.BaseURI
  nameWithType: XmlNode.BaseURI
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Xml.XmlElement
  parent: System.Xml
  isExternal: false
  name: XmlElement
  fullName: System.Xml.XmlElement
  commentId: T:System.Xml.XmlElement
  nameWithType: XmlElement
- uid: System.Xml.XmlNode.InnerText
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerText
  fullName: System.Xml.XmlNode.InnerText
  commentId: P:System.Xml.XmlNode.InnerText
  nameWithType: XmlNode.InnerText
- uid: System.Xml.XmlNode.InnerXml
  parent: System.Xml.XmlNode
  isExternal: false
  name: InnerXml
  fullName: System.Xml.XmlNode.InnerXml
  commentId: P:System.Xml.XmlNode.InnerXml
  nameWithType: XmlNode.InnerXml
- uid: System.Xml.XmlNode.IsReadOnly
  parent: System.Xml.XmlNode
  isExternal: false
  name: IsReadOnly
  fullName: System.Xml.XmlNode.IsReadOnly
  commentId: P:System.Xml.XmlNode.IsReadOnly
  nameWithType: XmlNode.IsReadOnly
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Xml.XmlNode.LocalName
  parent: System.Xml.XmlNode
  isExternal: false
  name: LocalName
  fullName: System.Xml.XmlNode.LocalName
  commentId: P:System.Xml.XmlNode.LocalName
  nameWithType: XmlNode.LocalName
- uid: System.Xml.XmlNode.Name
  parent: System.Xml.XmlNode
  isExternal: false
  name: Name
  fullName: System.Xml.XmlNode.Name
  commentId: P:System.Xml.XmlNode.Name
  nameWithType: XmlNode.Name
- uid: System.Xml.XmlNode.NodeType
  parent: System.Xml.XmlNode
  isExternal: false
  name: NodeType
  fullName: System.Xml.XmlNode.NodeType
  commentId: P:System.Xml.XmlNode.NodeType
  nameWithType: XmlNode.NodeType
- uid: System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  fullName: System.Xml.XmlNodeType
  commentId: T:System.Xml.XmlNodeType
  nameWithType: XmlNodeType
- uid: System.Xml.XmlNode.OwnerDocument
  parent: System.Xml.XmlNode
  isExternal: false
  name: OwnerDocument
  fullName: System.Xml.XmlNode.OwnerDocument
  commentId: P:System.Xml.XmlNode.OwnerDocument
  nameWithType: XmlNode.OwnerDocument
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  fullName: System.Xml.XmlDocument
  commentId: T:System.Xml.XmlDocument
  nameWithType: XmlDocument
- uid: System.Xml.XmlNode.ParentNode
  parent: System.Xml.XmlNode
  isExternal: false
  name: ParentNode
  fullName: System.Xml.XmlNode.ParentNode
  commentId: P:System.Xml.XmlNode.ParentNode
  nameWithType: XmlNode.ParentNode
- uid: System.Xml.XmlNodeChangedEventHandler
  parent: System.Xml
  isExternal: false
  name: XmlNodeChangedEventHandler
  fullName: System.Xml.XmlNodeChangedEventHandler
  commentId: T:System.Xml.XmlNodeChangedEventHandler
  nameWithType: XmlNodeChangedEventHandler
- uid: System.Xml.XmlNode.CloneNode(System.Boolean)
  parent: System.Xml.XmlNode
  isExternal: true
  name: CloneNode(Boolean)
  fullName: System.Xml.XmlNode.CloneNode(System.Boolean)
  spec.csharp:
  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)
    name: CloneNode
    fullName: System.Xml.XmlNode.CloneNode
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.CloneNode(System.Boolean)
    name: CloneNode
    fullName: System.Xml.XmlNode.CloneNode
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.CloneNode(System.Boolean)
  nameWithType: XmlNode.CloneNode(Boolean)
- uid: System.Xml.XmlAttribute
  parent: System.Xml
  isExternal: false
  name: XmlAttribute
  fullName: System.Xml.XmlAttribute
  commentId: T:System.Xml.XmlAttribute
  nameWithType: XmlAttribute
- uid: System.Xml.XmlCDataSection
  parent: System.Xml
  isExternal: false
  name: XmlCDataSection
  fullName: System.Xml.XmlCDataSection
  commentId: T:System.Xml.XmlCDataSection
  nameWithType: XmlCDataSection
- uid: System.Xml.XmlComment
  parent: System.Xml
  isExternal: false
  name: XmlComment
  fullName: System.Xml.XmlComment
  commentId: T:System.Xml.XmlComment
  nameWithType: XmlComment
- uid: System.Xml.XmlDocumentFragment
  parent: System.Xml
  isExternal: false
  name: XmlDocumentFragment
  fullName: System.Xml.XmlDocumentFragment
  commentId: T:System.Xml.XmlDocumentFragment
  nameWithType: XmlDocumentFragment
- uid: System.Xml.XmlProcessingInstruction
  parent: System.Xml
  isExternal: false
  name: XmlProcessingInstruction
  fullName: System.Xml.XmlProcessingInstruction
  commentId: T:System.Xml.XmlProcessingInstruction
  nameWithType: XmlProcessingInstruction
- uid: System.Xml.XmlSignificantWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlSignificantWhitespace
  fullName: System.Xml.XmlSignificantWhitespace
  commentId: T:System.Xml.XmlSignificantWhitespace
  nameWithType: XmlSignificantWhitespace
- uid: System.Xml.XmlText
  parent: System.Xml
  isExternal: false
  name: XmlText
  fullName: System.Xml.XmlText
  commentId: T:System.Xml.XmlText
  nameWithType: XmlText
- uid: System.Xml.XmlWhitespace
  parent: System.Xml
  isExternal: false
  name: XmlWhitespace
  fullName: System.Xml.XmlWhitespace
  commentId: T:System.Xml.XmlWhitespace
  nameWithType: XmlWhitespace
- uid: System.Xml.XmlDeclaration
  parent: System.Xml
  isExternal: false
  name: XmlDeclaration
  fullName: System.Xml.XmlDeclaration
  commentId: T:System.Xml.XmlDeclaration
  nameWithType: XmlDeclaration
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  fullName: System.Xml.XmlNodeList
  commentId: T:System.Xml.XmlNodeList
  nameWithType: XmlNodeList
- uid: System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  fullName: System.IO.Stream
  commentId: T:System.IO.Stream
  nameWithType: Stream
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  commentId: N:System.IO
  nameWithType: System.IO
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  fullName: System.IO.TextReader
  commentId: T:System.IO.TextReader
  nameWithType: TextReader
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: Xml.XmlReader
  fullName: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  nameWithType: Xml.XmlReader
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: false
  name: TextWriter
  fullName: System.IO.TextWriter
  commentId: T:System.IO.TextWriter
  nameWithType: TextWriter
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: false
  name: Xml.XmlWriter
  fullName: System.Xml.XmlWriter
  commentId: T:System.Xml.XmlWriter
  nameWithType: Xml.XmlWriter
- uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  isExternal: true
  name: WriteContentTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
    name: WriteContentTo
    fullName: System.Xml.XmlNode.WriteContentTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
    name: WriteContentTo
    fullName: System.Xml.XmlNode.WriteContentTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.WriteContentTo(System.Xml.XmlWriter)
  nameWithType: XmlNode.WriteContentTo(XmlWriter)
- uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  parent: System.Xml.XmlNode
  isExternal: true
  name: WriteTo(XmlWriter)
  fullName: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  spec.csharp:
  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.XmlNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
    name: WriteTo
    fullName: System.Xml.XmlNode.WriteTo
  - name: (
    fullName: (
  - uid: System.Xml.XmlWriter
    name: XmlWriter
    fullName: System.Xml.XmlWriter
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Xml.XmlNode.WriteTo(System.Xml.XmlWriter)
  nameWithType: XmlNode.WriteTo(XmlWriter)
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Xml.XmlException
  isExternal: false
  name: XmlException
  fullName: System.Xml.XmlException
  nameWithType: XmlException
  commentId: T:System.Xml.XmlException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
  nameWithType: NullReferenceException
  commentId: T:System.NullReferenceException
