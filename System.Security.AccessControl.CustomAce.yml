### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.CustomAce
  commentId: T:System.Security.AccessControl.CustomAce
  id: CustomAce
  parent: System.Security.AccessControl
  children:
  - System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
  - System.Security.AccessControl.CustomAce.BinaryLength
  - System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.CustomAce.GetOpaque
  - System.Security.AccessControl.CustomAce.MaxOpaqueLength
  - System.Security.AccessControl.CustomAce.OpaqueLength
  - System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  langs:
  - csharp
  - vb
  name: CustomAce
  nameWithType: CustomAce
  fullName: System.Security.AccessControl.CustomAce
  type: Class
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomAce
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 234
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Represents an Access Control Entry (ACE) that is not defined by one of the members of the <xref href=\"System.Security.AccessControl.AceType\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  syntax:
    content: 'public sealed class CustomAce : GenericAce'
    content.vb: >-
      Public NotInheritable Class CustomAce
          Inherits GenericAce
  inheritance:
  - System.Object
  - System.Security.AccessControl.GenericAce
  inheritedMembers:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.PropagationFlags
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.AccessControl.CustomAce.MaxOpaqueLength
  commentId: F:System.Security.AccessControl.CustomAce.MaxOpaqueLength
  id: MaxOpaqueLength
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: MaxOpaqueLength
  nameWithType: CustomAce.MaxOpaqueLength
  fullName: System.Security.AccessControl.CustomAce.MaxOpaqueLength
  type: Field
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxOpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 236
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns the maximum allowed length of an opaque data blob for this <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static readonly int MaxOpaqueLength
    content.vb: Public Shared ReadOnly MaxOpaqueLength As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
  commentId: M:System.Security.AccessControl.CustomAce.#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])
  id: '#ctor(System.Security.AccessControl.AceType,System.Security.AccessControl.AceFlags,System.Byte[])'
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: CustomAce(AceType, AceFlags, Byte[])
  nameWithType: CustomAce.CustomAce(AceType, AceFlags, Byte[])
  fullName: System.Security.AccessControl.CustomAce.CustomAce(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 237
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public CustomAce(AceType type, AceFlags flags, byte[] opaque)
    content.vb: Public Sub New(type As AceType, flags As AceFlags, opaque As Byte())
    parameters:
    - id: type
      type: System.Security.AccessControl.AceType
      description: "\n<p>Type of the new Access Control Entry (ACE). This value must be greater than <xref href=\"System.Security.AccessControl.AceType.MaxDefinedAceType\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: flags
      type: System.Security.AccessControl.AceFlags
      description: "\n<p>Flags that specify information about the inheritance, inheritance propagation, and auditing conditions for the new ACE.</p>\n"
    - id: opaque
      type: System.Byte[]
      description: "\n<p>An array of byte values that contains the data for the new ACE. This value can be <strong>null</strong>. The length of this array must not be greater than the value of the <xref href=\"System.Security.AccessControl.CustomAce.MaxOpaqueLength\" data-throw-if-not-resolved=\"false\"></xref> field, and must be a multiple of four.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>type</em> parameter is not greater than <xref href=\"System.Security.AccessControl.AceType.MaxDefinedAceType\" data-throw-if-not-resolved=\"false\"></xref> or the length of the <em>opaque</em> array is either greater than the value of the <xref href=\"System.Security.AccessControl.CustomAce.MaxOpaqueLength\" data-throw-if-not-resolved=\"false\"></xref> field or not a multiple of four.</p>\n"
  nameWithType.vb: CustomAce.CustomAce(AceType, AceFlags, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.CustomAce.CustomAce(System.Security.AccessControl.AceType, System.Security.AccessControl.AceFlags, System.Byte())
  name.vb: CustomAce(AceType, AceFlags, Byte())
- uid: System.Security.AccessControl.CustomAce.BinaryLength
  commentId: P:System.Security.AccessControl.CustomAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: BinaryLength
  nameWithType: CustomAce.BinaryLength
  fullName: System.Security.AccessControl.CustomAce.BinaryLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BinaryLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 238
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object. This length should be used before marshaling the ACL into a binary array with the <xref href=\"System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public override int BinaryLength { get; }
    content.vb: Public Overrides ReadOnly Property BinaryLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length, in bytes, of the binary representation of the current <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Security.AccessControl.GenericAce.BinaryLength
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Security.AccessControl.CustomAce.OpaqueLength
  commentId: P:System.Security.AccessControl.CustomAce.OpaqueLength
  id: OpaqueLength
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: OpaqueLength
  nameWithType: CustomAce.OpaqueLength
  fullName: System.Security.AccessControl.CustomAce.OpaqueLength
  type: Property
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpaqueLength
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 239
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Gets the length of the opaque data associated with this <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int OpaqueLength { get; }
    content.vb: Public ReadOnly Property OpaqueLength As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The length of the opaque callback data.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: GetBinaryForm(Byte[], Int32)
  nameWithType: CustomAce.GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBinaryForm
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 240
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Marshals the contents of the <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object into the specified byte array beginning at the specified offset.</p>\n"
  syntax:
    content: public override void GetBinaryForm(byte[] binaryForm, int offset)
    content.vb: Public Overrides Sub GetBinaryForm(binaryForm As Byte(), offset As Integer)
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "\n<p>The byte array into which the contents of the <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> is marshaled.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset at which to start marshaling.</p>\n"
  overridden: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>offset</em> is negative or too high to allow the entire <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> to be copied into <em>array</em>.</p>\n"
  nameWithType.vb: CustomAce.GetBinaryForm(Byte(), Int32)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Security.AccessControl.CustomAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
- uid: System.Security.AccessControl.CustomAce.GetOpaque
  commentId: M:System.Security.AccessControl.CustomAce.GetOpaque
  id: GetOpaque
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: GetOpaque()
  nameWithType: CustomAce.GetOpaque()
  fullName: System.Security.AccessControl.CustomAce.GetOpaque()
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOpaque
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 241
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Returns the opaque data associated with this <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: public byte[] GetOpaque()
    content.vb: Public Function GetOpaque As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>An array of byte values that represents the opaque data associated with this <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  commentId: M:System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  id: SetOpaque(System.Byte[])
  parent: System.Security.AccessControl.CustomAce
  langs:
  - csharp
  - vb
  name: SetOpaque(Byte[])
  nameWithType: CustomAce.SetOpaque(Byte[])
  fullName: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetOpaque
    path: src/System.Security.AccessControl/ref/System.Security.AccessControl.cs
    startLine: 242
  assemblies:
  - System.Security.AccessControl
  namespace: System.Security.AccessControl
  summary: "\n<p>Sets the opaque callback data associated with this <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public void SetOpaque(byte[] opaque)
    content.vb: Public Sub SetOpaque(opaque As Byte())
    parameters:
    - id: opaque
      type: System.Byte[]
      description: "\n<p>An array of byte values that represents the opaque callback data for this <xref href=\"System.Security.AccessControl.CustomAce\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  nameWithType.vb: CustomAce.SetOpaque(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.AccessControl.CustomAce.SetOpaque(System.Byte())
  name.vb: SetOpaque(Byte())
references:
- uid: System.Security.AccessControl
  commentId: N:System.Security.AccessControl
  isExternal: false
  name: System.Security.AccessControl
  nameWithType: System.Security.AccessControl
  fullName: System.Security.AccessControl
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.AccessControl.GenericAce
  commentId: T:System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce.AceFlags
  commentId: P:System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  commentId: P:System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  commentId: P:System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  commentId: P:System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  commentId: P:System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  commentId: P:System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.Copy
  commentId: M:System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    nameWithType: GenericAce.Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Copy
    name: Copy
    nameWithType: GenericAce.Copy
    fullName: System.Security.AccessControl.GenericAce.Copy
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: CreateFromBinaryForm(Byte[], Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[], System.Int32)
  nameWithType.vb: GenericAce.CreateFromBinaryForm(Byte(), Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte(), System.Int32)
  name.vb: CreateFromBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    nameWithType: GenericAce.CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
    name: CreateFromBinaryForm
    nameWithType: GenericAce.CreateFromBinaryForm
    fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  commentId: M:System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(System.Object)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    nameWithType: GenericAce.Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
    name: Equals
    nameWithType: GenericAce.Equals
    fullName: System.Security.AccessControl.GenericAce.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  commentId: M:System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    nameWithType: GenericAce.GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetHashCode
    name: GetHashCode
    nameWithType: GenericAce.GetHashCode
    fullName: System.Security.AccessControl.GenericAce.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.AceType
  commentId: T:System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  nameWithType: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.AceFlags
  commentId: T:System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  nameWithType: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  commentId: P:System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  commentId: M:System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: true
  name: GetBinaryForm(Byte[], Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[], Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[], System.Int32)
  nameWithType.vb: GenericAce.GetBinaryForm(Byte(), Int32)
  fullname.vb: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte(), System.Int32)
  name.vb: GetBinaryForm(Byte(), Int32)
  spec.csharp:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    nameWithType: GenericAce.GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
    name: GetBinaryForm
    nameWithType: GenericAce.GetBinaryForm
    fullName: System.Security.AccessControl.GenericAce.GetBinaryForm
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
