items:
- uid: System.Security.Cryptography.ProtectedData
  commentId: T:System.Security.Cryptography.ProtectedData
  id: ProtectedData
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  - System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  langs:
  - csharp
  - vb
  name: ProtectedData
  fullName: System.Security.Cryptography.ProtectedData
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.ProtectedData/src/System/Security/Cryptography/ProtectedData.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProtectedData
    path: src/System.Security.Cryptography.ProtectedData/src/System/Security/Cryptography/ProtectedData.cs
    startLine: 15
  assemblies:
  - System.Security.Cryptography.ProtectedData
  namespace: System.Security.Cryptography
  summary: "\n<p>Provides methods for encrypting and decrypting data. This class cannot be inherited.</p>\n"
  syntax:
    content: public class ProtectedData
    content.vb: Public Class ProtectedData
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: ProtectedData
- uid: System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  commentId: M:System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  id: Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  parent: System.Security.Cryptography.ProtectedData
  langs:
  - csharp
  - vb
  name: Protect(Byte[], Byte[], DataProtectionScope)
  fullName: System.Security.Cryptography.ProtectedData.Protect(System.Byte[], System.Byte[], System.Security.Cryptography.DataProtectionScope)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.ProtectedData/src/System/Security/Cryptography/ProtectedData.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Protect
    path: src/System.Security.Cryptography.ProtectedData/src/System/Security/Cryptography/ProtectedData.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.ProtectedData
  namespace: System.Security.Cryptography
  summary: "\n<p>Encrypts the data in a specified byte array and returns a byte array that contains the encrypted data.</p>\n"
  syntax:
    content: public static byte[] Protect(byte[] userData, byte[] optionalEntropy, DataProtectionScope scope)
    content.vb: Public Shared Function Protect(userData As Byte(), optionalEntropy As Byte(), scope As DataProtectionScope) As Byte()
    parameters:
    - id: userData
      type: System.Byte[]
      description: "\n<p>A byte array that contains data to encrypt. </p>\n"
    - id: optionalEntropy
      type: System.Byte[]
      description: "\n<p>An optional additional byte array used to increase the complexity of the encryption, or <strong>null</strong> for no additional complexity.</p>\n"
    - id: scope
      type: System.Security.Cryptography.DataProtectionScope
      description: "\n<p>One of the enumeration values that specifies the scope of encryption. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array representing the encrypted data.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>userData</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The encryption failed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The operating system does not support this method. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The system ran out of memory while encrypting the data.</p>\n"
  see:
  - type: System.Security.Permissions.DataProtectionPermission
    commentId: T:System.Security.Permissions.DataProtectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Cryptography.ProtectedData.Protect(System.Byte(), System.Byte(), System.Security.Cryptography.DataProtectionScope)
  name.vb: Protect(Byte(), Byte(), DataProtectionScope)
  nameWithType: ProtectedData.Protect(Byte[], Byte[], DataProtectionScope)
  nameWithType.vb: ProtectedData.Protect(Byte(), Byte(), DataProtectionScope)
- uid: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  commentId: M:System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  id: Unprotect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)
  parent: System.Security.Cryptography.ProtectedData
  langs:
  - csharp
  - vb
  name: Unprotect(Byte[], Byte[], DataProtectionScope)
  fullName: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte[], System.Byte[], System.Security.Cryptography.DataProtectionScope)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.ProtectedData/src/System/Security/Cryptography/ProtectedData.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unprotect
    path: src/System.Security.Cryptography.ProtectedData/src/System/Security/Cryptography/ProtectedData.cs
    startLine: 25
  assemblies:
  - System.Security.Cryptography.ProtectedData
  namespace: System.Security.Cryptography
  summary: "\n<p>Decrypts the data in a specified byte array and returns a byte array that contains the decrypted data.</p>\n"
  syntax:
    content: public static byte[] Unprotect(byte[] encryptedData, byte[] optionalEntropy, DataProtectionScope scope)
    content.vb: Public Shared Function Unprotect(encryptedData As Byte(), optionalEntropy As Byte(), scope As DataProtectionScope) As Byte()
    parameters:
    - id: encryptedData
      type: System.Byte[]
      description: "\n<p>A byte array containing data encrypted using the <xref href=\"System.Security.Cryptography.ProtectedData.Protect(System.Byte[],System.Byte[],System.Security.Cryptography.DataProtectionScope)\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
    - id: optionalEntropy
      type: System.Byte[]
      description: "\n<p>An optional additional byte array that was used to encrypt the data, or <strong>null</strong> if the additional byte array was not used.</p>\n"
    - id: scope
      type: System.Security.Cryptography.DataProtectionScope
      description: "\n<p>One of the enumeration values that specifies the scope of data protection that was used to encrypt the data. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array representing the decrypted data.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>encryptedData</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>The decryption failed.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The operating system does not support this method. </p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>Out of memory.</p>\n"
  see:
  - type: System.Security.Permissions.DataProtectionPermission
    commentId: T:System.Security.Permissions.DataProtectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Security.Cryptography.ProtectedData.Unprotect(System.Byte(), System.Byte(), System.Security.Cryptography.DataProtectionScope)
  name.vb: Unprotect(Byte(), Byte(), DataProtectionScope)
  nameWithType: ProtectedData.Unprotect(Byte[], Byte[], DataProtectionScope)
  nameWithType.vb: ProtectedData.Unprotect(Byte(), Byte(), DataProtectionScope)
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Security.Cryptography.DataProtectionScope
  parent: System.Security.Cryptography
  isExternal: false
  name: DataProtectionScope
  fullName: System.Security.Cryptography.DataProtectionScope
  nameWithType: DataProtectionScope
  commentId: T:System.Security.Cryptography.DataProtectionScope
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
  nameWithType: CryptographicException
  commentId: T:System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  fullName: System.OutOfMemoryException
  nameWithType: OutOfMemoryException
  commentId: T:System.OutOfMemoryException
