### YamlMime:ManagedReference
items:
- uid: System.Threading.Interlocked
  commentId: T:System.Threading.Interlocked
  id: Interlocked
  parent: System.Threading
  children:
  - System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  - System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  - System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  - System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  - System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  - System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  - System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  - System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  - System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  - System.Threading.Interlocked.Decrement(System.Int32@)
  - System.Threading.Interlocked.Decrement(System.Int64@)
  - System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  - System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  - System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  - System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  - System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  - System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  - System.Threading.Interlocked.Exchange``1(``0@,``0)
  - System.Threading.Interlocked.Increment(System.Int32@)
  - System.Threading.Interlocked.Increment(System.Int64@)
  - System.Threading.Interlocked.MemoryBarrier
  - System.Threading.Interlocked.Read(System.Int64@)
  langs:
  - csharp
  - vb
  name: Interlocked
  nameWithType: Interlocked
  fullName: System.Threading.Interlocked
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Interlocked
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 19
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides atomic operations for variables that are shared by multiple threads. </p>\n"
  syntax:
    content: public static class Interlocked
    content.vb: Public Module Interlocked
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  id: Add(System.Int32@,System.Int32)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Add(ref Int32, Int32)
  nameWithType: Interlocked.Add(ref Int32, Int32)
  fullName: System.Threading.Interlocked.Add(ref System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 206
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Adds two 32-bit integers and replaces the first integer with the sum, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int Add(ref int location1, int value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Add(ByRef location1 As Integer, value As Integer) As Integer
    parameters:
    - id: location1
      type: System.Int32
      description: "\n<p>A variable containing the first value to be added. The sum of the two values is stored in <em>location1</em>.</p>\n"
    - id: value
      type: System.Int32
      description: "\n<p>The value to be added to the integer at <em>location1</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new value stored at <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Add(ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Add(ByRef System.Int32, System.Int32)
  name.vb: Add(ByRef Int32, Int32)
- uid: System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  commentId: M:System.Threading.Interlocked.Add(System.Int64@,System.Int64)
  id: Add(System.Int64@,System.Int64)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Add(ref Int64, Int64)
  nameWithType: Interlocked.Add(ref Int64, Int64)
  fullName: System.Threading.Interlocked.Add(ref System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 212
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Adds two 64-bit integers and replaces the first integer with the sum, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static long Add(ref long location1, long value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Add(ByRef location1 As Long, value As Long) As Long
    parameters:
    - id: location1
      type: System.Int64
      description: "\n<p>A variable containing the first value to be added. The sum of the two values is stored in <em>location1</em>.</p>\n"
    - id: value
      type: System.Int64
      description: "\n<p>The value to be added to the integer at <em>location1</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The new value stored at <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  seealso:
  - linkId: System.Threading.Interlocked.Increment(System.Int32@)
    commentId: M:System.Threading.Interlocked.Increment(System.Int32@)
  - linkId: System.Threading.Interlocked.Decrement(System.Int32@)
    commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)
  - linkId: System.Threading.Interlocked.Read(System.Int64@)
    commentId: M:System.Threading.Interlocked.Read(System.Int64@)
  nameWithType.vb: Interlocked.Add(ByRef Int64, Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Add(ByRef System.Int64, System.Int64)
  name.vb: Add(ByRef Int64, Int64)
- uid: System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double)
  id: CompareExchange(System.Double@,System.Double,System.Double)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange(ref Double, Double, Double)
  nameWithType: Interlocked.CompareExchange(ref Double, Double, Double)
  fullName: System.Threading.Interlocked.CompareExchange(ref System.Double, System.Double, System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two double-precision floating point numbers for equality and, if they are equal, replaces the first value.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      public static double CompareExchange(ref double location1, double value, double comparand)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(ByRef location1 As Double, value As Double, comparand As Double) As Double
    parameters:
    - id: location1
      type: System.Double
      description: "\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\n"
    - id: value
      type: System.Double
      description: "\n<p>The value that replaces the destination value if the comparison results in equality. </p>\n"
    - id: comparand
      type: System.Double
      description: "\n<p>The value that is compared to the value at <em>location1</em>. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(ByRef Double, Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Double, System.Double, System.Double)
  name.vb: CompareExchange(ByRef Double, Double, Double)
- uid: System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32)
  id: CompareExchange(System.Int32@,System.Int32,System.Int32)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange(ref Int32, Int32, Int32)
  nameWithType: Interlocked.CompareExchange(ref Int32, Int32, Int32)
  fullName: System.Threading.Interlocked.CompareExchange(ref System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two 32-bit signed integers for equality and, if they are equal, replaces the first value.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public static int CompareExchange(ref int location1, int value, int comparand)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(ByRef location1 As Integer, value As Integer, comparand As Integer) As Integer
    parameters:
    - id: location1
      type: System.Int32
      description: "\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\n"
    - id: value
      type: System.Int32
      description: "\n<p>The value that replaces the destination value if the comparison results in equality. </p>\n"
    - id: comparand
      type: System.Int32
      description: "\n<p>The value that is compared to the value at <em>location1</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(ByRef Int32, Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Int32, System.Int32, System.Int32)
  name.vb: CompareExchange(ByRef Int32, Int32, Int32)
- uid: System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64)
  id: CompareExchange(System.Int64@,System.Int64,System.Int64)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange(ref Int64, Int64, Int64)
  nameWithType: Interlocked.CompareExchange(ref Int64, Int64, Int64)
  fullName: System.Threading.Interlocked.CompareExchange(ref System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two 64-bit signed integers for equality and, if they are equal, replaces the first value.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      public static long CompareExchange(ref long location1, long value, long comparand)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(ByRef location1 As Long, value As Long, comparand As Long) As Long
    parameters:
    - id: location1
      type: System.Int64
      description: "\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\n"
    - id: value
      type: System.Int64
      description: "\n<p>The value that replaces the destination value if the comparison results in equality. </p>\n"
    - id: comparand
      type: System.Int64
      description: "\n<p>The value that is compared to the value at <em>location1</em>. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(ByRef Int64, Int64, Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Int64, System.Int64, System.Int64)
  name.vb: CompareExchange(ByRef Int64, Int64, Int64)
- uid: System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  id: CompareExchange(System.IntPtr@,System.IntPtr,System.IntPtr)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange(ref IntPtr, IntPtr, IntPtr)
  nameWithType: Interlocked.CompareExchange(ref IntPtr, IntPtr, IntPtr)
  fullName: System.Threading.Interlocked.CompareExchange(ref System.IntPtr, System.IntPtr, System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two platform-specific handles or pointers for equality and, if they are equal, replaces the first one.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public static IntPtr CompareExchange(ref IntPtr location1, IntPtr value, IntPtr comparand)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(ByRef location1 As IntPtr, value As IntPtr, comparand As IntPtr) As IntPtr
    parameters:
    - id: location1
      type: System.IntPtr
      description: "\n<p>The destination <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>, whose value is compared with the value of <em>comparand</em> and possibly replaced by <em>value</em>. </p>\n"
    - id: value
      type: System.IntPtr
      description: "\n<p>The <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> that replaces the destination value if the comparison results in equality. </p>\n"
    - id: comparand
      type: System.IntPtr
      description: "\n<p>The <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> that is compared to the value at <em>location1</em>. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(ByRef IntPtr, IntPtr, IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.IntPtr, System.IntPtr, System.IntPtr)
  name.vb: CompareExchange(ByRef IntPtr, IntPtr, IntPtr)
- uid: System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Object@,System.Object,System.Object)
  id: CompareExchange(System.Object@,System.Object,System.Object)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange(ref Object, Object, Object)
  nameWithType: Interlocked.CompareExchange(ref Object, Object, Object)
  fullName: System.Threading.Interlocked.CompareExchange(ref System.Object, System.Object, System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two objects for reference equality and, if they are equal, replaces the first object.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public static object CompareExchange(ref object location1, object value, object comparand)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(ByRef location1 As Object, value As Object, comparand As Object) As Object
    parameters:
    - id: location1
      type: System.Object
      description: "\n<p>The destination object that is compared with <em>comparand</em> and possibly replaced. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object that replaces the destination object if the comparison results in equality. </p>\n"
    - id: comparand
      type: System.Object
      description: "\n<p>The object that is compared to the object at <em>location1</em>. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(ByRef Object, Object, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Object, System.Object, System.Object)
  name.vb: CompareExchange(ByRef Object, Object, Object)
- uid: System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  commentId: M:System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single)
  id: CompareExchange(System.Single@,System.Single,System.Single)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange(ref Single, Single, Single)
  nameWithType: Interlocked.CompareExchange(ref Single, Single, Single)
  fullName: System.Threading.Interlocked.CompareExchange(ref System.Single, System.Single, System.Single)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two single-precision floating point numbers for equality and, if they are equal, replaces the first value.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      public static float CompareExchange(ref float location1, float value, float comparand)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(ByRef location1 As Single, value As Single, comparand As Single) As Single
    parameters:
    - id: location1
      type: System.Single
      description: "\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. </p>\n"
    - id: value
      type: System.Single
      description: "\n<p>The value that replaces the destination value if the comparison results in equality. </p>\n"
    - id: comparand
      type: System.Single
      description: "\n<p>The value that is compared to the value at <em>location1</em>. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(ByRef Single, Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(ByRef System.Single, System.Single, System.Single)
  name.vb: CompareExchange(ByRef Single, Single, Single)
- uid: System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  commentId: M:System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0)
  id: CompareExchange``1(``0@,``0,``0)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: CompareExchange<T>(ref T, T, T)
  nameWithType: Interlocked.CompareExchange<T>(ref T, T, T)
  fullName: System.Threading.Interlocked.CompareExchange<T>(ref T, T, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareExchange
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 172
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Compares two instances of the specified reference type <em>T</em> for equality and, if they are equal, replaces the first one.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [ComVisible(false)]

      [SecuritySafeCritical]

      public static T CompareExchange<T>(ref T location1, T value, T comparand)where T : class
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Shared Function CompareExchange(Of T As Class)(ByRef location1 As T, value As T, comparand As T) As T
    parameters:
    - id: location1
      type: '{T}'
      description: "\n<p>The destination, whose value is compared with <em>comparand</em> and possibly replaced. This is a reference parameter (<strong>ref</strong> in C#, <strong>ByRef</strong> in Visual Basic). </p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The value that replaces the destination value if the comparison results in equality. </p>\n"
    - id: comparand
      type: '{T}'
      description: "\n<p>The value that is compared to the value at <em>location1</em>. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type to be used for <em>location1</em>, <em>value</em>, and <em>comparand</em>. This type must be a reference type.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The original value in <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.CompareExchange(Of T)(ByRef T, T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.CompareExchange(Of T)(ByRef T, T, T)
  name.vb: CompareExchange(Of T)(ByRef T, T, T)
- uid: System.Threading.Interlocked.Decrement(System.Int32@)
  commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)
  id: Decrement(System.Int32@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Decrement(ref Int32)
  nameWithType: Interlocked.Decrement(ref Int32)
  fullName: System.Threading.Interlocked.Decrement(ref System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Decrement
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 45
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Decrements a specified variable and stores the result, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int Decrement(ref int location)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Decrement(ByRef location As Integer) As Integer
    parameters:
    - id: location
      type: System.Int32
      description: "\n<p>The variable whose value is to be decremented. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The decremented value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The address of <em>location</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Decrement(ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Decrement(ByRef System.Int32)
  name.vb: Decrement(ByRef Int32)
- uid: System.Threading.Interlocked.Decrement(System.Int64@)
  commentId: M:System.Threading.Interlocked.Decrement(System.Int64@)
  id: Decrement(System.Int64@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Decrement(ref Int64)
  nameWithType: Interlocked.Decrement(ref Int64)
  fullName: System.Threading.Interlocked.Decrement(ref System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Decrement
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 51
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Decrements the specified variable and stores the result, as an atomic operation.</p>\n"
  syntax:
    content: public static long Decrement(ref long location)
    content.vb: Public Shared Function Decrement(ByRef location As Long) As Long
    parameters:
    - id: location
      type: System.Int64
      description: "\n<p>The variable whose value is to be decremented. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The decremented value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The address of <em>location</em> is a null pointer. </p>\n"
  seealso:
  - linkId: System.Threading.Interlocked.Increment(System.Int32@)
    commentId: M:System.Threading.Interlocked.Increment(System.Int32@)
  - linkId: System.Threading.Interlocked.Add(System.Int32@,System.Int32)
    commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  - linkId: System.Threading.Interlocked.Read(System.Int64@)
    commentId: M:System.Threading.Interlocked.Read(System.Int64@)
  nameWithType.vb: Interlocked.Decrement(ByRef Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Decrement(ByRef System.Int64)
  name.vb: Decrement(ByRef Int64)
- uid: System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  commentId: M:System.Threading.Interlocked.Exchange(System.Double@,System.Double)
  id: Exchange(System.Double@,System.Double)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange(ref Double, Double)
  nameWithType: Interlocked.Exchange(ref Double, Double)
  fullName: System.Threading.Interlocked.Exchange(ref System.Double, System.Double)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets a double-precision floating point number to a specified value and returns the original value, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      public static double Exchange(ref double location1, double value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(ByRef location1 As Double, value As Double) As Double
    parameters:
    - id: location1
      type: System.Double
      description: "\n<p>The variable to set to the specified value. </p>\n"
    - id: value
      type: System.Double
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    return:
      type: System.Double
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(ByRef Double, Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Double, System.Double)
  name.vb: Exchange(ByRef Double, Double)
- uid: System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  commentId: M:System.Threading.Interlocked.Exchange(System.Int32@,System.Int32)
  id: Exchange(System.Int32@,System.Int32)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange(ref Int32, Int32)
  nameWithType: Interlocked.Exchange(ref Int32, Int32)
  fullName: System.Threading.Interlocked.Exchange(ref System.Int32, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets a 32-bit signed integer to a specified value and returns the original value, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public static int Exchange(ref int location1, int value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(ByRef location1 As Integer, value As Integer) As Integer
    parameters:
    - id: location1
      type: System.Int32
      description: "\n<p>The variable to set to the specified value. </p>\n"
    - id: value
      type: System.Int32
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(ByRef Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Int32, System.Int32)
  name.vb: Exchange(ByRef Int32, Int32)
- uid: System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  commentId: M:System.Threading.Interlocked.Exchange(System.Int64@,System.Int64)
  id: Exchange(System.Int64@,System.Int64)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange(ref Int64, Int64)
  nameWithType: Interlocked.Exchange(ref Int64, Int64)
  fullName: System.Threading.Interlocked.Exchange(ref System.Int64, System.Int64)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets a 64-bit signed integer to a specified value and returns the original value, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      public static long Exchange(ref long location1, long value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(ByRef location1 As Long, value As Long) As Long
    parameters:
    - id: location1
      type: System.Int64
      description: "\n<p>The variable to set to the specified value. </p>\n"
    - id: value
      type: System.Int64
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(ByRef Int64, Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Int64, System.Int64)
  name.vb: Exchange(ByRef Int64, Int64)
- uid: System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  commentId: M:System.Threading.Interlocked.Exchange(System.IntPtr@,System.IntPtr)
  id: Exchange(System.IntPtr@,System.IntPtr)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange(ref IntPtr, IntPtr)
  nameWithType: Interlocked.Exchange(ref IntPtr, IntPtr)
  fullName: System.Threading.Interlocked.Exchange(ref System.IntPtr, System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets a platform-specific handle or pointer to a specified value and returns the original value, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public static IntPtr Exchange(ref IntPtr location1, IntPtr value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(ByRef location1 As IntPtr, value As IntPtr) As IntPtr
    parameters:
    - id: location1
      type: System.IntPtr
      description: "\n<p>The variable to set to the specified value. </p>\n"
    - id: value
      type: System.IntPtr
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(ByRef IntPtr, IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.IntPtr, System.IntPtr)
  name.vb: Exchange(ByRef IntPtr, IntPtr)
- uid: System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  commentId: M:System.Threading.Interlocked.Exchange(System.Object@,System.Object)
  id: Exchange(System.Object@,System.Object)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange(ref Object, Object)
  nameWithType: Interlocked.Exchange(ref Object, Object)
  fullName: System.Threading.Interlocked.Exchange(ref System.Object, System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets an object to a specified value and returns a reference to the original object, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public static object Exchange(ref object location1, object value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(ByRef location1 As Object, value As Object) As Object
    parameters:
    - id: location1
      type: System.Object
      description: "\n<p>The variable to set to the specified value. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(ByRef Object, Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Object, System.Object)
  name.vb: Exchange(ByRef Object, Object)
- uid: System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  commentId: M:System.Threading.Interlocked.Exchange(System.Single@,System.Single)
  id: Exchange(System.Single@,System.Single)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange(ref Single, Single)
  nameWithType: Interlocked.Exchange(ref Single, Single)
  fullName: System.Threading.Interlocked.Exchange(ref System.Single, System.Single)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets a single-precision floating point number to a specified value and returns the original value, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      public static float Exchange(ref float location1, float value)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(ByRef location1 As Single, value As Single) As Single
    parameters:
    - id: location1
      type: System.Single
      description: "\n<p>The variable to set to the specified value. </p>\n"
    - id: value
      type: System.Single
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(ByRef Single, Single)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(ByRef System.Single, System.Single)
  name.vb: Exchange(ByRef Single, Single)
- uid: System.Threading.Interlocked.Exchange``1(``0@,``0)
  commentId: M:System.Threading.Interlocked.Exchange``1(``0@,``0)
  id: Exchange``1(``0@,``0)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Exchange<T>(ref T, T)
  nameWithType: Interlocked.Exchange<T>(ref T, T)
  fullName: System.Threading.Interlocked.Exchange<T>(ref T, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exchange
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 93
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Sets a variable of the specified type <em>T</em> to a specified value and returns the original value, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [ComVisible(false)]

      [SecuritySafeCritical]

      public static T Exchange<T>(ref T location1, T value)where T : class
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <ComVisible(False)>

      <SecuritySafeCritical>

      Public Shared Function Exchange(Of T As Class)(ByRef location1 As T, value As T) As T
    parameters:
    - id: location1
      type: '{T}'
      description: "\n<p>The variable to set to the specified value. This is a reference parameter (<strong>ref</strong> in C#, <strong>ByRef</strong> in Visual Basic). </p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The value to which the <em>location1</em> parameter is set. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type to be used for <em>location1</em> and <em>value</em>. This type must be a reference type.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The original value of <em>location1</em>.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location1</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Exchange(Of T)(ByRef T, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Exchange(Of T)(ByRef T, T)
  name.vb: Exchange(Of T)(ByRef T, T)
- uid: System.Threading.Interlocked.Increment(System.Int32@)
  commentId: M:System.Threading.Interlocked.Increment(System.Int32@)
  id: Increment(System.Int32@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Increment(ref Int32)
  nameWithType: Interlocked.Increment(ref Int32)
  fullName: System.Threading.Interlocked.Increment(ref System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Increment
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 27
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Increments a specified variable and stores the result, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int Increment(ref int location)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Increment(ByRef location As Integer) As Integer
    parameters:
    - id: location
      type: System.Int32
      description: "\n<p>The variable whose value is to be incremented. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The incremented value.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location</em> is a null pointer. </p>\n"
  nameWithType.vb: Interlocked.Increment(ByRef Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Increment(ByRef System.Int32)
  name.vb: Increment(ByRef Int32)
- uid: System.Threading.Interlocked.Increment(System.Int64@)
  commentId: M:System.Threading.Interlocked.Increment(System.Int64@)
  id: Increment(System.Int64@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Increment(ref Int64)
  nameWithType: Interlocked.Increment(ref Int64)
  fullName: System.Threading.Interlocked.Increment(ref System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Increment
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 33
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Increments a specified variable and stores the result, as an atomic operation.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static long Increment(ref long location)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Increment(ByRef location As Long) As Long
    parameters:
    - id: location
      type: System.Int64
      description: "\n<p>The variable whose value is to be incremented. </p>\n"
    return:
      type: System.Int64
      description: "\n<p>The incremented value.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The address of <em>location</em> is a null pointer. </p>\n"
  seealso:
  - linkId: System.Threading.Interlocked.Decrement(System.Int32@)
    commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)
  - linkId: System.Threading.Interlocked.Add(System.Int32@,System.Int32)
    commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  - linkId: System.Threading.Interlocked.Read(System.Int64@)
    commentId: M:System.Threading.Interlocked.Read(System.Int64@)
  nameWithType.vb: Interlocked.Increment(ByRef Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Increment(ByRef System.Int64)
  name.vb: Increment(ByRef Int64)
- uid: System.Threading.Interlocked.MemoryBarrier
  commentId: M:System.Threading.Interlocked.MemoryBarrier
  id: MemoryBarrier
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: MemoryBarrier()
  nameWithType: Interlocked.MemoryBarrier()
  fullName: System.Threading.Interlocked.MemoryBarrier()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemoryBarrier
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 227
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Synchronizes memory access as follows: The processor that executes the current thread cannot reorder instructions in such a way that memory accesses before the call to <xref href=\"System.Threading.Interlocked.MemoryBarrier\" data-throw-if-not-resolved=\"false\"></xref> execute after memory accesses that follow the call to <xref href=\"System.Threading.Interlocked.MemoryBarrier\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static void MemoryBarrier()
    content.vb: Public Shared Sub MemoryBarrier
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Interlocked.Read(System.Int64@)
  commentId: M:System.Threading.Interlocked.Read(System.Int64@)
  id: Read(System.Int64@)
  parent: System.Threading.Interlocked
  langs:
  - csharp
  - vb
  name: Read(ref Int64)
  nameWithType: Interlocked.Read(ref Int64)
  fullName: System.Threading.Interlocked.Read(ref System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Interlocked.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/Threading/Interlocked.cs
    startLine: 221
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Returns a 64-bit value, loaded as an atomic operation.</p>\n"
  syntax:
    content: public static long Read(ref long location)
    content.vb: Public Shared Function Read(ByRef location As Long) As Long
    parameters:
    - id: location
      type: System.Int64
      description: "\n<p>The 64-bit value to be loaded.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The loaded value.</p>\n"
  seealso:
  - linkId: System.Threading.Interlocked.Increment(System.Int32@)
    commentId: M:System.Threading.Interlocked.Increment(System.Int32@)
  - linkId: System.Threading.Interlocked.Decrement(System.Int32@)
    commentId: M:System.Threading.Interlocked.Decrement(System.Int32@)
  - linkId: System.Threading.Interlocked.Add(System.Int32@,System.Int32)
    commentId: M:System.Threading.Interlocked.Add(System.Int32@,System.Int32)
  nameWithType.vb: Interlocked.Read(ByRef Int64)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Interlocked.Read(ByRef System.Int64)
  name.vb: Read(ByRef Int64)
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
