### YamlMime:ManagedReference
items:
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  id: ArgumentException
  parent: System
  children:
  - System.ArgumentException.#ctor
  - System.ArgumentException.#ctor(System.String)
  - System.ArgumentException.#ctor(System.String,System.Exception)
  - System.ArgumentException.#ctor(System.String,System.String)
  - System.ArgumentException.#ctor(System.String,System.String,System.Exception)
  - System.ArgumentException.Message
  - System.ArgumentException.ParamName
  langs:
  - csharp
  - vb
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArgumentException
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>The exception that is thrown when one of the arguments provided to a method is not valid.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public class ArgumentException : SystemException, _Exception, ISerializable
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public Class ArgumentException
          Inherits SystemException
          Implements _Exception, ISerializable
  seealso:
  - linkId: System.Exception
    commentId: T:System.Exception
  inheritance:
  - System.Object
  - System.Exception
  inheritedMembers:
  - System.Exception.Data
  - System.Exception.HelpLink
  - System.Exception.HResult
  - System.Exception.InnerException
  - System.Exception.Source
  - System.Exception.StackTrace
  - System.Exception.GetBaseException
  - System.Exception.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ArgumentException.#ctor
  commentId: M:System.ArgumentException.#ctor
  id: '#ctor'
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: ArgumentException()
  nameWithType: ArgumentException.ArgumentException()
  fullName: System.ArgumentException.ArgumentException()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public ArgumentException()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentException.#ctor(System.String)
  commentId: M:System.ArgumentException.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: ArgumentException(String)
  nameWithType: ArgumentException.ArgumentException(String)
  fullName: System.ArgumentException.ArgumentException(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message.</p>\n"
  syntax:
    content: public ArgumentException(string message)
    content.vb: Public Sub New(message As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentException.#ctor(System.String,System.Exception)
  commentId: M:System.ArgumentException.#ctor(System.String,System.Exception)
  id: '#ctor(System.String,System.Exception)'
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: ArgumentException(String, Exception)
  nameWithType: ArgumentException.ArgumentException(String, Exception)
  fullName: System.ArgumentException.ArgumentException(System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 45
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and a reference to the inner exception that is the cause of this exception.</p>\n"
  syntax:
    content: public ArgumentException(string message, Exception innerException)
    content.vb: Public Sub New(message As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>innerException</em> parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  seealso:
  - linkId: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentException.#ctor(System.String,System.String)
  commentId: M:System.ArgumentException.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: ArgumentException(String, String)
  nameWithType: ArgumentException.ArgumentException(String, String)
  fullName: System.ArgumentException.ArgumentException(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 56
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message and the name of the parameter that causes this exception.</p>\n"
  syntax:
    content: public ArgumentException(string message, string paramName)
    content.vb: Public Sub New(message As String, paramName As String)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: paramName
      type: System.String
      description: "\n<p>The name of the parameter that caused the current exception. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentException.#ctor(System.String,System.String,System.Exception)
  commentId: M:System.ArgumentException.#ctor(System.String,System.String,System.Exception)
  id: '#ctor(System.String,System.String,System.Exception)'
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: ArgumentException(String, String, Exception)
  nameWithType: ArgumentException.ArgumentException(String, String, Exception)
  fullName: System.ArgumentException.ArgumentException(System.String, System.String, System.Exception)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref> class with a specified error message, the parameter name, and a reference to the inner exception that is the cause of this exception.</p>\n"
  syntax:
    content: public ArgumentException(string message, string paramName, Exception innerException)
    content.vb: Public Sub New(message As String, paramName As String, innerException As Exception)
    parameters:
    - id: message
      type: System.String
      description: "\n<p>The error message that explains the reason for the exception. </p>\n"
    - id: paramName
      type: System.String
      description: "\n<p>The name of the parameter that caused the current exception. </p>\n"
    - id: innerException
      type: System.Exception
      description: "\n<p>The exception that is the cause of the current exception. If the <em>innerException</em> parameter is not a null reference, the current exception is raised in a <strong>catch</strong> block that handles the inner exception. </p>\n"
  seealso:
  - linkId: System.Exception
    commentId: T:System.Exception
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ArgumentException.Message
  commentId: P:System.ArgumentException.Message
  id: Message
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: ArgumentException.Message
  fullName: System.ArgumentException.Message
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Message
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 67
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the error message and the parameter name, or only the error message if no parameter name is set.</p>\n"
  syntax:
    content: public override string Message { get; }
    content.vb: Public Overrides ReadOnly Property Message As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A text string describing the details of the exception. The value of this property takes one of two forms: </p>\n<p>Condition </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>The <em>paramName</em> is a null reference (<strong>Nothing</strong> in Visual Basic) or of zero length. </p>\n</td><td>\n<p>The <em>message</em> string passed to the constructor. </p>\n</td></tr><tr><td>\n<p>The <em>paramName</em> is not null reference (<strong>Nothing</strong> in Visual Basic) and it has a length greater than zero. </p>\n</td><td>\n<p>The <em>message</em> string appended with the name of the invalid parameter. </p>\n</td></tr></tbody></table>\n"
  overridden: System.Exception.Message
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.ArgumentException.ParamName
  commentId: P:System.ArgumentException.ParamName
  id: ParamName
  parent: System.ArgumentException
  langs:
  - csharp
  - vb
  name: ParamName
  nameWithType: ArgumentException.ParamName
  fullName: System.ArgumentException.ParamName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/ArgumentException.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ParamName
    path: src/mscorlib/src/System/ArgumentException.cs
    startLine: 80
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the name of the parameter that causes this exception.</p>\n"
  syntax:
    content: public virtual string ParamName { get; }
    content.vb: Public Overridable ReadOnly Property ParamName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The parameter name.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Exception.Data
  commentId: P:System.Exception.Data
  parent: System.Exception
  isExternal: false
  name: Data
  nameWithType: Exception.Data
  fullName: System.Exception.Data
- uid: System.Exception.HelpLink
  commentId: P:System.Exception.HelpLink
  parent: System.Exception
  isExternal: false
  name: HelpLink
  nameWithType: Exception.HelpLink
  fullName: System.Exception.HelpLink
- uid: System.Exception.HResult
  commentId: P:System.Exception.HResult
  parent: System.Exception
  isExternal: false
  name: HResult
  nameWithType: Exception.HResult
  fullName: System.Exception.HResult
- uid: System.Exception.InnerException
  commentId: P:System.Exception.InnerException
  parent: System.Exception
  isExternal: false
  name: InnerException
  nameWithType: Exception.InnerException
  fullName: System.Exception.InnerException
- uid: System.Exception.Source
  commentId: P:System.Exception.Source
  parent: System.Exception
  isExternal: false
  name: Source
  nameWithType: Exception.Source
  fullName: System.Exception.Source
- uid: System.Exception.StackTrace
  commentId: P:System.Exception.StackTrace
  parent: System.Exception
  isExternal: false
  name: StackTrace
  nameWithType: Exception.StackTrace
  fullName: System.Exception.StackTrace
- uid: System.Exception.GetBaseException
  commentId: M:System.Exception.GetBaseException
  parent: System.Exception
  isExternal: false
  name: GetBaseException()
  nameWithType: Exception.GetBaseException()
  fullName: System.Exception.GetBaseException()
  spec.csharp:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.GetBaseException
    name: GetBaseException
    nameWithType: Exception.GetBaseException
    fullName: System.Exception.GetBaseException
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception.ToString
  commentId: M:System.Exception.ToString
  parent: System.Exception
  isExternal: false
  name: ToString()
  nameWithType: Exception.ToString()
  fullName: System.Exception.ToString()
  spec.csharp:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Exception.ToString
    name: ToString
    nameWithType: Exception.ToString
    fullName: System.Exception.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception.Message
  commentId: P:System.Exception.Message
  parent: System.Exception
  isExternal: false
  name: Message
  nameWithType: Exception.Message
  fullName: System.Exception.Message
