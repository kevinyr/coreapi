items:
- uid: System.Net.NetworkInformation.NetworkInterface
  commentId: T:System.Net.NetworkInformation.NetworkInterface
  id: NetworkInterface
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.NetworkInterface.#ctor
  - System.Net.NetworkInformation.NetworkInterface.Description
  - System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces
  - System.Net.NetworkInformation.NetworkInterface.GetIPProperties
  - System.Net.NetworkInformation.NetworkInterface.GetIPStatistics
  - System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable
  - System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress
  - System.Net.NetworkInformation.NetworkInterface.Id
  - System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex
  - System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly
  - System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex
  - System.Net.NetworkInformation.NetworkInterface.Name
  - System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType
  - System.Net.NetworkInformation.NetworkInterface.OperationalStatus
  - System.Net.NetworkInformation.NetworkInterface.Speed
  - System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
  - System.Net.NetworkInformation.NetworkInterface.SupportsMulticast
  langs:
  - csharp
  - vb
  name: NetworkInterface
  fullName: System.Net.NetworkInformation.NetworkInterface
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkInterface
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 264
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides configuration and statistical information for a network interface.</p>\n"
  syntax:
    content: public abstract class NetworkInterface
    content.vb: Public MustInherit Class NetworkInterface
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: NetworkInterface
- uid: System.Net.NetworkInformation.NetworkInterface.#ctor
  commentId: M:System.Net.NetworkInformation.NetworkInterface.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: NetworkInterface()
  fullName: System.Net.NetworkInformation.NetworkInterface.NetworkInterface()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 266
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.NetworkInterface\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected NetworkInterface()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: NetworkInterface.NetworkInterface()
- uid: System.Net.NetworkInformation.NetworkInterface.Description
  commentId: P:System.Net.NetworkInformation.NetworkInterface.Description
  id: Description
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: Description
  fullName: System.Net.NetworkInformation.NetworkInterface.Description
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Description
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 267
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the description of the interface.</p>\n"
  syntax:
    content: public virtual string Description { get; }
    content.vb: Public Overridable ReadOnly Property Description As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that describes this interface.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.Description
- uid: System.Net.NetworkInformation.NetworkInterface.Id
  commentId: P:System.Net.NetworkInformation.NetworkInterface.Id
  id: Id
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: Id
  fullName: System.Net.NetworkInformation.NetworkInterface.Id
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Id
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 268
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the identifier of the network adapter.</p>\n"
  syntax:
    content: public virtual string Id { get; }
    content.vb: Public Overridable ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the identifier.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.Id
- uid: System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex
  commentId: P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex
  id: IPv6LoopbackInterfaceIndex
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: IPv6LoopbackInterfaceIndex
  fullName: System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPv6LoopbackInterfaceIndex
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 269
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the index of the IPv6 loopback interface.</p>\n"
  syntax:
    content: public static int IPv6LoopbackInterfaceIndex { get; }
    content.vb: Public Shared ReadOnly Property IPv6LoopbackInterfaceIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The index for the IPv6 loopback interface.</p>\n"
  seealso:
  - type: System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex
    commentId: P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: NetworkInterface.IPv6LoopbackInterfaceIndex
- uid: System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly
  commentId: P:System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly
  id: IsReceiveOnly
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: IsReceiveOnly
  fullName: System.Net.NetworkInformation.NetworkInterface.IsReceiveOnly
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReceiveOnly
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 270
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the network interface is set to only receive data packets.</p>\n"
  syntax:
    content: public virtual bool IsReceiveOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReceiveOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the interface only receives network traffic; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.IsReceiveOnly
- uid: System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex
  commentId: P:System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex
  id: LoopbackInterfaceIndex
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: LoopbackInterfaceIndex
  fullName: System.Net.NetworkInformation.NetworkInterface.LoopbackInterfaceIndex
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LoopbackInterfaceIndex
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 271
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the index of the IPv4 loopback interface.</p>\n"
  syntax:
    content: public static int LoopbackInterfaceIndex { get; }
    content.vb: Public Shared ReadOnly Property LoopbackInterfaceIndex As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the index for the IPv4 loopback interface.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>This property is not valid on computers running only Ipv6.</p>\n"
  seealso:
  - type: System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex
    commentId: P:System.Net.NetworkInformation.NetworkInterface.IPv6LoopbackInterfaceIndex
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: NetworkInterface.LoopbackInterfaceIndex
- uid: System.Net.NetworkInformation.NetworkInterface.Name
  commentId: P:System.Net.NetworkInformation.NetworkInterface.Name
  id: Name
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.Net.NetworkInformation.NetworkInterface.Name
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 272
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the name of the network adapter.</p>\n"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the adapter name.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.Name
- uid: System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType
  commentId: P:System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType
  id: NetworkInterfaceType
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: NetworkInterfaceType
  fullName: System.Net.NetworkInformation.NetworkInterface.NetworkInterfaceType
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NetworkInterfaceType
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 273
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the interface type.</p>\n"
  syntax:
    content: public virtual NetworkInterfaceType NetworkInterfaceType { get; }
    content.vb: Public Overridable ReadOnly Property NetworkInterfaceType As NetworkInterfaceType
    parameters: []
    return:
      type: System.Net.NetworkInformation.NetworkInterfaceType
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.NetworkInterfaceType\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the network interface type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.NetworkInterfaceType
- uid: System.Net.NetworkInformation.NetworkInterface.OperationalStatus
  commentId: P:System.Net.NetworkInformation.NetworkInterface.OperationalStatus
  id: OperationalStatus
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: OperationalStatus
  fullName: System.Net.NetworkInformation.NetworkInterface.OperationalStatus
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OperationalStatus
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 274
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the current operational state of the network connection.</p>\n"
  syntax:
    content: public virtual OperationalStatus OperationalStatus { get; }
    content.vb: Public Overridable ReadOnly Property OperationalStatus As OperationalStatus
    parameters: []
    return:
      type: System.Net.NetworkInformation.OperationalStatus
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.OperationalStatus\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.OperationalStatus
- uid: System.Net.NetworkInformation.NetworkInterface.Speed
  commentId: P:System.Net.NetworkInformation.NetworkInterface.Speed
  id: Speed
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: Speed
  fullName: System.Net.NetworkInformation.NetworkInterface.Speed
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Speed
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 275
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the speed of the network interface.</p>\n"
  syntax:
    content: public virtual long Speed { get; }
    content.vb: Public Overridable ReadOnly Property Speed As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>A <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the speed in bits per second.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.Speed
- uid: System.Net.NetworkInformation.NetworkInterface.SupportsMulticast
  commentId: P:System.Net.NetworkInformation.NetworkInterface.SupportsMulticast
  id: SupportsMulticast
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: SupportsMulticast
  fullName: System.Net.NetworkInformation.NetworkInterface.SupportsMulticast
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsMulticast
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 276
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the network interface is enabled to receive multicast packets.</p>\n"
  syntax:
    content: public virtual bool SupportsMulticast { get; }
    content.vb: Public Overridable ReadOnly Property SupportsMulticast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the interface receives multicast packets; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: NetworkInterface.SupportsMulticast
- uid: System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces
  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces
  id: GetAllNetworkInterfaces
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: GetAllNetworkInterfaces()
  fullName: System.Net.NetworkInformation.NetworkInterface.GetAllNetworkInterfaces()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAllNetworkInterfaces
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 277
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns objects that describe the network interfaces on the local computer.</p>\n"
  syntax:
    content: public static NetworkInterface[] GetAllNetworkInterfaces()
    content.vb: Public Shared Function GetAllNetworkInterfaces As NetworkInterface()
    return:
      type: System.Net.NetworkInformation.NetworkInterface[]
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.NetworkInterface\" data-throw-if-not-resolved=\"false\"></xref> array that contains objects that describe the available network interfaces, or an empty array if no interfaces are detected.</p>\n"
  exceptions:
  - type: System.Net.NetworkInformation.NetworkInformationException
    commentId: T:System.Net.NetworkInformation.NetworkInformationException
    description: "\n<p>A Windows system function call failed. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: NetworkInterface.GetAllNetworkInterfaces()
- uid: System.Net.NetworkInformation.NetworkInterface.GetIPProperties
  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetIPProperties
  id: GetIPProperties
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: GetIPProperties()
  fullName: System.Net.NetworkInformation.NetworkInterface.GetIPProperties()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPProperties
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 278
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns an object that describes the configuration of this network interface.</p>\n"
  syntax:
    content: public virtual IPInterfaceProperties GetIPProperties()
    content.vb: Public Overridable Function GetIPProperties As IPInterfaceProperties
    return:
      type: System.Net.NetworkInformation.IPInterfaceProperties
      description: "\n<p>An <xref href=\"System.Net.NetworkInformation.IPInterfaceProperties\" data-throw-if-not-resolved=\"false\"></xref> object that describes this network interface.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: NetworkInterface.GetIPProperties()
- uid: System.Net.NetworkInformation.NetworkInterface.GetIPStatistics
  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetIPStatistics
  id: GetIPStatistics
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: GetIPStatistics()
  fullName: System.Net.NetworkInformation.NetworkInterface.GetIPStatistics()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIPStatistics
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 279
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the IP statistics for this <xref href=\"System.Net.NetworkInformation.NetworkInterface\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public virtual IPInterfaceStatistics GetIPStatistics()
    content.vb: Public Overridable Function GetIPStatistics As IPInterfaceStatistics
    return:
      type: System.Net.NetworkInformation.IPInterfaceStatistics
      description: "\n<p>Returns <xref href=\"System.Net.NetworkInformation.IPInterfaceStatistics\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The IP statistics.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: NetworkInterface.GetIPStatistics()
- uid: System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable
  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable
  id: GetIsNetworkAvailable
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: GetIsNetworkAvailable()
  fullName: System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetIsNetworkAvailable
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 280
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Indicates whether any network connection is available.</p>\n"
  syntax:
    content: public static bool GetIsNetworkAvailable()
    content.vb: Public Shared Function GetIsNetworkAvailable As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a network connection is available; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: NetworkInterface.GetIsNetworkAvailable()
- uid: System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress
  commentId: M:System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress
  id: GetPhysicalAddress
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: GetPhysicalAddress()
  fullName: System.Net.NetworkInformation.NetworkInterface.GetPhysicalAddress()
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPhysicalAddress
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 281
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Returns the Media Access Control (MAC) or physical address for this adapter.</p>\n"
  syntax:
    content: public virtual PhysicalAddress GetPhysicalAddress()
    content.vb: Public Overridable Function GetPhysicalAddress As PhysicalAddress
    return:
      type: System.Net.NetworkInformation.PhysicalAddress
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.PhysicalAddress\" data-throw-if-not-resolved=\"false\"></xref> object that contains the physical address.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: NetworkInterface.GetPhysicalAddress()
- uid: System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
  commentId: M:System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
  id: Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
  parent: System.Net.NetworkInformation.NetworkInterface
  langs:
  - csharp
  - vb
  name: Supports(NetworkInterfaceComponent)
  fullName: System.Net.NetworkInformation.NetworkInterface.Supports(System.Net.NetworkInformation.NetworkInterfaceComponent)
  type: Method
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Supports
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 282
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the interface supports the specified protocol.</p>\n"
  syntax:
    content: public virtual bool Supports(NetworkInterfaceComponent networkInterfaceComponent)
    content.vb: Public Overridable Function Supports(networkInterfaceComponent As NetworkInterfaceComponent) As Boolean
    parameters:
    - id: networkInterfaceComponent
      type: System.Net.NetworkInformation.NetworkInterfaceComponent
      description: "\n<p>A <xref href=\"System.Net.NetworkInformation.NetworkInterfaceComponent\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified protocol is supported; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: NetworkInterface.Supports(NetworkInterfaceComponent)
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
  commentId: N:System.Net.NetworkInformation
  nameWithType: System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Net.NetworkInformation.NetworkInterfaceType
  parent: System.Net.NetworkInformation
  isExternal: false
  name: NetworkInterfaceType
  fullName: System.Net.NetworkInformation.NetworkInterfaceType
  commentId: T:System.Net.NetworkInformation.NetworkInterfaceType
  nameWithType: NetworkInterfaceType
- uid: System.Net.NetworkInformation.OperationalStatus
  parent: System.Net.NetworkInformation
  isExternal: false
  name: OperationalStatus
  fullName: System.Net.NetworkInformation.OperationalStatus
  commentId: T:System.Net.NetworkInformation.OperationalStatus
  nameWithType: OperationalStatus
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  commentId: T:System.Int64
  nameWithType: Int64
- uid: System.Net.NetworkInformation.NetworkInterface[]
  name: NetworkInterface[]
  fullName: System.Net.NetworkInformation.NetworkInterface[]
  fullname.vb: System.Net.NetworkInformation.NetworkInterface()
  name.vb: NetworkInterface()
  spec.csharp:
  - uid: System.Net.NetworkInformation.NetworkInterface
    name: NetworkInterface
    fullName: System.Net.NetworkInformation.NetworkInterface
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.NetworkInformation.NetworkInterface
    name: NetworkInterface
    fullName: System.Net.NetworkInformation.NetworkInterface
  - name: ()
    fullName: ()
  nameWithType: NetworkInterface[]
  nameWithType.vb: NetworkInterface()
- uid: System.Net.NetworkInformation.IPInterfaceProperties
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPInterfaceProperties
  fullName: System.Net.NetworkInformation.IPInterfaceProperties
  commentId: T:System.Net.NetworkInformation.IPInterfaceProperties
  nameWithType: IPInterfaceProperties
- uid: System.Net.NetworkInformation.IPInterfaceStatistics
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPInterfaceStatistics
  fullName: System.Net.NetworkInformation.IPInterfaceStatistics
  commentId: T:System.Net.NetworkInformation.IPInterfaceStatistics
  nameWithType: IPInterfaceStatistics
- uid: System.Net.NetworkInformation.PhysicalAddress
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PhysicalAddress
  fullName: System.Net.NetworkInformation.PhysicalAddress
  commentId: T:System.Net.NetworkInformation.PhysicalAddress
  nameWithType: PhysicalAddress
- uid: System.Net.NetworkInformation.NetworkInterfaceComponent
  parent: System.Net.NetworkInformation
  isExternal: false
  name: NetworkInterfaceComponent
  fullName: System.Net.NetworkInformation.NetworkInterfaceComponent
  commentId: T:System.Net.NetworkInformation.NetworkInterfaceComponent
  nameWithType: NetworkInterfaceComponent
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
- uid: System.Net.NetworkInformation.NetworkInformationException
  isExternal: false
  name: NetworkInformationException
  fullName: System.Net.NetworkInformation.NetworkInformationException
  commentId: T:System.Net.NetworkInformation.NetworkInformationException
  nameWithType: NetworkInformationException
