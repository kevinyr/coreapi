### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.ContractDescription
  commentId: T:System.ServiceModel.Description.ContractDescription
  id: ContractDescription
  parent: System.ServiceModel.Description
  children:
  - System.ServiceModel.Description.ContractDescription.#ctor(System.String)
  - System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)
  - System.ServiceModel.Description.ContractDescription.CallbackContractType
  - System.ServiceModel.Description.ContractDescription.ConfigurationName
  - System.ServiceModel.Description.ContractDescription.ContractBehaviors
  - System.ServiceModel.Description.ContractDescription.ContractType
  - System.ServiceModel.Description.ContractDescription.Name
  - System.ServiceModel.Description.ContractDescription.Namespace
  - System.ServiceModel.Description.ContractDescription.Operations
  langs:
  - csharp
  - vb
  name: ContractDescription
  nameWithType: ContractDescription
  fullName: System.ServiceModel.Description.ContractDescription
  type: Class
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ContractDescription
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1184
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Describes a Windows Communication Foundation (WCF) contract that specifies what an endpoint communicates to the outside world.</p>\n"
  syntax:
    content: public class ContractDescription
    content.vb: Public Class ContractDescription
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ServiceModel.Description.ContractDescription.#ctor(System.String)
  commentId: M:System.ServiceModel.Description.ContractDescription.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: ContractDescription(String)
  nameWithType: ContractDescription.ContractDescription(String)
  fullName: System.ServiceModel.Description.ContractDescription.ContractDescription(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1186
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.Description.ContractDescription\" data-throw-if-not-resolved=\"false\"></xref> class with a specified name.</p>\n"
  syntax:
    content: public ContractDescription(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the contract.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>name</em> is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)
  commentId: M:System.ServiceModel.Description.ContractDescription.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: ContractDescription(String, String)
  nameWithType: ContractDescription.ContractDescription(String, String)
  fullName: System.ServiceModel.Description.ContractDescription.ContractDescription(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1187
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.Description.ContractDescription\" data-throw-if-not-resolved=\"false\"></xref> class with a namespace-qualified name specified.</p>\n"
  syntax:
    content: public ContractDescription(string name, string ns)
    content.vb: Public Sub New(name As String, ns As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the contract.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace that contains the name of the contract.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>name</em> is empty.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.CallbackContractType
  commentId: P:System.ServiceModel.Description.ContractDescription.CallbackContractType
  id: CallbackContractType
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: CallbackContractType
  nameWithType: ContractDescription.CallbackContractType
  fullName: System.ServiceModel.Description.ContractDescription.CallbackContractType
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: CallbackContractType
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1188
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets or sets the type of callback contract that the contract description specifies.</p>\n"
  syntax:
    content: public Type CallbackContractType { get; set; }
    content.vb: Public Property CallbackContractType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of callback contract that the contract description specifies.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.ConfigurationName
  commentId: P:System.ServiceModel.Description.ContractDescription.ConfigurationName
  id: ConfigurationName
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: ConfigurationName
  nameWithType: ContractDescription.ConfigurationName
  fullName: System.ServiceModel.Description.ContractDescription.ConfigurationName
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ConfigurationName
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1189
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets or sets the configuration name for the contract description.</p>\n"
  syntax:
    content: public string ConfigurationName { get; set; }
    content.vb: Public Property ConfigurationName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The configuration name for the contract.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.ContractBehaviors
  commentId: P:System.ServiceModel.Description.ContractDescription.ContractBehaviors
  id: ContractBehaviors
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: ContractBehaviors
  nameWithType: ContractDescription.ContractBehaviors
  fullName: System.ServiceModel.Description.ContractDescription.ContractBehaviors
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ContractBehaviors
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1191
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets the collection of behavior for the contract.</p>\n"
  syntax:
    content: public KeyedCollection<Type, IContractBehavior> ContractBehaviors { get; }
    content.vb: Public ReadOnly Property ContractBehaviors As KeyedCollection(Of Type, IContractBehavior)
    parameters: []
    return:
      type: System.Collections.ObjectModel.KeyedCollection{System.Type,System.ServiceModel.Description.IContractBehavior}
      description: "\n<p>The collection of behavior for the contract.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ServiceModel.Description.ContractDescription.ContractType
  commentId: P:System.ServiceModel.Description.ContractDescription.ContractType
  id: ContractType
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: ContractType
  nameWithType: ContractDescription.ContractType
  fullName: System.ServiceModel.Description.ContractDescription.ContractType
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ContractType
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1192
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets or sets the contract type that the contract description specifies.</p>\n"
  syntax:
    content: public Type ContractType { get; set; }
    content.vb: Public Property ContractType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of contract that the contract description specifies.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.Name
  commentId: P:System.ServiceModel.Description.ContractDescription.Name
  id: Name
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ContractDescription.Name
  fullName: System.ServiceModel.Description.ContractDescription.Name
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Name
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1193
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets or sets the name of the contract.</p>\n"
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the contract description.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.Namespace
  commentId: P:System.ServiceModel.Description.ContractDescription.Namespace
  id: Namespace
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: ContractDescription.Namespace
  fullName: System.ServiceModel.Description.ContractDescription.Namespace
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Namespace
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1194
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets or sets the namespace for the contract.</p>\n"
  syntax:
    content: public string Namespace { get; set; }
    content.vb: Public Property Namespace As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace of the contract.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value set is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Description.ContractDescription.Operations
  commentId: P:System.ServiceModel.Description.ContractDescription.Operations
  id: Operations
  parent: System.ServiceModel.Description.ContractDescription
  langs:
  - csharp
  - vb
  name: Operations
  nameWithType: ContractDescription.Operations
  fullName: System.ServiceModel.Description.ContractDescription.Operations
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Operations
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1195
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Description
  summary: "\n<p>Gets the collection of operation descriptions associated with the contract.</p>\n"
  syntax:
    content: public OperationDescriptionCollection Operations { get; }
    content.vb: Public ReadOnly Property Operations As OperationDescriptionCollection
    parameters: []
    return:
      type: System.ServiceModel.Description.OperationDescriptionCollection
      description: "\n<p>The <xref href=\"System.ServiceModel.Description.OperationDescriptionCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the operation descriptions associated with the contract description.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: System.ServiceModel.Description
  commentId: N:System.ServiceModel.Description
  isExternal: false
  name: System.ServiceModel.Description
  nameWithType: System.ServiceModel.Description
  fullName: System.ServiceModel.Description
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ObjectModel.KeyedCollection{System.Type,System.ServiceModel.Description.IContractBehavior}
  commentId: T:System.Collections.ObjectModel.KeyedCollection{System.Type,System.ServiceModel.Description.IContractBehavior}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.KeyedCollection`2
  name: KeyedCollection<Type, IContractBehavior>
  nameWithType: KeyedCollection<Type, IContractBehavior>
  fullName: System.Collections.ObjectModel.KeyedCollection<System.Type, System.ServiceModel.Description.IContractBehavior>
  nameWithType.vb: KeyedCollection(Of Type, IContractBehavior)
  fullname.vb: System.Collections.ObjectModel.KeyedCollection(Of System.Type, System.ServiceModel.Description.IContractBehavior)
  name.vb: KeyedCollection(Of Type, IContractBehavior)
  spec.csharp:
  - uid: System.Collections.ObjectModel.KeyedCollection`2
    name: KeyedCollection
    nameWithType: KeyedCollection
    fullName: System.Collections.ObjectModel.KeyedCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ServiceModel.Description.IContractBehavior
    name: IContractBehavior
    nameWithType: IContractBehavior
    fullName: System.ServiceModel.Description.IContractBehavior
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.KeyedCollection`2
    name: KeyedCollection
    nameWithType: KeyedCollection
    fullName: System.Collections.ObjectModel.KeyedCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.ServiceModel.Description.IContractBehavior
    name: IContractBehavior
    nameWithType: IContractBehavior
    fullName: System.ServiceModel.Description.IContractBehavior
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.KeyedCollection`2
  commentId: T:System.Collections.ObjectModel.KeyedCollection`2
  isExternal: false
  name: KeyedCollection<TKey, TItem>
  nameWithType: KeyedCollection<TKey, TItem>
  fullName: System.Collections.ObjectModel.KeyedCollection<TKey, TItem>
  nameWithType.vb: KeyedCollection(Of TKey, TItem)
  fullname.vb: System.Collections.ObjectModel.KeyedCollection(Of TKey, TItem)
  name.vb: KeyedCollection(Of TKey, TItem)
  spec.csharp:
  - uid: System.Collections.ObjectModel.KeyedCollection`2
    name: KeyedCollection
    nameWithType: KeyedCollection
    fullName: System.Collections.ObjectModel.KeyedCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.KeyedCollection`2
    name: KeyedCollection
    nameWithType: KeyedCollection
    fullName: System.Collections.ObjectModel.KeyedCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TItem
    nameWithType: TItem
    fullName: TItem
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.ServiceModel.Description.OperationDescriptionCollection
  commentId: T:System.ServiceModel.Description.OperationDescriptionCollection
  parent: System.ServiceModel.Description
  isExternal: false
  name: OperationDescriptionCollection
  nameWithType: OperationDescriptionCollection
  fullName: System.ServiceModel.Description.OperationDescriptionCollection
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
