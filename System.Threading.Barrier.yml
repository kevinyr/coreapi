### YamlMime:ManagedReference
items:
- uid: System.Threading.Barrier
  commentId: T:System.Threading.Barrier
  id: Barrier
  parent: System.Threading
  children:
  - System.Threading.Barrier.#ctor(System.Int32)
  - System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  - System.Threading.Barrier.AddParticipant
  - System.Threading.Barrier.AddParticipants(System.Int32)
  - System.Threading.Barrier.CurrentPhaseNumber
  - System.Threading.Barrier.Dispose
  - System.Threading.Barrier.Dispose(System.Boolean)
  - System.Threading.Barrier.ParticipantCount
  - System.Threading.Barrier.ParticipantsRemaining
  - System.Threading.Barrier.RemoveParticipant
  - System.Threading.Barrier.RemoveParticipants(System.Int32)
  - System.Threading.Barrier.SignalAndWait
  - System.Threading.Barrier.SignalAndWait(System.Int32)
  - System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  - System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  - System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: Barrier
  nameWithType: Barrier
  fullName: System.Threading.Barrier
  type: Class
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Barrier
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 77
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Enables multiple tasks to cooperatively work on an algorithm in parallel through multiple phases.</p>\n"
  syntax:
    content: >-
      [DebuggerDisplay("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")]

      public class Barrier : IDisposable
    content.vb: >-
      <DebuggerDisplay("Participant Count={ParticipantCount},Participants Remaining={ParticipantsRemaining}")>

      Public Class Barrier
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.Barrier.#ctor(System.Int32)
  commentId: M:System.Threading.Barrier.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: Barrier(Int32)
  nameWithType: Barrier.Barrier(Int32)
  fullName: System.Threading.Barrier.Barrier(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 184
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public Barrier(int participantCount)
    content.vb: Public Sub New(participantCount As Integer)
    parameters:
    - id: participantCount
      type: System.Int32
      description: "\n<p>The number of participating threads.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>participantCount</em> is less than 0 or greater than 32,767.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  commentId: M:System.Threading.Barrier.#ctor(System.Int32,System.Action{System.Threading.Barrier})
  id: '#ctor(System.Int32,System.Action{System.Threading.Barrier})'
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: Barrier(Int32, Action<Barrier>)
  nameWithType: Barrier.Barrier(Int32, Action<Barrier>)
  fullName: System.Threading.Barrier.Barrier(System.Int32, System.Action<System.Threading.Barrier>)
  type: Constructor
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 203
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public Barrier(int participantCount, Action<Barrier> postPhaseAction)
    content.vb: Public Sub New(participantCount As Integer, postPhaseAction As Action(Of Barrier))
    parameters:
    - id: participantCount
      type: System.Int32
      description: "\n<p>The number of participating threads.</p>\n"
    - id: postPhaseAction
      type: System.Action{System.Threading.Barrier}
      description: "\n<p>The <xref href=\"System.Action`1\" data-throw-if-not-resolved=\"false\"></xref> to be executed after each phase. null (Nothing in Visual Basic) may be passed to indicate no action is taken.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>participantCount</em> is less than 0 or greater than 32,767.</p>\n"
  nameWithType.vb: Barrier.Barrier(Int32, Action(Of Barrier))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Barrier.Barrier(System.Int32, System.Action(Of System.Threading.Barrier))
  name.vb: Barrier(Int32, Action(Of Barrier))
- uid: System.Threading.Barrier.CurrentPhaseNumber
  commentId: P:System.Threading.Barrier.CurrentPhaseNumber
  id: CurrentPhaseNumber
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: CurrentPhaseNumber
  nameWithType: Barrier.CurrentPhaseNumber
  fullName: System.Threading.Barrier.CurrentPhaseNumber
  type: Property
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentPhaseNumber
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 168
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the number of the barrier's current phase.</p>\n"
  syntax:
    content: public long CurrentPhaseNumber { get; }
    content.vb: Public ReadOnly Property CurrentPhaseNumber As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns the number of the barrier's current phase.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Barrier.ParticipantCount
  commentId: P:System.Threading.Barrier.ParticipantCount
  id: ParticipantCount
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: ParticipantCount
  nameWithType: Barrier.ParticipantCount
  fullName: System.Threading.Barrier.ParticipantCount
  type: Property
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParticipantCount
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 160
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the total number of participants in the barrier.</p>\n"
  syntax:
    content: public int ParticipantCount { get; }
    content.vb: Public ReadOnly Property ParticipantCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns the total number of participants in the barrier.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Barrier.ParticipantsRemaining
  commentId: P:System.Threading.Barrier.ParticipantsRemaining
  id: ParticipantsRemaining
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: ParticipantsRemaining
  nameWithType: Barrier.ParticipantsRemaining
  fullName: System.Threading.Barrier.ParticipantsRemaining
  type: Property
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParticipantsRemaining
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 146
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the number of participants in the barrier that haven’t yet signaled in the current phase.</p>\n"
  syntax:
    content: public int ParticipantsRemaining { get; }
    content.vb: Public ReadOnly Property ParticipantsRemaining As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns the number of participants in the barrier that haven’t yet signaled in the current phase.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.Barrier.AddParticipant
  commentId: M:System.Threading.Barrier.AddParticipant
  id: AddParticipant
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: AddParticipant()
  nameWithType: Barrier.AddParticipant()
  fullName: System.Threading.Barrier.AddParticipant()
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddParticipant
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 276
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> that there will be an additional participant.</p>\n"
  syntax:
    content: public long AddParticipant()
    content.vb: Public Function AddParticipant As Long
    return:
      type: System.Int64
      description: "\n<p>The phase number of the barrier in which the new participants will first participate.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Adding a participant would cause the barrier's participant count to exceed 32,767.</p>\n<p>-or-</p>\n<p>The method was invoked from within a post-phase action.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.AddParticipants(System.Int32)
  commentId: M:System.Threading.Barrier.AddParticipants(System.Int32)
  id: AddParticipants(System.Int32)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: AddParticipants(Int32)
  nameWithType: Barrier.AddParticipants(Int32)
  fullName: System.Threading.Barrier.AddParticipants(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddParticipants
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 304
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> that there will be additional participants.</p>\n"
  syntax:
    content: public long AddParticipants(int participantCount)
    content.vb: Public Function AddParticipants(participantCount As Integer) As Long
    parameters:
    - id: participantCount
      type: System.Int32
      description: "\n<p>The number of additional participants to add to the barrier.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The phase number of the barrier in which the new participants will first participate.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>participantCount</em> is less than 0.</p>\n<p>-or-</p>\n<p>Adding <em>participantCount</em> participants would cause the barrier's participant count to exceed 32,767.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.Dispose
  commentId: M:System.Threading.Barrier.Dispose
  id: Dispose
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: Barrier.Dispose()
  fullName: System.Threading.Barrier.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 893
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action.</p>\n"
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.Dispose(System.Boolean)
  commentId: M:System.Threading.Barrier.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: Barrier.Dispose(Boolean)
  fullName: System.Threading.Barrier.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 914
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref>, and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>true to release both managed and unmanaged resources; false to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Threading.Barrier.RemoveParticipant
  commentId: M:System.Threading.Barrier.RemoveParticipant
  id: RemoveParticipant
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: RemoveParticipant()
  nameWithType: Barrier.RemoveParticipant()
  fullName: System.Threading.Barrier.RemoveParticipant()
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveParticipant
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 392
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> that there will be one less participant.</p>\n"
  syntax:
    content: public void RemoveParticipant()
    content.vb: Public Sub RemoveParticipant
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The barrier already has 0 participants.</p>\n<p>-or-</p>\n<p>The method was invoked from within a post-phase action.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.RemoveParticipants(System.Int32)
  commentId: M:System.Threading.Barrier.RemoveParticipants(System.Int32)
  id: RemoveParticipants(System.Int32)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: RemoveParticipants(Int32)
  nameWithType: Barrier.RemoveParticipants(Int32)
  fullName: System.Threading.Barrier.RemoveParticipants(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveParticipants
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 409
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies the <xref href=\"System.Threading.Barrier\" data-throw-if-not-resolved=\"false\"></xref> that there will be fewer participants.</p>\n"
  syntax:
    content: public void RemoveParticipants(int participantCount)
    content.vb: Public Sub RemoveParticipants(participantCount As Integer)
    parameters:
    - id: participantCount
      type: System.Int32
      description: "\n<p>The number of additional participants to remove from the barrier.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>participantCount</em> is less than 0.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The barrier already has 0 participants.</p>\n<p>-or-</p>\n<p>The method was invoked from within a post-phase action.</p>\n<p> -or-</p>\n<p>current participant count is less than the specified participantCount</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The total participant count is less than the specified<em> participantCount</em></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.SignalAndWait
  commentId: M:System.Threading.Barrier.SignalAndWait
  id: SignalAndWait
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: SignalAndWait()
  nameWithType: Barrier.SignalAndWait()
  fullName: System.Threading.Barrier.SignalAndWait()
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignalAndWait
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 476
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well.</p>\n"
  syntax:
    content: public void SignalAndWait()
    content.vb: Public Sub SignalAndWait
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\n"
  - type: System.Threading.BarrierPostPhaseException
    commentId: T:System.Threading.BarrierPostPhaseException
    description: "\n<p>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.SignalAndWait(System.Int32)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.Int32)
  id: SignalAndWait(System.Int32)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: SignalAndWait(Int32)
  nameWithType: Barrier.SignalAndWait(Int32)
  fullName: System.Threading.Barrier.SignalAndWait(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignalAndWait
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 579
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout.</p>\n"
  syntax:
    content: public bool SignalAndWait(int millisecondsTimeout)
    content.vb: Public Function SignalAndWait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>(-1) to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>if all participants reached the barrier within the specified time; otherwise false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\n<p></p>\n"
  - type: System.Threading.BarrierPostPhaseException
    commentId: T:System.Threading.BarrierPostPhaseException
    description: "\n<p>If an exception is thrown from the post phase action of a Barrier after all participating threads have called SignalAndWait, the exception will be wrapped in a BarrierPostPhaseException and be thrown on all participating threads.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.Int32,System.Threading.CancellationToken)
  id: SignalAndWait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: SignalAndWait(Int32, CancellationToken)
  nameWithType: Barrier.SignalAndWait(Int32, CancellationToken)
  fullName: System.Threading.Barrier.SignalAndWait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignalAndWait
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 605
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a 32-bit signed integer to measure the timeout, while observing a cancellation token.</p>\n"
  syntax:
    content: public bool SignalAndWait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function SignalAndWait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>(-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>if all participants reached the barrier within the specified time; otherwise false</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  id: SignalAndWait(System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: SignalAndWait(CancellationToken)
  nameWithType: Barrier.SignalAndWait(CancellationToken)
  fullName: System.Threading.Barrier.SignalAndWait(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignalAndWait
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 496
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier, while observing a cancellation token.</p>\n"
  syntax:
    content: public void SignalAndWait(CancellationToken cancellationToken)
    content.vb: Public Sub SignalAndWait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  id: SignalAndWait(System.TimeSpan)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: SignalAndWait(TimeSpan)
  nameWithType: Barrier.SignalAndWait(TimeSpan)
  fullName: System.Threading.Barrier.SignalAndWait(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignalAndWait
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 525
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> object to measure the time interval.</p>\n"
  syntax:
    content: public bool SignalAndWait(TimeSpan timeout)
    content.vb: Public Function SignalAndWait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if all other participants reached the barrier; otherwise, false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em>is a negative number other than -1 milliseconds, which represents an infinite time-out, or it is greater than 32,767.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.Barrier.SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  id: SignalAndWait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Barrier
  langs:
  - csharp
  - vb
  name: SignalAndWait(TimeSpan, CancellationToken)
  nameWithType: Barrier.SignalAndWait(TimeSpan, CancellationToken)
  fullName: System.Threading.Barrier.SignalAndWait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Threading/src/System/Threading/Barrier.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SignalAndWait
    path: src/System.Threading/src/System/Threading/Barrier.cs
    startLine: 552
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Signals that a participant has reached the barrier and waits for all other participants to reach the barrier as well, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> object to measure the time interval, while observing a cancellation token.</p>\n"
  syntax:
    content: public bool SignalAndWait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function SignalAndWait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if all other participants reached the barrier; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> has been canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em>is a negative number other than -1 milliseconds, which represents an infinite time-out.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The method was invoked from within a post-phase action, the barrier currently has 0 participants, or the barrier is signaled by more threads than are registered as participants.</p>\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action{System.Threading.Barrier}
  commentId: T:System.Action{System.Threading.Barrier}
  parent: System
  definition: System.Action`1
  name: Action<Barrier>
  nameWithType: Action<Barrier>
  fullName: System.Action<System.Threading.Barrier>
  nameWithType.vb: Action(Of Barrier)
  fullname.vb: System.Action(Of System.Threading.Barrier)
  name.vb: Action(Of Barrier)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Barrier
    name: Barrier
    nameWithType: Barrier
    fullName: System.Threading.Barrier
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Barrier
    name: Barrier
    nameWithType: Barrier
    fullName: System.Threading.Barrier
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Threading.BarrierPostPhaseException
  commentId: T:System.Threading.BarrierPostPhaseException
  isExternal: false
  name: BarrierPostPhaseException
  nameWithType: BarrierPostPhaseException
  fullName: System.Threading.BarrierPostPhaseException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
