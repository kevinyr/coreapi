### YamlMime:ManagedReference
items:
- uid: System.Reflection.AssemblyName
  commentId: T:System.Reflection.AssemblyName
  id: AssemblyName
  parent: System.Reflection
  children:
  - System.Reflection.AssemblyName.#ctor
  - System.Reflection.AssemblyName.#ctor(System.String)
  - System.Reflection.AssemblyName.ContentType
  - System.Reflection.AssemblyName.CultureName
  - System.Reflection.AssemblyName.Flags
  - System.Reflection.AssemblyName.FullName
  - System.Reflection.AssemblyName.GetPublicKey
  - System.Reflection.AssemblyName.GetPublicKeyToken
  - System.Reflection.AssemblyName.Name
  - System.Reflection.AssemblyName.ProcessorArchitecture
  - System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  - System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  - System.Reflection.AssemblyName.ToString
  - System.Reflection.AssemblyName.Version
  langs:
  - csharp
  - vb
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyName
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Describes an assembly's unique identity in full.</p>\n"
  syntax:
    content: >-
      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_AssemblyName))]

      [ComVisible(true)]

      public sealed class AssemblyName : _AssemblyName, ICloneable
    content.vb: >-
      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_AssemblyName))>

      <ComVisible(True)>

      Public NotInheritable Class AssemblyName
          Implements _AssemblyName, ICloneable
  seealso:
  - linkId: System.Version
    commentId: T:System.Version
  - linkId: System.Reflection.AssemblyName.GetPublicKey
    commentId: M:System.Reflection.AssemblyName.GetPublicKey
  - linkId: System.Reflection.AssemblyName.GetPublicKeyToken
    commentId: M:System.Reflection.AssemblyName.GetPublicKeyToken
  - linkId: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
    commentId: M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  - linkId: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
    commentId: M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  - linkId: System.Type.FullName
    commentId: P:System.Type.FullName
  - linkId: System.Type.GetType
    commentId: M:System.Type.GetType
  - linkId: System.Type.AssemblyQualifiedName
    commentId: P:System.Type.AssemblyQualifiedName
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.AssemblyName.#ctor
  commentId: M:System.Reflection.AssemblyName.#ctor
  id: '#ctor'
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: AssemblyName()
  nameWithType: AssemblyName.AssemblyName()
  fullName: System.Reflection.AssemblyName.AssemblyName()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 63
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public AssemblyName()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.#ctor(System.String)
  commentId: M:System.Reflection.AssemblyName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: AssemblyName(String)
  nameWithType: AssemblyName.AssemblyName(String)
  fullName: System.Reflection.AssemblyName.AssemblyName(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 371
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.AssemblyName\" data-throw-if-not-resolved=\"false\"></xref> class with the specified display name.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public AssemblyName(string assemblyName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub New(assemblyName As String)
    parameters:
    - id: assemblyName
      type: System.String
      description: "\n<p>The display name of the assembly, as returned by the <xref href=\"System.Reflection.AssemblyName.FullName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>assemblyName</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>assemblyName</em> is a zero length string. </p>\n"
  - type: System.IO.FileLoadException
    commentId: T:System.IO.FileLoadException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The referenced assembly could not be found, or could not be loaded.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.ContentType
  commentId: P:System.Reflection.AssemblyName.ContentType
  id: ContentType
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: AssemblyName.ContentType
  fullName: System.Reflection.AssemblyName.ContentType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContentType
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 151
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets a value that indicates what type of content the assembly contains.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public AssemblyContentType ContentType { get; set; }
    content.vb: >-
      <ComVisible(False)>

      Public Property ContentType As AssemblyContentType
    parameters: []
    return:
      type: System.Reflection.AssemblyContentType
      description: "\n<p>A value that indicates what type of content the assembly contains.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.CultureName
  commentId: P:System.Reflection.AssemblyName.CultureName
  id: CultureName
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: CultureName
  nameWithType: AssemblyName.CultureName
  fullName: System.Reflection.AssemblyName.CultureName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CultureName
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 100
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the name of the culture associated with the assembly.</p>\n"
  syntax:
    content: public string CultureName { get; set; }
    content.vb: Public Property CultureName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The culture name.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.Flags
  commentId: P:System.Reflection.AssemblyName.Flags
  id: Flags
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: Flags
  nameWithType: AssemblyName.Flags
  fullName: System.Reflection.AssemblyName.Flags
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Flags
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 259
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the attributes of the assembly.</p>\n"
  syntax:
    content: public AssemblyNameFlags Flags { get; set; }
    content.vb: Public Property Flags As AssemblyNameFlags
    parameters: []
    return:
      type: System.Reflection.AssemblyNameFlags
      description: "\n<p>A value that represents the attributes of the assembly.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.FullName
  commentId: P:System.Reflection.AssemblyName.FullName
  id: FullName
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: AssemblyName.FullName
  fullName: System.Reflection.AssemblyName.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 286
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the full name of the assembly, also known as the display name.</p>\n"
  syntax:
    content: >-
      public string FullName

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string that is the full name of the assembly, also known as the display name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.AssemblyName.Name
  commentId: P:System.Reflection.AssemblyName.Name
  id: Name
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: AssemblyName.Name
  fullName: System.Reflection.AssemblyName.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 73
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the simple name of the assembly. This is usually, but not necessarily, the file name of the manifest file of the assembly, minus its extension.</p>\n"
  syntax:
    content: public string Name { get; set; }
    content.vb: Public Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The simple name of the assembly.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.ProcessorArchitecture
  commentId: P:System.Reflection.AssemblyName.ProcessorArchitecture
  id: ProcessorArchitecture
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: ProcessorArchitecture
  nameWithType: AssemblyName.ProcessorArchitecture
  fullName: System.Reflection.AssemblyName.ProcessorArchitecture
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ProcessorArchitecture
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 134
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets a value that identifies the processor and bits-per-word of the platform targeted by an executable.</p>\n"
  syntax:
    content: public ProcessorArchitecture ProcessorArchitecture { get; set; }
    content.vb: Public Property ProcessorArchitecture As ProcessorArchitecture
    parameters: []
    return:
      type: System.Reflection.ProcessorArchitecture
      description: "\n<p>One of the enumeration values that identifies the processor and bits-per-word of the platform targeted by an executable.</p>\n"
  seealso:
  - linkId: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    commentId: M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.Version
  commentId: P:System.Reflection.AssemblyName.Version
  id: Version
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: AssemblyName.Version
  fullName: System.Reflection.AssemblyName.Version
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Version
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 79
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets or sets the major, minor, build, and revision numbers of the assembly.</p>\n"
  syntax:
    content: public Version Version { get; set; }
    content.vb: Public Property Version As Version
    parameters: []
    return:
      type: System.Version
      description: "\n<p>An object that represents the major, minor, build, and revision numbers of the assembly.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.GetPublicKey
  commentId: M:System.Reflection.AssemblyName.GetPublicKey
  id: GetPublicKey
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: GetPublicKey()
  nameWithType: AssemblyName.GetPublicKey()
  fullName: System.Reflection.AssemblyName.GetPublicKey()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPublicKey
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 222
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the public key of the assembly.</p>\n"
  syntax:
    content: public byte[] GetPublicKey()
    content.vb: Public Function GetPublicKey As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A byte array that contains the public key of the assembly.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>A public key was provided (for example, by using the <xref href=\"System.Reflection.AssemblyName.SetPublicKey(System.Byte[])\" data-throw-if-not-resolved=\"false\"></xref> method), but no public key token was provided. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.GetPublicKeyToken
  commentId: M:System.Reflection.AssemblyName.GetPublicKeyToken
  id: GetPublicKeyToken
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: GetPublicKeyToken()
  nameWithType: AssemblyName.GetPublicKeyToken()
  fullName: System.Reflection.AssemblyName.GetPublicKeyToken()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPublicKeyToken
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 239
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public byte[] GetPublicKeyToken()
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetPublicKeyToken As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A byte array that contains the public key token.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  commentId: M:System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  id: SetPublicKey(System.Byte[])
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: SetPublicKey(Byte[])
  nameWithType: AssemblyName.SetPublicKey(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKey(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetPublicKey
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 227
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the public key identifying the assembly.</p>\n"
  syntax:
    content: public void SetPublicKey(byte[] publicKey)
    content.vb: Public Sub SetPublicKey(publicKey As Byte())
    parameters:
    - id: publicKey
      type: System.Byte[]
      description: "\n<p>A byte array containing the public key of the assembly. </p>\n"
  nameWithType.vb: AssemblyName.SetPublicKey(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.AssemblyName.SetPublicKey(System.Byte())
  name.vb: SetPublicKey(Byte())
- uid: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  commentId: M:System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  id: SetPublicKeyToken(System.Byte[])
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: SetPublicKeyToken(Byte[])
  nameWithType: AssemblyName.SetPublicKeyToken(Byte[])
  fullName: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetPublicKeyToken
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 247
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Sets the public key token, which is the last 8 bytes of the SHA-1 hash of the public key under which the application or assembly is signed.</p>\n"
  syntax:
    content: public void SetPublicKeyToken(byte[] publicKeyToken)
    content.vb: Public Sub SetPublicKeyToken(publicKeyToken As Byte())
    parameters:
    - id: publicKeyToken
      type: System.Byte[]
      description: "\n<p>A byte array containing the public key token of the assembly. </p>\n"
  nameWithType.vb: AssemblyName.SetPublicKeyToken(Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.AssemblyName.SetPublicKeyToken(System.Byte())
  name.vb: SetPublicKeyToken(Byte())
- uid: System.Reflection.AssemblyName.ToString
  commentId: M:System.Reflection.AssemblyName.ToString
  id: ToString
  parent: System.Reflection.AssemblyName
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: AssemblyName.ToString()
  fullName: System.Reflection.AssemblyName.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/AssemblyName.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/AssemblyName.cs
    startLine: 295
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the full name of the assembly, also known as the display name.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The full name of the assembly, or the class name if the full name cannot be determined.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.AssemblyContentType
  commentId: T:System.Reflection.AssemblyContentType
  parent: System.Reflection
  isExternal: false
  name: AssemblyContentType
  nameWithType: AssemblyContentType
  fullName: System.Reflection.AssemblyContentType
- uid: System.Reflection.AssemblyNameFlags
  commentId: T:System.Reflection.AssemblyNameFlags
  parent: System.Reflection
  isExternal: false
  name: AssemblyNameFlags
  nameWithType: AssemblyNameFlags
  fullName: System.Reflection.AssemblyNameFlags
- uid: System.Reflection.ProcessorArchitecture
  commentId: T:System.Reflection.ProcessorArchitecture
  parent: System.Reflection
  isExternal: false
  name: ProcessorArchitecture
  nameWithType: ProcessorArchitecture
  fullName: System.Reflection.ProcessorArchitecture
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.FileLoadException
  commentId: T:System.IO.FileLoadException
  isExternal: false
  name: FileLoadException
  nameWithType: FileLoadException
  fullName: System.IO.FileLoadException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
