### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.AssemblyBuilder
  commentId: T:System.Reflection.Emit.AssemblyBuilder
  id: AssemblyBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  - System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  - System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  - System.Reflection.Emit.AssemblyBuilder.FullName
  - System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  - System.Reflection.Emit.AssemblyBuilder.GetHashCode
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  - System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  - System.Reflection.Emit.AssemblyBuilder.IsDynamic
  - System.Reflection.Emit.AssemblyBuilder.ManifestModule
  - System.Reflection.Emit.AssemblyBuilder.Modules
  - System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: AssemblyBuilder
  nameWithType: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyBuilder
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 170
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and represents a dynamic assembly.</p>\n"
  syntax:
    content: >-
      [HostProtection(MayLeakOnAbort = true)]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_AssemblyBuilder))]

      [ComVisible(true)]

      public sealed class AssemblyBuilder : Assembly, _Assembly, IEvidenceFactory, ICustomAttributeProvider, ISerializable, _AssemblyBuilder
    content.vb: >-
      <HostProtection(MayLeakOnAbort:=True)>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_AssemblyBuilder))>

      <ComVisible(True)>

      Public NotInheritable Class AssemblyBuilder
          Inherits Assembly
          Implements _Assembly, IEvidenceFactory, ICustomAttributeProvider, ISerializable, _AssemblyBuilder
  seealso:
  - linkId: erload:System.AppDomain.DefineDynamicAssembly
    commentId: Overload:System.AppDomain.DefineDynamicAssembly
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  inheritance:
  - System.Object
  - System.Reflection.Assembly
  implements:
  - System.Runtime.InteropServices._Assembly
  - System.Security.IEvidenceFactory
  - System.Reflection.ICustomAttributeProvider
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  - System.Reflection.Assembly.GetAssembly(System.Type)
  - System.Reflection.Assembly.LoadFrom(System.String)
  - System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  - System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  - System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  - System.Reflection.Assembly.Load(System.String)
  - System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  - System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  - System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.LoadWithPartialName(System.String)
  - System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.Load(System.Byte[])
  - System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  - System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  - System.Reflection.Assembly.LoadFile(System.String)
  - System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  - System.Reflection.Assembly.GetExecutingAssembly
  - System.Reflection.Assembly.GetCallingAssembly
  - System.Reflection.Assembly.GetEntryAssembly
  - System.Reflection.Assembly.GetName
  - System.Reflection.Assembly.GetName(System.Boolean)
  - System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  - System.Reflection.Assembly.GetType(System.String)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean)
  - System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Assembly.GetExportedTypes
  - System.Reflection.Assembly.GetTypes
  - System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  - System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  - System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  - System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  - System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Assembly.GetCustomAttributesData
  - System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  - System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  - System.Reflection.Assembly.CreateInstance(System.String)
  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  - System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  - System.Reflection.Assembly.GetLoadedModules
  - System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  - System.Reflection.Assembly.GetModules
  - System.Reflection.Assembly.GetModules(System.Boolean)
  - System.Reflection.Assembly.GetModule(System.String)
  - System.Reflection.Assembly.GetFile(System.String)
  - System.Reflection.Assembly.GetFiles
  - System.Reflection.Assembly.GetFiles(System.Boolean)
  - System.Reflection.Assembly.GetReferencedAssemblies
  - System.Reflection.Assembly.ToString
  - System.Reflection.Assembly.CodeBase
  - System.Reflection.Assembly.EscapedCodeBase
  - System.Reflection.Assembly.EntryPoint
  - System.Reflection.Assembly.ExportedTypes
  - System.Reflection.Assembly.Evidence
  - System.Reflection.Assembly.PermissionSet
  - System.Reflection.Assembly.IsFullyTrusted
  - System.Reflection.Assembly.SecurityRuleSet
  - System.Reflection.Assembly.CustomAttributes
  - System.Reflection.Assembly.ReflectionOnly
  - System.Reflection.Assembly.Location
  - System.Reflection.Assembly.ImageRuntimeVersion
  - System.Reflection.Assembly.GlobalAssemblyCache
  - System.Reflection.Assembly.HostContext
  - System.Reflection.Assembly.ModuleResolve
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
  - System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
  - System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
  - System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
  - System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
  - System.Reflection.Assembly.System.Reflection.AssemblyExtensions.GetExportedTypes
  - System.Reflection.Assembly.System.Reflection.AssemblyExtensions.GetModules
  - System.Reflection.Assembly.System.Reflection.AssemblyExtensions.GetTypes
  - System.Reflection.Assembly.System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Byte*@,System.Int32@)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.AssemblyBuilder.FullName
  commentId: P:System.Reflection.Emit.AssemblyBuilder.FullName
  id: FullName
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: AssemblyBuilder.FullName
  fullName: System.Reflection.Emit.AssemblyBuilder.FullName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullName
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1259
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the display name of the current dynamic assembly. </p>\n"
  syntax:
    content: public override string FullName { get; }
    content.vb: Public Overrides ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The display name of the dynamic assembly.</p>\n"
  overridden: System.Reflection.Assembly.FullName
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.IsDynamic
  commentId: P:System.Reflection.Emit.AssemblyBuilder.IsDynamic
  id: IsDynamic
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: IsDynamic
  nameWithType: AssemblyBuilder.IsDynamic
  fullName: System.Reflection.Emit.AssemblyBuilder.IsDynamic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDynamic
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1366
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a value that indicates that the current assembly is a dynamic assembly.</p>\n"
  syntax:
    content: public override bool IsDynamic { get; }
    content.vb: Public Overrides ReadOnly Property IsDynamic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Always <strong>true</strong>.</p>\n"
  overridden: System.Reflection.Assembly.IsDynamic
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.ManifestModule
  commentId: P:System.Reflection.Emit.AssemblyBuilder.ManifestModule
  id: ManifestModule
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: ManifestModule
  nameWithType: AssemblyBuilder.ManifestModule
  fullName: System.Reflection.Emit.AssemblyBuilder.ManifestModule
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ManifestModule
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1299
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the module in the current <xref href=\"System.Reflection.Emit.AssemblyBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the assembly manifest.</p>\n"
  syntax:
    content: public override Module ManifestModule { get; }
    content.vb: 'Public Overrides ReadOnly Property ManifestModule As '
    parameters: []
    return:
      type: System.Reflection.Module
      description: "\n<p>The manifest module.</p>\n"
  overridden: System.Reflection.Assembly.ManifestModule
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess)
  nameWithType: AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineDynamicAssembly
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 489
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a dynamic assembly that has the specified name and access rights.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: "\n<p>The name of the assembly.</p>\n"
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: "\n<p>The access rights of the assembly.</p>\n"
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: "\n<p>An object that represents the new assembly.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  commentId: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  id: DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable<CustomAttributeBuilder>)
  nameWithType: AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable<CustomAttributeBuilder>)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineDynamicAssembly
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 502
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a new assembly that has the specified name, access rights, and attributes.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static AssemblyBuilder DefineDynamicAssembly(AssemblyName name, AssemblyBuilderAccess access, IEnumerable<CustomAttributeBuilder> assemblyAttributes)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function DefineDynamicAssembly(name As AssemblyName, access As AssemblyBuilderAccess, assemblyAttributes As IEnumerable(Of CustomAttributeBuilder)) As AssemblyBuilder
    parameters:
    - id: name
      type: System.Reflection.AssemblyName
      description: "\n<p>The name of the assembly.</p>\n"
    - id: access
      type: System.Reflection.Emit.AssemblyBuilderAccess
      description: "\n<p>The access rights of the assembly.</p>\n"
    - id: assemblyAttributes
      type: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
      description: "\n<p>A collection that contains the attributes of the assembly.</p>\n"
    return:
      type: System.Reflection.Emit.AssemblyBuilder
      description: "\n<p>An object that represents the new assembly.</p>\n"
  nameWithType.vb: AssemblyBuilder.DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable(Of CustomAttributeBuilder))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName, System.Reflection.Emit.AssemblyBuilderAccess, System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder))
  name.vb: DefineDynamicAssembly(AssemblyName, AssemblyBuilderAccess, IEnumerable(Of CustomAttributeBuilder))
- uid: System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  id: DefineDynamicModule(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefineDynamicModule(String)
  nameWithType: AssemblyBuilder.DefineDynamicModule(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineDynamicModule
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 583
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a named transient dynamic module in this assembly.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public ModuleBuilder DefineDynamicModule(string name)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Function DefineDynamicModule(name As String) As ModuleBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the dynamic module. Must be less than 260 characters in length. </p>\n"
    return:
      type: System.Reflection.Emit.ModuleBuilder
      description: "\n<p>A <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref> representing the defined dynamic module.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> begins with white space.</p>\n<p>-or- </p>\n<p>The length of <em>name</em> is zero.</p>\n<p>-or- </p>\n<p>The length of <em>name</em> is greater than or equal to 260. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ExecutionEngineException
    commentId: T:System.ExecutionEngineException
    description: "\n<p>The assembly for default symbol writer cannot be loaded.</p>\n<p>-or- </p>\n<p>The type that implements the default symbol writer interface cannot be found. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: AssemblyBuilder.Equals(Object)
  fullName: System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1137
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Reflection.Assembly.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  id: GetDynamicModule(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetDynamicModule(String)
  nameWithType: AssemblyBuilder.GetDynamicModule(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDynamicModule
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1515
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the dynamic module with the specified name.</p>\n"
  syntax:
    content: public ModuleBuilder GetDynamicModule(string name)
    content.vb: Public Function GetDynamicModule(name As String) As ModuleBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the requested dynamic module. </p>\n"
    return:
      type: System.Reflection.Emit.ModuleBuilder
      description: "\n<p>A ModuleBuilder object representing the requested dynamic module.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>name</em> is zero. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.AssemblyBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: AssemblyBuilder.GetHashCode()
  fullName: System.Reflection.Emit.AssemblyBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1142
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Reflection.Assembly.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  id: GetManifestResourceInfo(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetManifestResourceInfo(String)
  nameWithType: AssemblyBuilder.GetManifestResourceInfo(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceInfo
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1200
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns information about how the given resource has been persisted.</p>\n"
  syntax:
    content: public override ManifestResourceInfo GetManifestResourceInfo(string resourceName)
    content.vb: Public Overrides Function GetManifestResourceInfo(resourceName As String) As ManifestResourceInfo
    parameters:
    - id: resourceName
      type: System.String
      description: "\n<p>The name of the resource. </p>\n"
    return:
      type: System.Reflection.ManifestResourceInfo
      description: "\n<p>\n<xref href=\"System.Reflection.ManifestResourceInfo\" data-throw-if-not-resolved=\"false\"></xref> populated with information about the resource's topology, or <strong>null</strong> if the resource is not found.</p>\n"
  overridden: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not currently supported. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames
  id: GetManifestResourceNames
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetManifestResourceNames()
  nameWithType: AssemblyBuilder.GetManifestResourceNames()
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceNames
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1169
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Loads the specified manifest resource from this assembly.</p>\n"
  syntax:
    content: public override string[] GetManifestResourceNames()
    content.vb: Public Overrides Function GetManifestResourceNames As String()
    return:
      type: System.String[]
      description: "\n<p>An array of type <strong>String</strong> containing the names of all the resources.</p>\n"
  overridden: System.Reflection.Assembly.GetManifestResourceNames
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not supported on a dynamic assembly. To get the manifest resource names, use <xref href=\"System.Reflection.Assembly.GetManifestResourceNames\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  id: GetManifestResourceStream(System.String)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: GetManifestResourceStream(String)
  nameWithType: AssemblyBuilder.GetManifestResourceStream(String)
  fullName: System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetManifestResourceStream
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1195
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Loads the specified manifest resource from this assembly.</p>\n"
  syntax:
    content: public override Stream GetManifestResourceStream(string name)
    content.vb: Public Overrides Function GetManifestResourceStream(name As String) As Stream
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the manifest resource being requested. </p>\n"
    return:
      type: System.IO.Stream
      description: "\n<p>A <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref> representing this manifest resource.</p>\n"
  overridden: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This method is not currently supported. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType: AssemblyBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1609
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute on this assembly using a specified custom attribute blob.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ComVisible(true)]

      public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: >-
      <SecurityCritical>

      <ComVisible(True)>

      Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte blob representing the attributes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>con</em> is not a <strong>RuntimeConstructorInfo</strong> object. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  nameWithType.vb: AssemblyBuilder.SetCustomAttribute(ConstructorInfo, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: AssemblyBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/AssemblyBuilder.cs
    startLine: 1650
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Set a custom attribute on this assembly using a custom attribute builder.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class to define the custom attribute. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> is <strong>null</strong>. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permission. </p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  commentId: P:System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  id: DefinedTypes
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: DefinedTypes
  nameWithType: AssemblyBuilder.DefinedTypes
  fullName: System.Reflection.Emit.AssemblyBuilder.DefinedTypes
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefinedTypes
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 105
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override IEnumerable<TypeInfo> DefinedTypes { get; }
    content.vb: Public Overrides ReadOnly Property DefinedTypes As IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  overridden: System.Reflection.Assembly.DefinedTypes
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.AssemblyBuilder.Modules
  commentId: P:System.Reflection.Emit.AssemblyBuilder.Modules
  id: Modules
  parent: System.Reflection.Emit.AssemblyBuilder
  langs:
  - csharp
  - vb
  name: Modules
  nameWithType: AssemblyBuilder.Modules
  fullName: System.Reflection.Emit.AssemblyBuilder.Modules
  type: Property
  source:
    remote:
      path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modules
    path: src/System.Reflection.Emit/ref/System.Reflection.Emit.Manual.cs
    startLine: 107
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  syntax:
    content: public override IEnumerable<Module> Modules { get; }
    content.vb: Public Overrides ReadOnly Property Modules As IEnumerable(Of  Module)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  overridden: System.Reflection.Assembly.Modules
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Runtime.InteropServices._Assembly
  commentId: T:System.Runtime.InteropServices._Assembly
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Assembly
  nameWithType: _Assembly
  fullName: System.Runtime.InteropServices._Assembly
- uid: System.Security.IEvidenceFactory
  commentId: T:System.Security.IEvidenceFactory
  parent: System.Security
  isExternal: true
  name: IEvidenceFactory
  nameWithType: IEvidenceFactory
  fullName: System.Security.IEvidenceFactory
- uid: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  commentId: M:System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: CreateQualifiedName(String, String)
  nameWithType: Assembly.CreateQualifiedName(String, String)
  fullName: System.Reflection.Assembly.CreateQualifiedName(System.String, System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
    name: CreateQualifiedName
    nameWithType: Assembly.CreateQualifiedName
    fullName: System.Reflection.Assembly.CreateQualifiedName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.CreateQualifiedName(System.String,System.String)
    name: CreateQualifiedName
    nameWithType: Assembly.CreateQualifiedName
    fullName: System.Reflection.Assembly.CreateQualifiedName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetAssembly(System.Type)
  commentId: M:System.Reflection.Assembly.GetAssembly(System.Type)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetAssembly(Type)
  nameWithType: Assembly.GetAssembly(Type)
  fullName: System.Reflection.Assembly.GetAssembly(System.Type)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetAssembly(System.Type)
    name: GetAssembly
    nameWithType: Assembly.GetAssembly
    fullName: System.Reflection.Assembly.GetAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetAssembly(System.Type)
    name: GetAssembly
    nameWithType: Assembly.GetAssembly
    fullName: System.Reflection.Assembly.GetAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadFrom(System.String)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadFrom(String)
  nameWithType: Assembly.LoadFrom(String)
  fullName: System.Reflection.Assembly.LoadFrom(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadFrom(System.String)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadFrom(System.String)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: ReflectionOnlyLoadFrom(String)
  nameWithType: Assembly.ReflectionOnlyLoadFrom(String)
  fullName: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
    name: ReflectionOnlyLoadFrom
    nameWithType: Assembly.ReflectionOnlyLoadFrom
    fullName: System.Reflection.Assembly.ReflectionOnlyLoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.ReflectionOnlyLoadFrom(System.String)
    name: ReflectionOnlyLoadFrom
    nameWithType: Assembly.ReflectionOnlyLoadFrom
    fullName: System.Reflection.Assembly.ReflectionOnlyLoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadFrom(String, Evidence)
  nameWithType: Assembly.LoadFrom(String, Evidence)
  fullName: System.Reflection.Assembly.LoadFrom(System.String, System.Security.Policy.Evidence)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  nameWithType: Assembly.LoadFrom(String, Evidence, Byte[], AssemblyHashAlgorithm)
  fullName: System.Reflection.Assembly.LoadFrom(System.String, System.Security.Policy.Evidence, System.Byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)
  nameWithType.vb: Assembly.LoadFrom(String, Evidence, Byte(), AssemblyHashAlgorithm)
  fullname.vb: System.Reflection.Assembly.LoadFrom(System.String, System.Security.Policy.Evidence, System.Byte(), System.Configuration.Assemblies.AssemblyHashAlgorithm)
  name.vb: LoadFrom(String, Evidence, Byte(), AssemblyHashAlgorithm)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
    name: AssemblyHashAlgorithm
    nameWithType: AssemblyHashAlgorithm
    fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadFrom(System.String,System.Security.Policy.Evidence,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
    name: AssemblyHashAlgorithm
    nameWithType: AssemblyHashAlgorithm
    fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  commentId: M:System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  nameWithType: Assembly.LoadFrom(String, Byte[], AssemblyHashAlgorithm)
  fullName: System.Reflection.Assembly.LoadFrom(System.String, System.Byte[], System.Configuration.Assemblies.AssemblyHashAlgorithm)
  nameWithType.vb: Assembly.LoadFrom(String, Byte(), AssemblyHashAlgorithm)
  fullname.vb: System.Reflection.Assembly.LoadFrom(System.String, System.Byte(), System.Configuration.Assemblies.AssemblyHashAlgorithm)
  name.vb: LoadFrom(String, Byte(), AssemblyHashAlgorithm)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
    name: AssemblyHashAlgorithm
    nameWithType: AssemblyHashAlgorithm
    fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadFrom(System.String,System.Byte[],System.Configuration.Assemblies.AssemblyHashAlgorithm)
    name: LoadFrom
    nameWithType: Assembly.LoadFrom
    fullName: System.Reflection.Assembly.LoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Configuration.Assemblies.AssemblyHashAlgorithm
    name: AssemblyHashAlgorithm
    nameWithType: AssemblyHashAlgorithm
    fullName: System.Configuration.Assemblies.AssemblyHashAlgorithm
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  commentId: M:System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: UnsafeLoadFrom(String)
  nameWithType: Assembly.UnsafeLoadFrom(String)
  fullName: System.Reflection.Assembly.UnsafeLoadFrom(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)
    name: UnsafeLoadFrom
    nameWithType: Assembly.UnsafeLoadFrom
    fullName: System.Reflection.Assembly.UnsafeLoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.UnsafeLoadFrom(System.String)
    name: UnsafeLoadFrom
    nameWithType: Assembly.UnsafeLoadFrom
    fullName: System.Reflection.Assembly.UnsafeLoadFrom
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.String)
  commentId: M:System.Reflection.Assembly.Load(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(String)
  nameWithType: Assembly.Load(String)
  fullName: System.Reflection.Assembly.Load(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.String)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.String)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: ReflectionOnlyLoad(String)
  nameWithType: Assembly.ReflectionOnlyLoad(String)
  fullName: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
    name: ReflectionOnlyLoad
    nameWithType: Assembly.ReflectionOnlyLoad
    fullName: System.Reflection.Assembly.ReflectionOnlyLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.String)
    name: ReflectionOnlyLoad
    nameWithType: Assembly.ReflectionOnlyLoad
    fullName: System.Reflection.Assembly.ReflectionOnlyLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(String, Evidence)
  nameWithType: Assembly.Load(String, Evidence)
  fullName: System.Reflection.Assembly.Load(System.String, System.Security.Policy.Evidence)
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.String,System.Security.Policy.Evidence)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(AssemblyName)
  nameWithType: Assembly.Load(AssemblyName)
  fullName: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(AssemblyName, Evidence)
  nameWithType: Assembly.Load(AssemblyName, Evidence)
  fullName: System.Reflection.Assembly.Load(System.Reflection.AssemblyName, System.Security.Policy.Evidence)
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.Reflection.AssemblyName,System.Security.Policy.Evidence)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.AssemblyName
    name: AssemblyName
    nameWithType: AssemblyName
    fullName: System.Reflection.AssemblyName
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadWithPartialName(System.String)
  commentId: M:System.Reflection.Assembly.LoadWithPartialName(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadWithPartialName(String)
  nameWithType: Assembly.LoadWithPartialName(String)
  fullName: System.Reflection.Assembly.LoadWithPartialName(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadWithPartialName(System.String)
    name: LoadWithPartialName
    nameWithType: Assembly.LoadWithPartialName
    fullName: System.Reflection.Assembly.LoadWithPartialName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadWithPartialName(System.String)
    name: LoadWithPartialName
    nameWithType: Assembly.LoadWithPartialName
    fullName: System.Reflection.Assembly.LoadWithPartialName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadWithPartialName(String, Evidence)
  nameWithType: Assembly.LoadWithPartialName(String, Evidence)
  fullName: System.Reflection.Assembly.LoadWithPartialName(System.String, System.Security.Policy.Evidence)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
    name: LoadWithPartialName
    nameWithType: Assembly.LoadWithPartialName
    fullName: System.Reflection.Assembly.LoadWithPartialName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadWithPartialName(System.String,System.Security.Policy.Evidence)
    name: LoadWithPartialName
    nameWithType: Assembly.LoadWithPartialName
    fullName: System.Reflection.Assembly.LoadWithPartialName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.Byte[])
  commentId: M:System.Reflection.Assembly.Load(System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(Byte[])
  nameWithType: Assembly.Load(Byte[])
  fullName: System.Reflection.Assembly.Load(System.Byte[])
  nameWithType.vb: Assembly.Load(Byte())
  fullname.vb: System.Reflection.Assembly.Load(System.Byte())
  name.vb: Load(Byte())
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.Byte[])
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.Byte[])
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  commentId: M:System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: true
  name: ReflectionOnlyLoad(Byte[])
  nameWithType: Assembly.ReflectionOnlyLoad(Byte[])
  fullName: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
  nameWithType.vb: Assembly.ReflectionOnlyLoad(Byte())
  fullname.vb: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte())
  name.vb: ReflectionOnlyLoad(Byte())
  spec.csharp:
  - uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
    name: ReflectionOnlyLoad
    nameWithType: Assembly.ReflectionOnlyLoad
    fullName: System.Reflection.Assembly.ReflectionOnlyLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.ReflectionOnlyLoad(System.Byte[])
    name: ReflectionOnlyLoad
    nameWithType: Assembly.ReflectionOnlyLoad
    fullName: System.Reflection.Assembly.ReflectionOnlyLoad
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(Byte[], Byte[])
  nameWithType: Assembly.Load(Byte[], Byte[])
  fullName: System.Reflection.Assembly.Load(System.Byte[], System.Byte[])
  nameWithType.vb: Assembly.Load(Byte(), Byte())
  fullname.vb: System.Reflection.Assembly.Load(System.Byte(), System.Byte())
  name.vb: Load(Byte(), Byte())
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[])
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(Byte[], Byte[], SecurityContextSource)
  nameWithType: Assembly.Load(Byte[], Byte[], SecurityContextSource)
  fullName: System.Reflection.Assembly.Load(System.Byte[], System.Byte[], System.Security.SecurityContextSource)
  nameWithType.vb: Assembly.Load(Byte(), Byte(), SecurityContextSource)
  fullname.vb: System.Reflection.Assembly.Load(System.Byte(), System.Byte(), System.Security.SecurityContextSource)
  name.vb: Load(Byte(), Byte(), SecurityContextSource)
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecurityContextSource
    name: SecurityContextSource
    nameWithType: SecurityContextSource
    fullName: System.Security.SecurityContextSource
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.SecurityContextSource)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.SecurityContextSource
    name: SecurityContextSource
    nameWithType: SecurityContextSource
    fullName: System.Security.SecurityContextSource
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Load(Byte[], Byte[], Evidence)
  nameWithType: Assembly.Load(Byte[], Byte[], Evidence)
  fullName: System.Reflection.Assembly.Load(System.Byte[], System.Byte[], System.Security.Policy.Evidence)
  nameWithType.vb: Assembly.Load(Byte(), Byte(), Evidence)
  fullname.vb: System.Reflection.Assembly.Load(System.Byte(), System.Byte(), System.Security.Policy.Evidence)
  name.vb: Load(Byte(), Byte(), Evidence)
  spec.csharp:
  - uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Load(System.Byte[],System.Byte[],System.Security.Policy.Evidence)
    name: Load
    nameWithType: Assembly.Load
    fullName: System.Reflection.Assembly.Load
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadFile(System.String)
  commentId: M:System.Reflection.Assembly.LoadFile(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadFile(String)
  nameWithType: Assembly.LoadFile(String)
  fullName: System.Reflection.Assembly.LoadFile(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadFile(System.String)
    name: LoadFile
    nameWithType: Assembly.LoadFile
    fullName: System.Reflection.Assembly.LoadFile
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadFile(System.String)
    name: LoadFile
    nameWithType: Assembly.LoadFile
    fullName: System.Reflection.Assembly.LoadFile
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  commentId: M:System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadFile(String, Evidence)
  nameWithType: Assembly.LoadFile(String, Evidence)
  fullName: System.Reflection.Assembly.LoadFile(System.String, System.Security.Policy.Evidence)
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
    name: LoadFile
    nameWithType: Assembly.LoadFile
    fullName: System.Reflection.Assembly.LoadFile
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadFile(System.String,System.Security.Policy.Evidence)
    name: LoadFile
    nameWithType: Assembly.LoadFile
    fullName: System.Reflection.Assembly.LoadFile
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: System.Security.Policy.Evidence
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetExecutingAssembly
  commentId: M:System.Reflection.Assembly.GetExecutingAssembly
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetExecutingAssembly()
  nameWithType: Assembly.GetExecutingAssembly()
  fullName: System.Reflection.Assembly.GetExecutingAssembly()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetExecutingAssembly
    name: GetExecutingAssembly
    nameWithType: Assembly.GetExecutingAssembly
    fullName: System.Reflection.Assembly.GetExecutingAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetExecutingAssembly
    name: GetExecutingAssembly
    nameWithType: Assembly.GetExecutingAssembly
    fullName: System.Reflection.Assembly.GetExecutingAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetCallingAssembly
  commentId: M:System.Reflection.Assembly.GetCallingAssembly
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetCallingAssembly()
  nameWithType: Assembly.GetCallingAssembly()
  fullName: System.Reflection.Assembly.GetCallingAssembly()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetCallingAssembly
    name: GetCallingAssembly
    nameWithType: Assembly.GetCallingAssembly
    fullName: System.Reflection.Assembly.GetCallingAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetCallingAssembly
    name: GetCallingAssembly
    nameWithType: Assembly.GetCallingAssembly
    fullName: System.Reflection.Assembly.GetCallingAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetEntryAssembly
  commentId: M:System.Reflection.Assembly.GetEntryAssembly
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetEntryAssembly()
  nameWithType: Assembly.GetEntryAssembly()
  fullName: System.Reflection.Assembly.GetEntryAssembly()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetEntryAssembly
    name: GetEntryAssembly
    nameWithType: Assembly.GetEntryAssembly
    fullName: System.Reflection.Assembly.GetEntryAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetEntryAssembly
    name: GetEntryAssembly
    nameWithType: Assembly.GetEntryAssembly
    fullName: System.Reflection.Assembly.GetEntryAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetName
  commentId: M:System.Reflection.Assembly.GetName
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetName()
  nameWithType: Assembly.GetName()
  fullName: System.Reflection.Assembly.GetName()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetName
    name: GetName
    nameWithType: Assembly.GetName
    fullName: System.Reflection.Assembly.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetName
    name: GetName
    nameWithType: Assembly.GetName
    fullName: System.Reflection.Assembly.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetName(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetName(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetName(Boolean)
  nameWithType: Assembly.GetName(Boolean)
  fullName: System.Reflection.Assembly.GetName(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetName(System.Boolean)
    name: GetName
    nameWithType: Assembly.GetName
    fullName: System.Reflection.Assembly.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetName(System.Boolean)
    name: GetName
    nameWithType: Assembly.GetName
    fullName: System.Reflection.Assembly.GetName
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  commentId: M:System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
  parent: System.Reflection.Assembly
  isExternal: true
  name: _Assembly.GetType()
  nameWithType: Assembly._Assembly.GetType()
  fullName: System.Reflection.Assembly.System.Runtime.InteropServices._Assembly.GetType()
  nameWithType.vb: Assembly.System.Runtime.InteropServices._Assembly.GetType()
  name.vb: System.Runtime.InteropServices._Assembly.GetType()
  spec.csharp:
  - uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
    name: _Assembly.GetType
    nameWithType: Assembly._Assembly.GetType
    fullName: System.Reflection.Assembly.System.Runtime.InteropServices._Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.System#Runtime#InteropServices#_Assembly#GetType
    name: System.Runtime.InteropServices._Assembly.GetType
    nameWithType: Assembly.System.Runtime.InteropServices._Assembly.GetType
    fullName: System.Reflection.Assembly.System.Runtime.InteropServices._Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetType(System.String)
  commentId: M:System.Reflection.Assembly.GetType(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetType(String)
  nameWithType: Assembly.GetType(String)
  fullName: System.Reflection.Assembly.GetType(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetType(System.String)
    name: GetType
    nameWithType: Assembly.GetType
    fullName: System.Reflection.Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetType(System.String)
    name: GetType
    nameWithType: Assembly.GetType
    fullName: System.Reflection.Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetType(String, Boolean)
  nameWithType: Assembly.GetType(String, Boolean)
  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)
    name: GetType
    nameWithType: Assembly.GetType
    fullName: System.Reflection.Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetType(System.String,System.Boolean)
    name: GetType
    nameWithType: Assembly.GetType
    fullName: System.Reflection.Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetType(String, Boolean, Boolean)
  nameWithType: Assembly.GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Assembly.GetType(System.String, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
    name: GetType
    nameWithType: Assembly.GetType
    fullName: System.Reflection.Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetType(System.String,System.Boolean,System.Boolean)
    name: GetType
    nameWithType: Assembly.GetType
    fullName: System.Reflection.Assembly.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetExportedTypes
  commentId: M:System.Reflection.Assembly.GetExportedTypes
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetExportedTypes()
  nameWithType: Assembly.GetExportedTypes()
  fullName: System.Reflection.Assembly.GetExportedTypes()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetExportedTypes
    name: GetExportedTypes
    nameWithType: Assembly.GetExportedTypes
    fullName: System.Reflection.Assembly.GetExportedTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetExportedTypes
    name: GetExportedTypes
    nameWithType: Assembly.GetExportedTypes
    fullName: System.Reflection.Assembly.GetExportedTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetTypes
  commentId: M:System.Reflection.Assembly.GetTypes
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetTypes()
  nameWithType: Assembly.GetTypes()
  fullName: System.Reflection.Assembly.GetTypes()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetTypes
    name: GetTypes
    nameWithType: Assembly.GetTypes
    fullName: System.Reflection.Assembly.GetTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetTypes
    name: GetTypes
    nameWithType: Assembly.GetTypes
    fullName: System.Reflection.Assembly.GetTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetManifestResourceStream(Type, String)
  nameWithType: Assembly.GetManifestResourceStream(Type, String)
  fullName: System.Reflection.Assembly.GetManifestResourceStream(System.Type, System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
    name: GetManifestResourceStream
    nameWithType: Assembly.GetManifestResourceStream
    fullName: System.Reflection.Assembly.GetManifestResourceStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetManifestResourceStream(System.Type,System.String)
    name: GetManifestResourceStream
    nameWithType: Assembly.GetManifestResourceStream
    fullName: System.Reflection.Assembly.GetManifestResourceStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  commentId: M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetSatelliteAssembly(CultureInfo)
  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo)
  fullName: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
    name: GetSatelliteAssembly
    nameWithType: Assembly.GetSatelliteAssembly
    fullName: System.Reflection.Assembly.GetSatelliteAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo)
    name: GetSatelliteAssembly
    nameWithType: Assembly.GetSatelliteAssembly
    fullName: System.Reflection.Assembly.GetSatelliteAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  commentId: M:System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetSatelliteAssembly(CultureInfo, Version)
  nameWithType: Assembly.GetSatelliteAssembly(CultureInfo, Version)
  fullName: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo, System.Version)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
    name: GetSatelliteAssembly
    nameWithType: Assembly.GetSatelliteAssembly
    fullName: System.Reflection.Assembly.GetSatelliteAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)
    name: GetSatelliteAssembly
    nameWithType: Assembly.GetSatelliteAssembly
    fullName: System.Reflection.Assembly.GetSatelliteAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Assembly.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Assembly.GetObjectData
    fullName: System.Reflection.Assembly.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Assembly.GetObjectData
    fullName: System.Reflection.Assembly.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetCustomAttributes(Boolean)
  nameWithType: Assembly.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    nameWithType: Assembly.GetCustomAttributes
    fullName: System.Reflection.Assembly.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    nameWithType: Assembly.GetCustomAttributes
    fullName: System.Reflection.Assembly.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: Assembly.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.Assembly.GetCustomAttributes(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Assembly.GetCustomAttributes
    fullName: System.Reflection.Assembly.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Assembly.GetCustomAttributes
    fullName: System.Reflection.Assembly.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: IsDefined(Type, Boolean)
  nameWithType: Assembly.IsDefined(Type, Boolean)
  fullName: System.Reflection.Assembly.IsDefined(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Assembly.IsDefined
    fullName: System.Reflection.Assembly.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Assembly.IsDefined
    fullName: System.Reflection.Assembly.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetCustomAttributesData
  commentId: M:System.Reflection.Assembly.GetCustomAttributesData
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetCustomAttributesData()
  nameWithType: Assembly.GetCustomAttributesData()
  fullName: System.Reflection.Assembly.GetCustomAttributesData()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetCustomAttributesData
    name: GetCustomAttributesData
    nameWithType: Assembly.GetCustomAttributesData
    fullName: System.Reflection.Assembly.GetCustomAttributesData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetCustomAttributesData
    name: GetCustomAttributesData
    nameWithType: Assembly.GetCustomAttributesData
    fullName: System.Reflection.Assembly.GetCustomAttributesData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  commentId: M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadModule(String, Byte[])
  nameWithType: Assembly.LoadModule(String, Byte[])
  fullName: System.Reflection.Assembly.LoadModule(System.String, System.Byte[])
  nameWithType.vb: Assembly.LoadModule(String, Byte())
  fullname.vb: System.Reflection.Assembly.LoadModule(System.String, System.Byte())
  name.vb: LoadModule(String, Byte())
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
    name: LoadModule
    nameWithType: Assembly.LoadModule
    fullName: System.Reflection.Assembly.LoadModule
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[])
    name: LoadModule
    nameWithType: Assembly.LoadModule
    fullName: System.Reflection.Assembly.LoadModule
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  commentId: M:System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
  parent: System.Reflection.Assembly
  isExternal: true
  name: LoadModule(String, Byte[], Byte[])
  nameWithType: Assembly.LoadModule(String, Byte[], Byte[])
  fullName: System.Reflection.Assembly.LoadModule(System.String, System.Byte[], System.Byte[])
  nameWithType.vb: Assembly.LoadModule(String, Byte(), Byte())
  fullname.vb: System.Reflection.Assembly.LoadModule(System.String, System.Byte(), System.Byte())
  name.vb: LoadModule(String, Byte(), Byte())
  spec.csharp:
  - uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
    name: LoadModule
    nameWithType: Assembly.LoadModule
    fullName: System.Reflection.Assembly.LoadModule
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.LoadModule(System.String,System.Byte[],System.Byte[])
    name: LoadModule
    nameWithType: Assembly.LoadModule
    fullName: System.Reflection.Assembly.LoadModule
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.CreateInstance(System.String)
  commentId: M:System.Reflection.Assembly.CreateInstance(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: CreateInstance(String)
  nameWithType: Assembly.CreateInstance(String)
  fullName: System.Reflection.Assembly.CreateInstance(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.CreateInstance(System.String)
    name: CreateInstance
    nameWithType: Assembly.CreateInstance
    fullName: System.Reflection.Assembly.CreateInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.CreateInstance(System.String)
    name: CreateInstance
    nameWithType: Assembly.CreateInstance
    fullName: System.Reflection.Assembly.CreateInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: CreateInstance(String, Boolean)
  nameWithType: Assembly.CreateInstance(String, Boolean)
  fullName: System.Reflection.Assembly.CreateInstance(System.String, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
    name: CreateInstance
    nameWithType: Assembly.CreateInstance
    fullName: System.Reflection.Assembly.CreateInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean)
    name: CreateInstance
    nameWithType: Assembly.CreateInstance
    fullName: System.Reflection.Assembly.CreateInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  commentId: M:System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
  parent: System.Reflection.Assembly
  isExternal: true
  name: CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  nameWithType: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object[], CultureInfo, Object[])
  fullName: System.Reflection.Assembly.CreateInstance(System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object[], System.Globalization.CultureInfo, System.Object[])
  nameWithType.vb: Assembly.CreateInstance(String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object())
  fullname.vb: System.Reflection.Assembly.CreateInstance(System.String, System.Boolean, System.Reflection.BindingFlags, System.Reflection.Binder, System.Object(), System.Globalization.CultureInfo, System.Object())
  name.vb: CreateInstance(String, Boolean, BindingFlags, Binder, Object(), CultureInfo, Object())
  spec.csharp:
  - uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
    name: CreateInstance
    nameWithType: Assembly.CreateInstance
    fullName: System.Reflection.Assembly.CreateInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    nameWithType: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.CreateInstance(System.String,System.Boolean,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo,System.Object[])
    name: CreateInstance
    nameWithType: Assembly.CreateInstance
    fullName: System.Reflection.Assembly.CreateInstance
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    nameWithType: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Globalization.CultureInfo
    name: CultureInfo
    nameWithType: CultureInfo
    fullName: System.Globalization.CultureInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetLoadedModules
  commentId: M:System.Reflection.Assembly.GetLoadedModules
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetLoadedModules()
  nameWithType: Assembly.GetLoadedModules()
  fullName: System.Reflection.Assembly.GetLoadedModules()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetLoadedModules
    name: GetLoadedModules
    nameWithType: Assembly.GetLoadedModules
    fullName: System.Reflection.Assembly.GetLoadedModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetLoadedModules
    name: GetLoadedModules
    nameWithType: Assembly.GetLoadedModules
    fullName: System.Reflection.Assembly.GetLoadedModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetLoadedModules(Boolean)
  nameWithType: Assembly.GetLoadedModules(Boolean)
  fullName: System.Reflection.Assembly.GetLoadedModules(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)
    name: GetLoadedModules
    nameWithType: Assembly.GetLoadedModules
    fullName: System.Reflection.Assembly.GetLoadedModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetLoadedModules(System.Boolean)
    name: GetLoadedModules
    nameWithType: Assembly.GetLoadedModules
    fullName: System.Reflection.Assembly.GetLoadedModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetModules
  commentId: M:System.Reflection.Assembly.GetModules
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetModules()
  nameWithType: Assembly.GetModules()
  fullName: System.Reflection.Assembly.GetModules()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetModules
    name: GetModules
    nameWithType: Assembly.GetModules
    fullName: System.Reflection.Assembly.GetModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetModules
    name: GetModules
    nameWithType: Assembly.GetModules
    fullName: System.Reflection.Assembly.GetModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetModules(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetModules(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetModules(Boolean)
  nameWithType: Assembly.GetModules(Boolean)
  fullName: System.Reflection.Assembly.GetModules(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetModules(System.Boolean)
    name: GetModules
    nameWithType: Assembly.GetModules
    fullName: System.Reflection.Assembly.GetModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetModules(System.Boolean)
    name: GetModules
    nameWithType: Assembly.GetModules
    fullName: System.Reflection.Assembly.GetModules
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetModule(System.String)
  commentId: M:System.Reflection.Assembly.GetModule(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetModule(String)
  nameWithType: Assembly.GetModule(String)
  fullName: System.Reflection.Assembly.GetModule(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetModule(System.String)
    name: GetModule
    nameWithType: Assembly.GetModule
    fullName: System.Reflection.Assembly.GetModule
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetModule(System.String)
    name: GetModule
    nameWithType: Assembly.GetModule
    fullName: System.Reflection.Assembly.GetModule
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetFile(System.String)
  commentId: M:System.Reflection.Assembly.GetFile(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetFile(String)
  nameWithType: Assembly.GetFile(String)
  fullName: System.Reflection.Assembly.GetFile(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetFile(System.String)
    name: GetFile
    nameWithType: Assembly.GetFile
    fullName: System.Reflection.Assembly.GetFile
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetFile(System.String)
    name: GetFile
    nameWithType: Assembly.GetFile
    fullName: System.Reflection.Assembly.GetFile
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetFiles
  commentId: M:System.Reflection.Assembly.GetFiles
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetFiles()
  nameWithType: Assembly.GetFiles()
  fullName: System.Reflection.Assembly.GetFiles()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetFiles
    name: GetFiles
    nameWithType: Assembly.GetFiles
    fullName: System.Reflection.Assembly.GetFiles
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetFiles
    name: GetFiles
    nameWithType: Assembly.GetFiles
    fullName: System.Reflection.Assembly.GetFiles
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetFiles(System.Boolean)
  commentId: M:System.Reflection.Assembly.GetFiles(System.Boolean)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetFiles(Boolean)
  nameWithType: Assembly.GetFiles(Boolean)
  fullName: System.Reflection.Assembly.GetFiles(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetFiles(System.Boolean)
    name: GetFiles
    nameWithType: Assembly.GetFiles
    fullName: System.Reflection.Assembly.GetFiles
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetFiles(System.Boolean)
    name: GetFiles
    nameWithType: Assembly.GetFiles
    fullName: System.Reflection.Assembly.GetFiles
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetReferencedAssemblies
  commentId: M:System.Reflection.Assembly.GetReferencedAssemblies
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetReferencedAssemblies()
  nameWithType: Assembly.GetReferencedAssemblies()
  fullName: System.Reflection.Assembly.GetReferencedAssemblies()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetReferencedAssemblies
    name: GetReferencedAssemblies
    nameWithType: Assembly.GetReferencedAssemblies
    fullName: System.Reflection.Assembly.GetReferencedAssemblies
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetReferencedAssemblies
    name: GetReferencedAssemblies
    nameWithType: Assembly.GetReferencedAssemblies
    fullName: System.Reflection.Assembly.GetReferencedAssemblies
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.ToString
  commentId: M:System.Reflection.Assembly.ToString
  parent: System.Reflection.Assembly
  isExternal: true
  name: ToString()
  nameWithType: Assembly.ToString()
  fullName: System.Reflection.Assembly.ToString()
  spec.csharp:
  - uid: System.Reflection.Assembly.ToString
    name: ToString
    nameWithType: Assembly.ToString
    fullName: System.Reflection.Assembly.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.ToString
    name: ToString
    nameWithType: Assembly.ToString
    fullName: System.Reflection.Assembly.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.CodeBase
  commentId: P:System.Reflection.Assembly.CodeBase
  parent: System.Reflection.Assembly
  isExternal: true
  name: CodeBase
  nameWithType: Assembly.CodeBase
  fullName: System.Reflection.Assembly.CodeBase
- uid: System.Reflection.Assembly.EscapedCodeBase
  commentId: P:System.Reflection.Assembly.EscapedCodeBase
  parent: System.Reflection.Assembly
  isExternal: true
  name: EscapedCodeBase
  nameWithType: Assembly.EscapedCodeBase
  fullName: System.Reflection.Assembly.EscapedCodeBase
- uid: System.Reflection.Assembly.EntryPoint
  commentId: P:System.Reflection.Assembly.EntryPoint
  parent: System.Reflection.Assembly
  isExternal: true
  name: EntryPoint
  nameWithType: Assembly.EntryPoint
  fullName: System.Reflection.Assembly.EntryPoint
- uid: System.Reflection.Assembly.ExportedTypes
  commentId: P:System.Reflection.Assembly.ExportedTypes
  parent: System.Reflection.Assembly
  isExternal: true
  name: ExportedTypes
  nameWithType: Assembly.ExportedTypes
  fullName: System.Reflection.Assembly.ExportedTypes
- uid: System.Reflection.Assembly.Evidence
  commentId: P:System.Reflection.Assembly.Evidence
  parent: System.Reflection.Assembly
  isExternal: true
  name: Evidence
  nameWithType: Assembly.Evidence
  fullName: System.Reflection.Assembly.Evidence
- uid: System.Reflection.Assembly.PermissionSet
  commentId: P:System.Reflection.Assembly.PermissionSet
  parent: System.Reflection.Assembly
  isExternal: true
  name: PermissionSet
  nameWithType: Assembly.PermissionSet
  fullName: System.Reflection.Assembly.PermissionSet
- uid: System.Reflection.Assembly.IsFullyTrusted
  commentId: P:System.Reflection.Assembly.IsFullyTrusted
  parent: System.Reflection.Assembly
  isExternal: true
  name: IsFullyTrusted
  nameWithType: Assembly.IsFullyTrusted
  fullName: System.Reflection.Assembly.IsFullyTrusted
- uid: System.Reflection.Assembly.SecurityRuleSet
  commentId: P:System.Reflection.Assembly.SecurityRuleSet
  parent: System.Reflection.Assembly
  isExternal: true
  name: SecurityRuleSet
  nameWithType: Assembly.SecurityRuleSet
  fullName: System.Reflection.Assembly.SecurityRuleSet
- uid: System.Reflection.Assembly.CustomAttributes
  commentId: P:System.Reflection.Assembly.CustomAttributes
  parent: System.Reflection.Assembly
  isExternal: true
  name: CustomAttributes
  nameWithType: Assembly.CustomAttributes
  fullName: System.Reflection.Assembly.CustomAttributes
- uid: System.Reflection.Assembly.ReflectionOnly
  commentId: P:System.Reflection.Assembly.ReflectionOnly
  parent: System.Reflection.Assembly
  isExternal: true
  name: ReflectionOnly
  nameWithType: Assembly.ReflectionOnly
  fullName: System.Reflection.Assembly.ReflectionOnly
- uid: System.Reflection.Assembly.Location
  commentId: P:System.Reflection.Assembly.Location
  parent: System.Reflection.Assembly
  isExternal: true
  name: Location
  nameWithType: Assembly.Location
  fullName: System.Reflection.Assembly.Location
- uid: System.Reflection.Assembly.ImageRuntimeVersion
  commentId: P:System.Reflection.Assembly.ImageRuntimeVersion
  parent: System.Reflection.Assembly
  isExternal: true
  name: ImageRuntimeVersion
  nameWithType: Assembly.ImageRuntimeVersion
  fullName: System.Reflection.Assembly.ImageRuntimeVersion
- uid: System.Reflection.Assembly.GlobalAssemblyCache
  commentId: P:System.Reflection.Assembly.GlobalAssemblyCache
  parent: System.Reflection.Assembly
  isExternal: true
  name: GlobalAssemblyCache
  nameWithType: Assembly.GlobalAssemblyCache
  fullName: System.Reflection.Assembly.GlobalAssemblyCache
- uid: System.Reflection.Assembly.HostContext
  commentId: P:System.Reflection.Assembly.HostContext
  parent: System.Reflection.Assembly
  isExternal: true
  name: HostContext
  nameWithType: Assembly.HostContext
  fullName: System.Reflection.Assembly.HostContext
- uid: System.Reflection.Assembly.ModuleResolve
  commentId: E:System.Reflection.Assembly.ModuleResolve
  parent: System.Reflection.Assembly
  isExternal: true
  name: ModuleResolve
  nameWithType: Assembly.ModuleResolve
  fullName: System.Reflection.Assembly.ModuleResolve
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  name: GetCustomAttribute(Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  name: GetCustomAttribute<T>()
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>()
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>()
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)()
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)()
  name.vb: GetCustomAttribute(Of T)()
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
    name: GetCustomAttribute<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
    name: GetCustomAttribute(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttribute(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  name: GetCustomAttributes()
  nameWithType: CustomAttributeExtensions.GetCustomAttributes()
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes()
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  name: GetCustomAttributes(Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  name: GetCustomAttributes<T>()
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>()
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>()
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)()
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)()
  name.vb: GetCustomAttributes(Of T)()
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
    name: GetCustomAttributes<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
    name: GetCustomAttributes(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttributes(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  name: IsDefined(Type)
  nameWithType: CustomAttributeExtensions.IsDefined(Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.AssemblyExtensions.GetExportedTypes
  commentId: M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  parent: System.Reflection.AssemblyExtensions
  definition: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  name: GetExportedTypes()
  nameWithType: AssemblyExtensions.GetExportedTypes()
  fullName: System.Reflection.AssemblyExtensions.GetExportedTypes()
  spec.csharp:
  - uid: System.Reflection.AssemblyExtensions.GetExportedTypes
    name: GetExportedTypes
    nameWithType: AssemblyExtensions.GetExportedTypes
    fullName: System.Reflection.AssemblyExtensions.GetExportedTypes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.AssemblyExtensions.GetExportedTypes
    name: GetExportedTypes
    nameWithType: AssemblyExtensions.GetExportedTypes
    fullName: System.Reflection.AssemblyExtensions.GetExportedTypes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.AssemblyExtensions.GetModules
  commentId: M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  parent: System.Reflection.AssemblyExtensions
  definition: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  name: GetModules()
  nameWithType: AssemblyExtensions.GetModules()
  fullName: System.Reflection.AssemblyExtensions.GetModules()
  spec.csharp:
  - uid: System.Reflection.AssemblyExtensions.GetModules
    name: GetModules
    nameWithType: AssemblyExtensions.GetModules
    fullName: System.Reflection.AssemblyExtensions.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.AssemblyExtensions.GetModules
    name: GetModules
    nameWithType: AssemblyExtensions.GetModules
    fullName: System.Reflection.AssemblyExtensions.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.AssemblyExtensions.GetTypes
  commentId: M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  parent: System.Reflection.AssemblyExtensions
  definition: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  name: GetTypes()
  nameWithType: AssemblyExtensions.GetTypes()
  fullName: System.Reflection.AssemblyExtensions.GetTypes()
  spec.csharp:
  - uid: System.Reflection.AssemblyExtensions.GetTypes
    name: GetTypes
    nameWithType: AssemblyExtensions.GetTypes
    fullName: System.Reflection.AssemblyExtensions.GetTypes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.AssemblyExtensions.GetTypes
    name: GetTypes
    nameWithType: AssemblyExtensions.GetTypes
    fullName: System.Reflection.AssemblyExtensions.GetTypes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Byte*@,System.Int32@)
  commentId: M:System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
  parent: System.Reflection.Metadata.AssemblyExtensions
  definition: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
  name: TryGetRawMetadata(Byte*, Int32)
  nameWithType: AssemblyExtensions.TryGetRawMetadata(Byte*, Int32)
  fullName: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Byte*@,System.Int32@)
    name: TryGetRawMetadata
    nameWithType: AssemblyExtensions.TryGetRawMetadata
    fullName: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Byte*@,System.Int32@)
    name: TryGetRawMetadata
    nameWithType: AssemblyExtensions.TryGetRawMetadata
    fullName: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Security
  commentId: N:System.Security
  isExternal: false
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
  isExternal: true
  name: GetCustomAttribute(Assembly, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Assembly, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly, System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Assembly,System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions
  commentId: T:System.Reflection.CustomAttributeExtensions
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeExtensions
  nameWithType: CustomAttributeExtensions
  fullName: System.Reflection.CustomAttributeExtensions
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
  isExternal: true
  name: GetCustomAttribute<T>(Assembly)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Assembly)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.Assembly)
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(Assembly)
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.Assembly)
  name.vb: GetCustomAttribute(Of T)(Assembly)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
    name: GetCustomAttribute<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Assembly)
    name: GetCustomAttribute(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttribute(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  isExternal: true
  name: GetCustomAttributes(Assembly)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
  isExternal: true
  name: GetCustomAttributes(Assembly, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Assembly, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly, System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Assembly,System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
  isExternal: true
  name: GetCustomAttributes<T>(Assembly)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Assembly)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.Assembly)
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(Assembly)
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.Assembly)
  name.vb: GetCustomAttributes(Of T)(Assembly)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
    name: GetCustomAttributes<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Assembly)
    name: GetCustomAttributes(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttributes(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
  isExternal: true
  name: IsDefined(Assembly, Type)
  nameWithType: CustomAttributeExtensions.IsDefined(Assembly, Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly, System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Assembly,System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  commentId: M:System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  isExternal: true
  name: GetExportedTypes(Assembly)
  nameWithType: AssemblyExtensions.GetExportedTypes(Assembly)
  fullName: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
    name: GetExportedTypes
    nameWithType: AssemblyExtensions.GetExportedTypes
    fullName: System.Reflection.AssemblyExtensions.GetExportedTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.AssemblyExtensions.GetExportedTypes(System.Reflection.Assembly)
    name: GetExportedTypes
    nameWithType: AssemblyExtensions.GetExportedTypes
    fullName: System.Reflection.AssemblyExtensions.GetExportedTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.AssemblyExtensions
  commentId: T:System.Reflection.AssemblyExtensions
  parent: System.Reflection
  isExternal: false
  name: AssemblyExtensions
  nameWithType: AssemblyExtensions
  fullName: System.Reflection.AssemblyExtensions
- uid: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  commentId: M:System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  isExternal: true
  name: GetModules(Assembly)
  nameWithType: AssemblyExtensions.GetModules(Assembly)
  fullName: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
    name: GetModules
    nameWithType: AssemblyExtensions.GetModules
    fullName: System.Reflection.AssemblyExtensions.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.AssemblyExtensions.GetModules(System.Reflection.Assembly)
    name: GetModules
    nameWithType: AssemblyExtensions.GetModules
    fullName: System.Reflection.AssemblyExtensions.GetModules
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  commentId: M:System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  isExternal: true
  name: GetTypes(Assembly)
  nameWithType: AssemblyExtensions.GetTypes(Assembly)
  fullName: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
    name: GetTypes
    nameWithType: AssemblyExtensions.GetTypes
    fullName: System.Reflection.AssemblyExtensions.GetTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.AssemblyExtensions.GetTypes(System.Reflection.Assembly)
    name: GetTypes
    nameWithType: AssemblyExtensions.GetTypes
    fullName: System.Reflection.AssemblyExtensions.GetTypes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
  commentId: M:System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
  isExternal: true
  name: TryGetRawMetadata(Assembly, Byte*, Int32)
  nameWithType: AssemblyExtensions.TryGetRawMetadata(Assembly, Byte*, Int32)
  fullName: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly, System.Byte*, System.Int32)
  spec.csharp:
  - uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
    name: TryGetRawMetadata
    nameWithType: AssemblyExtensions.TryGetRawMetadata
    fullName: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata(System.Reflection.Assembly,System.Byte*@,System.Int32@)
    name: TryGetRawMetadata
    nameWithType: AssemblyExtensions.TryGetRawMetadata
    fullName: System.Reflection.Metadata.AssemblyExtensions.TryGetRawMetadata
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Metadata.AssemblyExtensions
  commentId: T:System.Reflection.Metadata.AssemblyExtensions
  parent: System.Reflection.Metadata
  isExternal: false
  name: AssemblyExtensions
  nameWithType: AssemblyExtensions
  fullName: System.Reflection.Metadata.AssemblyExtensions
- uid: System.Reflection.Metadata
  commentId: N:System.Reflection.Metadata
  isExternal: false
  name: System.Reflection.Metadata
  nameWithType: System.Reflection.Metadata
  fullName: System.Reflection.Metadata
- uid: System.Reflection.Assembly.FullName
  commentId: P:System.Reflection.Assembly.FullName
  parent: System.Reflection.Assembly
  isExternal: true
  name: FullName
  nameWithType: Assembly.FullName
  fullName: System.Reflection.Assembly.FullName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Assembly.IsDynamic
  commentId: P:System.Reflection.Assembly.IsDynamic
  parent: System.Reflection.Assembly
  isExternal: true
  name: IsDynamic
  nameWithType: Assembly.IsDynamic
  fullName: System.Reflection.Assembly.IsDynamic
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.Assembly.ManifestModule
  commentId: P:System.Reflection.Assembly.ManifestModule
  parent: System.Reflection.Assembly
  isExternal: true
  name: ManifestModule
  nameWithType: Assembly.ManifestModule
  fullName: System.Reflection.Assembly.ManifestModule
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.AssemblyName
  commentId: T:System.Reflection.AssemblyName
  parent: System.Reflection
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyName
  fullName: System.Reflection.AssemblyName
- uid: System.Reflection.Emit.AssemblyBuilderAccess
  commentId: T:System.Reflection.Emit.AssemblyBuilderAccess
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilderAccess
  nameWithType: AssemblyBuilderAccess
  fullName: System.Reflection.Emit.AssemblyBuilderAccess
- uid: System.Reflection.Emit.AssemblyBuilder
  commentId: T:System.Reflection.Emit.AssemblyBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: AssemblyBuilder
  nameWithType: AssemblyBuilder
  fullName: System.Reflection.Emit.AssemblyBuilder
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CustomAttributeBuilder>
  nameWithType: IEnumerable<CustomAttributeBuilder>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Emit.CustomAttributeBuilder>
  nameWithType.vb: IEnumerable(Of CustomAttributeBuilder)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Emit.CustomAttributeBuilder)
  name.vb: IEnumerable(Of CustomAttributeBuilder)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    nameWithType: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Emit.CustomAttributeBuilder
    name: CustomAttributeBuilder
    nameWithType: CustomAttributeBuilder
    fullName: System.Reflection.Emit.CustomAttributeBuilder
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Reflection.Emit.ModuleBuilder
  commentId: T:System.Reflection.Emit.ModuleBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
- uid: System.Reflection.Assembly.Equals(System.Object)
  commentId: M:System.Reflection.Assembly.Equals(System.Object)
  parent: System.Reflection.Assembly
  isExternal: true
  name: Equals(Object)
  nameWithType: Assembly.Equals(Object)
  fullName: System.Reflection.Assembly.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.Assembly.Equals(System.Object)
    name: Equals
    nameWithType: Assembly.Equals
    fullName: System.Reflection.Assembly.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.Equals(System.Object)
    name: Equals
    nameWithType: Assembly.Equals
    fullName: System.Reflection.Assembly.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.GetHashCode
  commentId: M:System.Reflection.Assembly.GetHashCode
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetHashCode()
  nameWithType: Assembly.GetHashCode()
  fullName: System.Reflection.Assembly.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetHashCode
    name: GetHashCode
    nameWithType: Assembly.GetHashCode
    fullName: System.Reflection.Assembly.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetHashCode
    name: GetHashCode
    nameWithType: Assembly.GetHashCode
    fullName: System.Reflection.Assembly.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetManifestResourceInfo(String)
  nameWithType: Assembly.GetManifestResourceInfo(String)
  fullName: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
    name: GetManifestResourceInfo
    nameWithType: Assembly.GetManifestResourceInfo
    fullName: System.Reflection.Assembly.GetManifestResourceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetManifestResourceInfo(System.String)
    name: GetManifestResourceInfo
    nameWithType: Assembly.GetManifestResourceInfo
    fullName: System.Reflection.Assembly.GetManifestResourceInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.ManifestResourceInfo
  commentId: T:System.Reflection.ManifestResourceInfo
  parent: System.Reflection
  isExternal: false
  name: ManifestResourceInfo
  nameWithType: ManifestResourceInfo
  fullName: System.Reflection.ManifestResourceInfo
- uid: System.Reflection.Assembly.GetManifestResourceNames
  commentId: M:System.Reflection.Assembly.GetManifestResourceNames
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetManifestResourceNames()
  nameWithType: Assembly.GetManifestResourceNames()
  fullName: System.Reflection.Assembly.GetManifestResourceNames()
  spec.csharp:
  - uid: System.Reflection.Assembly.GetManifestResourceNames
    name: GetManifestResourceNames
    nameWithType: Assembly.GetManifestResourceNames
    fullName: System.Reflection.Assembly.GetManifestResourceNames
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetManifestResourceNames
    name: GetManifestResourceNames
    nameWithType: Assembly.GetManifestResourceNames
    fullName: System.Reflection.Assembly.GetManifestResourceNames
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  commentId: M:System.Reflection.Assembly.GetManifestResourceStream(System.String)
  parent: System.Reflection.Assembly
  isExternal: true
  name: GetManifestResourceStream(String)
  nameWithType: Assembly.GetManifestResourceStream(String)
  fullName: System.Reflection.Assembly.GetManifestResourceStream(System.String)
  spec.csharp:
  - uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
    name: GetManifestResourceStream
    nameWithType: Assembly.GetManifestResourceStream
    fullName: System.Reflection.Assembly.GetManifestResourceStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Assembly.GetManifestResourceStream(System.String)
    name: GetManifestResourceStream
    nameWithType: Assembly.GetManifestResourceStream
    fullName: System.Reflection.Assembly.GetManifestResourceStream
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.CustomAttributeBuilder
  commentId: T:System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.Reflection.Assembly.DefinedTypes
  commentId: P:System.Reflection.Assembly.DefinedTypes
  parent: System.Reflection.Assembly
  isExternal: true
  name: DefinedTypes
  nameWithType: Assembly.DefinedTypes
  fullName: System.Reflection.Assembly.DefinedTypes
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeInfo>
  nameWithType: IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  nameWithType.vb: IEnumerable(Of TypeInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly.Modules
  commentId: P:System.Reflection.Assembly.Modules
  parent: System.Reflection.Assembly
  isExternal: true
  name: Modules
  nameWithType: Assembly.Modules
  fullName: System.Reflection.Assembly.Modules
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Module}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.Module}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Module>
  nameWithType: IEnumerable<Module>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Module>
  nameWithType.vb: IEnumerable(Of Module)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.Module)
  name.vb: IEnumerable(Of Module)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ExecutionEngineException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
