items:
- uid: System.Security.Cryptography.HMACSHA1
  commentId: T:System.Security.Cryptography.HMACSHA1
  id: HMACSHA1
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.HMACSHA1.#ctor
  - System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  - System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)
  - System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMACSHA1.HashFinal
  - System.Security.Cryptography.HMACSHA1.HashSize
  - System.Security.Cryptography.HMACSHA1.Initialize
  - System.Security.Cryptography.HMACSHA1.Key
  langs:
  - csharp
  - vb
  name: HMACSHA1
  fullName: System.Security.Cryptography.HMACSHA1
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HMACSHA1
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Computes a Hash-based Message Authentication Code (HMAC) using the <xref href=\"System.Security.Cryptography.SHA1\" data-throw-if-not-resolved=\"false\"></xref> hash function. </p>\n"
  syntax:
    content: 'public class HMACSHA1 : HMAC, ICryptoTransform, IDisposable'
    content.vb: >-
      Public Class HMACSHA1
          Inherits HMAC
          Implements ICryptoTransform, IDisposable
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  - System.Security.Cryptography.HMAC
  implements:
  - System.Security.Cryptography.ICryptoTransform
  - System.IDisposable
  inheritedMembers:
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: HMACSHA1
- uid: System.Security.Cryptography.HMACSHA1.#ctor
  commentId: M:System.Security.Cryptography.HMACSHA1.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: HMACSHA1()
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\" data-throw-if-not-resolved=\"false\"></xref> class with a randomly generated key.</p>\n"
  syntax:
    content: public HMACSHA1()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: HMACSHA1.HMACSHA1()
- uid: System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  commentId: M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: HMACSHA1(Byte[])
  fullName: System.Security.Cryptography.HMACSHA1.HMACSHA1(System.Byte[])
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 24
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.HMACSHA1\" data-throw-if-not-resolved=\"false\"></xref> class with the specified key data.</p>\n"
  syntax:
    content: public HMACSHA1(byte[] key)
    content.vb: Public Sub New(key As Byte())
    parameters:
    - id: key
      type: System.Byte[]
      description: "\n<p>The secret key for <xref href=\"System.Security.Cryptography.HMACSHA1\" data-throw-if-not-resolved=\"false\"></xref> encryption. The key can be any length, but if it is more than 64 bytes long it is hashed (using SHA-1) to derive a 64-byte key. Therefore, the recommended size of the secret key is 64 bytes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>key</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Cryptography.HMACSHA1.HMACSHA1(System.Byte())
  name.vb: HMACSHA1(Byte())
  nameWithType: HMACSHA1.HMACSHA1(Byte[])
  nameWithType.vb: HMACSHA1.HMACSHA1(Byte())
- uid: System.Security.Cryptography.HMACSHA1.HashSize
  commentId: P:System.Security.Cryptography.HMACSHA1.HashSize
  id: HashSize
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: HashSize
  fullName: System.Security.Cryptography.HMACSHA1.HashSize
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashSize
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 31
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override int HashSize { get; }
    content.vb: Public Overrides ReadOnly Property HashSize As Integer
    parameters: []
    return:
      type: System.Int32
  overridden: System.Security.Cryptography.HashAlgorithm.HashSize
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
  nameWithType: HMACSHA1.HashSize
- uid: System.Security.Cryptography.HMACSHA1.Key
  commentId: P:System.Security.Cryptography.HMACSHA1.Key
  id: Key
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: Key
  fullName: System.Security.Cryptography.HMACSHA1.Key
  type: Property
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Key
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 39
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override byte[] Key { get; set; }
    content.vb: Public Overrides Property Key As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overridden: System.Security.Cryptography.HMAC.Key
  modifiers.csharp:
  - public
  - override
  - get
  - set
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: HMACSHA1.Key
- uid: System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 69
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  overridden: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  nameWithType: HMACSHA1.Dispose(Boolean)
- uid: System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: HashCore(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashCore
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 52
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void HashCore(byte[] rgb, int ib, int cb)
    content.vb: Protected Overrides Sub HashCore(rgb As Byte(), ib As Integer, cb As Integer)
    parameters:
    - id: rgb
      type: System.Byte[]
    - id: ib
      type: System.Int32
    - id: cb
      type: System.Int32
  overridden: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: System.Security.Cryptography.HMACSHA1.HashCore(System.Byte(), System.Int32, System.Int32)
  name.vb: HashCore(Byte(), Int32, Int32)
  nameWithType: HMACSHA1.HashCore(Byte[], Int32, Int32)
  nameWithType.vb: HMACSHA1.HashCore(Byte(), Int32, Int32)
- uid: System.Security.Cryptography.HMACSHA1.HashFinal
  commentId: M:System.Security.Cryptography.HMACSHA1.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: HashFinal()
  fullName: System.Security.Cryptography.HMACSHA1.HashFinal()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HashFinal
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 57
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashFinal()
    content.vb: Protected Overrides Function HashFinal As Byte()
    return:
      type: System.Byte[]
  overridden: System.Security.Cryptography.HMAC.HashFinal
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  nameWithType: HMACSHA1.HashFinal()
- uid: System.Security.Cryptography.HMACSHA1.Initialize
  commentId: M:System.Security.Cryptography.HMACSHA1.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMACSHA1
  langs:
  - csharp
  - vb
  name: Initialize()
  fullName: System.Security.Cryptography.HMACSHA1.Initialize()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Initialize
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/HMACSHA1.cs
    startLine: 62
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  syntax:
    content: public override void Initialize()
    content.vb: Public Overrides Sub Initialize
  overridden: System.Security.Cryptography.HMAC.Initialize
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: HMACSHA1.Initialize()
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Security.Cryptography.HashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithm
  fullName: System.Security.Cryptography.HashAlgorithm
  nameWithType: HashAlgorithm
  commentId: T:System.Security.Cryptography.HashAlgorithm
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: KeyedHashAlgorithm
  fullName: System.Security.Cryptography.KeyedHashAlgorithm
  nameWithType: KeyedHashAlgorithm
  commentId: T:System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  fullName: System.Security.Cryptography.HMAC
  nameWithType: HMAC
  commentId: T:System.Security.Cryptography.HMAC
- uid: System.Security.Cryptography.ICryptoTransform
  parent: System.Security.Cryptography
  isExternal: false
  name: ICryptoTransform
  fullName: System.Security.Cryptography.ICryptoTransform
  nameWithType: ICryptoTransform
  commentId: T:System.Security.Cryptography.ICryptoTransform
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: Create()
  fullName: System.Security.Cryptography.HMAC.Create()
  spec.csharp:
  - uid: System.Security.Cryptography.HMAC.Create
    name: Create
    fullName: System.Security.Cryptography.HMAC.Create
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HMAC.Create
    name: Create
    fullName: System.Security.Cryptography.HMAC.Create
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: HMAC.Create()
  commentId: M:System.Security.Cryptography.HMAC.Create
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(System.String)
  spec.csharp:
  - uid: System.Security.Cryptography.HMAC.Create(System.String)
    name: Create
    fullName: System.Security.Cryptography.HMAC.Create
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HMAC.Create(System.String)
    name: Create
    fullName: System.Security.Cryptography.HMAC.Create
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HMAC.Create(String)
  commentId: M:System.Security.Cryptography.HMAC.Create(System.String)
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  commentId: P:System.Security.Cryptography.HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: HashName
  fullName: System.Security.Cryptography.HMAC.HashName
  nameWithType: HMAC.HashName
  commentId: P:System.Security.Cryptography.HMAC.HashName
- uid: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  parent: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: true
  name: KeyValue
  fullName: System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  nameWithType: KeyedHashAlgorithm.KeyValue
  commentId: F:System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
- uid: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: HashSizeValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashSizeValue
  nameWithType: HashAlgorithm.HashSizeValue
  commentId: F:System.Security.Cryptography.HashAlgorithm.HashSizeValue
- uid: System.Security.Cryptography.HashAlgorithm.HashValue
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: HashValue
  fullName: System.Security.Cryptography.HashAlgorithm.HashValue
  nameWithType: HashAlgorithm.HashValue
  commentId: F:System.Security.Cryptography.HashAlgorithm.HashValue
- uid: System.Security.Cryptography.HashAlgorithm.State
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: State
  fullName: System.Security.Cryptography.HashAlgorithm.State
  nameWithType: HashAlgorithm.State
  commentId: F:System.Security.Cryptography.HashAlgorithm.State
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: ComputeHash(Stream)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
    name: ComputeHash
    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
    name: ComputeHash
    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash
  - name: (
    fullName: (
  - uid: System.IO.Stream
    name: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.ComputeHash(Stream)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: ComputeHash(Byte[])
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte())
  name.vb: ComputeHash(Byte())
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
    name: ComputeHash
    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
    name: ComputeHash
    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.ComputeHash(Byte[])
  nameWithType.vb: HashAlgorithm.ComputeHash(Byte())
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
- uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: ComputeHash(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte(), System.Int32, System.Int32)
  name.vb: ComputeHash(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
    name: ComputeHash
    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
    name: ComputeHash
    fullName: System.Security.Cryptography.HashAlgorithm.ComputeHash
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.ComputeHash(Byte[], Int32, Int32)
  nameWithType.vb: HashAlgorithm.ComputeHash(Byte(), Int32, Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[], System.Int32, System.Int32, System.Byte[], System.Int32)
  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: TransformBlock
    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
    name: TransformBlock
    fullName: System.Security.Cryptography.HashAlgorithm.TransformBlock
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.TransformBlock(Byte[], Int32, Int32, Byte[], Int32)
  nameWithType.vb: HashAlgorithm.TransformBlock(Byte(), Int32, Int32, Byte(), Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
- uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: TransformFinalBlock(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte(), System.Int32, System.Int32)
  name.vb: TransformFinalBlock(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
    name: TransformFinalBlock
    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
    name: TransformFinalBlock
    fullName: System.Security.Cryptography.HashAlgorithm.TransformFinalBlock
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.TransformFinalBlock(Byte[], Int32, Int32)
  nameWithType.vb: HashAlgorithm.TransformFinalBlock(Byte(), Int32, Int32)
  commentId: M:System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
- uid: System.Security.Cryptography.HashAlgorithm.Dispose
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: Dispose()
  fullName: System.Security.Cryptography.HashAlgorithm.Dispose()
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.HashAlgorithm.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.Dispose
    name: Dispose
    fullName: System.Security.Cryptography.HashAlgorithm.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.Dispose()
  commentId: M:System.Security.Cryptography.HashAlgorithm.Dispose
- uid: System.Security.Cryptography.HashAlgorithm.Clear
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: Clear()
  fullName: System.Security.Cryptography.HashAlgorithm.Clear()
  spec.csharp:
  - uid: System.Security.Cryptography.HashAlgorithm.Clear
    name: Clear
    fullName: System.Security.Cryptography.HashAlgorithm.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HashAlgorithm.Clear
    name: Clear
    fullName: System.Security.Cryptography.HashAlgorithm.Clear
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: HashAlgorithm.Clear()
  commentId: M:System.Security.Cryptography.HashAlgorithm.Clear
- uid: System.Security.Cryptography.HashAlgorithm.Hash
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: Hash
  fullName: System.Security.Cryptography.HashAlgorithm.Hash
  nameWithType: HashAlgorithm.Hash
  commentId: P:System.Security.Cryptography.HashAlgorithm.Hash
- uid: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: InputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.InputBlockSize
  nameWithType: HashAlgorithm.InputBlockSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.InputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: OutputBlockSize
  fullName: System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  nameWithType: HashAlgorithm.OutputBlockSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.OutputBlockSize
- uid: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  nameWithType: HashAlgorithm.CanTransformMultipleBlocks
  commentId: P:System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: true
  name: CanReuseTransform
  fullName: System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  nameWithType: HashAlgorithm.CanReuseTransform
  commentId: P:System.Security.Cryptography.HashAlgorithm.CanReuseTransform
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Security.Cryptography.HashAlgorithm.HashSize
  parent: System.Security.Cryptography.HashAlgorithm
  isExternal: false
  name: HashSize
  fullName: System.Security.Cryptography.HashAlgorithm.HashSize
  nameWithType: HashAlgorithm.HashSize
  commentId: P:System.Security.Cryptography.HashAlgorithm.HashSize
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Security.Cryptography.HMAC.Key
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: Key
  fullName: System.Security.Cryptography.HMAC.Key
  nameWithType: HMAC.Key
  commentId: P:System.Security.Cryptography.HMAC.Key
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.HMAC.Dispose
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
    name: Dispose
    fullName: System.Security.Cryptography.HMAC.Dispose
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HMAC.Dispose(Boolean)
  commentId: M:System.Security.Cryptography.HMAC.Dispose(System.Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: HashCore(Byte[], Int32, Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(System.Byte[], System.Int32, System.Int32)
  fullname.vb: System.Security.Cryptography.HMAC.HashCore(System.Byte(), System.Int32, System.Int32)
  name.vb: HashCore(Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
    name: HashCore
    fullName: System.Security.Cryptography.HMAC.HashCore
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
    name: HashCore
    fullName: System.Security.Cryptography.HMAC.HashCore
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: HMAC.HashCore(Byte[], Int32, Int32)
  nameWithType.vb: HMAC.HashCore(Byte(), Int32, Int32)
  commentId: M:System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
- uid: System.Security.Cryptography.HMAC.HashFinal
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
  spec.csharp:
  - uid: System.Security.Cryptography.HMAC.HashFinal
    name: HashFinal
    fullName: System.Security.Cryptography.HMAC.HashFinal
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HMAC.HashFinal
    name: HashFinal
    fullName: System.Security.Cryptography.HMAC.HashFinal
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: HMAC.HashFinal()
  commentId: M:System.Security.Cryptography.HMAC.HashFinal
- uid: System.Security.Cryptography.HMAC.Initialize
  parent: System.Security.Cryptography.HMAC
  isExternal: true
  name: Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
  spec.csharp:
  - uid: System.Security.Cryptography.HMAC.Initialize
    name: Initialize
    fullName: System.Security.Cryptography.HMAC.Initialize
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Cryptography.HMAC.Initialize
    name: Initialize
    fullName: System.Security.Cryptography.HMAC.Initialize
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: HMAC.Initialize()
  commentId: M:System.Security.Cryptography.HMAC.Initialize
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
