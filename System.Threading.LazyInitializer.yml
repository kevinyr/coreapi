items:
- uid: System.Threading.LazyInitializer
  commentId: T:System.Threading.LazyInitializer
  id: LazyInitializer
  parent: System.Threading
  children:
  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@)
  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)
  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})
  - System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})
  langs:
  - csharp
  - vb
  name: LazyInitializer
  fullName: System.Threading.LazyInitializer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LazyInitializer
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 56
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides lazy initialization routines.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public static class LazyInitializer
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Module LazyInitializer
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  nameWithType: LazyInitializer
- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@)
  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@)
  id: EnsureInitialized``1(``0@)
  parent: System.Threading.LazyInitializer
  langs:
  - csharp
  - vb
  name: EnsureInitialized<T>(ref T)
  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsureInitialized
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 85
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a target reference type with the type's default constructor if it hasn't already been initialized.</p>\n"
  syntax:
    content: 'public static T EnsureInitialized<T>(ref T target)where T : class'
    content.vb: Public Shared Function EnsureInitialized(Of T As Class)(ByRef target As T) As T
    parameters:
    - id: target
      type: '{T}'
      description: "\n<p>A reference of type <em>T</em> to initialize if it has not already been initialized.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the reference to be initialized.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The initialized reference of type <em>T</em>.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\n<p></p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>Type <em>T</em> does not have a default constructor.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T)
  name.vb: EnsureInitialized(Of T)(ByRef T)
  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T)
  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T)
- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)
  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@)
  id: EnsureInitialized``1(``0@,System.Boolean@,System.Object@)
  parent: System.Threading.LazyInitializer
  langs:
  - csharp
  - vb
  name: EnsureInitialized<T>(ref T, ref Boolean, ref Object)
  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T, ref System.Boolean, ref System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsureInitialized
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 168
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a target reference or value type with its default constructor if it hasn't already been initialized.</p>\n"
  syntax:
    content: public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock)
    content.vb: Public Shared Function EnsureInitialized(Of T)(ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object) As T
    parameters:
    - id: target
      type: '{T}'
      description: "\n<p>A reference or value of type <em>T</em> to initialize if it hasn't already been initialized.</p>\n"
    - id: initialized
      type: System.Boolean
      description: "\n<p>A reference to a Boolean value that determines whether the target has already been initialized.</p>\n"
    - id: syncLock
      type: System.Object
      description: "\n<p>A reference to an object used as the mutually exclusive lock for initializing <em>target</em>. If <em>syncLock</em> is <strong>null</strong>, a new object will be instantiated.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the reference to be initialized.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The initialized value of type <em>T</em>.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\n<p></p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>Type <em>T</em> does not have a default constructor.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef System.Boolean, ByRef System.Object)
  name.vb: EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object)
  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T, ref Boolean, ref Object)
  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object)
- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})
  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})
  id: EnsureInitialized``1(``0@,System.Boolean@,System.Object@,System.Func{``0})
  parent: System.Threading.LazyInitializer
  langs:
  - csharp
  - vb
  name: EnsureInitialized<T>(ref T, ref Boolean, ref Object, Func<T>)
  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T, ref System.Boolean, ref System.Object, System.Func<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsureInitialized
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 193
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a target reference or value type by using a specified function if it hasn't already been initialized.</p>\n"
  syntax:
    content: public static T EnsureInitialized<T>(ref T target, ref bool initialized, ref object syncLock, Func<T> valueFactory)
    content.vb: Public Shared Function EnsureInitialized(Of T)(ByRef target As T, ByRef initialized As Boolean, ByRef syncLock As Object, valueFactory As Func(Of T)) As T
    parameters:
    - id: target
      type: '{T}'
      description: "\n<p>A reference or value of type <em>T</em> to initialize if it hasn't already been initialized.</p>\n"
    - id: initialized
      type: System.Boolean
      description: "\n<p>A reference to a Boolean value that determines whether the target has already been initialized.</p>\n"
    - id: syncLock
      type: System.Object
      description: "\n<p>A reference to an object used as the mutually exclusive lock for initializing <em>target</em>. If <em>syncLock</em> is <strong>null</strong>, a new object will be instantiated.</p>\n"
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The function that is called to initialize the reference or value.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the reference to be initialized.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The initialized value of type <em>T</em>.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>Permissions to access the constructor of type <em>T</em> were missing.</p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>Type <em>T</em> does not have a default constructor.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef System.Boolean, ByRef System.Object, System.Func(Of T))
  name.vb: EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object, Func(Of T))
  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T, ref Boolean, ref Object, Func<T>)
  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T, ByRef Boolean, ByRef Object, Func(Of T))
- uid: System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})
  commentId: M:System.Threading.LazyInitializer.EnsureInitialized``1(``0@,System.Func{``0})
  id: EnsureInitialized``1(``0@,System.Func{``0})
  parent: System.Threading.LazyInitializer
  langs:
  - csharp
  - vb
  name: EnsureInitialized<T>(ref T, Func<T>)
  fullName: System.Threading.LazyInitializer.EnsureInitialized<T>(ref T, System.Func<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/LazyInitializer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsureInitialized
    path: src/mscorlib/src/System/Threading/LazyInitializer.cs
    startLine: 124
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a target reference type by using a specified function if it hasn't already been initialized.</p>\n"
  syntax:
    content: 'public static T EnsureInitialized<T>(ref T target, Func<T> valueFactory)where T : class'
    content.vb: Public Shared Function EnsureInitialized(Of T As Class)(ByRef target As T, valueFactory As Func(Of T)) As T
    parameters:
    - id: target
      type: '{T}'
      description: "\n<p>The reference of type <em>T</em> to initialize if it hasn't already been initialized.</p>\n"
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The function that is called to initialize the reference.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The reference type of the reference to be initialized.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The initialized value of type <em>T</em>.</p>\n"
  exceptions:
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>Type <em>T</em> does not have a default constructor.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>valueFactory</em> returned null (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.LazyInitializer.EnsureInitialized(Of T)(ByRef T, System.Func(Of T))
  name.vb: EnsureInitialized(Of T)(ByRef T, Func(Of T))
  nameWithType: LazyInitializer.EnsureInitialized<T>(ref T, Func<T>)
  nameWithType.vb: LazyInitializer.EnsureInitialized(Of T)(ByRef T, Func(Of T))
references:
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Func{{T}}
  parent: System
  definition: System.Func`1
  name: Func<T>
  fullName: System.Func<T>
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Func<T>
  nameWithType.vb: Func(Of T)
  commentId: T:System.Func{``0}
- uid: System.Func`1
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
  commentId: T:System.Func`1
- uid: System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  fullName: System.MemberAccessException
  nameWithType: MemberAccessException
  commentId: T:System.MemberAccessException
- uid: System.MissingMemberException
  parent: System
  isExternal: false
  name: MissingMemberException
  fullName: System.MissingMemberException
  nameWithType: MissingMemberException
  commentId: T:System.MissingMemberException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
