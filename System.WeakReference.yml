items:
- uid: System.WeakReference
  commentId: T:System.WeakReference
  id: WeakReference
  parent: System
  children:
  - System.WeakReference.#ctor(System.Object)
  - System.WeakReference.#ctor(System.Object,System.Boolean)
  - System.WeakReference.Finalize
  - System.WeakReference.IsAlive
  - System.WeakReference.Target
  - System.WeakReference.TrackResurrection
  langs:
  - csharp
  - vb
  name: WeakReference
  fullName: System.WeakReference
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/WeakReference.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WeakReference
    path: src/mscorlib/src/System/WeakReference.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a weak reference, which references an object while still allowing that object to be reclaimed by garbage collection.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public class WeakReference : ISerializable
    content.vb: >-
      <ComVisible(True)>

      Public Class WeakReference
          Implements ISerializable
  seealso:
  - type: System.GC
    commentId: T:System.GC
  see:
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: WeakReference
- uid: System.WeakReference.#ctor(System.Object)
  commentId: M:System.WeakReference.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.WeakReference
  langs:
  - csharp
  - vb
  name: WeakReference(Object)
  fullName: System.WeakReference.WeakReference(System.Object)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/WeakReference.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/WeakReference.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> class, referencing the specified object.</p>\n"
  syntax:
    content: public WeakReference(object target)
    content.vb: Public Sub New(target As Object)
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>The object to track or <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: WeakReference.WeakReference(Object)
- uid: System.WeakReference.#ctor(System.Object,System.Boolean)
  commentId: M:System.WeakReference.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.WeakReference
  langs:
  - csharp
  - vb
  name: WeakReference(Object, Boolean)
  fullName: System.WeakReference.WeakReference(System.Object, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/WeakReference.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/WeakReference.cs
    startLine: 50
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> class, referencing the specified object and using the specified resurrection tracking.</p>\n"
  syntax:
    content: public WeakReference(object target, bool trackResurrection)
    content.vb: Public Sub New(target As Object, trackResurrection As Boolean)
    parameters:
    - id: target
      type: System.Object
      description: "\n<p>An object to track. </p>\n"
    - id: trackResurrection
      type: System.Boolean
      description: "\n<p>Indicates when to stop tracking the object. If <strong>true</strong>, the object is tracked after finalization; if <strong>false</strong>, the object is only tracked until finalization. </p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Boolean
    commentId: T:System.Boolean
  - type: System.Runtime.InteropServices.GCHandle
    commentId: T:System.Runtime.InteropServices.GCHandle
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: WeakReference.WeakReference(Object, Boolean)
- uid: System.WeakReference.IsAlive
  commentId: P:System.WeakReference.IsAlive
  id: IsAlive
  parent: System.WeakReference
  langs:
  - csharp
  - vb
  name: IsAlive
  fullName: System.WeakReference.IsAlive
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets an indication whether the object referenced by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object has been garbage collected.</p>\n"
  syntax:
    content: >-
      public virtual bool IsAlive

      {
          [MethodImpl(MethodImplOptions.InternalCall)]
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Overridable ReadOnly Property IsAlive As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object referenced by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object has not been garbage collected and is still accessible; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.GC
    commentId: T:System.GC
  - type: System.Object
    commentId: T:System.Object
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: WeakReference.IsAlive
- uid: System.WeakReference.Target
  commentId: P:System.WeakReference.Target
  id: Target
  parent: System.WeakReference
  langs:
  - csharp
  - vb
  name: Target
  fullName: System.WeakReference.Target
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets the object (the target) referenced by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      public virtual object Target

      {
          [MethodImpl(MethodImplOptions.InternalCall)]
          [SecuritySafeCritical]
          get;
          [MethodImpl(MethodImplOptions.InternalCall)]
          [SecuritySafeCritical]
          set;
      }
    content.vb: Public Overridable Property Target As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>\n<strong>null</strong> if the object referenced by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object has been garbage collected; otherwise, a reference to the object referenced by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reference to the target object is invalid. This exception can be thrown while setting this property if the value is a null reference or if the object has been finalized during the set operation.</p>\n"
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.GC
    commentId: T:System.GC
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: WeakReference.Target
- uid: System.WeakReference.TrackResurrection
  commentId: P:System.WeakReference.TrackResurrection
  id: TrackResurrection
  parent: System.WeakReference
  langs:
  - csharp
  - vb
  name: TrackResurrection
  fullName: System.WeakReference.TrackResurrection
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/WeakReference.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrackResurrection
    path: src/mscorlib/src/System/WeakReference.cs
    startLine: 78
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets an indication whether the object referenced by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object is tracked after it is finalized.</p>\n"
  syntax:
    content: public virtual bool TrackResurrection { get; }
    content.vb: Public Overridable ReadOnly Property TrackResurrection As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the object the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object refers to is tracked after finalization; or <strong>false</strong> if the object is only tracked until finalization.</p>\n"
  seealso:
  - type: System.GC
    commentId: T:System.GC
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: WeakReference.TrackResurrection
- uid: System.WeakReference.Finalize
  commentId: M:System.WeakReference.Finalize
  id: Finalize
  parent: System.WeakReference
  langs:
  - csharp
  - vb
  name: Finalize()
  fullName: System.WeakReference.Finalize()
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Discards the reference to the target represented by the current <xref href=\"System.WeakReference\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      [SecuritySafeCritical]

      protected void Finalize()
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      <SecuritySafeCritical>

      Protected Sub Finalize
  seealso:
  - type: System.GC
    commentId: T:System.GC
  - type: System.Object.Finalize
    commentId: M:System.Object.Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: WeakReference.Finalize()
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
