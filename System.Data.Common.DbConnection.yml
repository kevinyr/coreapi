items:
- uid: System.Data.Common.DbConnection
  commentId: T:System.Data.Common.DbConnection
  id: DbConnection
  parent: System.Data.Common
  children:
  - System.Data.Common.DbConnection.#ctor
  - System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.BeginTransaction
  - System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.ChangeDatabase(System.String)
  - System.Data.Common.DbConnection.Close
  - System.Data.Common.DbConnection.ConnectionString
  - System.Data.Common.DbConnection.ConnectionTimeout
  - System.Data.Common.DbConnection.CreateCommand
  - System.Data.Common.DbConnection.CreateDbCommand
  - System.Data.Common.DbConnection.Database
  - System.Data.Common.DbConnection.DataSource
  - System.Data.Common.DbConnection.Dispose
  - System.Data.Common.DbConnection.Dispose(System.Boolean)
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.Open
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.ServerVersion
  - System.Data.Common.DbConnection.State
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  langs:
  - csharp
  - vb
  name: DbConnection
  fullName: System.Data.Common.DbConnection
  type: Class
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbConnection
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 16
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Represents a connection to a database. </p>\n"
  syntax:
    content: 'public abstract class DbConnection : IDbConnection, IDisposable'
    content.vb: >-
      Public MustInherit Class DbConnection
          Implements IDbConnection, IDisposable
  inheritance:
  - System.Object
  implements:
  - System.Data.IDbConnection
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: DbConnection
- uid: System.Data.Common.DbConnection.#ctor
  commentId: M:System.Data.Common.DbConnection.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: DbConnection()
  fullName: System.Data.Common.DbConnection.DbConnection()
  type: Constructor
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 22
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.Common.DbConnection\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected DbConnection()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: DbConnection.DbConnection()
- uid: System.Data.Common.DbConnection.ConnectionString
  commentId: P:System.Data.Common.DbConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: ConnectionString
  fullName: System.Data.Common.DbConnection.ConnectionString
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionString
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 31
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets or sets the string used to open the connection.</p>\n"
  syntax:
    content: public abstract string ConnectionString { get; set; }
    content.vb: Public MustOverride Property ConnectionString As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The connection string used to establish the initial connection. The exact contents of the connection string depend on the specific data source for this connection. The default value is an empty string.</p>\n"
  implements:
  - System.Data.IDbConnection.ConnectionString
  modifiers.csharp:
  - public
  - abstract
  - get
  - set
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: DbConnection.ConnectionString
- uid: System.Data.Common.DbConnection.ConnectionTimeout
  commentId: P:System.Data.Common.DbConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: ConnectionTimeout
  fullName: System.Data.Common.DbConnection.ConnectionTimeout
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectionTimeout
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 37
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the time to wait while establishing a connection before terminating the attempt and generating an error.</p>\n"
  syntax:
    content: public virtual int ConnectionTimeout { get; }
    content.vb: Public Overridable ReadOnly Property ConnectionTimeout As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The time (in seconds) to wait for a connection to open. The default value is determined by the specific type of connection that you are using.</p>\n"
  implements:
  - System.Data.IDbConnection.ConnectionTimeout
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: DbConnection.ConnectionTimeout
- uid: System.Data.Common.DbConnection.Database
  commentId: P:System.Data.Common.DbConnection.Database
  id: Database
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: Database
  fullName: System.Data.Common.DbConnection.Database
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Database
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 45
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the name of the current database after a connection is opened, or the database name specified in the connection string before the connection is opened.</p>\n"
  syntax:
    content: public abstract string Database { get; }
    content.vb: Public MustOverride ReadOnly Property Database As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the current database or the name of the database to be used after a connection is opened. The default value is an empty string.</p>\n"
  implements:
  - System.Data.IDbConnection.Database
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: DbConnection.Database
- uid: System.Data.Common.DbConnection.DataSource
  commentId: P:System.Data.Common.DbConnection.DataSource
  id: DataSource
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: DataSource
  fullName: System.Data.Common.DbConnection.DataSource
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DataSource
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 50
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the name of the database server to which to connect.</p>\n"
  syntax:
    content: public abstract string DataSource { get; }
    content.vb: Public MustOverride ReadOnly Property DataSource As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the database server to which to connect. The default value is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: DbConnection.DataSource
- uid: System.Data.Common.DbConnection.ServerVersion
  commentId: P:System.Data.Common.DbConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: ServerVersion
  fullName: System.Data.Common.DbConnection.ServerVersion
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ServerVersion
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 57
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets a string that represents the version of the server to which the object is connected.</p>\n"
  syntax:
    content: public abstract string ServerVersion { get; }
    content.vb: Public MustOverride ReadOnly Property ServerVersion As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The version of the database. The format of the string returned depends on the specific type of connection you are using.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Data.Common.DbConnection.ServerVersion\" data-throw-if-not-resolved=\"false\"></xref> was called while the returned Task was not completed and the connection was not opened after a call to <xref href=\"System.Data.Common.DbConnection.OpenAsync\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: DbConnection.ServerVersion
- uid: System.Data.Common.DbConnection.State
  commentId: P:System.Data.Common.DbConnection.State
  id: State
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: State
  fullName: System.Data.Common.DbConnection.State
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: State
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 62
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets a string that describes the state of the connection.</p>\n"
  syntax:
    content: public abstract ConnectionState State { get; }
    content.vb: Public MustOverride ReadOnly Property State As ConnectionState
    parameters: []
    return:
      type: System.Data.ConnectionState
      description: "\n<p>The state of the connection. The format of the string returned depends on the specific type of connection you are using.</p>\n"
  implements:
  - System.Data.IDbConnection.State
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: DbConnection.State
- uid: System.Data.Common.DbConnection.StateChange
  commentId: E:System.Data.Common.DbConnection.StateChange
  id: StateChange
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: StateChange
  fullName: System.Data.Common.DbConnection.StateChange
  type: Event
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StateChange
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 67
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Occurs when the state of the event changes.</p>\n"
  syntax:
    content: public virtual event StateChangeEventHandler StateChange
    content.vb: Public Overridable Event StateChange As StateChangeEventHandler
    return:
      type: System.Data.StateChangeEventHandler
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: DbConnection.StateChange
- uid: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  commentId: M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: BeginDbTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginDbTransaction
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 79
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Starts a database transaction.</p>\n"
  syntax:
    content: protected abstract DbTransaction BeginDbTransaction(IsolationLevel isolationLevel)
    content.vb: Protected MustOverride Function BeginDbTransaction(isolationLevel As IsolationLevel) As DbTransaction
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "\n<p>Specifies the isolation level for the transaction.</p>\n"
    return:
      type: System.Data.Common.DbTransaction
      description: "\n<p>An object representing the new transaction.</p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  nameWithType: DbConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.BeginTransaction
  commentId: M:System.Data.Common.DbConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction()
  fullName: System.Data.Common.DbConnection.BeginTransaction()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 81
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Starts a database transaction.</p>\n"
  syntax:
    content: public DbTransaction BeginTransaction()
    content.vb: Public Function BeginTransaction As DbTransaction
    return:
      type: System.Data.Common.DbTransaction
      description: "\n<p>An object representing the new transaction.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DbConnection.BeginTransaction()
- uid: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  commentId: M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginTransaction
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 86
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Starts a database transaction with the specified isolation level.</p>\n"
  syntax:
    content: public DbTransaction BeginTransaction(IsolationLevel isolationLevel)
    content.vb: Public Function BeginTransaction(isolationLevel As IsolationLevel) As DbTransaction
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "\n<p>Specifies the isolation level for the transaction.</p>\n"
    return:
      type: System.Data.Common.DbTransaction
      description: "\n<p>An object representing the new transaction.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  commentId: M:System.Data.Common.DbConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: ChangeDatabase(String)
  fullName: System.Data.Common.DbConnection.ChangeDatabase(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeDatabase
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 94
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Changes the current database for an open connection.</p>\n"
  syntax:
    content: public abstract void ChangeDatabase(string databaseName)
    content.vb: Public MustOverride Sub ChangeDatabase(databaseName As String)
    parameters:
    - id: databaseName
      type: System.String
      description: "\n<p>Specifies the name of the database for the connection to use.</p>\n"
  implements:
  - System.Data.IDbConnection.ChangeDatabase(System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: DbConnection.ChangeDatabase(String)
- uid: System.Data.Common.DbConnection.Close
  commentId: M:System.Data.Common.DbConnection.Close
  id: Close
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: Close()
  fullName: System.Data.Common.DbConnection.Close()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Close
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 92
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Closes the connection to the database. This is the preferred method of closing any open connection.</p>\n"
  syntax:
    content: public abstract void Close()
    content.vb: Public MustOverride Sub Close
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "\n<p>The connection-level error that occurred while opening the connection. </p>\n"
  seealso:
  - type: System.Data.Common.DbConnection.Open
    commentId: M:System.Data.Common.DbConnection.Open
  implements:
  - System.Data.IDbConnection.Close
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: DbConnection.Close()
- uid: System.Data.Common.DbConnection.CreateCommand
  commentId: M:System.Data.Common.DbConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: CreateCommand()
  fullName: System.Data.Common.DbConnection.CreateCommand()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateCommand
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 96
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Creates and returns a <xref href=\"System.Data.Common.DbCommand\" data-throw-if-not-resolved=\"false\"></xref> object associated with the current connection.</p>\n"
  syntax:
    content: public DbCommand CreateCommand()
    content.vb: Public Function CreateCommand As DbCommand
    return:
      type: System.Data.Common.DbCommand
      description: "\n<p>A <xref href=\"System.Data.Common.DbCommand\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DbConnection.CreateCommand()
- uid: System.Data.Common.DbConnection.CreateDbCommand
  commentId: M:System.Data.Common.DbConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: CreateDbCommand()
  fullName: System.Data.Common.DbConnection.CreateDbCommand()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateDbCommand
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 102
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Creates and returns a <xref href=\"System.Data.Common.DbCommand\" data-throw-if-not-resolved=\"false\"></xref> object associated with the current connection.</p>\n"
  syntax:
    content: protected abstract DbCommand CreateDbCommand()
    content.vb: Protected MustOverride Function CreateDbCommand As DbCommand
    return:
      type: System.Data.Common.DbCommand
      description: "\n<p>A <xref href=\"System.Data.Common.DbCommand\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  nameWithType: DbConnection.CreateDbCommand()
- uid: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  commentId: M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  id: OnStateChange(System.Data.StateChangeEventArgs)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: OnStateChange(StateChangeEventArgs)
  fullName: System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnStateChange
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 105
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Raises the <xref href=\"System.Data.Common.DbConnection.StateChange\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected virtual void OnStateChange(StateChangeEventArgs stateChange)
    content.vb: Protected Overridable Sub OnStateChange(stateChange As StateChangeEventArgs)
    parameters:
    - id: stateChange
      type: System.Data.StateChangeEventArgs
      description: "\n<p>A <xref href=\"System.Data.StateChangeEventArgs\" data-throw-if-not-resolved=\"false\"></xref> that contains the event data.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: DbConnection.OnStateChange(StateChangeEventArgs)
- uid: System.Data.Common.DbConnection.Open
  commentId: M:System.Data.Common.DbConnection.Open
  id: Open
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: Open()
  fullName: System.Data.Common.DbConnection.Open()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Open
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 115
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Opens a database connection with the settings specified by the <xref href=\"System.Data.Common.DbConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract void Open()
    content.vb: Public MustOverride Sub Open
  implements:
  - System.Data.IDbConnection.Open
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: DbConnection.Open()
- uid: System.Data.Common.DbConnection.OpenAsync
  commentId: M:System.Data.Common.DbConnection.OpenAsync
  id: OpenAsync
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: OpenAsync()
  fullName: System.Data.Common.DbConnection.OpenAsync()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenAsync
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 117
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.Common.DbConnection.Open\" data-throw-if-not-resolved=\"false\"></xref>, which opens a database connection with the settings specified by the <xref href=\"System.Data.Common.DbConnection.ConnectionString\" data-throw-if-not-resolved=\"false\"></xref>. This method invokes the virtual method <xref href=\"System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with CancellationToken.None.</p>\n"
  syntax:
    content: public Task OpenAsync()
    content.vb: Public Function OpenAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DbConnection.OpenAsync()
- uid: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: OpenAsync(CancellationToken)
  fullName: System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OpenAsync
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 122
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>This is the asynchronous version of <xref href=\"System.Data.Common.DbConnection.Open\" data-throw-if-not-resolved=\"false\"></xref>. Providers should override with an appropriate implementation. The cancellation token can optionally be honored.</p>\n<p>The default implementation invokes the synchronous <xref href=\"System.Data.Common.DbConnection.Open\" data-throw-if-not-resolved=\"false\"></xref> call and returns a completed task. The default implementation will return a cancelled task if passed an already cancelled cancellationToken. Exceptions thrown by Open will be communicated via the returned Task Exception property.</p>\n<p>Do not invoke other methods and properties of the <strong>DbConnection</strong> object until the returned Task is complete.</p>\n"
  syntax:
    content: public virtual Task OpenAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function OpenAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: DbConnection.OpenAsync(CancellationToken)
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  commentId: M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  id: System#Data#IDbConnection#BeginTransaction
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: IDbConnection.BeginTransaction()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Data.IDbConnection.BeginTransaction
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 156
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Begins a database transaction.</p>\n"
  syntax:
    content: IDbTransaction IDbConnection.BeginTransaction()
    content.vb: Function System.Data.IDbConnection.BeginTransaction As IDbTransaction Implements IDbConnection.BeginTransaction
    return:
      type: System.Data.IDbTransaction
      description: "\n<p>An object that represents the new transaction.</p>\n"
  implements:
  - System.Data.IDbConnection.BeginTransaction
  name.vb: System.Data.IDbConnection.BeginTransaction()
  nameWithType: DbConnection.IDbConnection.BeginTransaction()
  nameWithType.vb: DbConnection.System.Data.IDbConnection.BeginTransaction()
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  commentId: M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  id: System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: IDbConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Data.IDbConnection.BeginTransaction
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 161
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Begins a database transaction with the specified <xref href=\"System.Data.IsolationLevel\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: IDbTransaction IDbConnection.BeginTransaction(IsolationLevel isolationLevel)
    content.vb: Function System.Data.IDbConnection.BeginTransaction(isolationLevel As IsolationLevel) As IDbTransaction Implements IDbConnection.BeginTransaction
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "\n<p>One of the <xref href=\"System.Data.IsolationLevel\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
    return:
      type: System.Data.IDbTransaction
      description: "\n<p>An object that represents the new transaction.</p>\n"
  implements:
  - System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  name.vb: System.Data.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType: DbConnection.IDbConnection.BeginTransaction(IsolationLevel)
  nameWithType.vb: DbConnection.System.Data.IDbConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  commentId: M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  id: System#Data#IDbConnection#CreateCommand
  isEii: true
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: IDbConnection.CreateCommand()
  fullName: System.Data.Common.DbConnection.System.Data.IDbConnection.CreateCommand()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Data.IDbConnection.CreateCommand
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 166
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Creates and returns a <xref href=\"System.Data.Common.DbCommand\" data-throw-if-not-resolved=\"false\"></xref> object that is associated with the current connection.</p>\n"
  syntax:
    content: IDbCommand IDbConnection.CreateCommand()
    content.vb: Function System.Data.IDbConnection.CreateCommand As IDbCommand Implements IDbConnection.CreateCommand
    return:
      type: System.Data.IDbCommand
      description: "\n<p>A <xref href=\"System.Data.Common.DbCommand\" data-throw-if-not-resolved=\"false\"></xref> object that is associated with the connection.</p>\n"
  implements:
  - System.Data.IDbConnection.CreateCommand
  name.vb: System.Data.IDbConnection.CreateCommand()
  nameWithType: DbConnection.IDbConnection.CreateCommand()
  nameWithType.vb: DbConnection.System.Data.IDbConnection.CreateCommand()
- uid: System.Data.Common.DbConnection.Dispose
  commentId: M:System.Data.Common.DbConnection.Dispose
  id: Dispose
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Data.Common.DbConnection.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 142
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DbConnection.Dispose()
- uid: System.Data.Common.DbConnection.Dispose(System.Boolean)
  commentId: M:System.Data.Common.DbConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbConnection
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Data.Common.DbConnection.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.Common/src/System/Data/Common/DbConnection.cs
    startLine: 148
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: DbConnection.Dispose(Boolean)
references:
- uid: System.Data.Common
  isExternal: false
  name: System.Data.Common
  fullName: System.Data.Common
  nameWithType: System.Data.Common
  commentId: N:System.Data.Common
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Data.IDbConnection
  parent: System.Data
  isExternal: false
  name: IDbConnection
  fullName: System.Data.IDbConnection
  nameWithType: IDbConnection
  commentId: T:System.Data.IDbConnection
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Data
  isExternal: false
  name: System.Data
  fullName: System.Data
  nameWithType: System.Data
  commentId: N:System.Data
- uid: System.Data.IDbConnection.ConnectionString
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionString
  fullName: System.Data.IDbConnection.ConnectionString
  nameWithType: IDbConnection.ConnectionString
  commentId: P:System.Data.IDbConnection.ConnectionString
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Data.IDbConnection.ConnectionTimeout
  parent: System.Data.IDbConnection
  isExternal: false
  name: ConnectionTimeout
  fullName: System.Data.IDbConnection.ConnectionTimeout
  nameWithType: IDbConnection.ConnectionTimeout
  commentId: P:System.Data.IDbConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Data.IDbConnection.Database
  parent: System.Data.IDbConnection
  isExternal: false
  name: Database
  fullName: System.Data.IDbConnection.Database
  nameWithType: IDbConnection.Database
  commentId: P:System.Data.IDbConnection.Database
- uid: System.Data.IDbConnection.State
  parent: System.Data.IDbConnection
  isExternal: false
  name: State
  fullName: System.Data.IDbConnection.State
  nameWithType: IDbConnection.State
  commentId: P:System.Data.IDbConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  fullName: System.Data.ConnectionState
  nameWithType: ConnectionState
  commentId: T:System.Data.ConnectionState
- uid: System.Data.StateChangeEventHandler
  parent: System.Data
  isExternal: false
  name: StateChangeEventHandler
  fullName: System.Data.StateChangeEventHandler
  nameWithType: StateChangeEventHandler
  commentId: T:System.Data.StateChangeEventHandler
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  fullName: System.Data.IsolationLevel
  nameWithType: IsolationLevel
  commentId: T:System.Data.IsolationLevel
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: Common.DbTransaction
  fullName: System.Data.Common.DbTransaction
  nameWithType: Common.DbTransaction
  commentId: T:System.Data.Common.DbTransaction
- uid: System.Data.IDbConnection.ChangeDatabase(System.String)
  parent: System.Data.IDbConnection
  isExternal: true
  name: ChangeDatabase(String)
  fullName: System.Data.IDbConnection.ChangeDatabase(System.String)
  spec.csharp:
  - uid: System.Data.IDbConnection.ChangeDatabase(System.String)
    name: ChangeDatabase
    fullName: System.Data.IDbConnection.ChangeDatabase
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDbConnection.ChangeDatabase(System.String)
    name: ChangeDatabase
    fullName: System.Data.IDbConnection.ChangeDatabase
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IDbConnection.ChangeDatabase(String)
  commentId: M:System.Data.IDbConnection.ChangeDatabase(System.String)
- uid: System.Data.IDbConnection.Close
  parent: System.Data.IDbConnection
  isExternal: false
  name: Close()
  fullName: System.Data.IDbConnection.Close()
  spec.csharp:
  - uid: System.Data.IDbConnection.Close
    name: Close
    fullName: System.Data.IDbConnection.Close
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDbConnection.Close
    name: Close
    fullName: System.Data.IDbConnection.Close
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDbConnection.Close()
  commentId: M:System.Data.IDbConnection.Close
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: Common.DbCommand
  fullName: System.Data.Common.DbCommand
  nameWithType: Common.DbCommand
  commentId: T:System.Data.Common.DbCommand
- uid: System.Data.StateChangeEventArgs
  parent: System.Data
  isExternal: false
  name: StateChangeEventArgs
  fullName: System.Data.StateChangeEventArgs
  nameWithType: StateChangeEventArgs
  commentId: T:System.Data.StateChangeEventArgs
- uid: System.Data.IDbConnection.Open
  parent: System.Data.IDbConnection
  isExternal: false
  name: Open()
  fullName: System.Data.IDbConnection.Open()
  spec.csharp:
  - uid: System.Data.IDbConnection.Open
    name: Open
    fullName: System.Data.IDbConnection.Open
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDbConnection.Open
    name: Open
    fullName: System.Data.IDbConnection.Open
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDbConnection.Open()
  commentId: M:System.Data.IDbConnection.Open
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  fullName: System.Threading.Tasks.Task
  nameWithType: Task
  commentId: T:System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  nameWithType: CancellationToken
  commentId: T:System.Threading.CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  nameWithType: System.Threading
  commentId: N:System.Threading
- uid: System.Data.IDbConnection.BeginTransaction
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction()
  fullName: System.Data.IDbConnection.BeginTransaction()
  spec.csharp:
  - uid: System.Data.IDbConnection.BeginTransaction
    name: BeginTransaction
    fullName: System.Data.IDbConnection.BeginTransaction
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDbConnection.BeginTransaction
    name: BeginTransaction
    fullName: System.Data.IDbConnection.BeginTransaction
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDbConnection.BeginTransaction()
  commentId: M:System.Data.IDbConnection.BeginTransaction
- uid: System.Data.IDbTransaction
  parent: System.Data
  isExternal: false
  name: IDbTransaction
  fullName: System.Data.IDbTransaction
  nameWithType: IDbTransaction
  commentId: T:System.Data.IDbTransaction
- uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.IDbConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  fullName: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
  spec.csharp:
  - uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
    name: BeginTransaction
    fullName: System.Data.IDbConnection.BeginTransaction
  - name: (
    fullName: (
  - uid: System.Data.IsolationLevel
    name: IsolationLevel
    fullName: System.Data.IsolationLevel
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
    name: BeginTransaction
    fullName: System.Data.IDbConnection.BeginTransaction
  - name: (
    fullName: (
  - uid: System.Data.IsolationLevel
    name: IsolationLevel
    fullName: System.Data.IsolationLevel
  - name: )
    fullName: )
  nameWithType: IDbConnection.BeginTransaction(IsolationLevel)
  commentId: M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)
- uid: System.Data.IDbConnection.CreateCommand
  parent: System.Data.IDbConnection
  isExternal: false
  name: CreateCommand()
  fullName: System.Data.IDbConnection.CreateCommand()
  spec.csharp:
  - uid: System.Data.IDbConnection.CreateCommand
    name: CreateCommand
    fullName: System.Data.IDbConnection.CreateCommand
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDbConnection.CreateCommand
    name: CreateCommand
    fullName: System.Data.IDbConnection.CreateCommand
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDbConnection.CreateCommand()
  commentId: M:System.Data.IDbConnection.CreateCommand
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  fullName: System.Data.IDbCommand
  nameWithType: IDbCommand
  commentId: T:System.Data.IDbCommand
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Data.Common.DbException
  isExternal: false
  name: DbException
  fullName: System.Data.Common.DbException
  nameWithType: DbException
  commentId: T:System.Data.Common.DbException
