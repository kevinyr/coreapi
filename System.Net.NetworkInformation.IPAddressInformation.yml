items:
- uid: System.Net.NetworkInformation.IPAddressInformation
  commentId: T:System.Net.NetworkInformation.IPAddressInformation
  id: IPAddressInformation
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.IPAddressInformation.#ctor
  - System.Net.NetworkInformation.IPAddressInformation.Address
  - System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  - System.Net.NetworkInformation.IPAddressInformation.IsTransient
  langs:
  - csharp
  - vb
  name: IPAddressInformation
  fullName: System.Net.NetworkInformation.IPAddressInformation
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IPAddressInformation
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
    startLine: 9
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about a network interface address.</p>\n"
  syntax:
    content: public abstract class IPAddressInformation
    content.vb: Public MustInherit Class IPAddressInformation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: IPAddressInformation
- uid: System.Net.NetworkInformation.IPAddressInformation.#ctor
  commentId: M:System.Net.NetworkInformation.IPAddressInformation.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.IPAddressInformation
  langs:
  - csharp
  - vb
  name: IPAddressInformation()
  fullName: System.Net.NetworkInformation.IPAddressInformation.IPAddressInformation()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 105
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.IPAddressInformation\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected IPAddressInformation()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: IPAddressInformation.IPAddressInformation()
- uid: System.Net.NetworkInformation.IPAddressInformation.Address
  commentId: P:System.Net.NetworkInformation.IPAddressInformation.Address
  id: Address
  parent: System.Net.NetworkInformation.IPAddressInformation
  langs:
  - csharp
  - vb
  name: Address
  fullName: System.Net.NetworkInformation.IPAddressInformation.Address
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Address
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
    startLine: 14
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the Internet Protocol (IP) address.</p>\n"
  syntax:
    content: public abstract IPAddress Address { get; }
    content.vb: Public MustOverride ReadOnly Property Address As IPAddress
    parameters: []
    return:
      type: IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the IP address of an interface.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: IPAddressInformation.Address
- uid: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  commentId: P:System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  id: IsDnsEligible
  parent: System.Net.NetworkInformation.IPAddressInformation
  langs:
  - csharp
  - vb
  name: IsDnsEligible
  fullName: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDnsEligible
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
    startLine: 19
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the Internet Protocol (IP) address is valid to appear in a Domain Name System (DNS) server database.</p>\n"
  syntax:
    content: public abstract bool IsDnsEligible { get; }
    content.vb: Public MustOverride ReadOnly Property IsDnsEligible As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the address can appear in a DNS database; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: IPAddressInformation.IsDnsEligible
- uid: System.Net.NetworkInformation.IPAddressInformation.IsTransient
  commentId: P:System.Net.NetworkInformation.IPAddressInformation.IsTransient
  id: IsTransient
  parent: System.Net.NetworkInformation.IPAddressInformation
  langs:
  - csharp
  - vb
  name: IsTransient
  fullName: System.Net.NetworkInformation.IPAddressInformation.IsTransient
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTransient
    path: src/System.Net.NetworkInformation/src/System/Net/NetworkInformation/IPAddressInformation.cs
    startLine: 24
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that indicates whether the Internet Protocol (IP) address is transient (a cluster address).</p>\n"
  syntax:
    content: public abstract bool IsTransient { get; }
    content.vb: Public MustOverride ReadOnly Property IsTransient As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the address is transient; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  nameWithType: IPAddressInformation.IsTransient
references:
- uid: System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
  nameWithType: System.Net.NetworkInformation
  commentId: N:System.Net.NetworkInformation
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
  nameWithType: IPAddress
  commentId: T:System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
  nameWithType: System.Net
  commentId: N:System.Net
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
