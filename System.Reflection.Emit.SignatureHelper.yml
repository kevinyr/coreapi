### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.SignatureHelper
  commentId: T:System.Reflection.Emit.SignatureHelper
  id: SignatureHelper
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  - System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  - System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.SignatureHelper.AddSentinel
  - System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  - System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  - System.Reflection.Emit.SignatureHelper.GetHashCode
  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  - System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  - System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  - System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.SignatureHelper.GetSignature
  - System.Reflection.Emit.SignatureHelper.ToString
  langs:
  - csharp
  - vb
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SignatureHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 17
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Provides methods for building signatures.</p>\n"
  syntax:
    content: >-
      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_SignatureHelper))]

      [ComVisible(true)]

      public sealed class SignatureHelper : _SignatureHelper
    content.vb: >-
      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_SignatureHelper))>

      <ComVisible(True)>

      Public NotInheritable Class SignatureHelper
          Implements _SignatureHelper
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  id: AddArgument(System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: AddArgument(Type)
  nameWithType: SignatureHelper.AddArgument(Type)
  fullName: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddArgument
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 819
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Adds an argument to the signature.</p>\n"
  syntax:
    content: public void AddArgument(Type clsArgument)
    content.vb: Public Sub AddArgument(clsArgument As Type)
    parameters:
    - id: clsArgument
      type: System.Type
      description: "\n<p>The type of the argument. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The signature has already been finished. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>clsArgument</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Boolean)
  id: AddArgument(System.Type,System.Boolean)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: AddArgument(Type, Boolean)
  nameWithType: SignatureHelper.AddArgument(Type, Boolean)
  fullName: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddArgument
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 824
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Adds an argument of the specified type to the signature, specifying whether the argument is pinned.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void AddArgument(Type argument, bool pinned)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub AddArgument(argument As Type, pinned As Boolean)
    parameters:
    - id: argument
      type: System.Type
      description: "\n<p>The argument type.</p>\n"
    - id: pinned
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the argument is pinned; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>argument</em> is <strong>null</strong>.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArgument(System.Type,System.Type[],System.Type[])
  id: AddArgument(System.Type,System.Type[],System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: AddArgument(Type, Type[], Type[])
  nameWithType: SignatureHelper.AddArgument(Type, Type[], Type[])
  fullName: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type, System.Type[], System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddArgument
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 853
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Adds an argument to the signature, with the specified custom modifiers.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void AddArgument(Type argument, Type[] requiredCustomModifiers, Type[] optionalCustomModifiers)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub AddArgument(argument As Type, requiredCustomModifiers As Type(), optionalCustomModifiers As Type())
    parameters:
    - id: argument
      type: System.Type
      description: "\n<p>The argument type.</p>\n"
    - id: requiredCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the required custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the argument has no required custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: optionalCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the optional custom modifiers for the argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the argument has no optional custom modifiers, specify <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>argument</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>An element of <em>requiredCustomModifiers</em> or <em>optionalCustomModifiers</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The signature has already been finished. </p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an array type.</p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> for the custom modifier.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: SignatureHelper.AddArgument(Type, Type(), Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.SignatureHelper.AddArgument(System.Type, System.Type(), System.Type())
  name.vb: AddArgument(Type, Type(), Type())
- uid: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[],System.Type[][],System.Type[][])
  id: AddArguments(System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: AddArguments(Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.AddArguments(Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddArguments
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 834
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Adds a set of arguments to the signature, with the specified custom modifiers.</p>\n"
  syntax:
    content: public void AddArguments(Type[] arguments, Type[][] requiredCustomModifiers, Type[][] optionalCustomModifiers)
    content.vb: Public Sub AddArguments(arguments As Type(), requiredCustomModifiers As Type()(), optionalCustomModifiers As Type()())
    parameters:
    - id: arguments
      type: System.Type[]
      description: "\n<p>The types of the arguments to be added.</p>\n"
    - id: requiredCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    - id: optionalCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>An element of <em>arguments</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is <strong>null</strong>. (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The signature has already been finished. </p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an array type.</p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> for the custom modifier. </p>\n<p>-or-</p>\n<p>The size of <em>requiredCustomModifiers</em> or <em>optionalCustomModifiers</em> does not equal the size of <em>arguments</em>.</p>\n"
  nameWithType.vb: SignatureHelper.AddArguments(Type(), Type()(), Type()())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.SignatureHelper.AddArguments(System.Type(), System.Type()(), System.Type()())
  name.vb: AddArguments(Type(), Type()(), Type()())
- uid: System.Reflection.Emit.SignatureHelper.AddSentinel
  commentId: M:System.Reflection.Emit.SignatureHelper.AddSentinel
  id: AddSentinel
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: AddSentinel()
  nameWithType: SignatureHelper.AddSentinel()
  fullName: System.Reflection.Emit.SignatureHelper.AddSentinel()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddSentinel
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 871
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Marks the end of a vararg fixed part. This is only used if the caller is creating a vararg signature call site.</p>\n"
  syntax:
    content: public void AddSentinel()
    content.vb: Public Sub AddSentinel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  commentId: M:System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SignatureHelper.Equals(Object)
  fullName: System.Reflection.Emit.SignatureHelper.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 876
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Checks if this instance is equal to the given object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object with which this instance should be compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the given object is a <strong>SignatureHelper</strong> and represents the same signature; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  id: GetFieldSigHelper(System.Reflection.Module)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetFieldSigHelper(Module)
  nameWithType: SignatureHelper.GetFieldSigHelper(Module)
  fullName: System.Reflection.Emit.SignatureHelper.GetFieldSigHelper(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFieldSigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 153
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a field.</p>\n"
  syntax:
    content: public static SignatureHelper GetFieldSigHelper(Module mod)
    content.vb: Public Shared Function GetFieldSigHelper(mod As  Module) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The dynamic module that contains the field for which the <strong>SignatureHelper</strong> is requested. </p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>The <strong>SignatureHelper</strong> object for a field.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.SignatureHelper.GetHashCode
  commentId: M:System.Reflection.Emit.SignatureHelper.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SignatureHelper.GetHashCode()
  fullName: System.Reflection.Emit.SignatureHelper.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 898
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Creates and returns a hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>Returns the hash code based on the name.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper
  id: GetLocalVarSigHelper
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetLocalVarSigHelper()
  nameWithType: SignatureHelper.GetLocalVarSigHelper()
  fullName: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLocalVarSigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 133
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a local variable.</p>\n"
  syntax:
    content: public static SignatureHelper GetLocalVarSigHelper()
    content.vb: Public Shared Function GetLocalVarSigHelper As SignatureHelper
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>A <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> for a local variable.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  id: GetLocalVarSigHelper(System.Reflection.Module)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetLocalVarSigHelper(Module)
  nameWithType: SignatureHelper.GetLocalVarSigHelper(Module)
  fullName: System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper(System.Reflection.Module)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetLocalVarSigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 148
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a local variable.</p>\n"
  syntax:
    content: public static SignatureHelper GetLocalVarSigHelper(Module mod)
    content.vb: Public Shared Function GetLocalVarSigHelper(mod As  Module) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The dynamic module that contains the local variable for which the <strong>SignatureHelper</strong> is requested. </p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>The <strong>SignatureHelper</strong> object for a local variable.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  id: GetMethodSigHelper(System.Reflection.CallingConventions,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetMethodSigHelper(CallingConventions, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(CallingConventions, Type)
  fullName: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.CallingConventions, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodSigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 138
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a method given the method's calling convention and return type.</p>\n"
  syntax:
    content: public static SignatureHelper GetMethodSigHelper(CallingConventions callingConvention, Type returnType)
    content.vb: Public Shared Function GetMethodSigHelper(callingConvention As CallingConventions, returnType As Type) As SignatureHelper
    parameters:
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: "\n<p>The calling convention of the method. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic). </p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  id: GetMethodSigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type)
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetMethodSigHelper(Module, CallingConventions, Type)
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, CallingConventions, Type)
  fullName: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodSigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 39
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a method given the method's module, calling convention, and return type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static SignatureHelper GetMethodSigHelper(Module mod, CallingConventions callingConvention, Type returnType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetMethodSigHelper(mod As  Module, callingConvention As CallingConventions, returnType As Type) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the method for which the <strong>SignatureHelper</strong> is requested. </p>\n"
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: "\n<p>The calling convention of the method. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic). </p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>mod</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mod</em> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  id: GetMethodSigHelper(System.Reflection.Module,System.Type,System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetMethodSigHelper(Module, Type, Type[])
  nameWithType: SignatureHelper.GetMethodSigHelper(Module, Type, Type[])
  fullName: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodSigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 27
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a method with a standard calling convention, given the method's module, return type, and argument types.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static SignatureHelper GetMethodSigHelper(Module mod, Type returnType, Type[] parameterTypes)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetMethodSigHelper(mod As  Module, returnType As Type, parameterTypes As Type()) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the method for which the <strong>SignatureHelper</strong> is requested. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method, or <strong>null</strong> for a void return type (<strong>Sub</strong> procedure in Visual Basic). </p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the arguments of the method, or <strong>null</strong> if the method has no arguments. </p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>The <strong>SignatureHelper</strong> object for a method.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>mod</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mod</em> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: SignatureHelper.GetMethodSigHelper(Module, Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.Emit.SignatureHelper.GetMethodSigHelper(System.Reflection.Module, System.Type, System.Type())
  name.vb: GetMethodSigHelper(Module, Type, Type())
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: GetPropertySigHelper(System.Reflection.Module,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPropertySigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 170
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a property, given the dynamic module that contains the property, the calling convention, the property type, the property arguments, and custom modifiers for the return type and arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static SignatureHelper GetPropertySigHelper(Module mod, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetPropertySigHelper(mod As  Module, callingConvention As CallingConventions, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> is requested.</p>\n"
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: "\n<p>The calling convention of the property accessors.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The property type.</p>\n"
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the return type has no required custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the return type has no optional custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the property's arguments, or <strong>null</strong> if the property has no arguments.</p>\n"
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>A <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> object for a property.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>mod</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is <strong>null</strong>. (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The signature has already been finished. </p>\n<p>-or-</p>\n<p>\n<em>mod</em> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an array type.</p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> for the custom modifier.</p>\n<p>-or-</p>\n<p>The size of <em>requiredParameterTypeCustomModifiers</em> or <em>optionalParameterTypeCustomModifiers</em> does not equal the size of <em>parameterTypes</em>.</p>\n"
  attributes:
  - type: System.Security.SecuritySafeCriticalAttribute
    ctor: System.Security.SecuritySafeCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: SignatureHelper.GetPropertySigHelper(Module, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: GetPropertySigHelper(Module, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetPropertySigHelper(Module, Type, Type[])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[])
  fullName: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPropertySigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 158
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, and the property arguments.</p>\n"
  syntax:
    content: public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] parameterTypes)
    content.vb: Public Shared Function GetPropertySigHelper(mod As  Module, returnType As Type, parameterTypes As Type()) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> is requested.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The property type.</p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The argument types, or <strong>null</strong> if the property has no arguments.</p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>A <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> object for a property.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>mod</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mod</em> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SignatureHelper.GetPropertySigHelper(Module, Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type())
  name.vb: GetPropertySigHelper(Module, Type, Type())
- uid: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: GetPropertySigHelper(System.Reflection.Module,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: SignatureHelper.GetPropertySigHelper(Module, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPropertySigHelper
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 163
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a signature helper for a property, given the dynamic module that contains the property, the property type, the property arguments, and custom modifiers for the return type and arguments.</p>\n"
  syntax:
    content: public static SignatureHelper GetPropertySigHelper(Module mod, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
    content.vb: Public Shared Function GetPropertySigHelper(mod As  Module, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As SignatureHelper
    parameters:
    - id: mod
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref> that contains the property for which the <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> is requested.</p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The property type.</p>\n"
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the return type has no required custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the return type has no optional custom modifiers, specify <strong>null</strong>.</p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the property's arguments, or <strong>null</strong> if the property has no arguments.</p>\n"
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding argument of the property. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding argument of the property. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If the property has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    return:
      type: System.Reflection.Emit.SignatureHelper
      description: "\n<p>A <xref href=\"System.Reflection.Emit.SignatureHelper\" data-throw-if-not-resolved=\"false\"></xref> object for a property.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>mod</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>An element of <em>parameterTypes</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is <strong>null</strong>. (However, <strong>null</strong> can be specified for the array of custom modifiers for any argument.)</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The signature has already been finished. </p>\n<p>-or-</p>\n<p>\n<em>mod</em> is not a <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an array type.</p>\n<p>-or-</p>\n<p>One of the specified custom modifiers is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> for the custom modifier.</p>\n<p>-or-</p>\n<p>The size of <em>requiredParameterTypeCustomModifiers</em> or <em>optionalParameterTypeCustomModifiers</em> does not equal the size of <em>parameterTypes</em>.</p>\n"
  nameWithType.vb: SignatureHelper.GetPropertySigHelper(Module, Type, Type(), Type(), Type(), Type()(), Type()())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.Emit.SignatureHelper.GetPropertySigHelper(System.Reflection.Module, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: GetPropertySigHelper(Module, Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.SignatureHelper.GetSignature
  commentId: M:System.Reflection.Emit.SignatureHelper.GetSignature
  id: GetSignature
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: GetSignature()
  nameWithType: SignatureHelper.GetSignature()
  fullName: System.Reflection.Emit.SignatureHelper.GetSignature()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSignature
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 914
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Adds the end token to the signature and marks the signature as finished, so no further tokens can be added.</p>\n"
  syntax:
    content: public byte[] GetSignature()
    content.vb: Public Function GetSignature As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>Returns a byte array made up of the full signature.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.SignatureHelper.ToString
  commentId: M:System.Reflection.Emit.SignatureHelper.ToString
  id: ToString
  parent: System.Reflection.Emit.SignatureHelper
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SignatureHelper.ToString()
  fullName: System.Reflection.Emit.SignatureHelper.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Reflection/Emit/SignatureHelper.cs
    startLine: 944
  assemblies:
  - System.Reflection.Emit.ILGeneration
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a string representing the signature arguments.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>Returns a string representing the arguments of this signature.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type[][]
  name: Type[][]
  nameWithType: Type[][]
  fullName: System.Type[][]
  nameWithType.vb: Type()()
  fullname.vb: System.Type()()
  name.vb: Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Reflection.Emit.SignatureHelper
  commentId: T:System.Reflection.Emit.SignatureHelper
  parent: System.Reflection.Emit
  isExternal: false
  name: SignatureHelper
  nameWithType: SignatureHelper
  fullName: System.Reflection.Emit.SignatureHelper
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.CallingConventions
  commentId: T:System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
