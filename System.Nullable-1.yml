### YamlMime:ManagedReference
items:
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  id: Nullable`1
  parent: System
  children:
  - System.Nullable`1.#ctor(`0)
  - System.Nullable`1.Equals(System.Object)
  - System.Nullable`1.GetHashCode
  - System.Nullable`1.GetValueOrDefault
  - System.Nullable`1.GetValueOrDefault(`0)
  - System.Nullable`1.HasValue
  - System.Nullable`1.op_Explicit(System.Nullable{`0})~`0
  - System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}
  - System.Nullable`1.ToString
  - System.Nullable`1.Value
  langs:
  - csharp
  - vb
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Nullable
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 23
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a value type that can be assigned <strong>null</strong>.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [NonVersionable]

      public struct Nullable<T>
          where T : struct
    content.vb: >-
      <Serializable>

      <NonVersionable>

      Public Structure Nullable(Of T As Structure)
    typeParameters:
    - id: T
      description: "\n<p>The underlying value type of the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> generic type.</p>\n"
  seealso:
  - linkId: System.Nullable
    commentId: T:System.Nullable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  nameWithType.vb: Nullable(Of T)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
- uid: System.Nullable`1.#ctor(`0)
  commentId: M:System.Nullable`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Nullable(T)
  nameWithType: Nullable<T>.Nullable(T)
  fullName: System.Nullable<T>.Nullable(T)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure to the specified value. </p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public Nullable(T value)
    content.vb: >-
      <NonVersionable>

      Public Sub New(value As T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>A value type.</p>\n"
  nameWithType.vb: Nullable(Of T).Nullable(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Nullable(Of T).Nullable(T)
- uid: System.Nullable`1.HasValue
  commentId: P:System.Nullable`1.HasValue
  id: HasValue
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: Nullable<T>.HasValue
  fullName: System.Nullable<T>.HasValue
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: HasValue
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 36
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object has a valid value of its underlying type. </p>\n"
  syntax:
    content: >-
      public bool HasValue

      {
          [NonVersionable]
          get;
      }
    content.vb: Public ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object has a value; <strong>false</strong> if the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object has no value.</p>\n"
  nameWithType.vb: Nullable(Of T).HasValue
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Nullable(Of T).HasValue
- uid: System.Nullable`1.Value
  commentId: P:System.Nullable`1.Value
  id: Value
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Nullable<T>.Value
  fullName: System.Nullable<T>.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 43
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if it has been assigned a valid underlying value.</p>\n"
  syntax:
    content: public T Value { get; }
    content.vb: Public ReadOnly Property Value As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>. An exception is thrown if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  nameWithType.vb: Nullable(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Nullable(Of T).Value
- uid: System.Nullable`1.Equals(System.Object)
  commentId: M:System.Nullable`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Nullable<T>.Equals(Object)
  fullName: System.Nullable<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 62
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object other)
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>An object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>other</em> parameter is equal to the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object; otherwise, <strong>false</strong>. </p>\n<p>This table describes how equality is defined for the compared values: </p>\n<p>Return Value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>\n<strong>true</strong>\n</p>\n</td><td>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>, and the <em>other</em> parameter is <strong>null</strong>. That is, two null values are equal by definition.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, and the value returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is equal to the <em>other</em> parameter.</p>\n</td></tr><tr><td>\n<p>\n<strong>false</strong>\n</p>\n</td><td>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property for the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>true</strong>, and the <em>other</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property for the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>false</strong>, and the <em>other</em> parameter is not <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property for the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> structure is <strong>true</strong>, and the value returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is not equal to the <em>other</em> parameter.</p>\n</td></tr></tbody></table>\n"
  overridden: System.ValueType.Equals(System.Object)
  nameWithType.vb: Nullable(Of T).Equals(Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Nullable(Of T).Equals(System.Object)
- uid: System.Nullable`1.GetHashCode
  commentId: M:System.Nullable`1.GetHashCode
  id: GetHashCode
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Nullable<T>.GetHashCode()
  fullName: System.Nullable<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 68
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the hash code of the object returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code of the object returned by the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, or zero if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>. </p>\n"
  overridden: System.ValueType.GetHashCode
  nameWithType.vb: Nullable(Of T).GetHashCode()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Nullable(Of T).GetHashCode()
- uid: System.Nullable`1.GetValueOrDefault
  commentId: M:System.Nullable`1.GetValueOrDefault
  id: GetValueOrDefault
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: GetValueOrDefault()
  nameWithType: Nullable<T>.GetValueOrDefault()
  fullName: System.Nullable<T>.GetValueOrDefault()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValueOrDefault
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 52
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, or the object's default value.</p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public T GetValueOrDefault()
    content.vb: >-
      <NonVersionable>

      Public Function GetValueOrDefault As T
    return:
      type: '{T}'
      description: "\n<p>The value of the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property if the  <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>; otherwise, the default value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object. The type of the default value is the type argument of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, and the value of the default value consists solely of binary zeroes.</p>\n"
  seealso:
  - linkId: System.Nullable`1.GetValueOrDefault(`0)
    commentId: M:System.Nullable`1.GetValueOrDefault(`0)
  nameWithType.vb: Nullable(Of T).GetValueOrDefault()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Nullable(Of T).GetValueOrDefault()
- uid: System.Nullable`1.GetValueOrDefault(`0)
  commentId: M:System.Nullable`1.GetValueOrDefault(`0)
  id: GetValueOrDefault(`0)
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: GetValueOrDefault(T)
  nameWithType: Nullable<T>.GetValueOrDefault(T)
  fullName: System.Nullable<T>.GetValueOrDefault(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValueOrDefault
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 57
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object, or the specified default value.</p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public T GetValueOrDefault(T defaultValue)
    content.vb: >-
      <NonVersionable>

      Public Function GetValueOrDefault(defaultValue As T) As T
    parameters:
    - id: defaultValue
      type: '{T}'
      description: "\n<p>A value to return if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value of the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>; otherwise, the <em>defaultValue</em> parameter.</p>\n"
  seealso:
  - linkId: System.Nullable`1.GetValueOrDefault
    commentId: M:System.Nullable`1.GetValueOrDefault
  nameWithType.vb: Nullable(Of T).GetValueOrDefault(T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Nullable(Of T).GetValueOrDefault(T)
- uid: System.Nullable`1.op_Explicit(System.Nullable{`0})~`0
  commentId: M:System.Nullable`1.op_Explicit(System.Nullable{`0})~`0
  id: op_Explicit(System.Nullable{`0})~`0
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Explicit(Nullable<T> to T)
  nameWithType: Nullable<T>.Explicit(Nullable<T> to T)
  fullName: System.Nullable<T>.Explicit(System.Nullable<T> to T)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 81
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Defines an explicit conversion of a <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> instance to its underlying value. </p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public static explicit operator T(Nullable<T> value)
    content.vb: >-
      <NonVersionable>

      Public Shared Narrowing Operator CType(value As Nullable(Of T)) As T
    parameters:
    - id: value
      type: System.Nullable`1
      description: "\n<p>A nullable value.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value of the <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for the <em>value</em> parameter.</p>\n"
  nameWithType.vb: Nullable(Of T).Narrowing(Nullable(Of T) to T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Nullable(Of T).Narrowing(System.Nullable(Of T) to T)
  name.vb: Narrowing(Nullable(Of T) to T)
- uid: System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}
  commentId: M:System.Nullable`1.op_Implicit(`0)~System.Nullable{`0}
  id: op_Implicit(`0)~System.Nullable{`0}
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: Implicit(T to Nullable<T>)
  nameWithType: Nullable<T>.Implicit(T to Nullable<T>)
  fullName: System.Nullable<T>.Implicit(T to System.Nullable<T>)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Implicit
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 76
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a new <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object initialized to a specified value. </p>\n"
  syntax:
    content: >-
      [NonVersionable]

      public static implicit operator Nullable<T>(T value)
    content.vb: >-
      <NonVersionable>

      Public Shared Widening Operator CType(value As T) As Nullable(Of T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>A value type.</p>\n"
    return:
      type: System.Nullable`1
      description: "\n<p>A <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object whose <xref href=\"System.Nullable`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is initialized with the <em>value</em> parameter.</p>\n"
  nameWithType.vb: Nullable(Of T).Widening(T to Nullable(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Nullable(Of T).Widening(T to System.Nullable(Of T))
  name.vb: Widening(T to Nullable(Of T))
- uid: System.Nullable`1.ToString
  commentId: M:System.Nullable`1.ToString
  id: ToString
  parent: System.Nullable`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Nullable<T>.ToString()
  fullName: System.Nullable<T>.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Nullable.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Nullable.cs
    startLine: 72
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the text representation of the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The text representation of the value of the current <xref href=\"System.Nullable`1\" data-throw-if-not-resolved=\"false\"></xref> object if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong>, or an empty string (\"\") if the <xref href=\"System.Nullable`1.HasValue\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n"
  overridden: System.ValueType.ToString
  nameWithType.vb: Nullable(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Nullable(Of T).ToString()
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
