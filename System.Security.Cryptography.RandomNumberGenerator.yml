items:
- uid: System.Security.Cryptography.RandomNumberGenerator
  commentId: T:System.Security.Cryptography.RandomNumberGenerator
  id: RandomNumberGenerator
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.RandomNumberGenerator.#ctor
  - System.Security.Cryptography.RandomNumberGenerator.Create
  - System.Security.Cryptography.RandomNumberGenerator.Dispose
  - System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  - System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  langs:
  - csharp
  - vb
  name: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RandomNumberGenerator
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 183
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the abstract class from which all implementations of cryptographic random number generators derive.</p>\n"
  syntax:
    content: 'public abstract class RandomNumberGenerator : IDisposable'
    content.vb: >-
      Public MustInherit Class RandomNumberGenerator
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: RandomNumberGenerator
- uid: System.Security.Cryptography.RandomNumberGenerator.#ctor
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: RandomNumberGenerator()
  fullName: System.Security.Cryptography.RandomNumberGenerator.RandomNumberGenerator()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 185
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected RandomNumberGenerator()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: RandomNumberGenerator.RandomNumberGenerator()
- uid: System.Security.Cryptography.RandomNumberGenerator.Create
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Create
  id: Create
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: Create()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Create()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 186
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, creates an instance of the default implementation of a cryptographic random number generator that can be used to generate random data.</p>\n"
  syntax:
    content: public static RandomNumberGenerator Create()
    content.vb: Public Shared Function Create As RandomNumberGenerator
    return:
      type: System.Security.Cryptography.RandomNumberGenerator
      description: "\n<p>A new instance of a cryptographic random number generator.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: RandomNumberGenerator.Create()
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose
  id: Dispose
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 187
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: RandomNumberGenerator.Dispose()
- uid: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 188
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.RandomNumberGenerator\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: RandomNumberGenerator.Dispose(Boolean)
- uid: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  commentId: M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  id: GetBytes(System.Byte[])
  parent: System.Security.Cryptography.RandomNumberGenerator
  langs:
  - csharp
  - vb
  name: GetBytes(Byte[])
  fullName: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 189
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, fills an array of bytes with a cryptographically strong random sequence of values.</p>\n"
  syntax:
    content: public abstract void GetBytes(byte[] data)
    content.vb: Public MustOverride Sub GetBytes(data As Byte())
    parameters:
    - id: data
      type: System.Byte[]
      description: "\n<p>The array to fill with cryptographically strong random bytes. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte())
  name.vb: GetBytes(Byte())
  nameWithType: RandomNumberGenerator.GetBytes(Byte[])
  nameWithType.vb: RandomNumberGenerator.GetBytes(Byte())
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
  nameWithType: System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  commentId: T:System.IDisposable
  nameWithType: IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Security.Cryptography.RandomNumberGenerator
  parent: System.Security.Cryptography
  isExternal: false
  name: RandomNumberGenerator
  fullName: System.Security.Cryptography.RandomNumberGenerator
  commentId: T:System.Security.Cryptography.RandomNumberGenerator
  nameWithType: RandomNumberGenerator
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.IDisposable.Dispose
  nameWithType: IDisposable.Dispose()
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
