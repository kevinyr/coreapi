### YamlMime:ManagedReference
items:
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  id: MethodBase
  parent: System.Reflection
  children:
  - System.Reflection.MethodBase.Attributes
  - System.Reflection.MethodBase.CallingConvention
  - System.Reflection.MethodBase.ContainsGenericParameters
  - System.Reflection.MethodBase.Equals(System.Object)
  - System.Reflection.MethodBase.GetGenericArguments
  - System.Reflection.MethodBase.GetHashCode
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  - System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.MethodBase.GetMethodImplementationFlags
  - System.Reflection.MethodBase.GetParameters
  - System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  - System.Reflection.MethodBase.IsAbstract
  - System.Reflection.MethodBase.IsAssembly
  - System.Reflection.MethodBase.IsConstructor
  - System.Reflection.MethodBase.IsFamily
  - System.Reflection.MethodBase.IsFamilyAndAssembly
  - System.Reflection.MethodBase.IsFamilyOrAssembly
  - System.Reflection.MethodBase.IsFinal
  - System.Reflection.MethodBase.IsGenericMethod
  - System.Reflection.MethodBase.IsGenericMethodDefinition
  - System.Reflection.MethodBase.IsHideBySig
  - System.Reflection.MethodBase.IsPrivate
  - System.Reflection.MethodBase.IsPublic
  - System.Reflection.MethodBase.IsSpecialName
  - System.Reflection.MethodBase.IsStatic
  - System.Reflection.MethodBase.IsVirtual
  - System.Reflection.MethodBase.MethodImplementationFlags
  langs:
  - csharp
  - vb
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MethodBase
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 49
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Provides information about methods and constructors. </p>\n"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_MethodBase))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class MethodBase : MemberInfo, ICustomAttributeProvider, _MemberInfo, _MethodBase
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_MethodBase))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class MethodBase
          Inherits MemberInfo
          Implements ICustomAttributeProvider, _MemberInfo, _MethodBase
  see:
  - linkId: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Reflection.ICustomAttributeProvider
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.MemberType
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.MethodBase.Attributes
  commentId: P:System.Reflection.MethodBase.Attributes
  id: Attributes
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: MethodBase.Attributes
  fullName: System.Reflection.MethodBase.Attributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Attributes
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 174
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the attributes associated with this method.</p>\n"
  syntax:
    content: public abstract MethodAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As MethodAttributes
    parameters: []
    return:
      type: System.Reflection.MethodAttributes
      description: "\n<p>One of the <xref href=\"System.Reflection.MethodAttributes\" data-throw-if-not-resolved=\"false\"></xref> values.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MethodBase.CallingConvention
  commentId: P:System.Reflection.MethodBase.CallingConvention
  id: CallingConvention
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: CallingConvention
  nameWithType: MethodBase.CallingConvention
  fullName: System.Reflection.MethodBase.CallingConvention
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CallingConvention
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 178
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating the calling conventions for this method.</p>\n"
  syntax:
    content: public virtual CallingConventions CallingConvention { get; }
    content.vb: Public Overridable ReadOnly Property CallingConvention As CallingConventions
    parameters: []
    return:
      type: System.Reflection.CallingConventions
      description: "\n<p>The <xref href=\"System.Reflection.CallingConventions\" data-throw-if-not-resolved=\"false\"></xref> for this method.</p>\n"
  seealso:
  - linkId: System.Reflection.CallingConventions
    commentId: T:System.Reflection.CallingConventions
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MethodBase.ContainsGenericParameters
  commentId: P:System.Reflection.MethodBase.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  nameWithType: MethodBase.ContainsGenericParameters
  fullName: System.Reflection.MethodBase.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContainsGenericParameters
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 185
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the generic method contains unassigned generic type parameters.</p>\n"
  syntax:
    content: public virtual bool ContainsGenericParameters { get; }
    content.vb: Public Overridable ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Reflection.MethodBase\" data-throw-if-not-resolved=\"false\"></xref> object represents a generic method that contains unassigned generic type parameters; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodBase.IsGenericMethod
    commentId: P:System.Reflection.MethodBase.IsGenericMethod
  - linkId: System.Reflection.MethodBase.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition
  - linkId: System.Reflection.MethodInfo.ContainsGenericParameters
    commentId: P:System.Reflection.MethodInfo.ContainsGenericParameters
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MethodBase.IsAbstract
  commentId: P:System.Reflection.MethodBase.IsAbstract
  id: IsAbstract
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsAbstract
  nameWithType: MethodBase.IsAbstract
  fullName: System.Reflection.MethodBase.IsAbstract
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAbstract
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 231
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the method is abstract.</p>\n"
  syntax:
    content: public bool IsAbstract { get; }
    content.vb: Public ReadOnly Property IsAbstract As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the method is abstract; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  - linkId: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsAssembly
  commentId: P:System.Reflection.MethodBase.IsAssembly
  id: IsAssembly
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsAssembly
  nameWithType: MethodBase.IsAssembly
  fullName: System.Reflection.MethodBase.IsAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAssembly
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 217
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref>; that is, the method or constructor is visible at most to other types in the same assembly, and is not visible to derived types outside the assembly.</p>\n"
  syntax:
    content: public bool IsAssembly { get; }
    content.vb: Public ReadOnly Property IsAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the visibility of this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Assembly\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  - linkId: System.Reflection.MethodBase.IsFamily
    commentId: P:System.Reflection.MethodBase.IsFamily
  - linkId: System.Reflection.MethodBase.IsFamilyOrAssembly
    commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly
  - linkId: System.Reflection.MethodBase.IsFamilyAndAssembly
    commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsConstructor
  commentId: P:System.Reflection.MethodBase.IsConstructor
  id: IsConstructor
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsConstructor
  nameWithType: MethodBase.IsConstructor
  fullName: System.Reflection.MethodBase.IsConstructor
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsConstructor
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 235
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the method is a constructor.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public bool IsConstructor { get; }
    content.vb: >-
      <ComVisible(True)>

      Public ReadOnly Property IsConstructor As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this method is a constructor represented by a <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref> object (see note in Remarks about <xref href=\"System.Reflection.Emit.ConstructorBuilder\" data-throw-if-not-resolved=\"false\"></xref> objects); otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsFamily
  commentId: P:System.Reflection.MethodBase.IsFamily
  id: IsFamily
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsFamily
  nameWithType: MethodBase.IsFamily
  fullName: System.Reflection.MethodBase.IsFamily
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamily
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 215
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref>; that is, the method or constructor is visible only within its class and derived classes.</p>\n"
  syntax:
    content: public bool IsFamily { get; }
    content.vb: Public ReadOnly Property IsFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.Family\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  - linkId: System.Reflection.MethodBase.IsAssembly
    commentId: P:System.Reflection.MethodBase.IsAssembly
  - linkId: System.Reflection.MethodBase.IsFamilyOrAssembly
    commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly
  - linkId: System.Reflection.MethodBase.IsFamilyAndAssembly
    commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsFamilyAndAssembly
  commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly
  id: IsFamilyAndAssembly
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsFamilyAndAssembly
  nameWithType: MethodBase.IsFamilyAndAssembly
  fullName: System.Reflection.MethodBase.IsFamilyAndAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamilyAndAssembly
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 219
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>; that is, the method or constructor can be called by derived classes, but only if they are in the same assembly.</p>\n"
  syntax:
    content: public bool IsFamilyAndAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyAndAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamANDAssem\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  - linkId: System.Reflection.MethodBase.IsAssembly
    commentId: P:System.Reflection.MethodBase.IsAssembly
  - linkId: System.Reflection.MethodBase.IsFamilyOrAssembly
    commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly
  - linkId: System.Reflection.MethodBase.IsFamily
    commentId: P:System.Reflection.MethodBase.IsFamily
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsFamilyOrAssembly
  commentId: P:System.Reflection.MethodBase.IsFamilyOrAssembly
  id: IsFamilyOrAssembly
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsFamilyOrAssembly
  nameWithType: MethodBase.IsFamilyOrAssembly
  fullName: System.Reflection.MethodBase.IsFamilyOrAssembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFamilyOrAssembly
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 221
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the potential visibility of this method or constructor is described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref>; that is, the method or constructor can be called by derived classes wherever they are, and by classes in the same assembly.</p>\n"
  syntax:
    content: public bool IsFamilyOrAssembly { get; }
    content.vb: Public ReadOnly Property IsFamilyOrAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this method or constructor is exactly described by <xref href=\"System.Reflection.MethodAttributes.FamORAssem\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  - linkId: System.Reflection.MethodBase.IsAssembly
    commentId: P:System.Reflection.MethodBase.IsAssembly
  - linkId: System.Reflection.MethodBase.IsFamily
    commentId: P:System.Reflection.MethodBase.IsFamily
  - linkId: System.Reflection.MethodBase.IsFamilyAndAssembly
    commentId: P:System.Reflection.MethodBase.IsFamilyAndAssembly
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsFinal
  commentId: P:System.Reflection.MethodBase.IsFinal
  id: IsFinal
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsFinal
  nameWithType: MethodBase.IsFinal
  fullName: System.Reflection.MethodBase.IsFinal
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFinal
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 225
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this method is <strong>final</strong>.</p>\n"
  syntax:
    content: public bool IsFinal { get; }
    content.vb: Public ReadOnly Property IsFinal As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this method is <strong>final</strong>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsGenericMethod
  commentId: P:System.Reflection.MethodBase.IsGenericMethod
  id: IsGenericMethod
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsGenericMethod
  nameWithType: MethodBase.IsGenericMethod
  fullName: System.Reflection.MethodBase.IsGenericMethod
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsGenericMethod
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 187
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the method is generic.</p>\n"
  syntax:
    content: public virtual bool IsGenericMethod { get; }
    content.vb: Public Overridable ReadOnly Property IsGenericMethod As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Reflection.MethodBase\" data-throw-if-not-resolved=\"false\"></xref> represents a generic method; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodBase.ContainsGenericParameters
    commentId: P:System.Reflection.MethodBase.ContainsGenericParameters
  - linkId: System.Reflection.MethodBase.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition
  - linkId: System.Reflection.MethodInfo.IsGenericMethod
    commentId: P:System.Reflection.MethodInfo.IsGenericMethod
  - linkId: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MethodBase.IsGenericMethodDefinition
  commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition
  id: IsGenericMethodDefinition
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsGenericMethodDefinition
  nameWithType: MethodBase.IsGenericMethodDefinition
  fullName: System.Reflection.MethodBase.IsGenericMethodDefinition
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsGenericMethodDefinition
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 183
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the method is a generic method definition.</p>\n"
  syntax:
    content: public virtual bool IsGenericMethodDefinition { get; }
    content.vb: Public Overridable ReadOnly Property IsGenericMethodDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Reflection.MethodBase\" data-throw-if-not-resolved=\"false\"></xref> object represents the definition of a generic method; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodInfo.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodInfo.IsGenericMethodDefinition
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MethodBase.IsHideBySig
  commentId: P:System.Reflection.MethodBase.IsHideBySig
  id: IsHideBySig
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsHideBySig
  nameWithType: MethodBase.IsHideBySig
  fullName: System.Reflection.MethodBase.IsHideBySig
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsHideBySig
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 229
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether only a member of the same kind with exactly the same signature is hidden in the derived class.</p>\n"
  syntax:
    content: public bool IsHideBySig { get; }
    content.vb: Public ReadOnly Property IsHideBySig As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the member is hidden by signature; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsPrivate
  commentId: P:System.Reflection.MethodBase.IsPrivate
  id: IsPrivate
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsPrivate
  nameWithType: MethodBase.IsPrivate
  fullName: System.Reflection.MethodBase.IsPrivate
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPrivate
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 213
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this member is private.</p>\n"
  syntax:
    content: public bool IsPrivate { get; }
    content.vb: Public ReadOnly Property IsPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to this method is restricted to other members of the class itself; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsPublic
  commentId: P:System.Reflection.MethodBase.IsPublic
  id: IsPublic
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsPublic
  nameWithType: MethodBase.IsPublic
  fullName: System.Reflection.MethodBase.IsPublic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsPublic
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 211
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this is a public method.</p>\n"
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this method is public; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  - linkId: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsSpecialName
  commentId: P:System.Reflection.MethodBase.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsSpecialName
  nameWithType: MethodBase.IsSpecialName
  fullName: System.Reflection.MethodBase.IsSpecialName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSpecialName
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 233
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether this method has a special name.</p>\n"
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this method has a special name; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsStatic
  commentId: P:System.Reflection.MethodBase.IsStatic
  id: IsStatic
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsStatic
  nameWithType: MethodBase.IsStatic
  fullName: System.Reflection.MethodBase.IsStatic
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsStatic
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 223
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the method is <strong>static</strong>.</p>\n"
  syntax:
    content: public bool IsStatic { get; }
    content.vb: Public ReadOnly Property IsStatic As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this method is <strong>static</strong>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Boolean
    commentId: T:System.Boolean
  - linkId: System.Reflection.MethodAttributes
    commentId: T:System.Reflection.MethodAttributes
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.IsVirtual
  commentId: P:System.Reflection.MethodBase.IsVirtual
  id: IsVirtual
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: IsVirtual
  nameWithType: MethodBase.IsVirtual
  fullName: System.Reflection.MethodBase.IsVirtual
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsVirtual
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 227
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value indicating whether the method is <strong>virtual</strong>.</p>\n"
  syntax:
    content: public bool IsVirtual { get; }
    content.vb: Public ReadOnly Property IsVirtual As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this method is <strong>virtual</strong>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.MethodBase.MethodImplementationFlags
  commentId: P:System.Reflection.MethodBase.MethodImplementationFlags
  id: MethodImplementationFlags
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: MethodImplementationFlags
  nameWithType: MethodBase.MethodImplementationFlags
  fullName: System.Reflection.MethodBase.MethodImplementationFlags
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MethodImplementationFlags
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 162
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the <xref href=\"System.Reflection.MethodImplAttributes\" data-throw-if-not-resolved=\"false\"></xref> flags that specify the attributes of a method implementation.</p>\n"
  syntax:
    content: public virtual MethodImplAttributes MethodImplementationFlags { get; }
    content.vb: Public Overridable ReadOnly Property MethodImplementationFlags As MethodImplAttributes
    parameters: []
    return:
      type: System.Reflection.MethodImplAttributes
      description: "\n<p>The method implementation flags.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MethodBase.Equals(System.Object)
  commentId: M:System.Reflection.MethodBase.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: MethodBase.Equals(Object)
  fullName: System.Reflection.MethodBase.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 123
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Reflection.MemberInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MethodBase.GetGenericArguments
  commentId: M:System.Reflection.MethodBase.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: GetGenericArguments()
  nameWithType: MethodBase.GetGenericArguments()
  fullName: System.Reflection.MethodBase.GetGenericArguments()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGenericArguments
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 180
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public virtual Type[] GetGenericArguments()
    content.vb: >-
      <ComVisible(True)>

      Public Overridable Function GetGenericArguments As Type()
    return:
      type: System.Type[]
      description: "\n<p>An array of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the type arguments of a generic method or the type parameters of a generic method definition. Returns an empty array if the current method is not a generic method.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current object is a <xref href=\"System.Reflection.ConstructorInfo\" data-throw-if-not-resolved=\"false\"></xref>. Generic constructors are not supported in the .NET Framework version 2.0. This exception is the default behavior if this method is not overridden in a derived class.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodBase.IsGenericMethod
    commentId: P:System.Reflection.MethodBase.IsGenericMethod
  - linkId: System.Reflection.MethodBase.IsGenericMethodDefinition
    commentId: P:System.Reflection.MethodBase.IsGenericMethodDefinition
  - linkId: System.Reflection.MethodInfo.GetGenericArguments
    commentId: M:System.Reflection.MethodInfo.GetGenericArguments
  - linkId: System.Reflection.MethodInfo.IsGenericMethod
    commentId: P:System.Reflection.MethodInfo.IsGenericMethod
  - linkId: System.Type.IsGenericType
    commentId: P:System.Type.IsGenericType
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.MethodBase.GetHashCode
  commentId: M:System.Reflection.MethodBase.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: MethodBase.GetHashCode()
  fullName: System.Reflection.MethodBase.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 128
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Reflection.MemberInfo.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  id: GetMethodFromHandle(System.RuntimeMethodHandle)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: GetMethodFromHandle(RuntimeMethodHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodFromHandle
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets method information by using the method's internal metadata representation (handle).</p>\n"
  syntax:
    content: public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle)
    content.vb: Public Shared Function GetMethodFromHandle(handle As RuntimeMethodHandle) As MethodBase
    parameters:
    - id: handle
      type: System.RuntimeMethodHandle
      description: "\n<p>The method's handle. </p>\n"
    return:
      type: System.Reflection.MethodBase
      description: "\n<p>A <strong>MethodBase</strong> containing information about the method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>handle</em> is invalid.</p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  commentId: M:System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetMethodFromHandle(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  nameWithType: MethodBase.GetMethodFromHandle(RuntimeMethodHandle, RuntimeTypeHandle)
  fullName: System.Reflection.MethodBase.GetMethodFromHandle(System.RuntimeMethodHandle, System.RuntimeTypeHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodFromHandle
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 75
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a <xref href=\"System.Reflection.MethodBase\" data-throw-if-not-resolved=\"false\"></xref> object for the constructor or method represented by the specified handle, for the specified generic type.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public static MethodBase GetMethodFromHandle(RuntimeMethodHandle handle, RuntimeTypeHandle declaringType)
    content.vb: >-
      <ComVisible(False)>

      Public Shared Function GetMethodFromHandle(handle As RuntimeMethodHandle, declaringType As RuntimeTypeHandle) As MethodBase
    parameters:
    - id: handle
      type: System.RuntimeMethodHandle
      description: "\n<p>A handle to the internal metadata representation of a constructor or method.</p>\n"
    - id: declaringType
      type: System.RuntimeTypeHandle
      description: "\n<p>A handle to the generic type that defines the constructor or method.</p>\n"
    return:
      type: System.Reflection.MethodBase
      description: "\n<p>A <xref href=\"System.Reflection.MethodBase\" data-throw-if-not-resolved=\"false\"></xref> object representing the method or constructor specified by <em>handle</em>, in the generic type specified by <em>declaringType</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>handle</em> is invalid.</p>\n"
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.MethodBase.GetParameters
  commentId: M:System.Reflection.MethodBase.GetParameters
  id: GetParameters
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: GetParameters()
  nameWithType: MethodBase.GetParameters()
  fullName: System.Reflection.MethodBase.GetParameters()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetParameters
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 159
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>When overridden in a derived class, gets the parameters of the specified method or constructor.</p>\n"
  syntax:
    content: public abstract ParameterInfo[] GetParameters()
    content.vb: Public MustOverride Function GetParameters As ParameterInfo()
    return:
      type: System.Reflection.ParameterInfo[]
      description: "\n<p>An array of type <strong>ParameterInfo</strong> containing information that matches the signature of the method (or constructor) reflected by this <strong>MethodBase</strong> instance.</p>\n"
  seealso:
  - linkId: System.Reflection.ParameterInfo
    commentId: T:System.Reflection.ParameterInfo
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  commentId: M:System.Reflection.MethodBase.Invoke(System.Object,System.Object[])
  id: Invoke(System.Object,System.Object[])
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: Invoke(Object, Object[])
  nameWithType: MethodBase.Invoke(Object, Object[])
  fullName: System.Reflection.MethodBase.Invoke(System.Object, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invoke
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 198
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Invokes the method or constructor represented by the current instance, using the specified parameters.</p>\n"
  syntax:
    content: >-
      [DebuggerStepThrough]

      [DebuggerHidden]

      public object Invoke(object obj, object[] parameters)
    content.vb: >-
      <DebuggerStepThrough>

      <DebuggerHidden>

      Public Function Invoke(obj As Object, parameters As Object()) As Object
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to invoke the method or constructor. If a method is static, this argument is ignored. If a constructor is static, this argument must be <strong>null</strong> or an instance of the class that defines the constructor.</p>\n"
    - id: parameters
      type: System.Object[]
      description: "\n<p>An argument list for the invoked method or constructor. This is an array of objects with the same number, order, and type as the parameters of the method or constructor to be invoked. If there are no parameters, <em>parameters</em> should be <strong>null</strong>.</p>\n<p>If the method or constructor represented by this instance takes a <strong>ref</strong> parameter (<strong>ByRef</strong> in Visual Basic), no special attribute is required for that parameter in order to invoke the method or constructor using this function. Any object in this array that is not explicitly initialized with a value will contain the default value for that object type. For reference-type elements, this value is <strong>null</strong>. For value-type elements, this value is 0, 0.0, or <strong>false</strong>, depending on the specific element type. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object containing the return value of the invoked method, or <strong>null</strong> in the case of a constructor.</p>\n<p>Elements of the <em>parameters</em> array that represent parameters declared with the <strong>ref</strong> or <strong>out</strong> keyword may also be modified.</p>\n"
  exceptions:
  - type: System.Reflection.TargetException
    commentId: T:System.Reflection.TargetException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> instead.</p>\n<p>The <em>obj</em> parameter is <strong>null</strong> and the method is not static.</p>\n<p>-or- </p>\n<p>The method is not declared or inherited by the class of <em>obj</em>. </p>\n<p>-or-</p>\n<p>A static constructor is invoked, and <em>obj</em> is neither <strong>null</strong> nor an instance of the class that declared the constructor.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The elements of the <em>parameters</em>array do not match the signature of the method or constructor reflected by this instance. </p>\n"
  - type: System.Reflection.TargetInvocationException
    commentId: T:System.Reflection.TargetInvocationException
    description: "\n<p>The invoked method or constructor throws an exception. </p>\n<p>-or-</p>\n<p>The current instance is a <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref> that contains unverifiable code. See the \"Verification\" section in Remarks for <xref href=\"System.Reflection.Emit.DynamicMethod\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Reflection.TargetParameterCountException
    commentId: T:System.Reflection.TargetParameterCountException
    description: "\n<p>The <em>parameters</em> array does not have the correct number of arguments. </p>\n"
  - type: System.MethodAccessException
    commentId: T:System.MethodAccessException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.MemberAccessException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The caller does not have permission to execute the method or constructor that is represented by the current instance. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The type that declares the method is an open generic type. That is, the <xref href=\"System.Type.ContainsGenericParameters\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong> for the declaring type.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The current instance is a <xref href=\"System.Reflection.Emit.MethodBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Reflection.BindingFlags
    commentId: T:System.Reflection.BindingFlags
  - linkId: System.Reflection.Missing
    commentId: T:System.Reflection.Missing
  - linkId: System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
    commentId: M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  nameWithType.vb: MethodBase.Invoke(Object, Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Reflection.MethodBase.Invoke(System.Object, System.Object())
  name.vb: Invoke(Object, Object())
- uid: System.Reflection.MethodBase.GetMethodImplementationFlags
  commentId: M:System.Reflection.MethodBase.GetMethodImplementationFlags
  id: GetMethodImplementationFlags
  parent: System.Reflection.MethodBase
  langs:
  - csharp
  - vb
  name: GetMethodImplementationFlags()
  nameWithType: MethodBase.GetMethodImplementationFlags()
  fullName: System.Reflection.MethodBase.GetMethodImplementationFlags()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MethodBase.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMethodImplementationFlags
    path: src/mscorlib/src/System/Reflection/MethodBase.cs
    startLine: 170
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>When overridden in a derived class, returns the <xref href=\"System.Reflection.MethodImplAttributes\" data-throw-if-not-resolved=\"false\"></xref> flags.</p>\n"
  syntax:
    content: public abstract MethodImplAttributes GetMethodImplementationFlags()
    content.vb: Public MustOverride Function GetMethodImplementationFlags As MethodImplAttributes
    return:
      type: System.Reflection.MethodImplAttributes
      description: "\n<p>The <strong>MethodImplAttributes</strong> flags.</p>\n"
  seealso:
  - linkId: System.Reflection.MethodImplAttributes
    commentId: T:System.Reflection.MethodImplAttributes
  see:
  - linkId: System.Security.Permissions.ReflectionPermission
    commentId: T:System.Security.Permissions.ReflectionPermission
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.MemberInfo.CustomAttributes
  commentId: P:System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  commentId: P:System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.MetadataToken
  commentId: P:System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module
  commentId: P:System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  commentId: P:System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Reflection.MemberInfo.MemberType
  commentId: P:System.Reflection.MemberInfo.MemberType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberType
  nameWithType: MemberInfo.MemberType
  fullName: System.Reflection.MemberInfo.MemberType
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
    name: ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
    name: ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
    name: ICustomAttributeProvider.IsDefined
    nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.IsDefined
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection.MethodAttributes
  commentId: T:System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  commentId: T:System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodImplAttributes
  commentId: T:System.Reflection.MethodImplAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodImplAttributes
  nameWithType: MethodImplAttributes
  fullName: System.Reflection.MethodImplAttributes
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.MemberInfo.GetHashCode
  commentId: M:System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.RuntimeMethodHandle
  commentId: T:System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.RuntimeTypeHandle
  commentId: T:System.RuntimeTypeHandle
  parent: System
  isExternal: false
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.ParameterInfo[]
  name: ParameterInfo[]
  nameWithType: ParameterInfo[]
  fullName: System.Reflection.ParameterInfo[]
  nameWithType.vb: ParameterInfo()
  fullname.vb: System.Reflection.ParameterInfo()
  name.vb: ParameterInfo()
  spec.csharp:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterInfo
    name: ParameterInfo
    nameWithType: ParameterInfo
    fullName: System.Reflection.ParameterInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Reflection.TargetException
  commentId: T:System.Reflection.TargetException
  isExternal: false
  name: TargetException
  nameWithType: TargetException
  fullName: System.Reflection.TargetException
- uid: System.Reflection.TargetInvocationException
  commentId: T:System.Reflection.TargetInvocationException
  isExternal: false
  name: TargetInvocationException
  nameWithType: TargetInvocationException
  fullName: System.Reflection.TargetInvocationException
- uid: System.Reflection.TargetParameterCountException
  commentId: T:System.Reflection.TargetParameterCountException
  isExternal: false
  name: TargetParameterCountException
  nameWithType: TargetParameterCountException
  fullName: System.Reflection.TargetParameterCountException
- uid: System.MethodAccessException
  commentId: T:System.MethodAccessException
  isExternal: false
  name: MethodAccessException
  nameWithType: MethodAccessException
  fullName: System.MethodAccessException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
