items:
- uid: System.Net.Sockets.TcpListener
  commentId: T:System.Net.Sockets.TcpListener
  id: TcpListener
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.TcpListener.AcceptSocketAsync
  - System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  - System.Net.Sockets.TcpListener.Active
  - System.Net.Sockets.TcpListener.ExclusiveAddressUse
  - System.Net.Sockets.TcpListener.LocalEndpoint
  - System.Net.Sockets.TcpListener.Pending
  - System.Net.Sockets.TcpListener.Server
  - System.Net.Sockets.TcpListener.Start
  - System.Net.Sockets.TcpListener.Start(System.Int32)
  - System.Net.Sockets.TcpListener.Stop
  langs:
  - csharp
  - vb
  name: TcpListener
  fullName: System.Net.Sockets.TcpListener
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TcpListener
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 439
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Listens for connections from TCP network clients.</p>\n"
  syntax:
    content: public class TcpListener
    content.vb: Public Class TcpListener
  seealso:
  - type: System.Net.Sockets.TcpClient
    commentId: T:System.Net.Sockets.TcpClient
  see:
  - type: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: TcpListener
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: TcpListener(IPAddress, Int32)
  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPAddress, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 441
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> class that listens for incoming connection attempts on the specified local IP address and port number.</p>\n"
  syntax:
    content: public TcpListener(IPAddress localaddr, int port)
    content.vb: Public Sub New(localaddr As IPAddress, port As Integer)
    parameters:
    - id: localaddr
      type: System.Net.IPAddress
      description: "\n<p>An <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> that represents the local IP address. </p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The port on which to listen for incoming connection attempts. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localaddr</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is not between <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Net.IPAddress
    commentId: T:System.Net.IPAddress
  - type: System.Net.Sockets.TcpListener.Start
    commentId: M:System.Net.Sockets.TcpListener.Start
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.TcpListener(IPAddress, Int32)
- uid: System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: TcpListener(IPEndPoint)
  fullName: System.Net.Sockets.TcpListener.TcpListener(System.Net.IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 442
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> class with the specified local endpoint.</p>\n"
  syntax:
    content: public TcpListener(IPEndPoint localEP)
    content.vb: Public Sub New(localEP As IPEndPoint)
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "\n<p>An <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the local endpoint to which to bind the listener <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localEP</em> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Net.IPEndPoint
    commentId: T:System.Net.IPEndPoint
  - type: System.Net.Sockets.TcpListener.Start
    commentId: M:System.Net.Sockets.TcpListener.Start
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.TcpListener(IPEndPoint)
- uid: System.Net.Sockets.TcpListener.Active
  commentId: P:System.Net.Sockets.TcpListener.Active
  id: Active
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Active
  fullName: System.Net.Sockets.TcpListener.Active
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Active
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 443
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets a value that indicates whether <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> is actively listening for client connections.</p>\n"
  syntax:
    content: protected bool Active { get; }
    content.vb: Protected ReadOnly Property Active As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> is actively listening; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.TcpListener.Start
    commentId: M:System.Net.Sockets.TcpListener.Start
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  nameWithType: TcpListener.Active
- uid: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.TcpListener.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: ExclusiveAddressUse
  fullName: System.Net.Sockets.TcpListener.ExclusiveAddressUse
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveAddressUse
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 444
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> allows only one underlying socket to listen to a specific port.</p>\n"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> allows only one <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> to listen to a specific port; otherwise, <strong>false</strong>. . The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <strong>false</strong> for all other versions.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref> has been started. Call the <xref href=\"System.Net.Sockets.TcpListener.Stop\" data-throw-if-not-resolved=\"false\"></xref> method and then set the <xref href=\"System.Net.Sockets.Socket.ExclusiveAddressUse\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the underlying socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: TcpListener.ExclusiveAddressUse
- uid: System.Net.Sockets.TcpListener.LocalEndpoint
  commentId: P:System.Net.Sockets.TcpListener.LocalEndpoint
  id: LocalEndpoint
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: LocalEndpoint
  fullName: System.Net.Sockets.TcpListener.LocalEndpoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalEndpoint
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 445
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the underlying <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> of the current <xref href=\"System.Net.Sockets.TcpListener\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public EndPoint LocalEndpoint { get; }
    content.vb: Public ReadOnly Property LocalEndpoint As EndPoint
    parameters: []
    return:
      type: System.Net.EndPoint
      description: "\n<p>The <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> to which the <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is bound.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.Listen(System.Int32)
    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)
  - type: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: TcpListener.LocalEndpoint
- uid: System.Net.Sockets.TcpListener.Server
  commentId: P:System.Net.Sockets.TcpListener.Server
  id: Server
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Server
  fullName: System.Net.Sockets.TcpListener.Server
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Server
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 446
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the underlying network <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public Socket Server { get; }
    content.vb: Public ReadOnly Property Server As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  - type: System.Net.Sockets.TcpListener.AcceptSocket
    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket
  - type: System.Net.Sockets.TcpListener.AcceptTcpClient
    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: TcpListener.Server
- uid: System.Net.Sockets.TcpListener.AcceptSocketAsync
  commentId: M:System.Net.Sockets.TcpListener.AcceptSocketAsync
  id: AcceptSocketAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: AcceptSocketAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptSocketAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptSocketAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 447
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Accepts a pending connection request as an asynchronous operation.</p>\n"
  syntax:
    content: public Task<Socket> AcceptSocketAsync()
    content.vb: Public Function AcceptSocketAsync As Task(Of Socket)
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property on the task object returns a <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> used to send and receive data.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The listener has not been started with a call to <xref href=\"System.Net.Sockets.TcpListener.Start\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Net.Sockets.TcpListener.AcceptTcpClient
    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient
  - type: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  - type: System.Net.Sockets.TcpListener.Pending
    commentId: M:System.Net.Sockets.TcpListener.Pending
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.AcceptSocketAsync()
- uid: System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync
  id: AcceptTcpClientAsync
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: AcceptTcpClientAsync()
  fullName: System.Net.Sockets.TcpListener.AcceptTcpClientAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptTcpClientAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 448
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Accepts a pending connection request as an asynchronous operation. </p>\n"
  syntax:
    content: public Task<TcpClient> AcceptTcpClientAsync()
    content.vb: Public Function AcceptTcpClientAsync As Task(Of TcpClient)
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref></p>\n<p>The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property on the task object returns a <xref href=\"System.Net.Sockets.TcpClient\" data-throw-if-not-resolved=\"false\"></xref> used to send and receive data.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The listener has not been started with a call to <xref href=\"System.Net.Sockets.TcpListener.Start\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\n"
  seealso:
  - type: System.Net.Sockets.TcpClient
    commentId: T:System.Net.Sockets.TcpClient
  - type: System.Net.Sockets.TcpListener.AcceptSocket
    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket
  - type: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  - type: System.Net.Sockets.NetworkStream
    commentId: T:System.Net.Sockets.NetworkStream
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.AcceptTcpClientAsync()
- uid: System.Net.Sockets.TcpListener.Pending
  commentId: M:System.Net.Sockets.TcpListener.Pending
  id: Pending
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Pending()
  fullName: System.Net.Sockets.TcpListener.Pending()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Pending
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 449
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Determines if there are pending connection requests.</p>\n"
  syntax:
    content: public bool Pending()
    content.vb: Public Function Pending As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if connections are pending; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The listener has not been started with a call to <xref href=\"System.Net.Sockets.TcpListener.Start\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Net.Sockets.TcpListener.Start
    commentId: M:System.Net.Sockets.TcpListener.Start
  - type: System.Net.Sockets.TcpListener.AcceptSocket
    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket
  - type: System.Net.Sockets.TcpListener.AcceptTcpClient
    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.Pending()
- uid: System.Net.Sockets.TcpListener.Start
  commentId: M:System.Net.Sockets.TcpListener.Start
  id: Start
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Start()
  fullName: System.Net.Sockets.TcpListener.Start()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 450
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Starts listening for incoming connection requests.</p>\n"
  syntax:
    content: public void Start()
    content.vb: Public Sub Start
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.Listen(System.Int32)
    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)
  - type: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - type: System.Net.Sockets.TcpListener.AcceptTcpClient
    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient
  - type: System.Net.Sockets.TcpListener.Stop
    commentId: M:System.Net.Sockets.TcpListener.Stop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.Start()
- uid: System.Net.Sockets.TcpListener.Start(System.Int32)
  commentId: M:System.Net.Sockets.TcpListener.Start(System.Int32)
  id: Start(System.Int32)
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Start(Int32)
  fullName: System.Net.Sockets.TcpListener.Start(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 451
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Starts listening for incoming connection requests with a maximum number of pending connection.</p>\n"
  syntax:
    content: public void Start(int backlog)
    content.vb: Public Sub Start(backlog As Integer)
    parameters:
    - id: backlog
      type: System.Int32
      description: "\n<p>The maximum length of the pending connections queue.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred while accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The<em> backlog</em> parameter is less than zero or exceeds the maximum number of permitted connections.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> is null.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.Listen(System.Int32)
    commentId: M:System.Net.Sockets.Socket.Listen(System.Int32)
  - type: System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
    commentId: M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)
  - type: System.Net.Sockets.TcpListener.AcceptTcpClient
    commentId: M:System.Net.Sockets.TcpListener.AcceptTcpClient
  - type: System.Net.Sockets.TcpListener.AcceptSocket
    commentId: M:System.Net.Sockets.TcpListener.AcceptSocket
  - type: System.Net.Sockets.TcpListener.Stop
    commentId: M:System.Net.Sockets.TcpListener.Stop
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.Start(Int32)
- uid: System.Net.Sockets.TcpListener.Stop
  commentId: M:System.Net.Sockets.TcpListener.Stop
  id: Stop
  parent: System.Net.Sockets.TcpListener
  langs:
  - csharp
  - vb
  name: Stop()
  fullName: System.Net.Sockets.TcpListener.Stop()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Stop
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 452
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Closes the listener.</p>\n"
  syntax:
    content: public void Stop()
    content.vb: Public Sub Stop
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>Use the <xref href=\"System.Net.Sockets.SocketException.ErrorCode\" data-throw-if-not-resolved=\"false\"></xref> property to obtain the specific error code. When you have obtained this code, you can refer to the Windows Sockets version 2 API error code documentation in MSDN for a detailed description of the error. </p>\n"
  seealso:
  - type: System.Net.Sockets.Socket.Close
    commentId: M:System.Net.Sockets.Socket.Close
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: TcpListener.Stop()
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
  commentId: N:System.Net.Sockets
  nameWithType: System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  nameWithType: IPAddress
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
  commentId: N:System.Net
  nameWithType: System.Net
- uid: System.Net.IPEndPoint
  isExternal: false
  name: IPEndPoint
  fullName: System.Net.IPEndPoint
  commentId: T:System.Net.IPEndPoint
  nameWithType: IPEndPoint
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  fullName: System.Net.EndPoint
  commentId: T:System.Net.EndPoint
  nameWithType: EndPoint
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
  commentId: T:System.Net.Sockets.Socket
  nameWithType: Socket
- uid: System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Socket>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.Socket>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.Socket)
  name.vb: Task(Of Socket)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.Socket
    name: Socket
    fullName: System.Net.Sockets.Socket
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.Socket
    name: Socket
    fullName: System.Net.Sockets.Socket
  - name: )
    fullName: )
  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.Socket}
  nameWithType: Task<Socket>
  nameWithType.vb: Task(Of Socket)
- uid: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Threading.Tasks.Task`1
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  nameWithType: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TcpClient>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.TcpClient>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.TcpClient)
  name.vb: Task(Of TcpClient)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    fullName: System.Net.Sockets.TcpClient
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.TcpClient
    name: TcpClient
    fullName: System.Net.Sockets.TcpClient
  - name: )
    fullName: )
  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.TcpClient}
  nameWithType: Task<TcpClient>
  nameWithType.vb: Task(Of TcpClient)
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
  nameWithType: SocketException
  commentId: T:System.Net.Sockets.SocketException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
