### YamlMime:ManagedReference
items:
- uid: System.Data.SqlTypes.SqlDouble
  commentId: T:System.Data.SqlTypes.SqlDouble
  id: SqlDouble
  parent: System.Data.SqlTypes
  children:
  - System.Data.SqlTypes.SqlDouble.#ctor(System.Double)
  - System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)
  - System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.Equals(System.Object)
  - System.Data.SqlTypes.SqlDouble.GetHashCode
  - System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.IsNull
  - System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.MaxValue
  - System.Data.SqlTypes.SqlDouble.MinValue
  - System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.Null
  - System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double
  - System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble
  - System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.Parse(System.String)
  - System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  - System.Data.SqlTypes.SqlDouble.ToSqlBoolean
  - System.Data.SqlTypes.SqlDouble.ToSqlByte
  - System.Data.SqlTypes.SqlDouble.ToSqlDecimal
  - System.Data.SqlTypes.SqlDouble.ToSqlInt16
  - System.Data.SqlTypes.SqlDouble.ToSqlInt32
  - System.Data.SqlTypes.SqlDouble.ToSqlInt64
  - System.Data.SqlTypes.SqlDouble.ToSqlMoney
  - System.Data.SqlTypes.SqlDouble.ToSqlSingle
  - System.Data.SqlTypes.SqlDouble.ToSqlString
  - System.Data.SqlTypes.SqlDouble.ToString
  - System.Data.SqlTypes.SqlDouble.Value
  - System.Data.SqlTypes.SqlDouble.Zero
  langs:
  - csharp
  - vb
  name: SqlDouble
  nameWithType: SqlDouble
  fullName: System.Data.SqlTypes.SqlDouble
  type: Struct
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SqlDouble
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 23
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Represents a floating-point number within the range of -1.79E +308 through 1.79E +308 to be stored in or retrieved from a database.</p>\n"
  syntax:
    content: >-
      [StructLayout(LayoutKind.Sequential)]

      public struct SqlDouble : INullable, IComparable
    content.vb: >-
      <StructLayout(LayoutKind.Sequential)>

      Public Structure SqlDouble
          Implements INullable, IComparable
  implements:
  - System.Data.SqlTypes.INullable
  - System.IComparable
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Data.SqlTypes.SqlDouble.MaxValue
  commentId: F:System.Data.SqlTypes.SqlDouble.MaxValue
  id: MaxValue
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: MaxValue
  nameWithType: SqlDouble.MaxValue
  fullName: System.Data.SqlTypes.SqlDouble.MaxValue
  type: Field
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxValue
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 527
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>A constant representing the maximum value for a <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  syntax:
    content: public static readonly SqlDouble MaxValue
    content.vb: Public Shared ReadOnly MaxValue As SqlDouble
    return:
      type: System.Data.SqlTypes.SqlDouble
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Data.SqlTypes.SqlDouble.MinValue
  commentId: F:System.Data.SqlTypes.SqlDouble.MinValue
  id: MinValue
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: MinValue
  nameWithType: SqlDouble.MinValue
  fullName: System.Data.SqlTypes.SqlDouble.MinValue
  type: Field
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinValue
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 523
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>A constant representing the minimum possible value of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static readonly SqlDouble MinValue
    content.vb: Public Shared ReadOnly MinValue As SqlDouble
    return:
      type: System.Data.SqlTypes.SqlDouble
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Data.SqlTypes.SqlDouble.Null
  commentId: F:System.Data.SqlTypes.SqlDouble.Null
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  nameWithType: SqlDouble.Null
  fullName: System.Data.SqlTypes.SqlDouble.Null
  type: Field
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 515
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Represents a <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref> that can be assigned to this instance of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  syntax:
    content: public static readonly SqlDouble Null
    content.vb: Public Shared ReadOnly Null As SqlDouble
    return:
      type: System.Data.SqlTypes.SqlDouble
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Data.SqlTypes.SqlDouble.Zero
  commentId: F:System.Data.SqlTypes.SqlDouble.Zero
  id: Zero
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Zero
  nameWithType: SqlDouble.Zero
  fullName: System.Data.SqlTypes.SqlDouble.Zero
  type: Field
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zero
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 519
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Represents a zero value that can be assigned to the <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> property of an instance of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  syntax:
    content: public static readonly SqlDouble Zero
    content.vb: Public Shared ReadOnly Zero As SqlDouble
    return:
      type: System.Data.SqlTypes.SqlDouble
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Data.SqlTypes.SqlDouble.#ctor(System.Double)
  commentId: M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)
  id: '#ctor(System.Double)'
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: SqlDouble(Double)
  nameWithType: SqlDouble.SqlDouble(Double)
  fullName: System.Data.SqlTypes.SqlDouble.SqlDouble(System.Double)
  type: Constructor
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 40
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure using the supplied double parameter to set the new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure's <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public SqlDouble(double value)
    content.vb: Public Sub New(value As Double)
    parameters:
    - id: value
      type: System.Double
      description: "\n<p>A double whose value will be used for the new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.IsNull
  commentId: P:System.Data.SqlTypes.SqlDouble.IsNull
  id: IsNull
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: IsNull
  nameWithType: SqlDouble.IsNull
  fullName: System.Data.SqlTypes.SqlDouble.IsNull
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNull
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 55
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Returns a Boolean value that indicates whether this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> instance is null.</p>\n"
  syntax:
    content: public bool IsNull { get; }
    content.vb: Public ReadOnly Property IsNull As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is null. Otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Data.SqlTypes.INullable.IsNull
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlTypes.SqlDouble.Value
  commentId: P:System.Data.SqlTypes.SqlDouble.Value
  id: Value
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: SqlDouble.Value
  fullName: System.Data.SqlTypes.SqlDouble.Value
  type: Property
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 64
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Gets the value of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. This property is read-only.</p>\n"
  syntax:
    content: public double Value { get; }
    content.vb: Public ReadOnly Property Value As Double
    parameters: []
    return:
      type: System.Double
      description: "\n<p>The value of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Add(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Add(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 341
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The addition operator computes the sum of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  syntax:
    content: public static SqlDouble Add(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function Add(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The sum of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)
  id: CompareTo(System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: CompareTo(SqlDouble)
  nameWithType: SqlDouble.CompareTo(SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 469
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> instance to the supplied <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> and returns an indication of their relative values.</p>\n"
  syntax:
    content: public int CompareTo(SqlDouble value)
    content.vb: Public Function CompareTo(value As SqlDouble) As Integer
    parameters:
    - id: value
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to be compared. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed number that indicates the relative values of the instance and the object.</p>\n<p>Return value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance is less than the object. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance is the same as the object. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance is greater than the object </p>\n<p>-or- </p>\n<p>The object is a null reference (<strong>Nothing</strong> in Visual Basic) </p>\n</td></tr></tbody></table>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)
  commentId: M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)
  id: CompareTo(System.Object)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: CompareTo(Object)
  nameWithType: SqlDouble.CompareTo(Object)
  fullName: System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CompareTo
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 458
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> instance to the supplied <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns an indication of their relative values.</p>\n"
  syntax:
    content: public int CompareTo(object value)
    content.vb: Public Function CompareTo(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to compare. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed number that indicates the relative values of the instance and the object.</p>\n<p>Return value </p>\n<p>Condition </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>This instance is less than the object. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>This instance is the same as the object. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>This instance is greater than the object </p>\n<p>-or- </p>\n<p>The object is a null reference (<strong>Nothing </strong>in Visual Basic). </p>\n</td></tr></tbody></table>\n"
  implements:
  - System.IComparable.CompareTo(System.Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Divide(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Divide(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 358
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The division operator divides the first <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operand by the second.</p>\n"
  syntax:
    content: public static SqlDouble Divide(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function Divide(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the results of the division operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Equals(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Equals(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 364
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Performs a logical comparison on two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether they are equal.</p>\n"
  syntax:
    content: public static SqlBoolean Equals(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function Equals(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.Equals(System.Object)
  commentId: M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: SqlDouble.Equals(Object)
  fullName: System.Data.SqlTypes.SqlDouble.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 487
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares the supplied object parameter to the <xref href=\"System.Data.SqlTypes.SqlDateTime.Value\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to be compared. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlTypes.SqlDouble.GetHashCode
  commentId: M:System.Data.SqlTypes.SqlDouble.GetHashCode
  id: GetHashCode
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SqlDouble.GetHashCode()
  fullName: System.Data.SqlTypes.SqlDouble.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 506
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Returns the hash code for this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structre.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: GreaterThan(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.GreaterThan(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 382
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is greater than the second.</p>\n"
  syntax:
    content: public static SqlBoolean GreaterThan(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function GreaterThan(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.GreaterThanOrEqual(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 394
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is greater than or equal to the second.</p>\n"
  syntax:
    content: public static SqlBoolean GreaterThanOrEqual(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function GreaterThanOrEqual(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: LessThan(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.LessThan(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 376
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is less than the second.</p>\n"
  syntax:
    content: public static SqlBoolean LessThan(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function LessThan(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.LessThanOrEqual(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 388
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is less than or equal to the second.</p>\n"
  syntax:
    content: public static SqlBoolean LessThanOrEqual(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function LessThanOrEqual(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Multiply(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Multiply(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 352
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The multiplication operator computes the product of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  syntax:
    content: public static SqlDouble Multiply(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function Multiply(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The product of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: NotEquals(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.NotEquals(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEquals
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 370
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether they are notequal.</p>\n"
  syntax:
    content: public static SqlBoolean NotEquals(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function NotEquals(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the two instances are not equal or <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref> if the two instances are equal. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Addition(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Addition(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Addition(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Addition
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 129
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The addition operator computes the sum of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  syntax:
    content: public static SqlDouble operator +(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator +(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The sum of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Division(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Division(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Division(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Division
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 177
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The division operator divides the first <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operand by the second.</p>\n"
  syntax:
    content: public static SqlDouble operator /(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator /(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the results of the division operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Equality(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Equality(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Equality(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 291
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Performs a logical comparison on two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether they are equal.</p>\n"
  syntax:
    content: public static SqlBoolean operator ==(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator =(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>\n<strong>true</strong> if the two values are equal. Otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble
  id: op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Explicit(SqlBoolean to SqlDouble)
  nameWithType: SqlDouble.Explicit(SqlBoolean to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Explicit(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 201
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static explicit operator SqlDouble(SqlBoolean x)
    content.vb: Public Shared Narrowing Operator CType(x As SqlBoolean) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>The <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> to be converted. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is either 0 or 1, depending on the <xref href=\"System.Data.SqlTypes.SqlBoolean.ByteValue\" data-throw-if-not-resolved=\"false\"></xref> property of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Narrowing(SqlBoolean to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Narrowing(System.Data.SqlTypes.SqlBoolean to System.Data.SqlTypes.SqlDouble)
  name.vb: Narrowing(SqlBoolean to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double
  id: op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Explicit(SqlDouble to Double)
  nameWithType: SqlDouble.Explicit(SqlDouble to Double)
  fullName: System.Data.SqlTypes.SqlDouble.Explicit(System.Data.SqlTypes.SqlDouble to System.Double)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 88
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to double.</p>\n"
  syntax:
    content: public static explicit operator double (SqlDouble x)
    content.vb: Public Shared Narrowing Operator CType(x As SqlDouble) As Double
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Double
      description: "\n<p>A double equivalent to the specified <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure's value.</p>\n"
  nameWithType.vb: SqlDouble.Narrowing(SqlDouble to Double)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Narrowing(System.Data.SqlTypes.SqlDouble to System.Double)
  name.vb: Narrowing(SqlDouble to Double)
- uid: System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble
  id: op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Explicit(SqlString to SqlDouble)
  nameWithType: SqlDouble.Explicit(SqlString to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Explicit(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Explicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 279
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static explicit operator SqlDouble(SqlString x)
    content.vb: Public Shared Narrowing Operator CType(x As SqlString) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlString
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the value of the number represented by the <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref>. If the <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlString.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Narrowing(SqlString to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Narrowing(System.Data.SqlTypes.SqlString to System.Data.SqlTypes.SqlDouble)
  name.vb: Narrowing(SqlString to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: GreaterThan(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.GreaterThan(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThan
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 315
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is greater than the second.</p>\n"
  syntax:
    content: public static SqlBoolean operator>(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator>(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is greater than the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.GreaterThanOrEqual(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_GreaterThanOrEqual
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 331
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is greater than or equal to the second.</p>\n"
  syntax:
    content: public static SqlBoolean operator >=(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator >=(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is greater than or equal to the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlByte to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlByte to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 210
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlByte\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlByte x)
    content.vb: Public Shared Widening Operator CType(x As SqlByte) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlByte
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlByte.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlByte\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlByte\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlByte.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlByte to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlByte to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlByte to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlDecimal to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlDecimal to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 264
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlDecimal\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlDecimal x)
    content.vb: Public Shared Widening Operator CType(x As SqlDecimal) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDecimal
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDecimal\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlDecimal.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlDecimal\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlDecimal\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlDecimal.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlDecimal to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlDecimal to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlDecimal to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlInt16 to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlInt16 to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 219
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlInt16 x)
    content.vb: Public Shared Widening Operator CType(x As SqlInt16) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlInt16
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlInt16.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlInt16.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlInt16 to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlInt16 to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlInt16 to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlInt32 to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlInt32 to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 228
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlInt32 x)
    content.vb: Public Shared Widening Operator CType(x As SqlInt32) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlInt32
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlInt32.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlInt32.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlInt32 to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlInt32 to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlInt32 to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlInt64 to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlInt64 to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 237
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlInt64 x)
    content.vb: Public Shared Widening Operator CType(x As SqlInt64) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlInt64
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlInt64.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlInt64.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlInt64 to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlInt64 to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlInt64 to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlMoney to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlMoney to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 255
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlMoney\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlMoney x)
    content.vb: Public Shared Widening Operator CType(x As SqlMoney) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlMoney
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlMoney\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlMoney.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlMoney\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlMoney\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlMoney.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlMoney to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlMoney to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlMoney to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(SqlSingle to SqlDouble)
  nameWithType: SqlDouble.Implicit(SqlSingle to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 246
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied <xref href=\"System.Data.SqlTypes.SqlSingle\" data-throw-if-not-resolved=\"false\"></xref> parameter to <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(SqlSingle x)
    content.vb: Public Shared Widening Operator CType(x As SqlSingle) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlSingle
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlSingle\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure whose <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlSingle.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlSingle\" data-throw-if-not-resolved=\"false\"></xref> parameter. If the <xref href=\"System.Data.SqlTypes.SqlSingle\" data-throw-if-not-resolved=\"false\"></xref> is <xref href=\"System.Data.SqlTypes.SqlSingle.Null\" data-throw-if-not-resolved=\"false\"></xref>, the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure will be <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: SqlDouble.Widening(SqlSingle to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Data.SqlTypes.SqlSingle to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(SqlSingle to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble
  id: op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Implicit(Double to SqlDouble)
  nameWithType: SqlDouble.Implicit(Double to SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Implicit(System.Double to System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 79
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the supplied double value to a <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static implicit operator SqlDouble(double x)
    content.vb: Public Shared Widening Operator CType(x As Double) As SqlDouble
    parameters:
    - id: x
      type: System.Double
      description: "\n<p>The double value to convert. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> with the same value as the specified double parameter.</p>\n"
  nameWithType.vb: SqlDouble.Widening(Double to SqlDouble)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Data.SqlTypes.SqlDouble.Widening(System.Double to System.Data.SqlTypes.SqlDouble)
  name.vb: Widening(Double to SqlDouble)
- uid: System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Inequality(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Inequality(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Inequality(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 299
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether they are not equal.</p>\n"
  syntax:
    content: public static SqlBoolean operator !=(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator <>(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the two instances are not equal or <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref> if the two instances are equal. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: LessThan(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.LessThan(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThan
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 307
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is less than the second.</p>\n"
  syntax:
    content: public static SqlBoolean operator <(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator <(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is less than the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.LessThanOrEqual(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_LessThanOrEqual
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 323
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Compares two instances of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> to determine whether the first is less than or equal to the second.</p>\n"
  syntax:
    content: public static SqlBoolean operator <=(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator <=(x As SqlDouble, y As SqlDouble) As SqlBoolean
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> that is <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the first instance is less than or equal to the second instance. Otherwise, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref>. If either instance of <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is null, the <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Multiply(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Multiply(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Multiply
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 161
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The multiplication operator computes the product of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  syntax:
    content: public static SqlDouble operator *(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator *(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The product of the two <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operands.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Subtraction(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Subtraction(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Subtraction(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Subtraction
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 145
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The subtraction operator the second <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operand from the first.</p>\n"
  syntax:
    content: public static SqlDouble operator -(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Operator -(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The results of the subtraction operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)
  id: op_UnaryNegation(System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: UnaryNegation(SqlDouble)
  nameWithType: SqlDouble.UnaryNegation(SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.UnaryNegation(System.Data.SqlTypes.SqlDouble)
  type: Operator
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_UnaryNegation
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 117
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Returns the negated value of the specified <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  syntax:
    content: public static SqlDouble operator -(SqlDouble x)
    content.vb: Public Shared Operator -(x As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure that contains the negated value.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.Parse(System.String)
  commentId: M:System.Data.SqlTypes.SqlDouble.Parse(System.String)
  id: Parse(System.String)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: SqlDouble.Parse(String)
  fullName: System.Data.SqlTypes.SqlDouble.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 104
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts the <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of a number to its double-precision floating point number equivalent.</p>\n"
  syntax:
    content: public static SqlDouble Parse(string s)
    content.vb: Public Shared Function Parse(s As String) As SqlDouble
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The <strong>String</strong> to be parsed. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> that contains the value represented by the <strong>String</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  commentId: M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  id: Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: Subtract(SqlDouble, SqlDouble)
  nameWithType: SqlDouble.Subtract(SqlDouble, SqlDouble)
  fullName: System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble, System.Data.SqlTypes.SqlDouble)
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 346
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>The subtraction operator the second <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> operand from the first.</p>\n"
  syntax:
    content: public static SqlDouble Subtract(SqlDouble x, SqlDouble y)
    content.vb: Public Shared Function Subtract(x As SqlDouble, y As SqlDouble) As SqlDouble
    parameters:
    - id: x
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    - id: y
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>A <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure. </p>\n"
    return:
      type: System.Data.SqlTypes.SqlDouble
      description: "\n<p>The results of the subtraction operation.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Data.SqlTypes.SqlDouble.ToSqlBoolean
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean
  id: ToSqlBoolean
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlBoolean()
  nameWithType: SqlDouble.ToSqlBoolean()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlBoolean()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlBoolean
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 401
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlBoolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlBoolean ToSqlBoolean()
    content.vb: Public Function ToSqlBoolean As SqlBoolean
    return:
      type: System.Data.SqlTypes.SqlBoolean
      description: "\n<p>A <strong>SqlBoolean</strong> structure whose <xref href=\"System.Data.SqlTypes.SqlBoolean.Value\" data-throw-if-not-resolved=\"false\"></xref> will be <xref href=\"System.Data.SqlTypes.SqlBoolean.True\" data-throw-if-not-resolved=\"false\"></xref> if the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure's <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> is non-zero, <xref href=\"System.Data.SqlTypes.SqlBoolean.False\" data-throw-if-not-resolved=\"false\"></xref> if the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> is zero and <xref href=\"System.Data.SqlTypes.SqlBoolean.Null\" data-throw-if-not-resolved=\"false\"></xref> if the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure is <xref href=\"System.Data.SqlTypes.SqlDouble.Null\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlByte
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlByte
  id: ToSqlByte
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlByte()
  nameWithType: SqlDouble.ToSqlByte()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlByte()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlByte
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 406
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlByte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlByte ToSqlByte()
    content.vb: Public Function ToSqlByte As SqlByte
    return:
      type: System.Data.SqlTypes.SqlByte
      description: "\n<p>A <strong>SqlByte</strong> structure whose <strong>Value</strong> equals the <strong>Value</strong> of this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlDecimal
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal
  id: ToSqlDecimal
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlDecimal()
  nameWithType: SqlDouble.ToSqlDecimal()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlDecimal()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlDecimal
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 431
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlDecimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlDecimal ToSqlDecimal()
    content.vb: Public Function ToSqlDecimal As SqlDecimal
    return:
      type: System.Data.SqlTypes.SqlDecimal
      description: "\n<p>A new <strong>SqlDecimal</strong> structure whose converted value equals the rounded value of this <strong>SqlDouble</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlInt16
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlInt16
  id: ToSqlInt16
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlInt16()
  nameWithType: SqlDouble.ToSqlInt16()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlInt16()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlInt16
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 411
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlInt16 ToSqlInt16()
    content.vb: Public Function ToSqlInt16 As SqlInt16
    return:
      type: System.Data.SqlTypes.SqlInt16
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlInt16\" data-throw-if-not-resolved=\"false\"></xref> structure whose <strong>Value</strong> equals the integer part of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure's value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlInt32
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlInt32
  id: ToSqlInt32
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlInt32()
  nameWithType: SqlDouble.ToSqlInt32()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlInt32()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlInt32
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 416
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlInt32 ToSqlInt32()
    content.vb: Public Function ToSqlInt32 As SqlInt32
    return:
      type: System.Data.SqlTypes.SqlInt32
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlInt32\" data-throw-if-not-resolved=\"false\"></xref> structure whose <strong>Value</strong> equals the integer part of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure's value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlInt64
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlInt64
  id: ToSqlInt64
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlInt64()
  nameWithType: SqlDouble.ToSqlInt64()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlInt64()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlInt64
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 421
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlInt64 ToSqlInt64()
    content.vb: Public Function ToSqlInt64 As SqlInt64
    return:
      type: System.Data.SqlTypes.SqlInt64
      description: "\n<p>A new <xref href=\"System.Data.SqlTypes.SqlInt64\" data-throw-if-not-resolved=\"false\"></xref> structure whose <strong>Value</strong> equals the integer part of the <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure's value.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlMoney
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlMoney
  id: ToSqlMoney
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlMoney()
  nameWithType: SqlDouble.ToSqlMoney()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlMoney()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlMoney
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 426
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlMoney\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlMoney ToSqlMoney()
    content.vb: Public Function ToSqlMoney As SqlMoney
    return:
      type: System.Data.SqlTypes.SqlMoney
      description: "\n<p>A new <strong>SqlMoney</strong> structure whose <xref href=\"System.Data.SqlTypes.SqlMoney.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the value of this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlSingle
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlSingle
  id: ToSqlSingle
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlSingle()
  nameWithType: SqlDouble.ToSqlSingle()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlSingle()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlSingle
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 436
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlSingle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlSingle ToSqlSingle()
    content.vb: Public Function ToSqlSingle As SqlSingle
    return:
      type: System.Data.SqlTypes.SqlSingle
      description: "\n<p>A new <strong>SqlSingle</strong> structure whose <xref href=\"System.Data.SqlTypes.SqlSingle.Value\" data-throw-if-not-resolved=\"false\"></xref> is equal to the <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToSqlString
  commentId: M:System.Data.SqlTypes.SqlDouble.ToSqlString
  id: ToSqlString
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToSqlString()
  nameWithType: SqlDouble.ToSqlString()
  fullName: System.Data.SqlTypes.SqlDouble.ToSqlString()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToSqlString
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 441
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to <xref href=\"System.Data.SqlTypes.SqlString\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SqlString ToSqlString()
    content.vb: Public Function ToSqlString As SqlString
    return:
      type: System.Data.SqlTypes.SqlString
      description: "\n<p>A <strong>SqlString</strong> representing the <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.SqlTypes.SqlDouble.ToString
  commentId: M:System.Data.SqlTypes.SqlDouble.ToString
  id: ToString
  parent: System.Data.SqlTypes.SqlDouble
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SqlDouble.ToString()
  fullName: System.Data.SqlTypes.SqlDouble.ToString()
  type: Method
  source:
    remote:
      path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Data.SqlClient/src/System/Data/SqlTypes/SQLDouble.cs
    startLine: 96
  assemblies:
  - System.Data.SqlClient
  namespace: System.Data.SqlTypes
  summary: "\n<p>Converts this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref> structure to a string.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string representing the <xref href=\"System.Data.SqlTypes.SqlDouble.Value\" data-throw-if-not-resolved=\"false\"></xref> of this <xref href=\"System.Data.SqlTypes.SqlDouble\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Data.SqlTypes
  commentId: N:System.Data.SqlTypes
  isExternal: false
  name: System.Data.SqlTypes
  nameWithType: System.Data.SqlTypes
  fullName: System.Data.SqlTypes
- uid: System.Data.SqlTypes.INullable
  commentId: T:System.Data.SqlTypes.INullable
  parent: System.Data.SqlTypes
  isExternal: false
  name: INullable
  nameWithType: INullable
  fullName: System.Data.SqlTypes.INullable
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlTypes.SqlDouble
  commentId: T:System.Data.SqlTypes.SqlDouble
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDouble
  nameWithType: SqlDouble
  fullName: System.Data.SqlTypes.SqlDouble
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.SqlTypes.INullable.IsNull
  commentId: P:System.Data.SqlTypes.INullable.IsNull
  parent: System.Data.SqlTypes.INullable
  isExternal: false
  name: IsNull
  nameWithType: INullable.IsNull
  fullName: System.Data.SqlTypes.INullable.IsNull
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.SqlTypes.SqlBoolean
  commentId: T:System.Data.SqlTypes.SqlBoolean
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlBoolean
  nameWithType: SqlBoolean
  fullName: System.Data.SqlTypes.SqlBoolean
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.SqlTypes.SqlString
  commentId: T:System.Data.SqlTypes.SqlString
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlString
  nameWithType: SqlString
  fullName: System.Data.SqlTypes.SqlString
- uid: System.Data.SqlTypes.SqlByte
  commentId: T:System.Data.SqlTypes.SqlByte
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlByte
  nameWithType: SqlByte
  fullName: System.Data.SqlTypes.SqlByte
- uid: System.Data.SqlTypes.SqlDecimal
  commentId: T:System.Data.SqlTypes.SqlDecimal
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlDecimal
  nameWithType: SqlDecimal
  fullName: System.Data.SqlTypes.SqlDecimal
- uid: System.Data.SqlTypes.SqlInt16
  commentId: T:System.Data.SqlTypes.SqlInt16
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt16
  nameWithType: SqlInt16
  fullName: System.Data.SqlTypes.SqlInt16
- uid: System.Data.SqlTypes.SqlInt32
  commentId: T:System.Data.SqlTypes.SqlInt32
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt32
  nameWithType: SqlInt32
  fullName: System.Data.SqlTypes.SqlInt32
- uid: System.Data.SqlTypes.SqlInt64
  commentId: T:System.Data.SqlTypes.SqlInt64
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlInt64
  nameWithType: SqlInt64
  fullName: System.Data.SqlTypes.SqlInt64
- uid: System.Data.SqlTypes.SqlMoney
  commentId: T:System.Data.SqlTypes.SqlMoney
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlMoney
  nameWithType: SqlMoney
  fullName: System.Data.SqlTypes.SqlMoney
- uid: System.Data.SqlTypes.SqlSingle
  commentId: T:System.Data.SqlTypes.SqlSingle
  parent: System.Data.SqlTypes
  isExternal: false
  name: SqlSingle
  nameWithType: SqlSingle
  fullName: System.Data.SqlTypes.SqlSingle
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
