### YamlMime:ManagedReference
items:
- uid: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
  id: ICustomAttributeProvider
  parent: System.Reflection
  children:
  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ICustomAttributeProvider
    path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
    startLine: 17
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Provides custom attributes for reflection objects that support them.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public interface ICustomAttributeProvider
    content.vb: >-
      <ComVisible(True)>

      Public Interface ICustomAttributeProvider
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  id: GetCustomAttributes(System.Boolean)
  parent: System.Reflection.ICustomAttributeProvider
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Boolean)
  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
    startLine: 26
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an array of all of the custom attributes defined on this member, excluding named attributes, or an empty array if there are no custom attributes.</p>\n"
  syntax:
    content: object[] GetCustomAttributes(bool inherit)
    content.vb: Function GetCustomAttributes(inherit As Boolean) As Object()
    parameters:
    - id: inherit
      type: System.Boolean
      description: "\n<p>When <strong>true</strong>, look up the hierarchy chain for the inherited custom attribute. </p>\n"
    return:
      type: System.Object[]
      description: "\n<p>An array of Objects representing custom attributes, or an empty array.</p>\n"
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>The custom attribute type cannot be loaded. </p>\n"
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "\n<p>There is more than one attribute of type <em>attributeType</em> defined on this member. </p>\n"
- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
  id: GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.ICustomAttributeProvider
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCustomAttributes
    path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
    startLine: 22
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an array of custom attributes defined on this member, identified by type, or an empty array if there are no custom attributes of that type.</p>\n"
  syntax:
    content: object[] GetCustomAttributes(Type attributeType, bool inherit)
    content.vb: Function GetCustomAttributes(attributeType As Type, inherit As Boolean) As Object()
    parameters:
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of the custom attributes. </p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>When <strong>true</strong>, look up the hierarchy chain for the inherited custom attribute. </p>\n"
    return:
      type: System.Object[]
      description: "\n<p>An array of Objects representing custom attributes, or an empty array.</p>\n"
  exceptions:
  - type: System.TypeLoadException
    commentId: T:System.TypeLoadException
    description: "\n<p>The custom attribute type cannot be loaded. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>attributeType</em> is <strong>null</strong>.</p>\n"
- uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
  id: IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.ICustomAttributeProvider
  langs:
  - csharp
  - vb
  name: IsDefined(Type, Boolean)
  nameWithType: ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDefined
    path: src/mscorlib/src/System/Reflection/ICustomAttributeProvider.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Indicates whether one or more instance of <em>attributeType</em> is defined on this member.</p>\n"
  syntax:
    content: bool IsDefined(Type attributeType, bool inherit)
    content.vb: Function IsDefined(attributeType As Type, inherit As Boolean) As Boolean
    parameters:
    - id: attributeType
      type: System.Type
      description: "\n<p>The type of the custom attributes. </p>\n"
    - id: inherit
      type: System.Boolean
      description: "\n<p>When <strong>true</strong>, look up the hierarchy chain for the inherited custom attribute. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>attributeType</em> is defined on this member; <strong>false</strong> otherwise.</p>\n"
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.TypeLoadException
  commentId: T:System.TypeLoadException
  parent: System
  isExternal: false
  name: TypeLoadException
  nameWithType: TypeLoadException
  fullName: System.TypeLoadException
- uid: System.Reflection.AmbiguousMatchException
  commentId: T:System.Reflection.AmbiguousMatchException
  isExternal: false
  name: AmbiguousMatchException
  nameWithType: AmbiguousMatchException
  fullName: System.Reflection.AmbiguousMatchException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
