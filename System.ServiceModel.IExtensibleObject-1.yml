items:
- uid: System.ServiceModel.IExtensibleObject`1
  commentId: T:System.ServiceModel.IExtensibleObject`1
  id: IExtensibleObject`1
  parent: System.ServiceModel
  children:
  - System.ServiceModel.IExtensibleObject`1.Extensions
  langs:
  - csharp
  - vb
  name: IExtensibleObject<T>
  fullName: System.ServiceModel.IExtensibleObject<T>
  type: Interface
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtensibleObject.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IExtensibleObject
    path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtensibleObject.cs
    startLine: 10
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Enable an object to participate in custom behavior, such as registering for events, or watching state transitions.</p>\n"
  syntax:
    content: >-
      public interface IExtensibleObject<T>
          where T : IExtensibleObject<T>
    content.vb: Public Interface IExtensibleObject(Of T As IExtensibleObject(Of T))
    typeParameters:
    - id: T
      description: "\n<p>The type of the extension class. </p>\n"
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.ServiceModel.IExtensibleObject(Of T)
  name.vb: IExtensibleObject(Of T)
  nameWithType: IExtensibleObject<T>
  nameWithType.vb: IExtensibleObject(Of T)
- uid: System.ServiceModel.IExtensibleObject`1.Extensions
  commentId: P:System.ServiceModel.IExtensibleObject`1.Extensions
  id: Extensions
  parent: System.ServiceModel.IExtensibleObject`1
  langs:
  - csharp
  - vb
  name: Extensions
  fullName: System.ServiceModel.IExtensibleObject<T>.Extensions
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtensibleObject.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Extensions
    path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtensibleObject.cs
    startLine: 13
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Gets a collection of extension objects for this extensible object.</p>\n"
  syntax:
    content: IExtensionCollection<T> Extensions { get; }
    content.vb: ReadOnly Property Extensions As IExtensionCollection(Of T)
    parameters: []
    return:
      type: System.ServiceModel.IExtensionCollection{{T}}
      description: "\n<p>A <xref href=\"System.ServiceModel.IExtensionCollection`1\" data-throw-if-not-resolved=\"false\"></xref> of extension objects.</p>\n"
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  fullName.vb: System.ServiceModel.IExtensibleObject(Of T).Extensions
  nameWithType: IExtensibleObject<T>.Extensions
  nameWithType.vb: IExtensibleObject(Of T).Extensions
references:
- uid: System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  fullName: System.ServiceModel
  nameWithType: System.ServiceModel
  commentId: N:System.ServiceModel
- uid: System.ServiceModel.IExtensionCollection{{T}}
  parent: System.ServiceModel
  definition: System.ServiceModel.IExtensionCollection`1
  name: IExtensionCollection<T>
  fullName: System.ServiceModel.IExtensionCollection<T>
  fullname.vb: System.ServiceModel.IExtensionCollection(Of T)
  name.vb: IExtensionCollection(Of T)
  spec.csharp:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IExtensionCollection<T>
  nameWithType.vb: IExtensionCollection(Of T)
  commentId: T:System.ServiceModel.IExtensionCollection{`0}
- uid: System.ServiceModel.IExtensionCollection`1
  isExternal: false
  name: IExtensionCollection<T>
  fullName: System.ServiceModel.IExtensionCollection<T>
  fullname.vb: System.ServiceModel.IExtensionCollection(Of T)
  name.vb: IExtensionCollection(Of T)
  spec.csharp:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ServiceModel.IExtensionCollection`1
    name: IExtensionCollection
    fullName: System.ServiceModel.IExtensionCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IExtensionCollection<T>
  nameWithType.vb: IExtensionCollection(Of T)
  commentId: T:System.ServiceModel.IExtensionCollection`1
