items:
- uid: System.Runtime.Versioning.FrameworkName
  commentId: T:System.Runtime.Versioning.FrameworkName
  id: FrameworkName
  parent: System.Runtime.Versioning
  children:
  - System.Runtime.Versioning.FrameworkName.#ctor(System.String)
  - System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)
  - System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)
  - System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  - System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  - System.Runtime.Versioning.FrameworkName.FullName
  - System.Runtime.Versioning.FrameworkName.GetHashCode
  - System.Runtime.Versioning.FrameworkName.Identifier
  - System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  - System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  - System.Runtime.Versioning.FrameworkName.Profile
  - System.Runtime.Versioning.FrameworkName.ToString
  - System.Runtime.Versioning.FrameworkName.Version
  langs:
  - csharp
  - vb
  name: FrameworkName
  fullName: System.Runtime.Versioning.FrameworkName
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FrameworkName
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 652
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Represents the name of a version of the .NET Framework.</p>\n"
  syntax:
    content: 'public sealed class FrameworkName : IEquatable<FrameworkName>'
    content.vb: >-
      Public NotInheritable Class FrameworkName
          Implements IEquatable(Of FrameworkName)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Runtime.Versioning.FrameworkName}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: FrameworkName
- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String)
  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FrameworkName(String)
  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 654
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class from a string that contains information about a version of the .NET Framework.</p>\n"
  syntax:
    content: public FrameworkName(string frameworkName)
    content.vb: Public Sub New(frameworkName As String)
    parameters:
    - id: frameworkName
      type: System.String
      description: "\n<p>A string that contains .NET Framework version information.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>frameworkName</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>frameworkName</em> has fewer than two components or more than three components.</p>\n<p>-or-</p>\n<p>\n<em>frameworkName</em> does not include a major and minor version number.</p>\n<p>-or-</p>\n<p>\n<em>frameworkName </em>does not include a valid version number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>frameworkName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FrameworkName.FrameworkName(String)
- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)
  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version)
  id: '#ctor(System.String,System.Version)'
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FrameworkName(String, Version)
  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String, System.Version)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 655
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class from a string and a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object that identify a .NET Framework version.</p>\n"
  syntax:
    content: public FrameworkName(string identifier, Version version)
    content.vb: Public Sub New(identifier As String, version As Version)
    parameters:
    - id: identifier
      type: System.String
      description: "\n<p>A string that identifies a .NET Framework version.</p>\n"
    - id: version
      type: System.Version
      description: "\n<p>An object that contains .NET Framework version information.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identifier</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identifier</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>version</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FrameworkName.FrameworkName(String, Version)
- uid: System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)
  commentId: M:System.Runtime.Versioning.FrameworkName.#ctor(System.String,System.Version,System.String)
  id: '#ctor(System.String,System.Version,System.String)'
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FrameworkName(String, Version, String)
  fullName: System.Runtime.Versioning.FrameworkName.FrameworkName(System.String, System.Version, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 656
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> class from a string, a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object that identifies a .NET Framework version, and a profile name.</p>\n"
  syntax:
    content: public FrameworkName(string identifier, Version version, string profile)
    content.vb: Public Sub New(identifier As String, version As Version, profile As String)
    parameters:
    - id: identifier
      type: System.String
      description: "\n<p>A string that identifies a .NET Framework version.</p>\n"
    - id: version
      type: System.Version
      description: "\n<p>An object that contains .NET Framework version information.</p>\n"
    - id: profile
      type: System.String
      description: "\n<p>A profile name.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>identifier</em> is <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identifier</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>version</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FrameworkName.FrameworkName(String, Version, String)
- uid: System.Runtime.Versioning.FrameworkName.FullName
  commentId: P:System.Runtime.Versioning.FrameworkName.FullName
  id: FullName
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: FullName
  fullName: System.Runtime.Versioning.FrameworkName.FullName
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 657
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the full name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string FullName { get; }
    content.vb: Public ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The full name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FrameworkName.FullName
- uid: System.Runtime.Versioning.FrameworkName.Identifier
  commentId: P:System.Runtime.Versioning.FrameworkName.Identifier
  id: Identifier
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Identifier
  fullName: System.Runtime.Versioning.FrameworkName.Identifier
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Identifier
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 658
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the identifier of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string Identifier { get; }
    content.vb: Public ReadOnly Property Identifier As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The identifier of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FrameworkName.Identifier
- uid: System.Runtime.Versioning.FrameworkName.Profile
  commentId: P:System.Runtime.Versioning.FrameworkName.Profile
  id: Profile
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Profile
  fullName: System.Runtime.Versioning.FrameworkName.Profile
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Profile
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 659
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the profile name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public string Profile { get; }
    content.vb: Public ReadOnly Property Profile As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The profile name of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FrameworkName.Profile
- uid: System.Runtime.Versioning.FrameworkName.Version
  commentId: P:System.Runtime.Versioning.FrameworkName.Version
  id: Version
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Version
  fullName: System.Runtime.Versioning.FrameworkName.Version
  type: Property
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Version
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 660
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Gets the version of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public Version Version { get; }
    content.vb: Public ReadOnly Property Version As Version
    parameters: []
    return:
      type: System.Version
      description: "\n<p>An object that contains version information about this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: FrameworkName.Version
- uid: System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  commentId: M:System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.Runtime.Versioning.FrameworkName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 661
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance represents the same .NET Framework version as a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every component of the current <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object matches the corresponding component of <em>obj</em>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: FrameworkName.Equals(Object)
- uid: System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  commentId: M:System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  id: Equals(System.Runtime.Versioning.FrameworkName)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Equals(FrameworkName)
  fullName: System.Runtime.Versioning.FrameworkName.Equals(System.Runtime.Versioning.FrameworkName)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 662
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance represents the same .NET Framework version as a specified <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public bool Equals(FrameworkName other)
    content.vb: Public Function Equals(other As FrameworkName) As Boolean
    parameters:
    - id: other
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The object to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every component of the current <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object matches the corresponding component of <em>other</em>; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: FrameworkName.Equals(FrameworkName)
- uid: System.Runtime.Versioning.FrameworkName.GetHashCode
  commentId: M:System.Runtime.Versioning.FrameworkName.GetHashCode
  id: GetHashCode
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.Runtime.Versioning.FrameworkName.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 663
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns the hash code for the <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that represents the hash code of this instance.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: FrameworkName.GetHashCode()
- uid: System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  commentId: M:System.Runtime.Versioning.FrameworkName.op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  id: op_Equality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Equality(FrameworkName, FrameworkName)
  fullName: System.Runtime.Versioning.FrameworkName.Equality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 664
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> objects represent the same .NET Framework version.</p>\n"
  syntax:
    content: public static bool operator ==(FrameworkName left, FrameworkName right)
    content.vb: Public Shared Operator =(left As FrameworkName, right As FrameworkName) As Boolean
    parameters:
    - id: left
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The first object to compare.</p>\n"
    - id: right
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent the same .NET Framework version; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: FrameworkName.Equality(FrameworkName, FrameworkName)
- uid: System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  commentId: M:System.Runtime.Versioning.FrameworkName.op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  id: op_Inequality(System.Runtime.Versioning.FrameworkName,System.Runtime.Versioning.FrameworkName)
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: Inequality(FrameworkName, FrameworkName)
  fullName: System.Runtime.Versioning.FrameworkName.Inequality(System.Runtime.Versioning.FrameworkName, System.Runtime.Versioning.FrameworkName)
  type: Operator
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 665
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns a value that indicates whether two <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> objects represent different .NET Framework versions.</p>\n"
  syntax:
    content: public static bool operator !=(FrameworkName left, FrameworkName right)
    content.vb: Public Shared Operator <>(left As FrameworkName, right As FrameworkName) As Boolean
    parameters:
    - id: left
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The first object to compare.</p>\n"
    - id: right
      type: System.Runtime.Versioning.FrameworkName
      description: "\n<p>The second object to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>left</em> and <em>right</em> parameters represent different .NET Framework versions; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: FrameworkName.Inequality(FrameworkName, FrameworkName)
- uid: System.Runtime.Versioning.FrameworkName.ToString
  commentId: M:System.Runtime.Versioning.FrameworkName.ToString
  id: ToString
  parent: System.Runtime.Versioning.FrameworkName
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Runtime.Versioning.FrameworkName.ToString()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 666
  assemblies:
  - System.Runtime.Extensions
  namespace: System.Runtime.Versioning
  summary: "\n<p>Returns the string representation of this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents this <xref href=\"System.Runtime.Versioning.FrameworkName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: FrameworkName.ToString()
references:
- uid: System.Runtime.Versioning
  isExternal: false
  name: System.Runtime.Versioning
  fullName: System.Runtime.Versioning
  commentId: N:System.Runtime.Versioning
  nameWithType: System.Runtime.Versioning
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.IEquatable{System.Runtime.Versioning.FrameworkName}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<FrameworkName>
  fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>
  fullname.vb: System.IEquatable(Of System.Runtime.Versioning.FrameworkName)
  name.vb: IEquatable(Of FrameworkName)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: )
    fullName: )
  commentId: T:System.IEquatable{System.Runtime.Versioning.FrameworkName}
  nameWithType: IEquatable<FrameworkName>
  nameWithType.vb: IEquatable(Of FrameworkName)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.IEquatable`1
  isExternal: false
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.IEquatable`1
  nameWithType: IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Version
  parent: System
  isExternal: false
  name: Version
  fullName: System.Version
  commentId: T:System.Version
  nameWithType: Version
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)
  parent: System.IEquatable{System.Runtime.Versioning.FrameworkName}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(FrameworkName)
  fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>.Equals(System.Runtime.Versioning.FrameworkName)
  fullname.vb: System.IEquatable(Of System.Runtime.Versioning.FrameworkName).Equals(System.Runtime.Versioning.FrameworkName)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<System.Runtime.Versioning.FrameworkName>.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of System.Runtime.Versioning.FrameworkName).Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Runtime.Versioning.FrameworkName
    name: FrameworkName
    fullName: System.Runtime.Versioning.FrameworkName
  - name: )
    fullName: )
  commentId: M:System.IEquatable{System.Runtime.Versioning.FrameworkName}.Equals(System.Runtime.Versioning.FrameworkName)
  nameWithType: IEquatable<FrameworkName>.Equals(FrameworkName)
  nameWithType.vb: IEquatable(Of FrameworkName).Equals(FrameworkName)
- uid: System.Runtime.Versioning.FrameworkName
  parent: System.Runtime.Versioning
  isExternal: false
  name: FrameworkName
  fullName: System.Runtime.Versioning.FrameworkName
  commentId: T:System.Runtime.Versioning.FrameworkName
  nameWithType: FrameworkName
- uid: System.IEquatable`1.Equals(`0)
  isExternal: false
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: M:System.IEquatable`1.Equals(`0)
  nameWithType: IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
