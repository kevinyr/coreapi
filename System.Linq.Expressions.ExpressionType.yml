### YamlMime:ManagedReference
items:
- uid: System.Linq.Expressions.ExpressionType
  commentId: T:System.Linq.Expressions.ExpressionType
  id: ExpressionType
  parent: System.Linq.Expressions
  children:
  - System.Linq.Expressions.ExpressionType.Add
  - System.Linq.Expressions.ExpressionType.AddAssign
  - System.Linq.Expressions.ExpressionType.AddAssignChecked
  - System.Linq.Expressions.ExpressionType.AddChecked
  - System.Linq.Expressions.ExpressionType.And
  - System.Linq.Expressions.ExpressionType.AndAlso
  - System.Linq.Expressions.ExpressionType.AndAssign
  - System.Linq.Expressions.ExpressionType.ArrayIndex
  - System.Linq.Expressions.ExpressionType.ArrayLength
  - System.Linq.Expressions.ExpressionType.Assign
  - System.Linq.Expressions.ExpressionType.Block
  - System.Linq.Expressions.ExpressionType.Call
  - System.Linq.Expressions.ExpressionType.Coalesce
  - System.Linq.Expressions.ExpressionType.Conditional
  - System.Linq.Expressions.ExpressionType.Constant
  - System.Linq.Expressions.ExpressionType.Convert
  - System.Linq.Expressions.ExpressionType.ConvertChecked
  - System.Linq.Expressions.ExpressionType.DebugInfo
  - System.Linq.Expressions.ExpressionType.Decrement
  - System.Linq.Expressions.ExpressionType.Default
  - System.Linq.Expressions.ExpressionType.Divide
  - System.Linq.Expressions.ExpressionType.DivideAssign
  - System.Linq.Expressions.ExpressionType.Dynamic
  - System.Linq.Expressions.ExpressionType.Equal
  - System.Linq.Expressions.ExpressionType.ExclusiveOr
  - System.Linq.Expressions.ExpressionType.ExclusiveOrAssign
  - System.Linq.Expressions.ExpressionType.Extension
  - System.Linq.Expressions.ExpressionType.Goto
  - System.Linq.Expressions.ExpressionType.GreaterThan
  - System.Linq.Expressions.ExpressionType.GreaterThanOrEqual
  - System.Linq.Expressions.ExpressionType.Increment
  - System.Linq.Expressions.ExpressionType.Index
  - System.Linq.Expressions.ExpressionType.Invoke
  - System.Linq.Expressions.ExpressionType.IsFalse
  - System.Linq.Expressions.ExpressionType.IsTrue
  - System.Linq.Expressions.ExpressionType.Label
  - System.Linq.Expressions.ExpressionType.Lambda
  - System.Linq.Expressions.ExpressionType.LeftShift
  - System.Linq.Expressions.ExpressionType.LeftShiftAssign
  - System.Linq.Expressions.ExpressionType.LessThan
  - System.Linq.Expressions.ExpressionType.LessThanOrEqual
  - System.Linq.Expressions.ExpressionType.ListInit
  - System.Linq.Expressions.ExpressionType.Loop
  - System.Linq.Expressions.ExpressionType.MemberAccess
  - System.Linq.Expressions.ExpressionType.MemberInit
  - System.Linq.Expressions.ExpressionType.Modulo
  - System.Linq.Expressions.ExpressionType.ModuloAssign
  - System.Linq.Expressions.ExpressionType.Multiply
  - System.Linq.Expressions.ExpressionType.MultiplyAssign
  - System.Linq.Expressions.ExpressionType.MultiplyAssignChecked
  - System.Linq.Expressions.ExpressionType.MultiplyChecked
  - System.Linq.Expressions.ExpressionType.Negate
  - System.Linq.Expressions.ExpressionType.NegateChecked
  - System.Linq.Expressions.ExpressionType.New
  - System.Linq.Expressions.ExpressionType.NewArrayBounds
  - System.Linq.Expressions.ExpressionType.NewArrayInit
  - System.Linq.Expressions.ExpressionType.Not
  - System.Linq.Expressions.ExpressionType.NotEqual
  - System.Linq.Expressions.ExpressionType.OnesComplement
  - System.Linq.Expressions.ExpressionType.Or
  - System.Linq.Expressions.ExpressionType.OrAssign
  - System.Linq.Expressions.ExpressionType.OrElse
  - System.Linq.Expressions.ExpressionType.Parameter
  - System.Linq.Expressions.ExpressionType.PostDecrementAssign
  - System.Linq.Expressions.ExpressionType.PostIncrementAssign
  - System.Linq.Expressions.ExpressionType.Power
  - System.Linq.Expressions.ExpressionType.PowerAssign
  - System.Linq.Expressions.ExpressionType.PreDecrementAssign
  - System.Linq.Expressions.ExpressionType.PreIncrementAssign
  - System.Linq.Expressions.ExpressionType.Quote
  - System.Linq.Expressions.ExpressionType.RightShift
  - System.Linq.Expressions.ExpressionType.RightShiftAssign
  - System.Linq.Expressions.ExpressionType.RuntimeVariables
  - System.Linq.Expressions.ExpressionType.Subtract
  - System.Linq.Expressions.ExpressionType.SubtractAssign
  - System.Linq.Expressions.ExpressionType.SubtractAssignChecked
  - System.Linq.Expressions.ExpressionType.SubtractChecked
  - System.Linq.Expressions.ExpressionType.Switch
  - System.Linq.Expressions.ExpressionType.Throw
  - System.Linq.Expressions.ExpressionType.Try
  - System.Linq.Expressions.ExpressionType.TypeAs
  - System.Linq.Expressions.ExpressionType.TypeEqual
  - System.Linq.Expressions.ExpressionType.TypeIs
  - System.Linq.Expressions.ExpressionType.UnaryPlus
  - System.Linq.Expressions.ExpressionType.Unbox
  langs:
  - csharp
  - vb
  name: ExpressionType
  nameWithType: ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
  type: Enum
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExpressionType
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 437
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Describes the node types for the nodes of an expression tree.</p>\n"
  syntax:
    content: public enum ExpressionType
    content.vb: Public Enum ExpressionType
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: System.Linq.Expressions.ExpressionType.Add
  commentId: F:System.Linq.Expressions.ExpressionType.Add
  id: Add
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Add
  nameWithType: ExpressionType.Add
  fullName: System.Linq.Expressions.ExpressionType.Add
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 439
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An addition operation, such as <code>a + b</code>, without overflow checking, for numeric operands.</p>\n"
  syntax:
    content: Add = 0
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.AddAssign
  commentId: F:System.Linq.Expressions.ExpressionType.AddAssign
  id: AddAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: AddAssign
  nameWithType: ExpressionType.AddAssign
  fullName: System.Linq.Expressions.ExpressionType.AddAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 440
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An addition compound assignment operation, such as <code>(a += b)</code>, without overflow checking, for numeric operands.</p>\n"
  syntax:
    content: AddAssign = 63
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.AddAssignChecked
  commentId: F:System.Linq.Expressions.ExpressionType.AddAssignChecked
  id: AddAssignChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: AddAssignChecked
  nameWithType: ExpressionType.AddAssignChecked
  fullName: System.Linq.Expressions.ExpressionType.AddAssignChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 441
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An addition compound assignment operation, such as <code>(a += b)</code>, with overflow checking, for numeric operands.</p>\n"
  syntax:
    content: AddAssignChecked = 74
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.AddChecked
  commentId: F:System.Linq.Expressions.ExpressionType.AddChecked
  id: AddChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: AddChecked
  nameWithType: ExpressionType.AddChecked
  fullName: System.Linq.Expressions.ExpressionType.AddChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 442
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An addition operation, such as <code>(a + b)</code>, with overflow checking, for numeric operands.</p>\n"
  syntax:
    content: AddChecked = 1
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.And
  commentId: F:System.Linq.Expressions.ExpressionType.And
  id: And
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: And
  nameWithType: ExpressionType.And
  fullName: System.Linq.Expressions.ExpressionType.And
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: And
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 443
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise or logical <strong>AND</strong> operation, such as <code>(a &amp; b)</code> in C# and <code>(a And b)</code> in Visual Basic.</p>\n"
  syntax:
    content: And = 2
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.AndAlso
  commentId: F:System.Linq.Expressions.ExpressionType.AndAlso
  id: AndAlso
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: AndAlso
  nameWithType: ExpressionType.AndAlso
  fullName: System.Linq.Expressions.ExpressionType.AndAlso
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAlso
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 444
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A conditional <strong>AND</strong> operation that evaluates the second operand only if the first operand evaluates to <strong>true</strong>. It corresponds to <code>(a &amp;&amp; b)</code> in C# and <code>(a AndAlso b)</code> in Visual Basic.</p>\n"
  syntax:
    content: AndAlso = 3
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.AndAssign
  commentId: F:System.Linq.Expressions.ExpressionType.AndAssign
  id: AndAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: AndAssign
  nameWithType: ExpressionType.AndAssign
  fullName: System.Linq.Expressions.ExpressionType.AndAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AndAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 445
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise or logical <strong>AND</strong> compound assignment operation, such as <code>(a &amp;= b)</code> in C#.</p>\n"
  syntax:
    content: AndAssign = 64
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ArrayIndex
  commentId: F:System.Linq.Expressions.ExpressionType.ArrayIndex
  id: ArrayIndex
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ArrayIndex
  nameWithType: ExpressionType.ArrayIndex
  fullName: System.Linq.Expressions.ExpressionType.ArrayIndex
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayIndex
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 446
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An indexing operation in a one-dimensional array, such as <code>array[index]</code> in C# or <code>array(index)</code> in Visual Basic.</p>\n"
  syntax:
    content: ArrayIndex = 5
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ArrayLength
  commentId: F:System.Linq.Expressions.ExpressionType.ArrayLength
  id: ArrayLength
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ArrayLength
  nameWithType: ExpressionType.ArrayLength
  fullName: System.Linq.Expressions.ExpressionType.ArrayLength
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ArrayLength
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 447
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that obtains the length of a one-dimensional array, such as <code>array.Length</code>.</p>\n"
  syntax:
    content: ArrayLength = 4
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Assign
  commentId: F:System.Linq.Expressions.ExpressionType.Assign
  id: Assign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Assign
  nameWithType: ExpressionType.Assign
  fullName: System.Linq.Expressions.ExpressionType.Assign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 448
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An assignment operation, such as <code>(a = b)</code>.</p>\n"
  syntax:
    content: Assign = 46
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Block
  commentId: F:System.Linq.Expressions.ExpressionType.Block
  id: Block
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Block
  nameWithType: ExpressionType.Block
  fullName: System.Linq.Expressions.ExpressionType.Block
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Block
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 449
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A block of expressions.</p>\n"
  syntax:
    content: Block = 47
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Call
  commentId: F:System.Linq.Expressions.ExpressionType.Call
  id: Call
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Call
  nameWithType: ExpressionType.Call
  fullName: System.Linq.Expressions.ExpressionType.Call
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Call
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 450
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A method call, such as in the <code>obj.sampleMethod()</code> expression.</p>\n"
  syntax:
    content: Call = 6
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Coalesce
  commentId: F:System.Linq.Expressions.ExpressionType.Coalesce
  id: Coalesce
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Coalesce
  nameWithType: ExpressionType.Coalesce
  fullName: System.Linq.Expressions.ExpressionType.Coalesce
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Coalesce
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 451
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A node that represents a null coalescing operation, such as <code>(a ?? b)</code> in C# or <code>If(a, b)</code> in Visual Basic.</p>\n"
  syntax:
    content: Coalesce = 7
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Conditional
  commentId: F:System.Linq.Expressions.ExpressionType.Conditional
  id: Conditional
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Conditional
  nameWithType: ExpressionType.Conditional
  fullName: System.Linq.Expressions.ExpressionType.Conditional
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Conditional
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 452
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A conditional operation, such as <code>a &gt; b ? a : b</code> in C# or <code>If(a &gt; b, a, b)</code> in Visual Basic.</p>\n"
  syntax:
    content: Conditional = 8
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Constant
  commentId: F:System.Linq.Expressions.ExpressionType.Constant
  id: Constant
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Constant
  nameWithType: ExpressionType.Constant
  fullName: System.Linq.Expressions.ExpressionType.Constant
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Constant
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 453
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A constant value.</p>\n"
  syntax:
    content: Constant = 9
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Convert
  commentId: F:System.Linq.Expressions.ExpressionType.Convert
  id: Convert
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Convert
  nameWithType: ExpressionType.Convert
  fullName: System.Linq.Expressions.ExpressionType.Convert
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Convert
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 454
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A cast or conversion operation, such as <code>(SampleType)obj</code> in C#<code></code>or <code>CType(obj, SampleType)</code> in Visual Basic. For a numeric conversion, if the converted value is too large for the destination type, no exception is thrown.</p>\n"
  syntax:
    content: Convert = 10
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ConvertChecked
  commentId: F:System.Linq.Expressions.ExpressionType.ConvertChecked
  id: ConvertChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ConvertChecked
  nameWithType: ExpressionType.ConvertChecked
  fullName: System.Linq.Expressions.ExpressionType.ConvertChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConvertChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 455
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A cast or conversion operation, such as <code>(SampleType)obj</code> in C#<code></code>or <code>CType(obj, SampleType)</code> in Visual Basic. For a numeric conversion, if the converted value does not fit the destination type, an exception is thrown.</p>\n"
  syntax:
    content: ConvertChecked = 11
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.DebugInfo
  commentId: F:System.Linq.Expressions.ExpressionType.DebugInfo
  id: DebugInfo
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: DebugInfo
  nameWithType: ExpressionType.DebugInfo
  fullName: System.Linq.Expressions.ExpressionType.DebugInfo
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DebugInfo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 456
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>Debugging information.</p>\n"
  syntax:
    content: DebugInfo = 48
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Decrement
  commentId: F:System.Linq.Expressions.ExpressionType.Decrement
  id: Decrement
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Decrement
  nameWithType: ExpressionType.Decrement
  fullName: System.Linq.Expressions.ExpressionType.Decrement
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Decrement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 457
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary decrement operation, such as <code>(a - 1)</code> in C# and Visual Basic. The object <code>a</code> should not be modified in place.</p>\n"
  syntax:
    content: Decrement = 49
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Default
  commentId: F:System.Linq.Expressions.ExpressionType.Default
  id: Default
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Default
  nameWithType: ExpressionType.Default
  fullName: System.Linq.Expressions.ExpressionType.Default
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Default
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 458
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A default value.</p>\n"
  syntax:
    content: Default = 51
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Divide
  commentId: F:System.Linq.Expressions.ExpressionType.Divide
  id: Divide
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Divide
  nameWithType: ExpressionType.Divide
  fullName: System.Linq.Expressions.ExpressionType.Divide
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Divide
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 459
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A division operation, such as <code>(a / b)</code>, for numeric operands.</p>\n"
  syntax:
    content: Divide = 12
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.DivideAssign
  commentId: F:System.Linq.Expressions.ExpressionType.DivideAssign
  id: DivideAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: DivideAssign
  nameWithType: ExpressionType.DivideAssign
  fullName: System.Linq.Expressions.ExpressionType.DivideAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DivideAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 460
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An division compound assignment operation, such as <code>(a /= b)</code>, for numeric operands.</p>\n"
  syntax:
    content: DivideAssign = 65
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Dynamic
  commentId: F:System.Linq.Expressions.ExpressionType.Dynamic
  id: Dynamic
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Dynamic
  nameWithType: ExpressionType.Dynamic
  fullName: System.Linq.Expressions.ExpressionType.Dynamic
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dynamic
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 461
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A dynamic operation.</p>\n"
  syntax:
    content: Dynamic = 50
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Equal
  commentId: F:System.Linq.Expressions.ExpressionType.Equal
  id: Equal
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Equal
  nameWithType: ExpressionType.Equal
  fullName: System.Linq.Expressions.ExpressionType.Equal
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equal
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 462
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A node that represents an equality comparison, such as <code>(a == b)</code> in C# or <code>(a = b)</code> in Visual Basic.</p>\n"
  syntax:
    content: Equal = 13
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ExclusiveOr
  commentId: F:System.Linq.Expressions.ExpressionType.ExclusiveOr
  id: ExclusiveOr
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ExclusiveOr
  nameWithType: ExpressionType.ExclusiveOr
  fullName: System.Linq.Expressions.ExpressionType.ExclusiveOr
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOr
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 463
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise or logical <strong>XOR</strong> operation, such as <code>(a ^ b)</code> in C# or <code>(a Xor b)</code> in Visual Basic.</p>\n"
  syntax:
    content: ExclusiveOr = 14
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ExclusiveOrAssign
  commentId: F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign
  id: ExclusiveOrAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ExclusiveOrAssign
  nameWithType: ExpressionType.ExclusiveOrAssign
  fullName: System.Linq.Expressions.ExpressionType.ExclusiveOrAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveOrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 464
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise or logical <strong>XOR</strong> compound assignment operation, such as <code>(a ^= b)</code> in C#.</p>\n"
  syntax:
    content: ExclusiveOrAssign = 66
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Extension
  commentId: F:System.Linq.Expressions.ExpressionType.Extension
  id: Extension
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Extension
  nameWithType: ExpressionType.Extension
  fullName: System.Linq.Expressions.ExpressionType.Extension
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Extension
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 465
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An extension expression.</p>\n"
  syntax:
    content: Extension = 52
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Goto
  commentId: F:System.Linq.Expressions.ExpressionType.Goto
  id: Goto
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Goto
  nameWithType: ExpressionType.Goto
  fullName: System.Linq.Expressions.ExpressionType.Goto
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Goto
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 466
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A \"go to\" expression, such as <code>goto Label</code> in C# or <code>GoTo Label</code> in Visual Basic.</p>\n"
  syntax:
    content: Goto = 53
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.GreaterThan
  commentId: F:System.Linq.Expressions.ExpressionType.GreaterThan
  id: GreaterThan
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: GreaterThan
  nameWithType: ExpressionType.GreaterThan
  fullName: System.Linq.Expressions.ExpressionType.GreaterThan
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 467
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A \"greater than\" comparison, such as <code>(a &gt; b)</code>.</p>\n"
  syntax:
    content: GreaterThan = 15
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.GreaterThanOrEqual
  commentId: F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual
  id: GreaterThanOrEqual
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual
  nameWithType: ExpressionType.GreaterThanOrEqual
  fullName: System.Linq.Expressions.ExpressionType.GreaterThanOrEqual
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GreaterThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 468
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A \"greater than or equal to\" comparison, such as <code>(a &gt;= b)</code>.</p>\n"
  syntax:
    content: GreaterThanOrEqual = 16
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Increment
  commentId: F:System.Linq.Expressions.ExpressionType.Increment
  id: Increment
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Increment
  nameWithType: ExpressionType.Increment
  fullName: System.Linq.Expressions.ExpressionType.Increment
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Increment
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 469
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary increment operation, such as <code>(a + 1)</code> in C# and Visual Basic. The object <code>a</code> should not be modified in place.</p>\n"
  syntax:
    content: Increment = 54
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Index
  commentId: F:System.Linq.Expressions.ExpressionType.Index
  id: Index
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Index
  nameWithType: ExpressionType.Index
  fullName: System.Linq.Expressions.ExpressionType.Index
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Index
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 470
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An index operation or an operation that accesses a property that takes arguments. </p>\n"
  syntax:
    content: Index = 55
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Invoke
  commentId: F:System.Linq.Expressions.ExpressionType.Invoke
  id: Invoke
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Invoke
  nameWithType: ExpressionType.Invoke
  fullName: System.Linq.Expressions.ExpressionType.Invoke
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Invoke
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 471
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that invokes a delegate or lambda expression, such as <code>sampleDelegate.Invoke()</code>.</p>\n"
  syntax:
    content: Invoke = 17
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.IsFalse
  commentId: F:System.Linq.Expressions.ExpressionType.IsFalse
  id: IsFalse
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: IsFalse
  nameWithType: ExpressionType.IsFalse
  fullName: System.Linq.Expressions.ExpressionType.IsFalse
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsFalse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 472
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A <strong>false</strong> condition value.</p>\n"
  syntax:
    content: IsFalse = 84
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.IsTrue
  commentId: F:System.Linq.Expressions.ExpressionType.IsTrue
  id: IsTrue
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: IsTrue
  nameWithType: ExpressionType.IsTrue
  fullName: System.Linq.Expressions.ExpressionType.IsTrue
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsTrue
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 473
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A <strong>true</strong> condition value.</p>\n"
  syntax:
    content: IsTrue = 83
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Label
  commentId: F:System.Linq.Expressions.ExpressionType.Label
  id: Label
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Label
  nameWithType: ExpressionType.Label
  fullName: System.Linq.Expressions.ExpressionType.Label
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 474
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A label.</p>\n"
  syntax:
    content: Label = 56
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Lambda
  commentId: F:System.Linq.Expressions.ExpressionType.Lambda
  id: Lambda
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Lambda
  nameWithType: ExpressionType.Lambda
  fullName: System.Linq.Expressions.ExpressionType.Lambda
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Lambda
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 475
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A lambda expression, such as <code>a =&gt; a + a</code> in C# or <code>Function(a) a + a</code> in Visual Basic.</p>\n"
  syntax:
    content: Lambda = 18
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.LeftShift
  commentId: F:System.Linq.Expressions.ExpressionType.LeftShift
  id: LeftShift
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: LeftShift
  nameWithType: ExpressionType.LeftShift
  fullName: System.Linq.Expressions.ExpressionType.LeftShift
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 476
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise left-shift operation, such as <code>(a &lt;&lt; b)</code>.</p>\n"
  syntax:
    content: LeftShift = 19
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.LeftShiftAssign
  commentId: F:System.Linq.Expressions.ExpressionType.LeftShiftAssign
  id: LeftShiftAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: LeftShiftAssign
  nameWithType: ExpressionType.LeftShiftAssign
  fullName: System.Linq.Expressions.ExpressionType.LeftShiftAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeftShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 477
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise left-shift compound assignment, such as <code>(a &lt;&lt;= b)</code>.</p>\n"
  syntax:
    content: LeftShiftAssign = 67
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.LessThan
  commentId: F:System.Linq.Expressions.ExpressionType.LessThan
  id: LessThan
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: LessThan
  nameWithType: ExpressionType.LessThan
  fullName: System.Linq.Expressions.ExpressionType.LessThan
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThan
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 478
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A \"less than\" comparison, such as <code>(a &lt; b)</code>.</p>\n"
  syntax:
    content: LessThan = 20
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.LessThanOrEqual
  commentId: F:System.Linq.Expressions.ExpressionType.LessThanOrEqual
  id: LessThanOrEqual
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: LessThanOrEqual
  nameWithType: ExpressionType.LessThanOrEqual
  fullName: System.Linq.Expressions.ExpressionType.LessThanOrEqual
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LessThanOrEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 479
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A \"less than or equal to\" comparison, such as <code>(a &lt;= b)</code>.</p>\n"
  syntax:
    content: LessThanOrEqual = 21
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ListInit
  commentId: F:System.Linq.Expressions.ExpressionType.ListInit
  id: ListInit
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ListInit
  nameWithType: ExpressionType.ListInit
  fullName: System.Linq.Expressions.ExpressionType.ListInit
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ListInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 480
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that creates a new <xref href=\"System.Collections.IEnumerable\" data-throw-if-not-resolved=\"false\"></xref> object and initializes it from a list of elements, such as <code>new List&lt;SampleType&gt;(){ a, b, c }</code> in C# or <code>Dim sampleList = { a, b, c }</code> in Visual Basic.</p>\n"
  syntax:
    content: ListInit = 22
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Loop
  commentId: F:System.Linq.Expressions.ExpressionType.Loop
  id: Loop
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Loop
  nameWithType: ExpressionType.Loop
  fullName: System.Linq.Expressions.ExpressionType.Loop
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Loop
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 481
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A loop, such as <code>for</code> or <code>while</code>.</p>\n"
  syntax:
    content: Loop = 58
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.MemberAccess
  commentId: F:System.Linq.Expressions.ExpressionType.MemberAccess
  id: MemberAccess
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: MemberAccess
  nameWithType: ExpressionType.MemberAccess
  fullName: System.Linq.Expressions.ExpressionType.MemberAccess
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberAccess
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 482
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that reads from a field or property, such as <code>obj.SampleProperty</code>.</p>\n"
  syntax:
    content: MemberAccess = 23
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.MemberInit
  commentId: F:System.Linq.Expressions.ExpressionType.MemberInit
  id: MemberInit
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: MemberInit
  nameWithType: ExpressionType.MemberInit
  fullName: System.Linq.Expressions.ExpressionType.MemberInit
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 483
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that creates a new object and initializes one or more of its members, such as <code>new Point { X = 1, Y = 2 }</code> in C# or <code>New Point With {.X = 1, .Y = 2}</code> in Visual Basic.</p>\n"
  syntax:
    content: MemberInit = 24
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Modulo
  commentId: F:System.Linq.Expressions.ExpressionType.Modulo
  id: Modulo
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Modulo
  nameWithType: ExpressionType.Modulo
  fullName: System.Linq.Expressions.ExpressionType.Modulo
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modulo
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 484
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An arithmetic remainder operation, such as <code>(a % b)</code> in C# or <code>(a Mod b)</code> in Visual Basic.</p>\n"
  syntax:
    content: Modulo = 25
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.ModuloAssign
  commentId: F:System.Linq.Expressions.ExpressionType.ModuloAssign
  id: ModuloAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: ModuloAssign
  nameWithType: ExpressionType.ModuloAssign
  fullName: System.Linq.Expressions.ExpressionType.ModuloAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ModuloAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 485
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An arithmetic remainder compound assignment operation, such as <code>(a %= b)</code> in C#.</p>\n"
  syntax:
    content: ModuloAssign = 68
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Multiply
  commentId: F:System.Linq.Expressions.ExpressionType.Multiply
  id: Multiply
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Multiply
  nameWithType: ExpressionType.Multiply
  fullName: System.Linq.Expressions.ExpressionType.Multiply
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Multiply
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 486
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A multiplication operation, such as <code>(a * b)</code>, without overflow checking, for numeric operands.</p>\n"
  syntax:
    content: Multiply = 26
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.MultiplyAssign
  commentId: F:System.Linq.Expressions.ExpressionType.MultiplyAssign
  id: MultiplyAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: MultiplyAssign
  nameWithType: ExpressionType.MultiplyAssign
  fullName: System.Linq.Expressions.ExpressionType.MultiplyAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 487
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A multiplication compound assignment operation, such as <code>(a *= b)</code>, without overflow checking, for numeric operands.</p>\n"
  syntax:
    content: MultiplyAssign = 69
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.MultiplyAssignChecked
  commentId: F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked
  id: MultiplyAssignChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: MultiplyAssignChecked
  nameWithType: ExpressionType.MultiplyAssignChecked
  fullName: System.Linq.Expressions.ExpressionType.MultiplyAssignChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 488
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A multiplication compound assignment operation, such as <code>(a *= b)</code>, that has overflow checking, for numeric operands.</p>\n"
  syntax:
    content: MultiplyAssignChecked = 75
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.MultiplyChecked
  commentId: F:System.Linq.Expressions.ExpressionType.MultiplyChecked
  id: MultiplyChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: MultiplyChecked
  nameWithType: ExpressionType.MultiplyChecked
  fullName: System.Linq.Expressions.ExpressionType.MultiplyChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MultiplyChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 489
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An multiplication operation, such as <code>(a * b)</code>, that has overflow checking, for numeric operands.</p>\n"
  syntax:
    content: MultiplyChecked = 27
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Negate
  commentId: F:System.Linq.Expressions.ExpressionType.Negate
  id: Negate
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Negate
  nameWithType: ExpressionType.Negate
  fullName: System.Linq.Expressions.ExpressionType.Negate
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Negate
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 490
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An arithmetic negation operation, such as <code>(-a)</code>. The object <code>a</code> should not be modified in place.</p>\n"
  syntax:
    content: Negate = 28
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.NegateChecked
  commentId: F:System.Linq.Expressions.ExpressionType.NegateChecked
  id: NegateChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: NegateChecked
  nameWithType: ExpressionType.NegateChecked
  fullName: System.Linq.Expressions.ExpressionType.NegateChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NegateChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 491
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An arithmetic negation operation, such as <code>(-a)</code>, that has overflow checking. The object <code>a</code> should not be modified in place.</p>\n"
  syntax:
    content: NegateChecked = 30
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.New
  commentId: F:System.Linq.Expressions.ExpressionType.New
  id: New
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: New
  nameWithType: ExpressionType.New
  fullName: System.Linq.Expressions.ExpressionType.New
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: New
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 492
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that calls a constructor to create a new object, such as <code>new SampleType()</code>.</p>\n"
  syntax:
    content: New = 31
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.NewArrayBounds
  commentId: F:System.Linq.Expressions.ExpressionType.NewArrayBounds
  id: NewArrayBounds
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: NewArrayBounds
  nameWithType: ExpressionType.NewArrayBounds
  fullName: System.Linq.Expressions.ExpressionType.NewArrayBounds
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayBounds
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 493
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that creates a new array, in which the bounds for each dimension are specified, such as <code>new SampleType[dim1, dim2]</code> in C# or <code>New SampleType(dim1, dim2)</code> in Visual Basic.</p>\n"
  syntax:
    content: NewArrayBounds = 33
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.NewArrayInit
  commentId: F:System.Linq.Expressions.ExpressionType.NewArrayInit
  id: NewArrayInit
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: NewArrayInit
  nameWithType: ExpressionType.NewArrayInit
  fullName: System.Linq.Expressions.ExpressionType.NewArrayInit
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewArrayInit
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 494
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that creates a new one-dimensional array and initializes it from a list of elements, such as <code>new SampleType[]{a, b, c}</code> in C# or <code>New SampleType(){a, b, c}</code> in Visual Basic.</p>\n"
  syntax:
    content: NewArrayInit = 32
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Not
  commentId: F:System.Linq.Expressions.ExpressionType.Not
  id: Not
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Not
  nameWithType: ExpressionType.Not
  fullName: System.Linq.Expressions.ExpressionType.Not
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Not
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 495
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise complement or logical negation operation. In C#, it is equivalent to <code>(~a)</code> for integral types and to <code>(!a)</code> for Boolean values. In Visual Basic, it is equivalent to <code>(Not a)</code>. The object <code>a</code> should not be modified in place.</p>\n"
  syntax:
    content: Not = 34
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.NotEqual
  commentId: F:System.Linq.Expressions.ExpressionType.NotEqual
  id: NotEqual
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: NotEqual
  nameWithType: ExpressionType.NotEqual
  fullName: System.Linq.Expressions.ExpressionType.NotEqual
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NotEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 496
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An inequality comparison, such as <code>(a != b)</code> in C# or <code>(a &lt;&gt; b)</code> in Visual Basic.</p>\n"
  syntax:
    content: NotEqual = 35
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.OnesComplement
  commentId: F:System.Linq.Expressions.ExpressionType.OnesComplement
  id: OnesComplement
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: OnesComplement
  nameWithType: ExpressionType.OnesComplement
  fullName: System.Linq.Expressions.ExpressionType.OnesComplement
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnesComplement
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 497
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A ones complement operation, such as <code>(~a)</code> in C#.</p>\n"
  syntax:
    content: OnesComplement = 82
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Or
  commentId: F:System.Linq.Expressions.ExpressionType.Or
  id: Or
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Or
  nameWithType: ExpressionType.Or
  fullName: System.Linq.Expressions.ExpressionType.Or
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Or
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 498
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise or logical <strong>OR</strong> operation, such as <code>(a | b)</code> in C# or <code>(a Or b)</code> in Visual Basic.</p>\n"
  syntax:
    content: Or = 36
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.OrAssign
  commentId: F:System.Linq.Expressions.ExpressionType.OrAssign
  id: OrAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: OrAssign
  nameWithType: ExpressionType.OrAssign
  fullName: System.Linq.Expressions.ExpressionType.OrAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 499
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise or logical <strong>OR</strong> compound assignment, such as <code>(a |= b)</code> in C#.</p>\n"
  syntax:
    content: OrAssign = 70
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.OrElse
  commentId: F:System.Linq.Expressions.ExpressionType.OrElse
  id: OrElse
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: OrElse
  nameWithType: ExpressionType.OrElse
  fullName: System.Linq.Expressions.ExpressionType.OrElse
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrElse
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 500
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A short-circuiting conditional <strong>OR</strong> operation, such as <code>(a || b)</code> in C# or <code>(a OrElse b)</code> in Visual Basic.</p>\n"
  syntax:
    content: OrElse = 37
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Parameter
  commentId: F:System.Linq.Expressions.ExpressionType.Parameter
  id: Parameter
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Parameter
  nameWithType: ExpressionType.Parameter
  fullName: System.Linq.Expressions.ExpressionType.Parameter
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parameter
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 501
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A reference to a parameter or variable that is defined in the context of the expression. For more information, see <xref href=\"System.Linq.Expressions.ParameterExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: Parameter = 38
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.PostDecrementAssign
  commentId: F:System.Linq.Expressions.ExpressionType.PostDecrementAssign
  id: PostDecrementAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: PostDecrementAssign
  nameWithType: ExpressionType.PostDecrementAssign
  fullName: System.Linq.Expressions.ExpressionType.PostDecrementAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 502
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary postfix decrement, such as <code>(a--)</code>. The object <code>a</code> should be modified in place.</p>\n"
  syntax:
    content: PostDecrementAssign = 80
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.PostIncrementAssign
  commentId: F:System.Linq.Expressions.ExpressionType.PostIncrementAssign
  id: PostIncrementAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: PostIncrementAssign
  nameWithType: ExpressionType.PostIncrementAssign
  fullName: System.Linq.Expressions.ExpressionType.PostIncrementAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PostIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 503
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary postfix increment, such as <code>(a++)</code>. The object <code>a</code> should be modified in place.</p>\n"
  syntax:
    content: PostIncrementAssign = 79
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Power
  commentId: F:System.Linq.Expressions.ExpressionType.Power
  id: Power
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Power
  nameWithType: ExpressionType.Power
  fullName: System.Linq.Expressions.ExpressionType.Power
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Power
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 504
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A mathematical operation that raises a number to a power, such as <code>(a ^ b)</code> in Visual Basic.</p>\n"
  syntax:
    content: Power = 39
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.PowerAssign
  commentId: F:System.Linq.Expressions.ExpressionType.PowerAssign
  id: PowerAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: PowerAssign
  nameWithType: ExpressionType.PowerAssign
  fullName: System.Linq.Expressions.ExpressionType.PowerAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PowerAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 505
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A compound assignment operation that raises a number to a power, such as <code>(a ^= b)</code> in Visual Basic.</p>\n"
  syntax:
    content: PowerAssign = 71
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.PreDecrementAssign
  commentId: F:System.Linq.Expressions.ExpressionType.PreDecrementAssign
  id: PreDecrementAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: PreDecrementAssign
  nameWithType: ExpressionType.PreDecrementAssign
  fullName: System.Linq.Expressions.ExpressionType.PreDecrementAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreDecrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 506
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary prefix decrement, such as <code>(--a)</code>. The object <code>a</code> should be modified in place.</p>\n"
  syntax:
    content: PreDecrementAssign = 78
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.PreIncrementAssign
  commentId: F:System.Linq.Expressions.ExpressionType.PreIncrementAssign
  id: PreIncrementAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: PreIncrementAssign
  nameWithType: ExpressionType.PreIncrementAssign
  fullName: System.Linq.Expressions.ExpressionType.PreIncrementAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreIncrementAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 507
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary prefix increment, such as <code>(++a)</code>. The object <code>a</code> should be modified in place.</p>\n"
  syntax:
    content: PreIncrementAssign = 77
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Quote
  commentId: F:System.Linq.Expressions.ExpressionType.Quote
  id: Quote
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Quote
  nameWithType: ExpressionType.Quote
  fullName: System.Linq.Expressions.ExpressionType.Quote
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Quote
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 508
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An expression that has a constant value of type <xref href=\"System.Linq.Expressions.Expression\" data-throw-if-not-resolved=\"false\"></xref>. A <xref href=\"System.Linq.Expressions.ExpressionType.Quote\" data-throw-if-not-resolved=\"false\"></xref> node can contain references to parameters that are defined in the context of the expression it represents.</p>\n"
  syntax:
    content: Quote = 40
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.RightShift
  commentId: F:System.Linq.Expressions.ExpressionType.RightShift
  id: RightShift
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: RightShift
  nameWithType: ExpressionType.RightShift
  fullName: System.Linq.Expressions.ExpressionType.RightShift
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShift
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 509
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise right-shift operation, such as <code>(a &gt;&gt; b)</code>.</p>\n"
  syntax:
    content: RightShift = 41
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.RightShiftAssign
  commentId: F:System.Linq.Expressions.ExpressionType.RightShiftAssign
  id: RightShiftAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: RightShiftAssign
  nameWithType: ExpressionType.RightShiftAssign
  fullName: System.Linq.Expressions.ExpressionType.RightShiftAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RightShiftAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 510
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A bitwise right-shift compound assignment operation, such as <code>(a &gt;&gt;= b)</code>.</p>\n"
  syntax:
    content: RightShiftAssign = 72
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.RuntimeVariables
  commentId: F:System.Linq.Expressions.ExpressionType.RuntimeVariables
  id: RuntimeVariables
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: RuntimeVariables
  nameWithType: ExpressionType.RuntimeVariables
  fullName: System.Linq.Expressions.ExpressionType.RuntimeVariables
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RuntimeVariables
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 511
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A list of run-time variables. For more information, see <xref href=\"System.Linq.Expressions.RuntimeVariablesExpression\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: RuntimeVariables = 57
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Subtract
  commentId: F:System.Linq.Expressions.ExpressionType.Subtract
  id: Subtract
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Subtract
  nameWithType: ExpressionType.Subtract
  fullName: System.Linq.Expressions.ExpressionType.Subtract
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subtract
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 512
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A subtraction operation, such as <code>(a - b)</code>, without overflow checking, for numeric operands.</p>\n"
  syntax:
    content: Subtract = 42
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.SubtractAssign
  commentId: F:System.Linq.Expressions.ExpressionType.SubtractAssign
  id: SubtractAssign
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: SubtractAssign
  nameWithType: ExpressionType.SubtractAssign
  fullName: System.Linq.Expressions.ExpressionType.SubtractAssign
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssign
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 513
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A subtraction compound assignment operation, such as <code>(a -= b)</code>, without overflow checking, for numeric operands.</p>\n"
  syntax:
    content: SubtractAssign = 73
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.SubtractAssignChecked
  commentId: F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked
  id: SubtractAssignChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: SubtractAssignChecked
  nameWithType: ExpressionType.SubtractAssignChecked
  fullName: System.Linq.Expressions.ExpressionType.SubtractAssignChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractAssignChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 514
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A subtraction compound assignment operation, such as <code>(a -= b)</code>, that has overflow checking, for numeric operands.</p>\n"
  syntax:
    content: SubtractAssignChecked = 76
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.SubtractChecked
  commentId: F:System.Linq.Expressions.ExpressionType.SubtractChecked
  id: SubtractChecked
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: SubtractChecked
  nameWithType: ExpressionType.SubtractChecked
  fullName: System.Linq.Expressions.ExpressionType.SubtractChecked
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubtractChecked
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 515
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An arithmetic subtraction operation, such as <code>(a - b)</code>, that has overflow checking, for numeric operands.</p>\n"
  syntax:
    content: SubtractChecked = 43
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Switch
  commentId: F:System.Linq.Expressions.ExpressionType.Switch
  id: Switch
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Switch
  nameWithType: ExpressionType.Switch
  fullName: System.Linq.Expressions.ExpressionType.Switch
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Switch
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 516
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A switch operation, such as <strong>switch</strong> in C# or <strong>Select Case</strong> in Visual Basic.</p>\n"
  syntax:
    content: Switch = 59
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Throw
  commentId: F:System.Linq.Expressions.ExpressionType.Throw
  id: Throw
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Throw
  nameWithType: ExpressionType.Throw
  fullName: System.Linq.Expressions.ExpressionType.Throw
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Throw
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 517
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An operation that throws an exception, such as <code>throw new Exception()</code>.</p>\n"
  syntax:
    content: Throw = 60
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Try
  commentId: F:System.Linq.Expressions.ExpressionType.Try
  id: Try
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Try
  nameWithType: ExpressionType.Try
  fullName: System.Linq.Expressions.ExpressionType.Try
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Try
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 518
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A <strong>try-catch</strong> expression.</p>\n"
  syntax:
    content: Try = 61
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.TypeAs
  commentId: F:System.Linq.Expressions.ExpressionType.TypeAs
  id: TypeAs
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: TypeAs
  nameWithType: ExpressionType.TypeAs
  fullName: System.Linq.Expressions.ExpressionType.TypeAs
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeAs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 519
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An explicit reference or boxing conversion in which <strong>null</strong> is supplied if the conversion fails, such as <code>(obj as SampleType)</code> in C# or <code>TryCast(obj, SampleType)</code> in Visual Basic.</p>\n"
  syntax:
    content: TypeAs = 44
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.TypeEqual
  commentId: F:System.Linq.Expressions.ExpressionType.TypeEqual
  id: TypeEqual
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: TypeEqual
  nameWithType: ExpressionType.TypeEqual
  fullName: System.Linq.Expressions.ExpressionType.TypeEqual
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeEqual
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 520
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An exact type test.</p>\n"
  syntax:
    content: TypeEqual = 81
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.TypeIs
  commentId: F:System.Linq.Expressions.ExpressionType.TypeIs
  id: TypeIs
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: TypeIs
  nameWithType: ExpressionType.TypeIs
  fullName: System.Linq.Expressions.ExpressionType.TypeIs
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeIs
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 521
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A type test, such as <code>obj is SampleType</code> in C# or <code>TypeOf obj is SampleType</code> in Visual Basic.</p>\n"
  syntax:
    content: TypeIs = 45
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.UnaryPlus
  commentId: F:System.Linq.Expressions.ExpressionType.UnaryPlus
  id: UnaryPlus
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: UnaryPlus
  nameWithType: ExpressionType.UnaryPlus
  fullName: System.Linq.Expressions.ExpressionType.UnaryPlus
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnaryPlus
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 522
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>A unary plus operation, such as <code>(+a)</code>. The result of a predefined unary plus operation is the value of the operand, but user-defined implementations might have unusual results.</p>\n"
  syntax:
    content: UnaryPlus = 29
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Linq.Expressions.ExpressionType.Unbox
  commentId: F:System.Linq.Expressions.ExpressionType.Unbox
  id: Unbox
  parent: System.Linq.Expressions.ExpressionType
  langs:
  - csharp
  - vb
  name: Unbox
  nameWithType: ExpressionType.Unbox
  fullName: System.Linq.Expressions.ExpressionType.Unbox
  type: Field
  source:
    remote:
      path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Unbox
    path: src/System.Linq.Expressions/ref/System.Linq.Expressions.cs
    startLine: 523
  assemblies:
  - System.Linq.Expressions
  namespace: System.Linq.Expressions
  summary: "\n<p>An unbox value type operation, such as <strong>unbox</strong> and <strong>unbox.any</strong> instructions in MSIL. </p>\n"
  syntax:
    content: Unbox = 62
    return:
      type: System.Linq.Expressions.ExpressionType
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: System.Linq.Expressions
  commentId: N:System.Linq.Expressions
  isExternal: false
  name: System.Linq.Expressions
  nameWithType: System.Linq.Expressions
  fullName: System.Linq.Expressions
- uid: System.Linq.Expressions.ExpressionType
  commentId: T:System.Linq.Expressions.ExpressionType
  parent: System.Linq.Expressions
  isExternal: false
  name: Linq.Expressions.ExpressionType
  nameWithType: Linq.Expressions.ExpressionType
  fullName: System.Linq.Expressions.ExpressionType
