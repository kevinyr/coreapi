items:
- uid: System.IO.Packaging.PackageRelationship
  commentId: T:System.IO.Packaging.PackageRelationship
  id: PackageRelationship
  parent: System.IO.Packaging
  children:
  - System.IO.Packaging.PackageRelationship.Id
  - System.IO.Packaging.PackageRelationship.Package
  - System.IO.Packaging.PackageRelationship.RelationshipType
  - System.IO.Packaging.PackageRelationship.SourceUri
  - System.IO.Packaging.PackageRelationship.TargetMode
  - System.IO.Packaging.PackageRelationship.TargetUri
  langs:
  - csharp
  - vb
  name: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
  type: Class
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PackageRelationship
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 123
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Represents an association between a source <xref href=\"System.IO.Packaging.Package\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Packaging.PackagePart\" data-throw-if-not-resolved=\"false\"></xref>, and a target object which can be a <xref href=\"System.IO.Packaging.PackagePart\" data-throw-if-not-resolved=\"false\"></xref> or external resource.</p>\n"
  syntax:
    content: public class PackageRelationship
    content.vb: Public Class PackageRelationship
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: PackageRelationship
- uid: System.IO.Packaging.PackageRelationship.Id
  commentId: P:System.IO.Packaging.PackageRelationship.Id
  id: Id
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  - vb
  name: Id
  fullName: System.IO.Packaging.PackageRelationship.Id
  type: Property
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Id
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 126
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Gets a string that identifies the relationship.</p>\n"
  syntax:
    content: public string Id { get; }
    content.vb: Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A string that identifies the relationship.</p>\n"
  seealso:
  - type: System.IO.Packaging.PackageRelationship.RelationshipType
    commentId: P:System.IO.Packaging.PackageRelationship.RelationshipType
  - type: System.IO.Packaging.PackageRelationship.SourceUri
    commentId: P:System.IO.Packaging.PackageRelationship.SourceUri
  - type: System.IO.Packaging.PackageRelationship.TargetUri
    commentId: P:System.IO.Packaging.PackageRelationship.TargetUri
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PackageRelationship.Id
- uid: System.IO.Packaging.PackageRelationship.Package
  commentId: P:System.IO.Packaging.PackageRelationship.Package
  id: Package
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  - vb
  name: Package
  fullName: System.IO.Packaging.PackageRelationship.Package
  type: Property
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Package
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 127
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Gets the <xref href=\"System.IO.Packaging.Package\" data-throw-if-not-resolved=\"false\"></xref> that contains this relationship.</p>\n"
  syntax:
    content: public Package Package { get; }
    content.vb: Public ReadOnly Property Package As Package
    parameters: []
    return:
      type: System.IO.Packaging.Package
      description: "\n<p>The package that contains this relationship.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PackageRelationship.Package
- uid: System.IO.Packaging.PackageRelationship.RelationshipType
  commentId: P:System.IO.Packaging.PackageRelationship.RelationshipType
  id: RelationshipType
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  - vb
  name: RelationshipType
  fullName: System.IO.Packaging.PackageRelationship.RelationshipType
  type: Property
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RelationshipType
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 128
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Gets the qualified type name of the relationship. </p>\n"
  syntax:
    content: public string RelationshipType { get; }
    content.vb: Public ReadOnly Property RelationshipType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The qualified type name of the relationship.</p>\n"
  seealso:
  - type: System.IO.Packaging.PackageRelationship.Id
    commentId: P:System.IO.Packaging.PackageRelationship.Id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PackageRelationship.RelationshipType
- uid: System.IO.Packaging.PackageRelationship.SourceUri
  commentId: P:System.IO.Packaging.PackageRelationship.SourceUri
  id: SourceUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  - vb
  name: SourceUri
  fullName: System.IO.Packaging.PackageRelationship.SourceUri
  type: Property
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SourceUri
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 129
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Gets the URI of the package or partÂ that owns the relationship.</p>\n"
  syntax:
    content: public Uri SourceUri { get; }
    content.vb: Public ReadOnly Property SourceUri As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\n<p>The URI of the <xref href=\"System.IO.Packaging.Package\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Packaging.PackagePart\" data-throw-if-not-resolved=\"false\"></xref> that owns the relationship.</p>\n"
  seealso:
  - type: System.IO.Packaging.PackageRelationship.TargetUri
    commentId: P:System.IO.Packaging.PackageRelationship.TargetUri
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PackageRelationship.SourceUri
- uid: System.IO.Packaging.PackageRelationship.TargetMode
  commentId: P:System.IO.Packaging.PackageRelationship.TargetMode
  id: TargetMode
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  - vb
  name: TargetMode
  fullName: System.IO.Packaging.PackageRelationship.TargetMode
  type: Property
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TargetMode
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 130
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Gets a value that indicates whether the target of the relationship is <xref href=\"System.IO.Packaging.TargetMode.Internal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Packaging.TargetMode.External\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.IO.Packaging.Package\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public TargetMode TargetMode { get; }
    content.vb: Public ReadOnly Property TargetMode As TargetMode
    parameters: []
    return:
      type: System.IO.Packaging.TargetMode
      description: "\n<p>An enumeration value that indicates whether <xref href=\"System.IO.Packaging.PackageRelationship.TargetUri\" data-throw-if-not-resolved=\"false\"></xref> references a resource <xref href=\"System.IO.Packaging.TargetMode.Internal\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.IO.Packaging.TargetMode.External\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"System.IO.Packaging.Package\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.IO.Packaging.PackageRelationship.TargetUri
    commentId: P:System.IO.Packaging.PackageRelationship.TargetUri
  - type: System.IO.Packaging.PackageRelationship.SourceUri
    commentId: P:System.IO.Packaging.PackageRelationship.SourceUri
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PackageRelationship.TargetMode
- uid: System.IO.Packaging.PackageRelationship.TargetUri
  commentId: P:System.IO.Packaging.PackageRelationship.TargetUri
  id: TargetUri
  parent: System.IO.Packaging.PackageRelationship
  langs:
  - csharp
  - vb
  name: TargetUri
  fullName: System.IO.Packaging.PackageRelationship.TargetUri
  type: Property
  source:
    remote:
      path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TargetUri
    path: src/System.IO.Packaging/ref/System.IO.Packaging.cs
    startLine: 131
  assemblies:
  - System.IO.Packaging
  namespace: System.IO.Packaging
  summary: "\n<p>Gets the URI of the target resource of the relationship.</p>\n"
  syntax:
    content: public Uri TargetUri { get; }
    content.vb: Public ReadOnly Property TargetUri As Uri
    parameters: []
    return:
      type: System.Uri
      description: "\n<p>The URI of the target resource.</p>\n"
  seealso:
  - type: System.IO.Packaging.PackageRelationship.SourceUri
    commentId: P:System.IO.Packaging.PackageRelationship.SourceUri
  - type: System.IO.Packaging.PackageRelationship.TargetMode
    commentId: P:System.IO.Packaging.PackageRelationship.TargetMode
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: PackageRelationship.TargetUri
references:
- uid: System.IO.Packaging
  isExternal: false
  name: System.IO.Packaging
  fullName: System.IO.Packaging
  commentId: N:System.IO.Packaging
  nameWithType: System.IO.Packaging
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  fullName: System.IO.Packaging.Package
  commentId: T:System.IO.Packaging.Package
  nameWithType: Package
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
  commentId: T:System.Uri
  nameWithType: Uri
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  fullName: System.IO.Packaging.TargetMode
  commentId: T:System.IO.Packaging.TargetMode
  nameWithType: TargetMode
