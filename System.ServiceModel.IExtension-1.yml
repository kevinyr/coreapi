items:
- uid: System.ServiceModel.IExtension`1
  commentId: T:System.ServiceModel.IExtension`1
  id: IExtension`1
  parent: System.ServiceModel
  children:
  - System.ServiceModel.IExtension`1.Attach(`0)
  - System.ServiceModel.IExtension`1.Detach(`0)
  langs:
  - csharp
  - vb
  name: IExtension<T>
  fullName: System.ServiceModel.IExtension<T>
  type: Interface
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtension.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IExtension
    path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtension.cs
    startLine: 9
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Enables an object to extend another object through aggregation.</p>\n"
  syntax:
    content: >-
      public interface IExtension<T>
          where T : IExtensibleObject<T>
    content.vb: Public Interface IExtension(Of T As IExtensibleObject(Of T))
    typeParameters:
    - id: T
      description: "\n<p>The object that participates in the custom behavior.</p>\n"
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
  fullName.vb: System.ServiceModel.IExtension(Of T)
  name.vb: IExtension(Of T)
  nameWithType: IExtension<T>
  nameWithType.vb: IExtension(Of T)
- uid: System.ServiceModel.IExtension`1.Attach(`0)
  commentId: M:System.ServiceModel.IExtension`1.Attach(`0)
  id: Attach(`0)
  parent: System.ServiceModel.IExtension`1
  langs:
  - csharp
  - vb
  name: Attach(T)
  fullName: System.ServiceModel.IExtension<T>.Attach(T)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtension.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Attach
    path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtension.cs
    startLine: 11
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Enables an extension object to find out when it has been aggregated. Called when the extension is added to the <xref href=\"System.ServiceModel.IExtensibleObject`1.Extensions\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: void Attach(T owner)
    content.vb: Sub Attach(owner As T)
    parameters:
    - id: owner
      type: '{T}'
      description: "\n<p>The extensible object that aggregates this extension.</p>\n"
  fullName.vb: System.ServiceModel.IExtension(Of T).Attach(T)
  nameWithType: IExtension<T>.Attach(T)
  nameWithType.vb: IExtension(Of T).Attach(T)
- uid: System.ServiceModel.IExtension`1.Detach(`0)
  commentId: M:System.ServiceModel.IExtension`1.Detach(`0)
  id: Detach(`0)
  parent: System.ServiceModel.IExtension`1
  langs:
  - csharp
  - vb
  name: Detach(T)
  fullName: System.ServiceModel.IExtension<T>.Detach(T)
  type: Method
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtension.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Detach
    path: src/System.Private.ServiceModel/src/System/ServiceModel/IExtension.cs
    startLine: 12
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel
  summary: "\n<p>Enables an object to find out when it is no longer aggregated. Called when an extension is removed from the <xref href=\"System.ServiceModel.IExtensibleObject`1.Extensions\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: void Detach(T owner)
    content.vb: Sub Detach(owner As T)
    parameters:
    - id: owner
      type: '{T}'
      description: "\n<p>The extensible object that aggregates this extension.</p>\n"
  fullName.vb: System.ServiceModel.IExtension(Of T).Detach(T)
  nameWithType: IExtension<T>.Detach(T)
  nameWithType.vb: IExtension(Of T).Detach(T)
references:
- uid: System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  fullName: System.ServiceModel
  nameWithType: System.ServiceModel
  commentId: N:System.ServiceModel
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
