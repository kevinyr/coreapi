### YamlMime:ManagedReference
items:
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  id: Encoding
  parent: System.Text
  children:
  - System.Text.Encoding.#ctor
  - System.Text.Encoding.#ctor(System.Int32)
  - System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.ASCII
  - System.Text.Encoding.BigEndianUnicode
  - System.Text.Encoding.Clone
  - System.Text.Encoding.CodePage
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  - System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.DecoderFallback
  - System.Text.Encoding.EncoderFallback
  - System.Text.Encoding.EncodingName
  - System.Text.Encoding.Equals(System.Object)
  - System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  - System.Text.Encoding.GetByteCount(System.Char[])
  - System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetByteCount(System.String)
  - System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char[])
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  - System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.Encoding.GetBytes(System.String)
  - System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  - System.Text.Encoding.GetCharCount(System.Byte[])
  - System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - System.Text.Encoding.GetChars(System.Byte[])
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  - System.Text.Encoding.GetDecoder
  - System.Text.Encoding.GetEncoder
  - System.Text.Encoding.GetEncoding(System.Int32)
  - System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetEncoding(System.String)
  - System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  - System.Text.Encoding.GetHashCode
  - System.Text.Encoding.GetMaxByteCount(System.Int32)
  - System.Text.Encoding.GetMaxCharCount(System.Int32)
  - System.Text.Encoding.GetPreamble
  - System.Text.Encoding.GetString(System.Byte*,System.Int32)
  - System.Text.Encoding.GetString(System.Byte[])
  - System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  - System.Text.Encoding.IsSingleByte
  - System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  - System.Text.Encoding.Unicode
  - System.Text.Encoding.UTF32
  - System.Text.Encoding.UTF7
  - System.Text.Encoding.UTF8
  - System.Text.Encoding.WebName
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Encoding
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 84
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Represents a character encoding.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public abstract class Encoding : ICloneable
    content.vb: >-
      <ComVisible(True)>

      Public MustInherit Class Encoding
          Implements ICloneable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Text.Encoding.#ctor
  commentId: M:System.Text.Encoding.#ctor
  id: '#ctor'
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Encoding()
  nameWithType: Encoding.Encoding()
  fullName: System.Text.Encoding.Encoding()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 192
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected Encoding()
    content.vb: Protected Sub New
  seealso:
  - linkId: System.Text.Encoding.CodePage
    commentId: P:System.Text.Encoding.CodePage
  - linkId: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.Encoding.#ctor(System.Int32)
  commentId: M:System.Text.Encoding.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Encoding(Int32)
  nameWithType: Encoding.Encoding(Int32)
  fullName: System.Text.Encoding.Encoding(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 197
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class that corresponds to the specified code page.</p>\n"
  syntax:
    content: protected Encoding(int codePage)
    content.vb: Protected Sub New(codePage As Integer)
    parameters:
    - id: codePage
      type: System.Int32
      description: "\n<p>The code page identifier of the preferred encoding.</p>\n<p>-or- </p>\n<p>0, to use the default encoding. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>codePage</em> is less than zero. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.CodePage
    commentId: P:System.Text.Encoding.CodePage
  - linkId: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.Encoding.#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: '#ctor(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)'
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Encoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.Encoding(Int32, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.Encoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 216
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class that corresponds to the specified code page with the specified encoder and decoder fallback strategies. </p>\n"
  syntax:
    content: protected Encoding(int codePage, EncoderFallback encoderFallback, DecoderFallback decoderFallback)
    content.vb: Protected Sub New(codePage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback)
    parameters:
    - id: codePage
      type: System.Int32
      description: "\n<p>The encoding code page identifier. </p>\n"
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding. </p>\n"
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>codePage</em> is less than zero. </p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Text.Encoding.ASCII
  commentId: P:System.Text.Encoding.ASCII
  id: ASCII
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: ASCII
  nameWithType: Encoding.ASCII
  fullName: System.Text.Encoding.ASCII
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ASCII
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 899
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets an encoding for the ASCII (7-bit) character set.</p>\n"
  syntax:
    content: public static Encoding ASCII { get; }
    content.vb: Public Shared ReadOnly Property ASCII As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>An  encoding for the ASCII (7-bit) character set.</p>\n"
  seealso:
  - linkId: System.Text.ASCIIEncoding
    commentId: T:System.Text.ASCIIEncoding
  - linkId: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  - linkId: System.Text.Encoding.UTF8
    commentId: P:System.Text.Encoding.UTF8
  - linkId: System.Text.Encoding.Unicode
    commentId: P:System.Text.Encoding.Unicode
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.Encoding.BigEndianUnicode
  commentId: P:System.Text.Encoding.BigEndianUnicode
  id: BigEndianUnicode
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: BigEndianUnicode
  nameWithType: Encoding.BigEndianUnicode
  fullName: System.Text.Encoding.BigEndianUnicode
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BigEndianUnicode
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1499
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets an encoding for the UTF-16 format that uses the big endian byte order.</p>\n"
  syntax:
    content: public static Encoding BigEndianUnicode { get; }
    content.vb: Public Shared ReadOnly Property BigEndianUnicode As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>An encoding object for the UTF-16 format that uses the big endian byte order.</p>\n"
  seealso:
  - linkId: System.Text.UnicodeEncoding
    commentId: T:System.Text.UnicodeEncoding
  - linkId: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  - linkId: System.Text.Encoding.Unicode
    commentId: P:System.Text.Encoding.Unicode
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.Encoding.CodePage
  commentId: P:System.Text.Encoding.CodePage
  id: CodePage
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: CodePage
  nameWithType: Encoding.CodePage
  fullName: System.Text.Encoding.CodePage
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CodePage
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1322
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, gets the code page identifier of the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int CodePage { get; }
    content.vb: Public Overridable ReadOnly Property CodePage As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The code page identifier of the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.EncodingInfo.CodePage
    commentId: P:System.Text.EncodingInfo.CodePage
  - linkId: System.Text.Encoding.WindowsCodePage
    commentId: P:System.Text.Encoding.WindowsCodePage
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Text.Encoding.DecoderFallback
  commentId: P:System.Text.Encoding.DecoderFallback
  id: DecoderFallback
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: DecoderFallback
  nameWithType: Encoding.DecoderFallback
  fullName: System.Text.Encoding.DecoderFallback
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DecoderFallback
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 852
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets or sets the <xref href=\"System.Text.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object for the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public DecoderFallback DecoderFallback { get; set; }
    content.vb: >-
      <ComVisible(False)>

      Public Property DecoderFallback As DecoderFallback
    parameters: []
    return:
      type: System.Text.DecoderFallback
      description: "\n<p>The decoder fallback object for the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A value cannot be assigned in a set operation because the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  seealso:
  - linkId: System.Text.DecoderFallback
    commentId: T:System.Text.DecoderFallback
  - linkId: System.Text.DecoderFallbackBuffer
    commentId: T:System.Text.DecoderFallbackBuffer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.Encoding.EncoderFallback
  commentId: P:System.Text.Encoding.EncoderFallback
  id: EncoderFallback
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: EncoderFallback
  nameWithType: Encoding.EncoderFallback
  fullName: System.Text.Encoding.EncoderFallback
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EncoderFallback
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 830
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets or sets the <xref href=\"System.Text.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> object for the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public EncoderFallback EncoderFallback { get; set; }
    content.vb: >-
      <ComVisible(False)>

      Public Property EncoderFallback As EncoderFallback
    parameters: []
    return:
      type: System.Text.EncoderFallback
      description: "\n<p>The encoder fallback object for the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>A value cannot be assigned in a set operation because the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  seealso:
  - linkId: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - linkId: System.Text.EncoderFallbackBuffer
    commentId: T:System.Text.EncoderFallbackBuffer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Text.Encoding.EncodingName
  commentId: P:System.Text.Encoding.EncodingName
  id: EncodingName
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: EncodingName
  nameWithType: Encoding.EncodingName
  fullName: System.Text.Encoding.EncodingName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EncodingName
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 722
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, gets the human-readable description of the current encoding.</p>\n"
  syntax:
    content: public virtual string EncodingName { get; }
    content.vb: Public Overridable ReadOnly Property EncodingName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The human-readable description of the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.EncodingInfo.DisplayName
    commentId: P:System.Text.EncodingInfo.DisplayName
  - linkId: System.Text.Encoding.BodyName
    commentId: P:System.Text.Encoding.BodyName
  - linkId: System.Text.Encoding.HeaderName
    commentId: P:System.Text.Encoding.HeaderName
  - linkId: System.Text.Encoding.WebName
    commentId: P:System.Text.Encoding.WebName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Text.Encoding.IsSingleByte
  commentId: P:System.Text.Encoding.IsSingleByte
  id: IsSingleByte
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: IsSingleByte
  nameWithType: Encoding.IsSingleByte
  fullName: System.Text.Encoding.IsSingleByte
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSingleByte
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 820
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current encoding uses single-byte code points.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public virtual bool IsSingleByte { get; }
    content.vb: >-
      <ComVisible(False)>

      Public Overridable ReadOnly Property IsSingleByte As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> uses single-byte code points; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Text.Encoding.Unicode
  commentId: P:System.Text.Encoding.Unicode
  id: Unicode
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Unicode
  nameWithType: Encoding.Unicode
  fullName: System.Text.Encoding.Unicode
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Unicode
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1485
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets an encoding for the UTF-16 format using the little endian byte order.</p>\n"
  syntax:
    content: public static Encoding Unicode { get; }
    content.vb: Public Shared ReadOnly Property Unicode As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>An encoding for the UTF-16 format using the little endian byte order.</p>\n"
  seealso:
  - linkId: System.Text.UnicodeEncoding
    commentId: T:System.Text.UnicodeEncoding
  - linkId: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  - linkId: System.Text.Encoding.BigEndianUnicode
    commentId: P:System.Text.Encoding.BigEndianUnicode
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.Encoding.UTF32
  commentId: P:System.Text.Encoding.UTF32
  id: UTF32
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: UTF32
  nameWithType: Encoding.UTF32
  fullName: System.Text.Encoding.UTF32
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UTF32
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1530
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets an encoding for the UTF-32 format using the little endian byte order.</p>\n"
  syntax:
    content: public static Encoding UTF32 { get; }
    content.vb: Public Shared ReadOnly Property UTF32 As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>An  encoding object for the UTF-32 format using the little endian byte order.</p>\n"
  seealso:
  - linkId: System.Text.UTF32Encoding
    commentId: T:System.Text.UTF32Encoding
  - linkId: System.Text.Encoding.UTF8
    commentId: P:System.Text.Encoding.UTF8
  - linkId: System.Text.Encoding.Unicode
    commentId: P:System.Text.Encoding.Unicode
  - linkId: System.Text.Encoding.BigEndianUnicode
    commentId: P:System.Text.Encoding.BigEndianUnicode
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.Encoding.UTF7
  commentId: P:System.Text.Encoding.UTF7
  id: UTF7
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: UTF7
  nameWithType: Encoding.UTF7
  fullName: System.Text.Encoding.UTF7
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UTF7
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1509
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets an encoding for the UTF-7 format.</p>\n"
  syntax:
    content: public static Encoding UTF7 { get; }
    content.vb: Public Shared ReadOnly Property UTF7 As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>An encoding for the UTF-7 format.</p>\n"
  seealso:
  - linkId: System.Text.UTF7Encoding
    commentId: T:System.Text.UTF7Encoding
  - linkId: System.Text.Encoding.UTF8
    commentId: P:System.Text.Encoding.UTF8
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.Encoding.UTF8
  commentId: P:System.Text.Encoding.UTF8
  id: UTF8
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: UTF8
  nameWithType: Encoding.UTF8
  fullName: System.Text.Encoding.UTF8
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UTF8
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1520
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Gets an encoding for the UTF-8 format.</p>\n"
  syntax:
    content: public static Encoding UTF8 { get; }
    content.vb: Public Shared ReadOnly Property UTF8 As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>An encoding for the UTF-8 format.</p>\n"
  seealso:
  - linkId: System.Text.UTF8Encoding
    commentId: T:System.Text.UTF8Encoding
  - linkId: System.Text.Encoding.GetEncoding(System.Int32)
    commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Text.Encoding.WebName
  commentId: P:System.Text.Encoding.WebName
  id: WebName
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: WebName
  nameWithType: Encoding.WebName
  fullName: System.Text.Encoding.WebName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WebName
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 747
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, gets the name registered with the Internet Assigned Numbers Authority (IANA) for the current encoding.</p>\n"
  syntax:
    content: public virtual string WebName { get; }
    content.vb: Public Overridable ReadOnly Property WebName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The IANA name for the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.EncodingInfo.Name
    commentId: P:System.Text.EncodingInfo.Name
  - linkId: System.Text.Encoding.BodyName
    commentId: P:System.Text.Encoding.BodyName
  - linkId: System.Text.Encoding.EncodingName
    commentId: P:System.Text.Encoding.EncodingName
  - linkId: System.Text.Encoding.HeaderName
    commentId: P:System.Text.Encoding.HeaderName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Text.Encoding.Clone
  commentId: M:System.Text.Encoding.Clone
  id: Clone
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: Encoding.Clone()
  fullName: System.Text.Encoding.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 874
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, creates a shallow copy of the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public virtual object Clone()
    content.vb: >-
      <ComVisible(False)>

      Public Overridable Function Clone As Object
    return:
      type: System.Object
      description: "\n<p>A copy of the current <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  id: Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Convert(Encoding, Encoding, Byte[])
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[])
  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Convert
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 353
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Converts an entire byte array from one encoding to another.</p>\n"
  syntax:
    content: public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes)
    content.vb: Public Shared Function Convert(srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte()) As Byte()
    parameters:
    - id: srcEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding format of <em>bytes</em>. </p>\n"
    - id: dstEncoding
      type: System.Text.Encoding
      description: "\n<p>The target encoding format. </p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The bytes to convert. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> containing the results of converting <em>bytes</em> from <em>srcEncoding</em> to <em>dstEncoding</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>srcEncoding</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>dstEncoding</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<strong>srcEncoding.</strong>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<strong>dstEncoding.</strong>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte())
  name.vb: Convert(Encoding, Encoding, Byte())
- uid: System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  id: Convert(System.Text.Encoding,System.Text.Encoding,System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Convert(Encoding, Encoding, Byte[], Int32, Int32)
  nameWithType: Encoding.Convert(Encoding, Encoding, Byte[], Int32, Int32)
  fullName: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Convert
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 368
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Converts a range of bytes in a byte array from one encoding to another.</p>\n"
  syntax:
    content: public static byte[] Convert(Encoding srcEncoding, Encoding dstEncoding, byte[] bytes, int index, int count)
    content.vb: Public Shared Function Convert(srcEncoding As Encoding, dstEncoding As Encoding, bytes As Byte(), index As Integer, count As Integer) As Byte()
    parameters:
    - id: srcEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding of the source array, <em>bytes</em>. </p>\n"
    - id: dstEncoding
      type: System.Text.Encoding
      description: "\n<p>The encoding of the output array. </p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The array of bytes to convert. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first element of <em>bytes</em> to convert. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to convert. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> containing the result of converting a range of bytes in <em>bytes</em> from <em>srcEncoding</em> to <em>dstEncoding</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>srcEncoding</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>dstEncoding</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not specify a valid range in the byte array. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<strong>srcEncoding.</strong>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<strong>dstEncoding.</strong>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  nameWithType.vb: Encoding.Convert(Encoding, Encoding, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Text.Encoding.Convert(System.Text.Encoding, System.Text.Encoding, System.Byte(), System.Int32, System.Int32)
  name.vb: Convert(Encoding, Encoding, Byte(), Int32, Int32)
- uid: System.Text.Encoding.Equals(System.Object)
  commentId: M:System.Text.Encoding.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Encoding.Equals(Object)
  fullName: System.Text.Encoding.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1537
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current instance.</p>\n"
  syntax:
    content: public override bool Equals(object value)
    content.vb: Public Overrides Function Equals(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to compare with the current instance. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is an instance of <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> and is equal to the current instance; otherwise, <strong>false</strong>. </p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - linkId: System.Text.Encoding.#ctor
    commentId: M:System.Text.Encoding.#ctor
  - linkId: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  commentId: M:System.Text.Encoding.GetByteCount(System.Char*,System.Int32)
  id: GetByteCount(System.Char*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char*, Int32)
  nameWithType: Encoding.GetByteCount(Char*, Int32)
  fullName: System.Text.Encoding.GetByteCount(System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 959
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters starting at the specified character pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public virtual int GetByteCount(char *chars, int count)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overridable Function GetByteCount(chars As Char *, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
      description: "\n<p>A pointer to the first character to encode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetBytes(System.Char[])
    commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetByteCount(System.Char[])
  commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  id: GetByteCount(System.Char[])
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[])
  nameWithType: Encoding.GetByteCount(Char[])
  fullName: System.Text.Encoding.GetByteCount(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 924
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding all the characters in the specified character array.</p>\n"
  syntax:
    content: public virtual int GetByteCount(char[] chars)
    content.vb: Public Overridable Function GetByteCount(chars As Char()) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding all the characters in the specified character array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetBytes(System.Char[])
    commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  nameWithType.vb: Encoding.GetByteCount(Char())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetByteCount(System.Char())
  name.vb: GetByteCount(Char())
- uid: System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetByteCount(System.Char[],System.Int32,System.Int32)
  id: GetByteCount(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(Char[], Int32, Int32)
  nameWithType: Encoding.GetByteCount(Char[], Int32, Int32)
  fullName: System.Text.Encoding.GetByteCount(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 952
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding a set of characters from the specified character array.</p>\n"
  syntax:
    content: public abstract int GetByteCount(char[] chars, int index, int count)
    content.vb: Public MustOverride Function GetByteCount(chars As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetBytes(System.Char[])
    commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  nameWithType.vb: Encoding.GetByteCount(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Encoding.GetByteCount(System.Char(), System.Int32, System.Int32)
  name.vb: GetByteCount(Char(), Int32, Int32)
- uid: System.Text.Encoding.GetByteCount(System.String)
  commentId: M:System.Text.Encoding.GetByteCount(System.String)
  id: GetByteCount(System.String)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetByteCount(String)
  nameWithType: Encoding.GetByteCount(String)
  fullName: System.Text.Encoding.GetByteCount(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByteCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 937
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of bytes produced by encoding the characters in the specified string.</p>\n"
  syntax:
    content: public virtual int GetByteCount(string s)
    content.vb: Public Overridable Function GetByteCount(s As String) As Integer
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The string containing the set of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes produced by encoding the specified characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetBytes(System.Char[])
    commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  id: GetBytes(System.Char*,System.Int32,System.Byte*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char*, Int32, Byte*, Int32)
  nameWithType: Encoding.GetBytes(Char*, Int32, Byte*, Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char*, System.Int32, System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1086
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes a set of characters starting at the specified character pointer into a sequence of bytes that are stored starting at the specified byte pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public virtual int GetBytes(char *chars, int charCount, byte *bytes, int byteCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overridable Function GetBytes(chars As Char *, charCount As Integer, bytes As Byte *, byteCount As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char*
      description: "\n<p>A pointer to the first character to encode. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to the location at which to start writing the resulting sequence of bytes. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The maximum number of bytes to write. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written at the location indicated by the <em>bytes</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> or <em>byteCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>byteCount</em> is less than the resulting number of bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetBytes(System.Char[])
  commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  id: GetBytes(System.Char[])
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[])
  nameWithType: Encoding.GetBytes(Char[])
  fullName: System.Text.Encoding.GetBytes(System.Char[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 998
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes all the characters in the specified character array into a sequence of bytes.</p>\n"
  syntax:
    content: public virtual byte[] GetBytes(char[] chars)
    content.vb: Public Overridable Function GetBytes(chars As Char()) As Byte()
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the characters to encode. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array containing the results of encoding the specified set of characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  nameWithType.vb: Encoding.GetBytes(Char())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetBytes(System.Char())
  name.vb: GetBytes(Char())
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1013
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes a set of characters from the specified character array into a sequence of bytes.</p>\n"
  syntax:
    content: public virtual byte[] GetBytes(char[] chars, int index, int count)
    content.vb: Public Overridable Function GetBytes(chars As Char(), index As Integer, count As Integer) As Byte()
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array containing the results of encoding the specified set of characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>chars</em>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32)
- uid: System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(Char[], Int32, Int32, Byte[], Int32)
  nameWithType: Encoding.GetBytes(Char[], Int32, Int32, Byte[], Int32)
  fullName: System.Text.Encoding.GetBytes(System.Char[], System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1030
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.</p>\n"
  syntax:
    content: public abstract int GetBytes(char[] chars, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public MustOverride Function GetBytes(chars As Char(), charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array containing the set of characters to encode. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array to contain the resulting sequence of bytes. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting sequence of bytes. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written into <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>chars</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  nameWithType.vb: Encoding.GetBytes(Char(), Int32, Int32, Byte(), Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Encoding.GetBytes(System.Char(), System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(Char(), Int32, Int32, Byte(), Int32)
- uid: System.Text.Encoding.GetBytes(System.String)
  commentId: M:System.Text.Encoding.GetBytes(System.String)
  id: GetBytes(System.String)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(String)
  nameWithType: Encoding.GetBytes(String)
  fullName: System.Text.Encoding.GetBytes(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1036
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes all the characters in the specified string into a sequence of bytes.</p>\n"
  syntax:
    content: public virtual byte[] GetBytes(string s)
    content.vb: Public Overridable Function GetBytes(s As String) As Byte()
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The string containing the characters to encode. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array containing the results of encoding the specified set of characters.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  commentId: M:System.Text.Encoding.GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  id: GetBytes(System.String,System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetBytes(String, Int32, Int32, Byte[], Int32)
  nameWithType: Encoding.GetBytes(String, Int32, Int32, Byte[], Int32)
  fullName: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBytes
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1051
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, encodes a set of characters from the specified string into the specified byte array.</p>\n"
  syntax:
    content: public virtual int GetBytes(string s, int charIndex, int charCount, byte[] bytes, int byteIndex)
    content.vb: Public Overridable Function GetBytes(s As String, charIndex As Integer, charCount As Integer, bytes As Byte(), byteIndex As Integer) As Integer
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The string containing the set of characters to encode. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index of the first character to encode. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array to contain the resulting sequence of bytes. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting sequence of bytes. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of bytes written into <em>bytes</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>s</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charIndex</em> or <em>charCount</em> or <em>byteIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> and <em>charCount</em> do not denote a valid range in <em>chars</em>.</p>\n<p>-or- </p>\n<p>\n<em>byteIndex</em> is not a valid index in <em>bytes</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>bytes</em> does not have enough capacity from <em>byteIndex</em> to the end of the array to accommodate the resulting bytes. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetMaxByteCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  nameWithType.vb: Encoding.GetBytes(String, Int32, Int32, Byte(), Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetBytes(System.String, System.Int32, System.Int32, System.Byte(), System.Int32)
  name.vb: GetBytes(String, Int32, Int32, Byte(), Int32)
- uid: System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  commentId: M:System.Text.Encoding.GetCharCount(System.Byte*,System.Int32)
  id: GetCharCount(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte*, Int32)
  nameWithType: Encoding.GetCharCount(Byte*, Int32)
  fullName: System.Text.Encoding.GetCharCount(System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1155
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes starting at the specified byte pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public virtual int GetCharCount(byte *bytes, int count)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overridable Function GetCharCount(bytes As Byte *, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetCharCount(System.Byte[])
  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  id: GetCharCount(System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[])
  nameWithType: Encoding.GetCharCount(Byte[])
  fullName: System.Text.Encoding.GetCharCount(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1135
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of characters produced by decoding all the bytes in the specified byte array.</p>\n"
  syntax:
    content: public virtual int GetCharCount(byte[] bytes)
    content.vb: Public Overridable Function GetCharCount(bytes As Byte()) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  nameWithType.vb: Encoding.GetCharCount(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetCharCount(System.Byte())
  name.vb: GetCharCount(Byte())
- uid: System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetCharCount(System.Byte[],System.Int32,System.Int32)
  id: GetCharCount(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetCharCount(Byte[], Int32, Int32)
  nameWithType: Encoding.GetCharCount(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetCharCount(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetCharCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1150
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.</p>\n"
  syntax:
    content: public abstract int GetCharCount(byte[] bytes, int index, int count)
    content.vb: Public MustOverride Function GetCharCount(bytes As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters produced by decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
    commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  nameWithType.vb: Encoding.GetCharCount(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Encoding.GetCharCount(System.Byte(), System.Int32, System.Int32)
  name.vb: GetCharCount(Byte(), Int32, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  commentId: M:System.Text.Encoding.GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  id: GetChars(System.Byte*,System.Int32,System.Char*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte*, Int32, Char*, Int32)
  nameWithType: Encoding.GetChars(Byte*, Int32, Char*, Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte*, System.Int32, System.Char*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1245
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a sequence of bytes starting at the specified byte pointer into a set of characters that are stored starting at the specified character pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public virtual int GetChars(byte *bytes, int byteCount, char *chars, int charCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Overridable Function GetChars(bytes As Byte *, byteCount As Integer, chars As Char *, charCount As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to the first byte to decode. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    - id: chars
      type: System.Char*
      description: "\n<p>A pointer to the location at which to start writing the resulting set of characters. </p>\n"
    - id: charCount
      type: System.Int32
      description: "\n<p>The maximum number of characters to write. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written at the location indicated by the <em>chars</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> or <em>charCount</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>charCount</em> is less than the resulting number of characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetString(System.Byte[])
    commentId: M:System.Text.Encoding.GetString(System.Byte[])
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetChars(System.Byte[])
  commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  id: GetChars(System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[])
  nameWithType: Encoding.GetChars(Byte[])
  fullName: System.Text.Encoding.GetChars(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1191
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes all the bytes in the specified byte array into a set of characters.</p>\n"
  syntax:
    content: public virtual char[] GetChars(byte[] bytes)
    content.vb: Public Overridable Function GetChars(bytes As Byte()) As Char()
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    return:
      type: System.Char[]
      description: "\n<p>A character array containing the results of decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetString(System.Byte[])
    commentId: M:System.Text.Encoding.GetString(System.Byte[])
  nameWithType.vb: Encoding.GetChars(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetChars(System.Byte())
  name.vb: GetChars(Byte())
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1206
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a set of characters.</p>\n"
  syntax:
    content: public virtual char[] GetChars(byte[] bytes, int index, int count)
    content.vb: Public Overridable Function GetChars(bytes As Byte(), index As Integer, count As Integer) As Char()
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Char[]
      description: "\n<p>A character array containing the results of decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetString(System.Byte[])
    commentId: M:System.Text.Encoding.GetString(System.Byte[])
  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32)
- uid: System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  commentId: M:System.Text.Encoding.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  id: GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetChars(Byte[], Int32, Int32, Char[], Int32)
  nameWithType: Encoding.GetChars(Byte[], Int32, Int32, Char[], Int32)
  fullName: System.Text.Encoding.GetChars(System.Byte[], System.Int32, System.Int32, System.Char[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChars
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1224
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.</p>\n"
  syntax:
    content: public abstract int GetChars(byte[] bytes, int byteIndex, int byteCount, char[] chars, int charIndex)
    content.vb: Public MustOverride Function GetChars(bytes As Byte(), byteIndex As Integer, byteCount As Integer, chars As Char(), charIndex As Integer) As Integer
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: byteIndex
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    - id: chars
      type: System.Char[]
      description: "\n<p>The character array to contain the resulting set of characters. </p>\n"
    - id: charIndex
      type: System.Int32
      description: "\n<p>The index at which to start writing the resulting set of characters. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The actual number of characters written into <em>chars</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>\n<em>chars</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteIndex</em> or <em>byteCount</em> or <em>charIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>byteindex</em> and <em>byteCount</em> do not denote a valid range in <em>bytes</em>.</p>\n<p>-or- </p>\n<p>\n<em>charIndex</em> is not a valid index in <em>chars</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>chars</em> does not have enough capacity from <em>charIndex</em> to the end of the array to accommodate the resulting characters. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetString(System.Byte[])
    commentId: M:System.Text.Encoding.GetString(System.Byte[])
  nameWithType.vb: Encoding.GetChars(Byte(), Int32, Int32, Char(), Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Text.Encoding.GetChars(System.Byte(), System.Int32, System.Int32, System.Char(), System.Int32)
  name.vb: GetChars(Byte(), Int32, Int32, Char(), Int32)
- uid: System.Text.Encoding.GetDecoder
  commentId: M:System.Text.Encoding.GetDecoder
  id: GetDecoder
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetDecoder()
  nameWithType: Encoding.GetDecoder()
  fullName: System.Text.Encoding.GetDecoder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDecoder
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1365
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, obtains a decoder that converts an encoded sequence of bytes into a sequence of characters.</p>\n"
  syntax:
    content: public virtual Decoder GetDecoder()
    content.vb: Public Overridable Function GetDecoder As Decoder
    return:
      type: System.Text.Decoder
      description: "\n<p>A <xref href=\"System.Text.Decoder\" data-throw-if-not-resolved=\"false\"></xref> that converts an encoded sequence of bytes into a sequence of characters.</p>\n"
  seealso:
  - linkId: System.Text.Decoder
    commentId: T:System.Text.Decoder
  - linkId: System.Text.Encoding.GetChars(System.Byte[])
    commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  - linkId: System.Text.Encoding.GetString(System.Byte[])
    commentId: M:System.Text.Encoding.GetString(System.Byte[])
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetEncoder
  commentId: M:System.Text.Encoding.GetEncoder
  id: GetEncoder
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetEncoder()
  nameWithType: Encoding.GetEncoder()
  fullName: System.Text.Encoding.GetEncoder()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoder
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1423
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, obtains an encoder that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\n"
  syntax:
    content: public virtual Encoder GetEncoder()
    content.vb: Public Overridable Function GetEncoder As Encoder
    return:
      type: System.Text.Encoder
      description: "\n<p>A <xref href=\"System.Text.Encoder\" data-throw-if-not-resolved=\"false\"></xref> that converts a sequence of Unicode characters into an encoded sequence of bytes.</p>\n"
  seealso:
  - linkId: System.Text.Encoder
    commentId: T:System.Text.Encoder
  - linkId: System.Text.Encoding.GetBytes(System.Char[])
    commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetEncoding(System.Int32)
  commentId: M:System.Text.Encoding.GetEncoding(System.Int32)
  id: GetEncoding(System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetEncoding(Int32)
  nameWithType: Encoding.GetEncoding(Int32)
  fullName: System.Text.Encoding.GetEncoding(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoding
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 405
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified code page identifier.</p>\n"
  syntax:
    content: public static Encoding GetEncoding(int codepage)
    content.vb: Public Shared Function GetEncoding(codepage As Integer) As Encoding
    parameters:
    - id: codepage
      type: System.Int32
      description: "\n<p>The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>\n<p>-or- </p>\n<p>0 (zero), to use the default encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified code page.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>codepage</em> is less than zero or greater than 65535. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>codepage</em> is not supported by the underlying platform. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>codepage</em> is not supported by the underlying platform. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.CodePage
    commentId: P:System.Text.Encoding.CodePage
  - linkId: System.Text.Encoding.EncoderFallback
    commentId: P:System.Text.Encoding.EncoderFallback
  - linkId: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - linkId: System.Text.Encoding.GetEncodings
    commentId: M:System.Text.Encoding.GetEncodings
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.Encoding.GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: GetEncoding(System.Int32,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetEncoding(Int32, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(Int32, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.GetEncoding(System.Int32, System.Text.EncoderFallback, System.Text.DecoderFallback)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoding
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 536
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified code page identifier. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\n"
  syntax:
    content: public static Encoding GetEncoding(int codepage, EncoderFallback encoderFallback, DecoderFallback decoderFallback)
    content.vb: Public Shared Function GetEncoding(codepage As Integer, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding
    parameters:
    - id: codepage
      type: System.Int32
      description: "\n<p>The code page identifier of the preferred encoding. Possible values are listed in the Code Page column of the table that appears in the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>\n<p>-or- </p>\n<p>0 (zero), to use the default encoding. </p>\n"
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding. </p>\n"
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified code page.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>codepage</em> is less than zero or greater than 65535. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>codepage</em> is not supported by the underlying platform. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>codepage</em> is not supported by the underlying platform. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.CodePage
    commentId: P:System.Text.Encoding.CodePage
  - linkId: System.Text.Encoding.EncoderFallback
    commentId: P:System.Text.Encoding.EncoderFallback
  - linkId: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - linkId: System.Text.Encoding.GetEncodings
    commentId: M:System.Text.Encoding.GetEncodings
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.Encoding.GetEncoding(System.String)
  commentId: M:System.Text.Encoding.GetEncoding(System.String)
  id: GetEncoding(System.String)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetEncoding(String)
  nameWithType: Encoding.GetEncoding(String)
  fullName: System.Text.Encoding.GetEncoding(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoding
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 648
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified code page name.</p>\n"
  syntax:
    content: public static Encoding GetEncoding(string name)
    content.vb: Public Shared Function GetEncoding(name As String) As Encoding
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The code page name of the preferred encoding. Any value returned by the <xref href=\"System.Text.Encoding.WebName\" data-throw-if-not-resolved=\"false\"></xref> property is valid. Possible values are listed in the Name column of the table that appears in the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding  associated with the specified code page.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid code page name.</p>\n<p>-or- </p>\n<p>The code page indicated by <em>name</em> is not supported by the underlying platform. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.EncoderFallback
    commentId: P:System.Text.Encoding.EncoderFallback
  - linkId: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - linkId: System.Text.Encoding.GetEncodings
    commentId: M:System.Text.Encoding.GetEncodings
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  commentId: M:System.Text.Encoding.GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  id: GetEncoding(System.String,System.Text.EncoderFallback,System.Text.DecoderFallback)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetEncoding(String, EncoderFallback, DecoderFallback)
  nameWithType: Encoding.GetEncoding(String, EncoderFallback, DecoderFallback)
  fullName: System.Text.Encoding.GetEncoding(System.String, System.Text.EncoderFallback, System.Text.DecoderFallback)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEncoding
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 666
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the encoding associated with the specified code page name. Parameters specify an error handler for characters that cannot be encoded and byte sequences that cannot be decoded.</p>\n"
  syntax:
    content: public static Encoding GetEncoding(string name, EncoderFallback encoderFallback, DecoderFallback decoderFallback)
    content.vb: Public Shared Function GetEncoding(name As String, encoderFallback As EncoderFallback, decoderFallback As DecoderFallback) As Encoding
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The code page name of the preferred encoding. Any value returned by the <xref href=\"System.Text.Encoding.WebName\" data-throw-if-not-resolved=\"false\"></xref> property is valid. Possible values are listed in the Name column of the table that appears in the <xref href=\"System.Text.Encoding\" data-throw-if-not-resolved=\"false\"></xref> class topic.</p>\n"
    - id: encoderFallback
      type: System.Text.EncoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a character cannot be encoded with the current encoding. </p>\n"
    - id: decoderFallback
      type: System.Text.DecoderFallback
      description: "\n<p>An object that provides an error-handling procedure when a byte sequence cannot be decoded with the current encoding. </p>\n"
    return:
      type: System.Text.Encoding
      description: "\n<p>The encoding that is associated with the specified code page.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is not a valid code page name.</p>\n<p>-or- </p>\n<p>The code page indicated by <em>name</em> is not supported by the underlying platform. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.EncoderFallback
    commentId: P:System.Text.Encoding.EncoderFallback
  - linkId: System.Text.EncoderFallback
    commentId: T:System.Text.EncoderFallback
  - linkId: System.Text.Encoding.GetEncodings
    commentId: M:System.Text.Encoding.GetEncodings
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Text.Encoding.GetHashCode
  commentId: M:System.Text.Encoding.GetHashCode
  id: GetHashCode
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Encoding.GetHashCode()
  fullName: System.Text.Encoding.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1547
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Returns the hash code for the current instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The hash code for the current instance.</p>\n"
  overridden: System.Object.GetHashCode
  seealso:
  - linkId: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Text.Encoding.GetMaxByteCount(System.Int32)
  commentId: M:System.Text.Encoding.GetMaxByteCount(System.Int32)
  id: GetMaxByteCount(System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetMaxByteCount(Int32)
  nameWithType: Encoding.GetMaxByteCount(Int32)
  fullName: System.Text.Encoding.GetMaxByteCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMaxByteCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1439
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  syntax:
    content: public abstract int GetMaxByteCount(int charCount)
    content.vb: Public MustOverride Function GetMaxByteCount(charCount As Integer) As Integer
    parameters:
    - id: charCount
      type: System.Int32
      description: "\n<p>The number of characters to encode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum number of bytes produced by encoding the specified number of characters.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>charCount</em> is less than zero. </p>\n"
  - type: System.Text.EncoderFallbackException
    commentId: T:System.Text.EncoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.EncoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.EncoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetBytes(System.Char[])
    commentId: M:System.Text.Encoding.GetBytes(System.Char[])
  - linkId: System.Text.Encoding.GetByteCount(System.Char[])
    commentId: M:System.Text.Encoding.GetByteCount(System.Char[])
  - linkId: System.Text.Encoding.GetEncoder
    commentId: M:System.Text.Encoding.GetEncoder
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.Encoding.GetMaxCharCount(System.Int32)
  commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  id: GetMaxCharCount(System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetMaxCharCount(Int32)
  nameWithType: Encoding.GetMaxCharCount(Int32)
  fullName: System.Text.Encoding.GetMaxCharCount(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetMaxCharCount
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1450
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  syntax:
    content: public abstract int GetMaxCharCount(int byteCount)
    content.vb: Public MustOverride Function GetMaxCharCount(byteCount As Integer) As Integer
    parameters:
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum number of characters produced by decoding the specified number of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> is less than zero. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetChars(System.Byte[])
    commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  - linkId: System.Text.Encoding.GetString(System.Byte[])
    commentId: M:System.Text.Encoding.GetString(System.Byte[])
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Text.Encoding.GetPreamble
  commentId: M:System.Text.Encoding.GetPreamble
  id: GetPreamble
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetPreamble()
  nameWithType: Encoding.GetPreamble()
  fullName: System.Text.Encoding.GetPreamble()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetPreamble
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 690
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, returns a sequence of bytes that specifies the encoding used.</p>\n"
  syntax:
    content: public virtual byte[] GetPreamble()
    content.vb: Public Overridable Function GetPreamble As Byte()
    return:
      type: System.Byte[]
      description: "\n<p>A byte array containing a sequence of bytes that specifies the encoding used.</p>\n<p>-or- </p>\n<p>A byte array of length zero, if a preamble is not required.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Text.Encoding.GetString(System.Byte*,System.Int32)
  commentId: M:System.Text.Encoding.GetString(System.Byte*,System.Int32)
  id: GetString(System.Byte*,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetString(Byte*, Int32)
  nameWithType: Encoding.GetString(Byte*, Int32)
  fullName: System.Text.Encoding.GetString(System.Byte*, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1302
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a specified number of bytes starting at a specified address into a string. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ComVisible(false)]

      public string GetString(byte *bytes, int byteCount)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ComVisible(False)>

      Public Function GetString(bytes As Byte *, byteCount As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte*
      description: "\n<p>A pointer to a byte array. </p>\n"
    - id: byteCount
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that contains the results of decoding the specified sequence of bytes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is a null pointer. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>byteCount</em> is less than zero. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A   fallback occurred (see Character Encoding in the .NET Framework for a complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetChars(System.Byte[])
    commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Text.Encoding.GetString(System.Byte[])
  commentId: M:System.Text.Encoding.GetString(System.Byte[])
  id: GetString(System.Byte[])
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetString(Byte[])
  nameWithType: Encoding.GetString(Byte[])
  fullName: System.Text.Encoding.GetString(System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1456
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes all the bytes in the specified byte array into a string.</p>\n"
  syntax:
    content: public virtual string GetString(byte[] bytes)
    content.vb: Public Overridable Function GetString(bytes As Byte()) As String
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that contains the results of decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The byte array contains invalid Unicode code points.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetChars(System.Byte[])
    commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  nameWithType.vb: Encoding.GetString(Byte())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetString(System.Byte())
  name.vb: GetString(Byte())
- uid: System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Text.Encoding.GetString(System.Byte[],System.Int32,System.Int32)
  id: GetString(System.Byte[],System.Int32,System.Int32)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: GetString(Byte[], Int32, Int32)
  nameWithType: Encoding.GetString(Byte[], Int32, Int32)
  fullName: System.Text.Encoding.GetString(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 1472
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>When overridden in a derived class, decodes a sequence of bytes from the specified byte array into a string.</p>\n"
  syntax:
    content: public virtual string GetString(byte[] bytes, int index, int count)
    content.vb: Public Overridable Function GetString(bytes As Byte(), index As Integer, count As Integer) As String
    parameters:
    - id: bytes
      type: System.Byte[]
      description: "\n<p>The byte array containing the sequence of bytes to decode. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the first byte to decode. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of bytes to decode. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string that contains the results of decoding the specified sequence of bytes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The byte array contains invalid Unicode code points.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>bytes</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in <em>bytes</em>. </p>\n"
  - type: System.Text.DecoderFallbackException
    commentId: T:System.Text.DecoderFallbackException
    description: "\n<p>A fallback occurred (see Character Encoding in the .NET Framework for complete explanation)</p>\n<p>-and-</p>\n<p>\n<xref href=\"System.Text.Encoding.DecoderFallback\" data-throw-if-not-resolved=\"false\"></xref> is set to <xref href=\"System.Text.DecoderExceptionFallback\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Text.Encoding.GetChars(System.Byte[])
    commentId: M:System.Text.Encoding.GetChars(System.Byte[])
  - linkId: System.Text.Encoding.GetDecoder
    commentId: M:System.Text.Encoding.GetDecoder
  - linkId: System.Text.Encoding.GetCharCount(System.Byte[])
    commentId: M:System.Text.Encoding.GetCharCount(System.Byte[])
  - linkId: System.Text.Encoding.GetMaxCharCount(System.Int32)
    commentId: M:System.Text.Encoding.GetMaxCharCount(System.Int32)
  nameWithType.vb: Encoding.GetString(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Text.Encoding.GetString(System.Byte(), System.Int32, System.Int32)
  name.vb: GetString(Byte(), Int32, Int32)
- uid: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  commentId: M:System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  id: RegisterProvider(System.Text.EncodingProvider)
  parent: System.Text.Encoding
  langs:
  - csharp
  - vb
  name: RegisterProvider(EncodingProvider)
  nameWithType: Encoding.RegisterProvider(EncodingProvider)
  fullName: System.Text.Encoding.RegisterProvider(System.Text.EncodingProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Text/Encoding.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RegisterProvider
    path: src/mscorlib/src/System/Text/Encoding.cs
    startLine: 399
  assemblies:
  - System.Text.Encoding
  namespace: System.Text
  summary: "\n<p>Registers an encoding provider. </p>\n"
  syntax:
    content: public static void RegisterProvider(EncodingProvider provider)
    content.vb: Public Shared Sub RegisterProvider(provider As EncodingProvider)
    parameters:
    - id: provider
      type: System.Text.EncodingProvider
      description: "\n<p>A subclass of <xref href=\"System.Text.EncodingProvider\" data-throw-if-not-resolved=\"false\"></xref> that provides access to additional character encodings. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>provider</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Text.CodePagesEncodingProvider
    commentId: T:System.Text.CodePagesEncodingProvider
  - linkId: System.Text.EncodingProvider
    commentId: T:System.Text.EncodingProvider
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Text.EncoderFallback
  commentId: T:System.Text.EncoderFallback
  parent: System.Text
  isExternal: false
  name: EncoderFallback
  nameWithType: EncoderFallback
  fullName: System.Text.EncoderFallback
- uid: System.Text.DecoderFallback
  commentId: T:System.Text.DecoderFallback
  parent: System.Text
  isExternal: false
  name: DecoderFallback
  nameWithType: DecoderFallback
  fullName: System.Text.DecoderFallback
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char*
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Byte*
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Text.Decoder
  commentId: T:System.Text.Decoder
  parent: System.Text
  isExternal: false
  name: Decoder
  nameWithType: Decoder
  fullName: System.Text.Decoder
- uid: System.Text.Encoder
  commentId: T:System.Text.Encoder
  parent: System.Text
  isExternal: false
  name: Encoder
  nameWithType: Encoder
  fullName: System.Text.Encoder
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Text.EncodingProvider
  commentId: T:System.Text.EncodingProvider
  parent: System.Text
  isExternal: false
  name: EncodingProvider
  nameWithType: EncodingProvider
  fullName: System.Text.EncodingProvider
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Text.DecoderFallbackException
  commentId: T:System.Text.DecoderFallbackException
  isExternal: false
  name: DecoderFallbackException
  nameWithType: DecoderFallbackException
  fullName: System.Text.DecoderFallbackException
- uid: System.Text.EncoderFallbackException
  commentId: T:System.Text.EncoderFallbackException
  isExternal: false
  name: EncoderFallbackException
  nameWithType: EncoderFallbackException
  fullName: System.Text.EncoderFallbackException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
