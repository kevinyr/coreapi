items:
- uid: System.Security.Cryptography.DeriveBytes
  commentId: T:System.Security.Cryptography.DeriveBytes
  id: DeriveBytes
  parent: System.Security.Cryptography
  children:
  - System.Security.Cryptography.DeriveBytes.#ctor
  - System.Security.Cryptography.DeriveBytes.Dispose
  - System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  - System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  - System.Security.Cryptography.DeriveBytes.Reset
  langs:
  - csharp
  - vb
  name: DeriveBytes
  fullName: System.Security.Cryptography.DeriveBytes
  type: Class
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeriveBytes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
    startLine: 6
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Represents the abstract base class from which all classes that derive byte sequences of a specified length inherit.</p>\n"
  syntax:
    content: 'public abstract class DeriveBytes : IDisposable'
    content.vb: >-
      Public MustInherit Class DeriveBytes
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: DeriveBytes
- uid: System.Security.Cryptography.DeriveBytes.#ctor
  commentId: M:System.Security.Cryptography.DeriveBytes.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  - vb
  name: DeriveBytes()
  fullName: System.Security.Cryptography.DeriveBytes.DeriveBytes()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Cryptography.Algorithms/ref/System.Security.Cryptography.Algorithms.cs
    startLine: 19
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Cryptography.DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: protected DeriveBytes()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: DeriveBytes.DeriveBytes()
- uid: System.Security.Cryptography.DeriveBytes.Dispose
  commentId: M:System.Security.Cryptography.DeriveBytes.Dispose
  id: Dispose
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Security.Cryptography.DeriveBytes.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
    startLine: 11
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, releases all resources used by the current instance of the <xref href=\"System.Security.Cryptography.DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: DeriveBytes.Dispose()
- uid: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  commentId: M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
    startLine: 17
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Security.Cryptography.DeriveBytes\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: DeriveBytes.Dispose(Boolean)
- uid: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  commentId: M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  id: GetBytes(System.Int32)
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  - vb
  name: GetBytes(Int32)
  fullName: System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
    startLine: 8
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, returns pseudo-random key bytes.</p>\n"
  syntax:
    content: public abstract byte[] GetBytes(int cb)
    content.vb: Public MustOverride Function GetBytes(cb As Integer) As Byte()
    parameters:
    - id: cb
      type: System.Int32
      description: "\n<p>The number of pseudo-random key bytes to generate. </p>\n"
    return:
      type: System.Byte[]
      description: "\n<p>A byte array filled with pseudo-random key bytes.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: DeriveBytes.GetBytes(Int32)
- uid: System.Security.Cryptography.DeriveBytes.Reset
  commentId: M:System.Security.Cryptography.DeriveBytes.Reset
  id: Reset
  parent: System.Security.Cryptography.DeriveBytes
  langs:
  - csharp
  - vb
  name: Reset()
  fullName: System.Security.Cryptography.DeriveBytes.Reset()
  type: Method
  source:
    remote:
      path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Security.Cryptography.Algorithms/src/System/Security/Cryptography/DeriveBytes.cs
    startLine: 9
  assemblies:
  - System.Security.Cryptography.Algorithms
  namespace: System.Security.Cryptography
  summary: "\n<p>When overridden in a derived class, resets the state of the operation.</p>\n"
  syntax:
    content: public abstract void Reset()
    content.vb: Public MustOverride Sub Reset
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  nameWithType: DeriveBytes.Reset()
references:
- uid: System.Security.Cryptography
  isExternal: false
  name: System.Security.Cryptography
  fullName: System.Security.Cryptography
  nameWithType: System.Security.Cryptography
  commentId: N:System.Security.Cryptography
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
