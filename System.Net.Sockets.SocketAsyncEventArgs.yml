### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.SocketAsyncEventArgs
  commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  id: SocketAsyncEventArgs
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.SocketAsyncEventArgs.#ctor
  - System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  - System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - System.Net.Sockets.SocketAsyncEventArgs.BufferList
  - System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  - System.Net.Sockets.SocketAsyncEventArgs.Completed
  - System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  - System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  - System.Net.Sockets.SocketAsyncEventArgs.Count
  - System.Net.Sockets.SocketAsyncEventArgs.Dispose
  - System.Net.Sockets.SocketAsyncEventArgs.Finalize
  - System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  - System.Net.Sockets.SocketAsyncEventArgs.Offset
  - System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  - System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  - System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  - System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  - System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  - System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  - System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)
  - System.Net.Sockets.SocketAsyncEventArgs.SocketError
  - System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  - System.Net.Sockets.SocketAsyncEventArgs.UserToken
  langs:
  - csharp
  - vb
  name: SocketAsyncEventArgs
  nameWithType: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketAsyncEventArgs
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 17
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Represents an asynchronous socket operation.</p>\n"
  syntax:
    content: 'public class SocketAsyncEventArgs : EventArgs, IDisposable'
    content.vb: >-
      Public Class SocketAsyncEventArgs
          Inherits EventArgs
          Implements IDisposable
  seealso:
  - linkId: System.IAsyncResult
    commentId: T:System.IAsyncResult
  - linkId: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  inheritance:
  - System.Object
  - System.EventArgs
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Sockets.SocketAsyncEventArgs.#ctor
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SocketAsyncEventArgs()
  nameWithType: SocketAsyncEventArgs.SocketAsyncEventArgs()
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketAsyncEventArgs()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 87
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Creates an empty <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public SocketAsyncEventArgs()
    content.vb: Public Sub New
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The platform is not supported. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  id: AcceptSocket
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: AcceptSocket
  nameWithType: SocketAsyncEventArgs.AcceptSocket
  fullName: System.Net.Sockets.SocketAsyncEventArgs.AcceptSocket
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AcceptSocket
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 92
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the socket to use or the socket created for accepting a connection with an asynchronous socket method.</p>\n"
  syntax:
    content: public Socket AcceptSocket { get; set; }
    content.vb: Public Property AcceptSocket As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> to use or the socket created for accepting a connection with an asynchronous socket method.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Buffer
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  id: Buffer
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Buffer
  nameWithType: SocketAsyncEventArgs.Buffer
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Buffer
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Buffer
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 103
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the data buffer to use with an asynchronous socket method.</p>\n"
  syntax:
    content: public byte[] Buffer { get; }
    content.vb: Public ReadOnly Property Buffer As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>A <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> array that represents the data buffer to use with an asynchronous socket method.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.BufferList
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BufferList
  id: BufferList
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: BufferList
  nameWithType: SocketAsyncEventArgs.BufferList
  fullName: System.Net.Sockets.SocketAsyncEventArgs.BufferList
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BufferList
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 120
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets an array of data buffers to use with an asynchronous socket method.</p>\n"
  syntax:
    content: public IList<ArraySegment<byte>> BufferList { get; set; }
    content.vb: Public Property BufferList As IList(Of ArraySegment(Of Byte))
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> that represents an array of data buffers to use with an asynchronous socket method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There are ambiguous buffers specified on a set operation. This exception occurs if the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property has been set to a non-null value and an attempt was made to set the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property to a non-null value.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  id: BytesTransferred
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: BytesTransferred
  nameWithType: SocketAsyncEventArgs.BytesTransferred
  fullName: System.Net.Sockets.SocketAsyncEventArgs.BytesTransferred
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BytesTransferred
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 142
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the number of bytes transferred in the socket operation.</p>\n"
  syntax:
    content: public int BytesTransferred { get; }
    content.vb: Public ReadOnly Property BytesTransferred As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the number of bytes transferred in the socket operation.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  id: ConnectByNameError
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: ConnectByNameError
  nameWithType: SocketAsyncEventArgs.ConnectByNameError
  fullName: System.Net.Sockets.SocketAsyncEventArgs.ConnectByNameError
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectByNameError
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 216
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the exception in the case of a connection failure when a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> was used.</p>\n"
  syntax:
    content: public Exception ConnectByNameError { get; }
    content.vb: Public ReadOnly Property ConnectByNameError As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>An <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> that indicates the cause of the connection error when a <xref href=\"System.Net.DnsEndPoint\" data-throw-if-not-resolved=\"false\"></xref> was specified for the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  id: ConnectSocket
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: ConnectSocket
  nameWithType: SocketAsyncEventArgs.ConnectSocket
  fullName: System.Net.Sockets.SocketAsyncEventArgs.ConnectSocket
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectSocket
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 98
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>The created and connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object after successful completion of the <xref href=\"System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public Socket ConnectSocket { get; }
    content.vb: Public ReadOnly Property ConnectSocket As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The connected <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.Count
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  id: Count
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: SocketAsyncEventArgs.Count
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Count
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 113
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the maximum amount of data, in bytes, to send or receive in an asynchronous operation.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the maximum amount of data, in bytes, to send or receive.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  id: LastOperation
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: LastOperation
  nameWithType: SocketAsyncEventArgs.LastOperation
  fullName: System.Net.Sockets.SocketAsyncEventArgs.LastOperation
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOperation
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 170
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the type of socket operation most recently performed with this context object.</p>\n"
  syntax:
    content: public SocketAsyncOperation LastOperation { get; }
    content.vb: Public ReadOnly Property LastOperation As SocketAsyncOperation
    parameters: []
    return:
      type: System.Net.Sockets.SocketAsyncOperation
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketAsyncOperation\" data-throw-if-not-resolved=\"false\"></xref> instance that indicates the type of socket operation most recently performed with this context object.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketAsyncOperation
    commentId: T:System.Net.Sockets.SocketAsyncOperation
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.Offset
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  id: Offset
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: SocketAsyncEventArgs.Offset
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Offset
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Offset
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 108
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the offset, in bytes, into the data buffer referenced by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public int Offset { get; }
    content.vb: Public ReadOnly Property Offset As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the offset, in bytes, into the data buffer referenced by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  id: ReceiveMessageFromPacketInfo
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: ReceiveMessageFromPacketInfo
  nameWithType: SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  fullName: System.Net.Sockets.SocketAsyncEventArgs.ReceiveMessageFromPacketInfo
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveMessageFromPacketInfo
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 175
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the IP address and interface of a received packet.</p>\n"
  syntax:
    content: public IPPacketInformation ReceiveMessageFromPacketInfo { get; }
    content.vb: Public ReadOnly Property ReceiveMessageFromPacketInfo As IPPacketInformation
    parameters: []
    return:
      type: System.Net.Sockets.IPPacketInformation
      description: "\n<p>An <xref href=\"System.Net.Sockets.IPPacketInformation\" data-throw-if-not-resolved=\"false\"></xref> instance that contains the destination IP address and interface of a received packet.</p>\n"
  seealso:
  - linkId: System.Net.IPAddress
    commentId: T:System.Net.IPAddress
  - linkId: System.Net.Sockets.IPPacketInformation
    commentId: T:System.Net.Sockets.IPPacketInformation
  - linkId: System.Net.Sockets.IPPacketInformation.Address
    commentId: P:System.Net.Sockets.IPPacketInformation.Address
  - linkId: System.Net.Sockets.IPPacketInformation.Interface
    commentId: P:System.Net.Sockets.IPPacketInformation.Interface
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  id: RemoteEndPoint
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: RemoteEndPoint
  nameWithType: SocketAsyncEventArgs.RemoteEndPoint
  fullName: System.Net.Sockets.SocketAsyncEventArgs.RemoteEndPoint
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoteEndPoint
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 180
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the remote IP endpoint for an asynchronous operation.</p>\n"
  syntax:
    content: public EndPoint RemoteEndPoint { get; set; }
    content.vb: Public Property RemoteEndPoint As EndPoint
    parameters: []
    return:
      type: EndPoint
      description: "\n<p>An <xref href=\"System.Net.EndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the remote IP endpoint for an asynchronous operation.</p>\n"
  seealso:
  - linkId: System.Net.EndPoint
    commentId: T:System.Net.EndPoint
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  id: SendPacketsElements
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SendPacketsElements
  nameWithType: SocketAsyncEventArgs.SendPacketsElements
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsElements
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPacketsElements
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 186
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets an array of buffers to be sent for an asynchronous operation used by the <xref href=\"System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public SendPacketsElement[] SendPacketsElements { get; set; }
    content.vb: Public Property SendPacketsElements As SendPacketsElement()
    parameters: []
    return:
      type: System.Net.Sockets.SendPacketsElement[]
      description: "\n<p>An array of <xref href=\"System.Net.Sockets.SendPacketsElement\" data-throw-if-not-resolved=\"false\"></xref> objects that represent an array of buffers to be sent.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SendPacketsElement
    commentId: T:System.Net.Sockets.SendPacketsElement
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  id: SendPacketsSendSize
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SendPacketsSendSize
  nameWithType: SocketAsyncEventArgs.SendPacketsSendSize
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SendPacketsSendSize
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendPacketsSendSize
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 204
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the size, in bytes, of the data block used in the send operation.</p>\n"
  syntax:
    content: public int SendPacketsSendSize { get; set; }
    content.vb: Public Property SendPacketsSendSize As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the size, in bytes, of the data block used in the send operation.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SendPacketsElement.EndOfPacket
    commentId: P:System.Net.Sockets.SendPacketsElement.EndOfPacket
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SocketError
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SocketError
  id: SocketError
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SocketError
  nameWithType: SocketAsyncEventArgs.SocketError
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketError
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketError
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 210
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the result of the asynchronous socket operation.</p>\n"
  syntax:
    content: public SocketError SocketError { get; set; }
    content.vb: Public Property SocketError As SocketError
    parameters: []
    return:
      type: SocketError
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketError\" data-throw-if-not-resolved=\"false\"></xref> that represents the result of the asynchronous socket operation.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketError
    commentId: T:System.Net.Sockets.SocketError
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  id: SocketFlags
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SocketFlags
  nameWithType: SocketAsyncEventArgs.SocketFlags
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SocketFlags
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SocketFlags
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 221
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the results of an asynchronous socket operation or sets the behavior of an asynchronous operation.</p>\n"
  syntax:
    content: public SocketFlags SocketFlags { get; set; }
    content.vb: Public Property SocketFlags As SocketFlags
    parameters: []
    return:
      type: System.Net.Sockets.SocketFlags
      description: "\n<p>A <xref href=\"System.Net.Sockets.SocketFlags\" data-throw-if-not-resolved=\"false\"></xref> that represents the results of an asynchronous socket operation.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.SocketFlags
    commentId: T:System.Net.Sockets.SocketFlags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.UserToken
  commentId: P:System.Net.Sockets.SocketAsyncEventArgs.UserToken
  id: UserToken
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: UserToken
  nameWithType: SocketAsyncEventArgs.UserToken
  fullName: System.Net.Sockets.SocketAsyncEventArgs.UserToken
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserToken
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 227
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a user or application object associated with this asynchronous socket operation.</p>\n"
  syntax:
    content: public object UserToken { get; set; }
    content.vb: Public Property UserToken As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that represents the user or application object associated with this asynchronous socket operation.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Completed
  commentId: E:System.Net.Sockets.SocketAsyncEventArgs.Completed
  id: Completed
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Completed
  nameWithType: SocketAsyncEventArgs.Completed
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Completed
  type: Event
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Completed
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 147
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>The event used to complete an asynchronous operation.</p>\n"
  syntax:
    content: public event EventHandler<SocketAsyncEventArgs> Completed
    content.vb: Public Event Completed As EventHandler(Of SocketAsyncEventArgs)
    return:
      type: System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Dispose
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.Dispose
  id: Dispose
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SocketAsyncEventArgs.Dispose()
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 345
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> instance and optionally disposes of the managed resources.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  seealso:
  - linkId: System.Object.Finalize
    commentId: M:System.Object.Finalize
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Sockets.SocketAsyncEventArgs.Finalize
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.Finalize
  id: Finalize
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: SocketAsyncEventArgs.Finalize()
  fullName: System.Net.Sockets.SocketAsyncEventArgs.Finalize()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Finalize
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 364
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Frees resources used by the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  id: OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: OnCompleted(SocketAsyncEventArgs)
  nameWithType: SocketAsyncEventArgs.OnCompleted(SocketAsyncEventArgs)
  fullName: System.Net.Sockets.SocketAsyncEventArgs.OnCompleted(System.Net.Sockets.SocketAsyncEventArgs)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnCompleted
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 161
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Represents a method that is called when an asynchronous operation completes.</p>\n"
  syntax:
    content: protected virtual void OnCompleted(SocketAsyncEventArgs e)
    content.vb: Protected Overridable Sub OnCompleted(e As SocketAsyncEventArgs)
    parameters:
    - id: e
      type: System.Net.Sockets.SocketAsyncEventArgs
      description: "\n<p>The event that is signaled.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.AcceptAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ConnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.DisconnectAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.ReceiveMessageFromAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendPacketsAsync(System.Net.Sockets.SocketAsyncEventArgs)
  - linkId: System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
    commentId: M:System.Net.Sockets.Socket.SendToAsync(System.Net.Sockets.SocketAsyncEventArgs)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[],System.Int32,System.Int32)
  id: SetBuffer(System.Byte[],System.Int32,System.Int32)
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SetBuffer(Byte[], Int32, Int32)
  nameWithType: SocketAsyncEventArgs.SetBuffer(Byte[], Int32, Int32)
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetBuffer
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 233
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the data buffer to use with an asynchronous socket method.</p>\n"
  syntax:
    content: public void SetBuffer(byte[] buffer, int offset, int count)
    content.vb: Public Sub SetBuffer(buffer As Byte(), offset As Integer, count As Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The data buffer to use with an asynchronous socket method.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>There are ambiguous buffers specified. This exception occurs if the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property is also not null and the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.BufferList\" data-throw-if-not-resolved=\"false\"></xref> property is also not null.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>An argument was out of range. This exception occurs if the <em>offset</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property. This exception also occurs if the <em>count</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property minus the <em>offset</em> parameter.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  nameWithType.vb: SocketAsyncEventArgs.SetBuffer(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Byte(), System.Int32, System.Int32)
  name.vb: SetBuffer(Byte(), Int32, Int32)
- uid: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)
  commentId: M:System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32,System.Int32)
  id: SetBuffer(System.Int32,System.Int32)
  parent: System.Net.Sockets.SocketAsyncEventArgs
  langs:
  - csharp
  - vb
  name: SetBuffer(Int32, Int32)
  nameWithType: SocketAsyncEventArgs.SetBuffer(Int32, Int32)
  fullName: System.Net.Sockets.SocketAsyncEventArgs.SetBuffer(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetBuffer
    path: src/System.Net.Sockets/src/System/Net/Sockets/SocketAsyncEventArgs.cs
    startLine: 238
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sets the data buffer to use with an asynchronous socket method.</p>\n"
  syntax:
    content: public void SetBuffer(int offset, int count)
    content.vb: Public Sub SetBuffer(offset As Integer, count As Integer)
    parameters:
    - id: offset
      type: System.Int32
      description: "\n<p>The offset, in bytes, in the data buffer where the operation starts.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum amount of data, in bytes, to send or receive in the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>An argument was out of range. This exception occurs if the <em>offset</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property. This exception also occurs if the <em>count</em> parameter is less than zero or greater than the length of the array in the <xref href=\"System.Net.Sockets.SocketAsyncEventArgs.Buffer\" data-throw-if-not-resolved=\"false\"></xref> property minus the <em>offset</em> parameter.</p>\n"
  seealso:
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Buffer
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Buffer
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Count
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Count
  - linkId: System.Net.Sockets.SocketAsyncEventArgs.Offset
    commentId: P:System.Net.Sockets.SocketAsyncEventArgs.Offset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Net.Sockets
  commentId: N:System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  nameWithType: System.Net.Sockets
  fullName: System.Net.Sockets
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  commentId: T:System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.EventArgs.Empty
  commentId: F:System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  nameWithType: EventArgs.Empty
  fullName: System.EventArgs.Empty
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Net.Sockets.Socket
  commentId: T:System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  nameWithType: Socket
  fullName: System.Net.Sockets.Socket
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  commentId: T:System.Collections.Generic.IList{System.ArraySegment{System.Byte}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<ArraySegment<Byte>>
  nameWithType: IList<ArraySegment<Byte>>
  fullName: System.Collections.Generic.IList<System.ArraySegment<System.Byte>>
  nameWithType.vb: IList(Of ArraySegment(Of Byte))
  fullname.vb: System.Collections.Generic.IList(Of System.ArraySegment(Of System.Byte))
  name.vb: IList(Of ArraySegment(Of Byte))
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Net.Sockets.SocketAsyncOperation
  commentId: T:System.Net.Sockets.SocketAsyncOperation
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncOperation
  nameWithType: SocketAsyncOperation
  fullName: System.Net.Sockets.SocketAsyncOperation
- uid: System.Net.Sockets.IPPacketInformation
  commentId: T:System.Net.Sockets.IPPacketInformation
  parent: System.Net.Sockets
  isExternal: false
  name: IPPacketInformation
  nameWithType: IPPacketInformation
  fullName: System.Net.Sockets.IPPacketInformation
- uid: System.Net.EndPoint
  commentId: T:System.Net.EndPoint
  parent: System.Net
  isExternal: false
  name: EndPoint
  nameWithType: EndPoint
  fullName: System.Net.EndPoint
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Net.Sockets.SendPacketsElement[]
  name: SendPacketsElement[]
  nameWithType: SendPacketsElement[]
  fullName: System.Net.Sockets.SendPacketsElement[]
  nameWithType.vb: SendPacketsElement()
  fullname.vb: System.Net.Sockets.SendPacketsElement()
  name.vb: SendPacketsElement()
  spec.csharp:
  - uid: System.Net.Sockets.SendPacketsElement
    name: SendPacketsElement
    nameWithType: SendPacketsElement
    fullName: System.Net.Sockets.SendPacketsElement
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Net.Sockets.SendPacketsElement
    name: SendPacketsElement
    nameWithType: SendPacketsElement
    fullName: System.Net.Sockets.SendPacketsElement
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Net.Sockets.SocketError
  commentId: T:System.Net.Sockets.SocketError
  parent: System.Net.Sockets
  isExternal: false
  name: SocketError
  nameWithType: SocketError
  fullName: System.Net.Sockets.SocketError
- uid: System.Net.Sockets.SocketFlags
  commentId: T:System.Net.Sockets.SocketFlags
  parent: System.Net.Sockets
  isExternal: false
  name: SocketFlags
  nameWithType: SocketFlags
  fullName: System.Net.Sockets.SocketFlags
- uid: System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}
  commentId: T:System.EventHandler{System.Net.Sockets.SocketAsyncEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<SocketAsyncEventArgs>
  nameWithType: EventHandler<SocketAsyncEventArgs>
  fullName: System.EventHandler<System.Net.Sockets.SocketAsyncEventArgs>
  nameWithType.vb: EventHandler(Of SocketAsyncEventArgs)
  fullname.vb: System.EventHandler(Of System.Net.Sockets.SocketAsyncEventArgs)
  name.vb: EventHandler(Of SocketAsyncEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Sockets.SocketAsyncEventArgs
    name: SocketAsyncEventArgs
    nameWithType: SocketAsyncEventArgs
    fullName: System.Net.Sockets.SocketAsyncEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.SocketAsyncEventArgs
    name: SocketAsyncEventArgs
    nameWithType: SocketAsyncEventArgs
    fullName: System.Net.Sockets.SocketAsyncEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: false
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Sockets.SocketAsyncEventArgs
  commentId: T:System.Net.Sockets.SocketAsyncEventArgs
  parent: System.Net.Sockets
  isExternal: false
  name: SocketAsyncEventArgs
  nameWithType: SocketAsyncEventArgs
  fullName: System.Net.Sockets.SocketAsyncEventArgs
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
