### YamlMime:ManagedReference
items:
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  id: MemberInfo
  parent: System.Reflection
  children:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.Equals(System.Object)
  - System.Reflection.MemberInfo.GetHashCode
  - System.Reflection.MemberInfo.MemberType
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  langs:
  - csharp
  - vb
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberInfo
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 15
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Obtains information about the attributes of a member and provides access to member metadata.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_MemberInfo))]

      [PermissionSet(SecurityAction.InheritanceDemand, Name = "FullTrust")]

      [ComVisible(true)]

      public abstract class MemberInfo : ICustomAttributeProvider, _MemberInfo
    content.vb: >-
      <Serializable>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_MemberInfo))>

      <PermissionSet(SecurityAction.InheritanceDemand, Name:="FullTrust")>

      <ComVisible(True)>

      Public MustInherit Class MemberInfo
          Implements ICustomAttributeProvider, _MemberInfo
  see:
  - linkId: System.Security.Permissions.SecurityAction.InheritanceDemand
    commentId: F:System.Security.Permissions.SecurityAction.InheritanceDemand
  inheritance:
  - System.Object
  implements:
  - System.Reflection.ICustomAttributeProvider
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.MemberInfo.CustomAttributes
  commentId: P:System.Reflection.MemberInfo.CustomAttributes
  id: CustomAttributes
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CustomAttributes
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection that contains this member's custom attributes.</p>\n"
  syntax:
    content: public virtual IEnumerable<CustomAttributeData> CustomAttributes { get; }
    content.vb: Public Overridable ReadOnly Property CustomAttributes As IEnumerable(Of CustomAttributeData)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
      description: "\n<p>A collection that contains this member's custom attributes.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MemberInfo.DeclaringType
  commentId: P:System.Reflection.MemberInfo.DeclaringType
  id: DeclaringType
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaringType
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 37
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the class that declares this member.</p>\n"
  syntax:
    content: public abstract Type DeclaringType { get; }
    content.vb: Public MustOverride ReadOnly Property DeclaringType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <strong>Type</strong> object for the class that declares this member.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MemberInfo.MetadataToken
  commentId: P:System.Reflection.MemberInfo.MetadataToken
  id: MetadataToken
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MetadataToken
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a value that identifies a metadata element.</p>\n"
  syntax:
    content: public virtual int MetadataToken { get; }
    content.vb: Public Overridable ReadOnly Property MetadataToken As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>A value which, in combination with <xref href=\"System.Reflection.MemberInfo.Module\" data-throw-if-not-resolved=\"false\"></xref>, uniquely identifies a metadata element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> represents an array method, such as <strong>Address</strong>, on an array type whose element type is a dynamic type that has not been completed. To get a metadata token in this case, pass the <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> object to the <xref href=\"System.Reflection.Emit.ModuleBuilder.GetMethodToken(System.Reflection.MethodInfo)\" data-throw-if-not-resolved=\"false\"></xref> method; or use the <xref href=\"System.Reflection.Emit.ModuleBuilder.GetArrayMethodToken(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref>  method to get the token directly, instead of using the <xref href=\"System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])\" data-throw-if-not-resolved=\"false\"></xref> method to get a <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> first.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MemberInfo.Module
  commentId: P:System.Reflection.MemberInfo.Module
  id: Module
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Module
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 61
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the module in which the type that declares the member represented by the current <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> is defined.</p>\n"
  syntax:
    content: public virtual Module Module { get; }
    content.vb: 'Public Overridable ReadOnly Property Module As '
    parameters: []
    return:
      type: System.Reflection.Module
      description: "\n<p>The <xref href=\"System.Reflection.Module\" data-throw-if-not-resolved=\"false\"></xref> in which the type that declares the member represented by the current <xref href=\"System.Reflection.MemberInfo\" data-throw-if-not-resolved=\"false\"></xref> is defined.</p>\n"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "\n<p>This method is not implemented.</p>\n"
  seealso:
  - linkId: System.Reflection.Module
    commentId: T:System.Reflection.Module
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.MemberInfo.Name
  commentId: P:System.Reflection.MemberInfo.Name
  id: Name
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets the name of the current member.</p>\n"
  syntax:
    content: public abstract string Name { get; }
    content.vb: Public MustOverride ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> containing the name of this member.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 111
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MemberInfo.GetHashCode
  commentId: M:System.Reflection.MemberInfo.GetHashCode
  id: GetHashCode
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 116
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.MemberInfo.MemberType
  commentId: P:System.Reflection.MemberInfo.MemberType
  id: MemberType
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: MemberType
  nameWithType: MemberInfo.MemberType
  fullName: System.Reflection.MemberInfo.MemberType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/MemberInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberType
    path: src/mscorlib/src/System/Reflection/MemberInfo.cs
    startLine: 33
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>When overridden in a derived class, gets a <xref href=\"System.Reflection.MemberTypes\" data-throw-if-not-resolved=\"false\"></xref> value indicating the type of the member — method, constructor, event, and so on.</p>\n"
  syntax:
    content: public abstract MemberTypes MemberType { get; }
    content.vb: Public MustOverride ReadOnly Property MemberType As MemberTypes
    parameters: []
    return:
      type: System.Reflection.MemberTypes
      description: "\n<p>A <xref href=\"System.Reflection.MemberTypes\" data-throw-if-not-resolved=\"false\"></xref> value indicating the type of member.</p>\n"
  seealso:
  - linkId: System.Reflection.MemberTypes
    commentId: T:System.Reflection.MemberTypes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 235
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: object[] ICustomAttributeProvider.GetCustomAttributes(bool inherit)
    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes
    parameters:
    - id: inherit
      type: System.Boolean
    return:
      type: System.Object[]
  implements:
  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 236
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: object[] ICustomAttributeProvider.GetCustomAttributes(Type attributeType, bool inherit)
    content.vb: Function System.Reflection.ICustomAttributeProvider.GetCustomAttributes(attributeType As Type, inherit As Boolean) As Object() Implements ICustomAttributeProvider.GetCustomAttributes
    parameters:
    - id: attributeType
      type: System.Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Object[]
  implements:
  - System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  id: System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  isEii: true
  parent: System.Reflection.MemberInfo
  langs:
  - csharp
  - vb
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Reflection.ICustomAttributeProvider.IsDefined
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 237
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: bool ICustomAttributeProvider.IsDefined(Type attributeType, bool inherit)
    content.vb: Function System.Reflection.ICustomAttributeProvider.IsDefined(attributeType As Type, inherit As Boolean) As Boolean Implements ICustomAttributeProvider.IsDefined
    parameters:
    - id: attributeType
      type: System.Type
    - id: inherit
      type: System.Boolean
    return:
      type: System.Boolean
  implements:
  - System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.CustomAttributeData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CustomAttributeData>
  nameWithType: IEnumerable<CustomAttributeData>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.CustomAttributeData>
  nameWithType.vb: IEnumerable(Of CustomAttributeData)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.CustomAttributeData)
  name.vb: IEnumerable(Of CustomAttributeData)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.CustomAttributeData
    name: CustomAttributeData
    nameWithType: CustomAttributeData
    fullName: System.Reflection.CustomAttributeData
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberTypes
  commentId: T:System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.ICustomAttributeProvider
  isExternal: true
  name: GetCustomAttributes(Boolean)
  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    nameWithType: ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    nameWithType: ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.ICustomAttributeProvider
  isExternal: true
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.ICustomAttributeProvider
  isExternal: true
  name: IsDefined(Type, Boolean)
  nameWithType: ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    nameWithType: ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ICustomAttributeProvider.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    nameWithType: ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NotImplementedException
  commentId: T:System.NotImplementedException
  isExternal: false
  name: NotImplementedException
  nameWithType: NotImplementedException
  fullName: System.NotImplementedException
