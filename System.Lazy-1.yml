### YamlMime:ManagedReference
items:
- uid: System.Lazy`1
  commentId: T:System.Lazy`1
  id: Lazy`1
  parent: System
  children:
  - System.Lazy`1.#ctor
  - System.Lazy`1.#ctor(System.Boolean)
  - System.Lazy`1.#ctor(System.Func{`0})
  - System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  - System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  - System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  - System.Lazy`1.IsValueCreated
  - System.Lazy`1.ToString
  - System.Lazy`1.Value
  langs:
  - csharp
  - vb
  name: Lazy<T>
  nameWithType: Lazy<T>
  fullName: System.Lazy<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Lazy
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 51
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides support for lazy initialization.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      [DebuggerTypeProxy(typeof (System_LazyDebugView<>))]

      [DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")]

      public class Lazy<T>
    content.vb: >-
      <ComVisible(False)>

      <DebuggerTypeProxy(GetType(System_LazyDebugView(Of )))>

      <DebuggerDisplay("ThreadSafetyMode={Mode}, IsValueCreated={IsValueCreated}, IsValueFaulted={IsValueFaulted}, Value={ValueForDebugDisplay}")>

      Public Class Lazy(Of T)
    typeParameters:
    - id: T
      description: "\n<p>The type of object that is being lazily initialized.</p>\n"
  seealso:
  - linkId: System.Threading.LazyThreadSafetyMode
    commentId: T:System.Threading.LazyThreadSafetyMode
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Lazy(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
- uid: System.Lazy`1.#ctor
  commentId: M:System.Lazy`1.#ctor
  id: '#ctor'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy()
  nameWithType: Lazy<T>.Lazy()
  fullName: System.Lazy<T>.Lazy()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 122
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default constructor of the target type is used.</p>\n"
  syntax:
    content: public Lazy()
    content.vb: Public Sub New
  nameWithType.vb: Lazy(Of T).Lazy()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy()
- uid: System.Lazy`1.#ctor(System.Boolean)
  commentId: M:System.Lazy`1.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Boolean)
  nameWithType: Lazy<T>.Lazy(Boolean)
  fullName: System.Lazy<T>.Lazy(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 164
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the default constructor of the target type and the specified initialization mode are used.</p>\n"
  syntax:
    content: public Lazy(bool isThreadSafe)
    content.vb: Public Sub New(isThreadSafe As Boolean)
    parameters:
    - id: isThreadSafe
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make the instance usable by only one thread at a time. </p>\n"
  nameWithType.vb: Lazy(Of T).Lazy(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Boolean)
- uid: System.Lazy`1.#ctor(System.Func{`0})
  commentId: M:System.Lazy`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Func<T>)
  nameWithType: Lazy<T>.Lazy(Func<T>)
  fullName: System.Lazy<T>.Lazy(System.Func<T>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 153
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the specified initialization function is used.</p>\n"
  syntax:
    content: public Lazy(Func<T> valueFactory)
    content.vb: Public Sub New(valueFactory As Func(Of T))
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: Lazy(Of T).Lazy(Func(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T))
  name.vb: Lazy(Func(Of T))
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Boolean)
  id: '#ctor(System.Func{`0},System.Boolean)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Func<T>, Boolean)
  nameWithType: Lazy<T>.Lazy(Func<T>, Boolean)
  fullName: System.Lazy<T>.Lazy(System.Func<T>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 192
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class. When lazy initialization occurs, the specified initialization function and initialization mode are used.</p>\n"
  syntax:
    content: public Lazy(Func<T> valueFactory, bool isThreadSafe)
    content.vb: Public Sub New(valueFactory As Func(Of T), isThreadSafe As Boolean)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n"
    - id: isThreadSafe
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to make this instance usable concurrently by multiple threads; <strong>false</strong> to make this instance usable by only one thread at a time.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: Lazy(Of T).Lazy(Func(Of T), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T), System.Boolean)
  name.vb: Lazy(Func(Of T), Boolean)
- uid: System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  commentId: M:System.Lazy`1.#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Func{`0},System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(Func<T>, LazyThreadSafetyMode)
  nameWithType: Lazy<T>.Lazy(Func<T>, LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy(System.Func<T>, System.Threading.LazyThreadSafetyMode)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 208
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class that uses the specified initialization function and thread-safety mode.</p>\n"
  syntax:
    content: public Lazy(Func<T> valueFactory, LazyThreadSafetyMode mode)
    content.vb: Public Sub New(valueFactory As Func(Of T), mode As LazyThreadSafetyMode)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The delegate that is invoked to produce the lazily initialized value when it is needed.</p>\n"
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: "\n<p>One of the enumeration values that specifies the thread safety mode. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: Lazy(Of T).Lazy(Func(Of T), LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Func(Of T), System.Threading.LazyThreadSafetyMode)
  name.vb: Lazy(Func(Of T), LazyThreadSafetyMode)
- uid: System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  commentId: M:System.Lazy`1.#ctor(System.Threading.LazyThreadSafetyMode)
  id: '#ctor(System.Threading.LazyThreadSafetyMode)'
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Lazy(LazyThreadSafetyMode)
  nameWithType: Lazy<T>.Lazy(LazyThreadSafetyMode)
  fullName: System.Lazy<T>.Lazy(System.Threading.LazyThreadSafetyMode)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 175
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> class that uses the default constructor of <em>T</em> and the specified thread-safety mode.</p>\n"
  syntax:
    content: public Lazy(LazyThreadSafetyMode mode)
    content.vb: Public Sub New(mode As LazyThreadSafetyMode)
    parameters:
    - id: mode
      type: System.Threading.LazyThreadSafetyMode
      description: "\n<p>One of the enumeration values that specifies the thread safety mode. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>mode</em> contains an invalid value. </p>\n"
  seealso:
  - linkId: System.Threading.LazyThreadSafetyMode
    commentId: T:System.Threading.LazyThreadSafetyMode
  nameWithType.vb: Lazy(Of T).Lazy(LazyThreadSafetyMode)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Lazy(Of T).Lazy(System.Threading.LazyThreadSafetyMode)
- uid: System.Lazy`1.IsValueCreated
  commentId: P:System.Lazy`1.IsValueCreated
  id: IsValueCreated
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: IsValueCreated
  nameWithType: Lazy<T>.IsValueCreated
  fullName: System.Lazy<T>.IsValueCreated
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsValueCreated
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 295
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value that indicates whether a value has been created for this <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public bool IsValueCreated { get; }
    content.vb: Public ReadOnly Property IsValueCreated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a value has been created for this <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Threading.LazyThreadSafetyMode
    commentId: T:System.Threading.LazyThreadSafetyMode
  nameWithType.vb: Lazy(Of T).IsValueCreated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Lazy(Of T).IsValueCreated
- uid: System.Lazy`1.Value
  commentId: P:System.Lazy`1.Value
  id: Value
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: Lazy<T>.Value
  fullName: System.Lazy<T>.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 324
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the lazily initialized value of the current <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: >-
      [DebuggerBrowsable(DebuggerBrowsableState.Never)]

      public T Value { get; }
    content.vb: >-
      <DebuggerBrowsable(DebuggerBrowsableState.Never)>

      Public ReadOnly Property Value As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>The lazily initialized value of the current <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.MemberAccessException
    commentId: T:System.MemberAccessException
    description: "\n<p>The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and permissions to access the constructor are missing. </p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>The <xref href=\"System.Lazy`1\" data-throw-if-not-resolved=\"false\"></xref> instance is initialized to use the default constructor of the type that is being lazily initialized, and that type does not have a public, parameterless constructor. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The initialization function tries to access <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> on this instance. </p>\n"
  nameWithType.vb: Lazy(Of T).Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Lazy(Of T).Value
- uid: System.Lazy`1.ToString
  commentId: M:System.Lazy`1.ToString
  id: ToString
  parent: System.Lazy`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Lazy<T>.ToString()
  fullName: System.Lazy<T>.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Lazy.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Lazy.cs
    startLine: 247
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates and returns a string representation of the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for this instance.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The result of calling the <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> method on the <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property for this instance, if the value has been created (that is, if the <xref href=\"System.Lazy`1.IsValueCreated\" data-throw-if-not-resolved=\"false\"></xref> property returns <strong>true</strong>). Otherwise, a string indicating that the value has not been created. </p>\n"
  overridden: System.Object.ToString
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The <xref href=\"System.Lazy`1.Value\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>null</strong>.</p>\n"
  nameWithType.vb: Lazy(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Lazy(Of T).ToString()
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.LazyThreadSafetyMode
  commentId: T:System.Threading.LazyThreadSafetyMode
  parent: System.Threading
  isExternal: false
  name: LazyThreadSafetyMode
  nameWithType: LazyThreadSafetyMode
  fullName: System.Threading.LazyThreadSafetyMode
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.MemberAccessException
  commentId: T:System.MemberAccessException
  parent: System
  isExternal: false
  name: MemberAccessException
  nameWithType: MemberAccessException
  fullName: System.MemberAccessException
- uid: System.MissingMemberException
  commentId: T:System.MissingMemberException
  parent: System
  isExternal: false
  name: MissingMemberException
  nameWithType: MissingMemberException
  fullName: System.MissingMemberException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
