### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
  id: ClaimsIdentity
  parent: System.Security.Claims
  children:
  - System.Security.Claims.ClaimsIdentity.#ctor
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.AuthenticationType
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.Claims
  - System.Security.Claims.ClaimsIdentity.Clone
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultIssuer
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.IsAuthenticated
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.Name
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  - vb
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  type: Class
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClaimsIdentity
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 35
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Represents a claims-based identity.</p>\n"
  syntax:
    content: 'public class ClaimsIdentity : IIdentity'
    content.vb: >-
      Public Class ClaimsIdentity
          Implements IIdentity
  seealso:
  - linkId: System.Security.Claims.Claim
    commentId: T:System.Security.Claims.Claim
  - linkId: System.Security.Claims.ClaimsPrincipal
    commentId: T:System.Security.Claims.ClaimsPrincipal
  - linkId: System.Security.Principal.GenericIdentity
    commentId: T:System.Security.Principal.GenericIdentity
  - linkId: System.Security.Principal.WindowsIdentity
    commentId: T:System.Security.Principal.WindowsIdentity
  - linkId: System.Web.Security.FormsIdentity
    commentId: T:System.Web.Security.FormsIdentity
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IIdentity
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  type: Field
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIssuer
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 37
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>The default issuer; “LOCAL AUTHORITY”.</p>\n"
  syntax:
    content: public const string DefaultIssuer = "LOCAL AUTHORITY"
    content.vb: Public Const DefaultIssuer As String = "LOCAL AUTHORITY"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  id: DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  type: Field
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultNameClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 38
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>The default name claim type; <xref href=\"System.Security.Claims.ClaimTypes.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public const string DefaultNameClaimType = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
    content.vb: Public Const DefaultNameClaimType As String = "http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  commentId: F:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  id: DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  type: Field
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultRoleClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 39
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>The default role claim type; <xref href=\"System.Security.Claims.ClaimTypes.Role\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public const string DefaultRoleClaimType = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
    content.vb: Public Const DefaultRoleClaimType As String = "http://schemas.microsoft.com/ws/2008/06/identity/claims/role"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 40
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with an empty claims collection.</p>\n"
  syntax:
    content: public ClaimsIdentity()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 41
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class using an enumerated collection of <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: public ClaimsIdentity(IEnumerable<Claim> claims)
    content.vb: Public Sub New(claims As IEnumerable(Of Claim))
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IEnumerable(Of Claim))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: ClaimsIdentity(IEnumerable(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IEnumerable<Claim>, String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 42
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claims and authentication type.</p>\n"
  syntax:
    content: public ClaimsIdentity(IEnumerable<Claim> claims, string authenticationType)
    content.vb: Public Sub New(claims As IEnumerable(Of Claim), authenticationType As String)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IEnumerable(Of Claim), String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String)
  name.vb: ClaimsIdentity(IEnumerable(Of Claim), String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IEnumerable<Claim>, String, String, String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>, String, String, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 43
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claims, authentication type, name claim type, and role claim type.</p>\n"
  syntax:
    content: public ClaimsIdentity(IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType)
    content.vb: Public Sub New(claims As IEnumerable(Of Claim), authenticationType As String, nameType As String, roleType As String)
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
    - id: nameType
      type: System.String
      description: "\n<p>The claim type to use for name claims.</p>\n"
    - id: roleType
      type: System.String
      description: "\n<p>The claim type to use for role claims.</p>\n"
  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IEnumerable(Of Claim), String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String, System.String)
  name.vb: ClaimsIdentity(IEnumerable(Of Claim), String, String, String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.IO.BinaryReader)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 44
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public ClaimsIdentity(BinaryReader reader)
    content.vb: Public Sub New(reader As BinaryReader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 45
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected ClaimsIdentity(ClaimsIdentity other)
    content.vb: Protected Sub New(other As ClaimsIdentity)
    parameters:
    - id: other
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 46
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class using the name and authentication type from the specified <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ClaimsIdentity(IIdentity identity)
    content.vb: Public Sub New(identity As IIdentity)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to base the new claims identity.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IIdentity, IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 47
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class using the specified claims and the specified <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims)
    content.vb: Public Sub New(identity As IIdentity, claims As IEnumerable(Of Claim))
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to base the new claims identity.</p>\n"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the claims identity.</p>\n"
  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable(Of Claim))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: ClaimsIdentity(IIdentity, IEnumerable(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable<Claim>, String, String, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 48
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class from the specified <xref href=\"System.Security.Principal.IIdentity\" data-throw-if-not-resolved=\"false\"></xref> using the specified claims, authentication type, name claim type, and role claim type.</p>\n"
  syntax:
    content: public ClaimsIdentity(IIdentity identity, IEnumerable<Claim> claims, string authenticationType, string nameType, string roleType)
    content.vb: Public Sub New(identity As IIdentity, claims As IEnumerable(Of Claim), authenticationType As String, nameType As String, roleType As String)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to base the new claims identity.</p>\n"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims with which to populate the new claims identity.</p>\n"
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
    - id: nameType
      type: System.String
      description: "\n<p>The claim type to use for name claims.</p>\n"
    - id: roleType
      type: System.String
      description: "\n<p>The claim type to use for role claims.</p>\n"
  nameWithType.vb: ClaimsIdentity.ClaimsIdentity(IIdentity, IEnumerable(Of Claim), String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.Security.Principal.IIdentity, System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim), System.String, System.String, System.String)
  name.vb: ClaimsIdentity(IIdentity, IEnumerable(Of Claim), String, String, String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 49
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with an empty claims collection and the specified authentication type.</p>\n"
  syntax:
    content: public ClaimsIdentity(string authenticationType)
    content.vb: Public Sub New(authenticationType As String)
    parameters:
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: ClaimsIdentity(String, String, String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String, String, String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 50
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> class with the specified authentication type, name claim type, and role claim type.</p>\n"
  syntax:
    content: public ClaimsIdentity(string authenticationType, string nameType, string roleType)
    content.vb: Public Sub New(authenticationType As String, nameType As String, roleType As String)
    parameters:
    - id: authenticationType
      type: System.String
      description: "\n<p>The type of authentication used.</p>\n"
    - id: nameType
      type: System.String
      description: "\n<p>The claim type to use for name claims.</p>\n"
    - id: roleType
      type: System.String
      description: "\n<p>The claim type to use for role claims.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.Actor
  commentId: P:System.Security.Claims.ClaimsIdentity.Actor
  id: Actor
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Actor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 51
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets or sets the identity of the calling party that was granted delegation rights.</p>\n"
  syntax:
    content: public ClaimsIdentity Actor { get; set; }
    content.vb: Public Property Actor As ClaimsIdentity
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The calling party that was granted delegation rights.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An attempt to set the property to the current instance occurs.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  commentId: P:System.Security.Claims.ClaimsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AuthenticationType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 52
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the authentication type.</p>\n"
  syntax:
    content: public virtual string AuthenticationType { get; }
    content.vb: Public Overridable ReadOnly Property AuthenticationType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The authentication type.</p>\n"
  implements:
  - System.Security.Principal.IIdentity.AuthenticationType
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  commentId: P:System.Security.Claims.ClaimsIdentity.BootstrapContext
  id: BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BootstrapContext
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 53
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets or sets the token that was used to create this claims identity.</p>\n"
  syntax:
    content: >-
      public object BootstrapContext

      {
          get;
          [SecurityCritical]
          set;
      }
    content.vb: Public Property BootstrapContext As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>The bootstrap context.</p>\n"
  seealso:
  - linkId: System.Security.Claims.ClaimsIdentity.Actor
    commentId: P:System.Security.Claims.ClaimsIdentity.Actor
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.Claims
  commentId: P:System.Security.Claims.ClaimsIdentity.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 54
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claims associated with this claims identity.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> Claims { get; }
    content.vb: Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The collection of claims associated with this claims identity.</p>\n"
  seealso:
  - linkId: System.Security.Claims.ClaimsPrincipal.Claims
    commentId: P:System.Security.Claims.ClaimsPrincipal.Claims
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  commentId: P:System.Security.Claims.ClaimsIdentity.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomSerializationData
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 55
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  commentId: P:System.Security.Claims.ClaimsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAuthenticated
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 56
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a value that indicates whether the identity has been authenticated.</p>\n"
  syntax:
    content: public virtual bool IsAuthenticated { get; }
    content.vb: Public Overridable ReadOnly Property IsAuthenticated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the identity has been authenticated; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Security.Principal.IIdentity.IsAuthenticated
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.Label
  commentId: P:System.Security.Claims.ClaimsIdentity.Label
  id: Label
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Label
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 57
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets or sets the label for this claims identity.</p>\n"
  syntax:
    content: public string Label { get; set; }
    content.vb: Public Property Label As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The label.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Security.Claims.ClaimsIdentity.Name
  commentId: P:System.Security.Claims.ClaimsIdentity.Name
  id: Name
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 58
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the name of this claims identity.</p>\n"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name or <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Security.Claims.ClaimsIdentity.NameClaimType
    commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType
  implements:
  - System.Security.Principal.IIdentity.Name
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  commentId: P:System.Security.Claims.ClaimsIdentity.NameClaimType
  id: NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 59
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claim type that is used to determine which claims provide the value for the <xref href=\"System.Security.Claims.ClaimsIdentity.Name\" data-throw-if-not-resolved=\"false\"></xref> property of this claims identity.</p>\n"
  syntax:
    content: public string NameClaimType { get; }
    content.vb: Public ReadOnly Property NameClaimType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name claim type.</p>\n"
  seealso:
  - linkId: System.Security.Claims.ClaimsIdentity.Name
    commentId: P:System.Security.Claims.ClaimsIdentity.Name
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  commentId: P:System.Security.Claims.ClaimsIdentity.RoleClaimType
  id: RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RoleClaimType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 60
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claim type that will be interpreted as a .NET Framework role among the claims in this claims identity.</p>\n"
  syntax:
    content: public string RoleClaimType { get; }
    content.vb: Public ReadOnly Property RoleClaimType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The role claim type.</p>\n"
  seealso:
  - linkId: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
    commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  id: AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 61
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds a single claim to this claims identity.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void AddClaim(Claim claim)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub AddClaim(claim As Claim)
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "\n<p>The claim to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>claim</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddClaims
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 63
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds a list of claims to this claims identity.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void AddClaims(IEnumerable<Claim> claims)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub AddClaims(claims As IEnumerable(Of Claim))
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>claims</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: ClaimsIdentity.AddClaims(IEnumerable(Of Claim))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim))
  name.vb: AddClaims(IEnumerable(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.Clone
  commentId: M:System.Security.Claims.ClaimsIdentity.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 65
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a new <xref href=\"System.Security.Claims.ClaimsIdentity\" data-throw-if-not-resolved=\"false\"></xref> copied from this claims identity.</p>\n"
  syntax:
    content: public virtual ClaimsIdentity Clone()
    content.vb: Public Overridable Function Clone As ClaimsIdentity
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>A copy of the current instance.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  id: CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 66
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual Claim CreateClaim(BinaryReader reader)
    content.vb: Protected Overridable Function CreateClaim(reader As BinaryReader) As Claim
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 67
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all of the claims that are matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(Predicate<Claim> match)
    content.vb: Public Overridable Function FindAll(match As Predicate(Of Claim)) As IEnumerable(Of Claim)
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims. The list is read-only.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  nameWithType.vb: ClaimsIdentity.FindAll(Predicate(Of Claim))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindAll(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 68
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all of the claims that have the specified claim type.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(string type)
    content.vb: Public Overridable Function FindAll(type As String) As IEnumerable(Of Claim)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type against which to match claims.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims. The list is read-only.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 69
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(Predicate<Claim> match)
    content.vb: Public Overridable Function FindFirst(match As Predicate(Of Claim)) As Claim
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  nameWithType.vb: ClaimsIdentity.FindFirst(Predicate(Of Claim))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindFirst(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 70
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim with the specified claim type.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(string type)
    content.vb: Public Overridable Function FindFirst(type As String) As Claim
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type to match.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 71
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether this claims identity has a claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual bool HasClaim(Predicate<Claim> match)
    content.vb: Public Overridable Function HasClaim(match As Predicate(Of Claim)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  nameWithType.vb: ClaimsIdentity.HasClaim(Predicate(Of Claim))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: HasClaim(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: HasClaim(String, String)
  nameWithType: ClaimsIdentity.HasClaim(String, String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 72
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether this claims identity has a claim with the specified claim type and value.</p>\n"
  syntax:
    content: public virtual bool HasClaim(string type, string value)
    content.vb: Public Overridable Function HasClaim(type As String, value As String) As Boolean
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The type of the claim to match.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the claim to match.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a match is found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  id: RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 73
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Attempts to remove a claim from the claims identity.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual void RemoveClaim(Claim claim)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Sub RemoveClaim(claim As Claim)
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "\n<p>The claim to remove.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The claim cannot be removed.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  id: TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryRemoveClaim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 75
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Attempts to remove a claim from the claims identity.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public virtual bool TryRemoveClaim(Claim claim)
    content.vb: >-
      <SecurityCritical>

      Public Overridable Function TryRemoveClaim(claim As Claim) As Boolean
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "\n<p>The claim to remove.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the claim was successfully removed; otherwise, <strong>false</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 77
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public virtual void WriteTo(BinaryWriter writer)
    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter, Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 78
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)
    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
    - id: userData
      type: System.Byte[]
      description: "\n<p></p>\n"
  nameWithType.vb: ClaimsIdentity.WriteTo(BinaryWriter, Byte())
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
references:
- uid: System.Security.Claims
  commentId: N:System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  nameWithType: System.Security.Claims
  fullName: System.Security.Claims
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Principal.IIdentity
  commentId: T:System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Security.Principal
  commentId: N:System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  nameWithType: System.Security.Principal
  fullName: System.Security.Principal
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.BinaryReader
  commentId: T:System.IO.BinaryReader
  parent: System.IO
  isExternal: false
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Security.Claims.ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Principal.IIdentity.AuthenticationType
  commentId: P:System.Security.Principal.IIdentity.AuthenticationType
  parent: System.Security.Principal.IIdentity
  isExternal: true
  name: AuthenticationType
  nameWithType: IIdentity.AuthenticationType
  fullName: System.Security.Principal.IIdentity.AuthenticationType
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Security.Principal.IIdentity.IsAuthenticated
  commentId: P:System.Security.Principal.IIdentity.IsAuthenticated
  parent: System.Security.Principal.IIdentity
  isExternal: true
  name: IsAuthenticated
  nameWithType: IIdentity.IsAuthenticated
  fullName: System.Security.Principal.IIdentity.IsAuthenticated
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.IIdentity.Name
  commentId: P:System.Security.Principal.IIdentity.Name
  parent: System.Security.Principal.IIdentity
  isExternal: true
  name: Name
  nameWithType: IIdentity.Name
  fullName: System.Security.Principal.IIdentity.Name
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Predicate{System.Security.Claims.Claim}
  commentId: T:System.Predicate{System.Security.Claims.Claim}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  nameWithType.vb: Predicate(Of Claim)
  fullname.vb: System.Predicate(Of System.Security.Claims.Claim)
  name.vb: Predicate(Of Claim)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.BinaryWriter
  commentId: T:System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
