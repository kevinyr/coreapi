### YamlMime:ManagedReference
items:
- uid: System.Reflection.Context.CustomReflectionContext
  commentId: T:System.Reflection.Context.CustomReflectionContext
  id: CustomReflectionContext
  parent: System.Reflection.Context
  children:
  - System.Reflection.Context.CustomReflectionContext.#ctor
  - System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  - System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  - System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  - System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  - System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  langs:
  - csharp
  - vb
  name: CustomReflectionContext
  nameWithType: CustomReflectionContext
  fullName: System.Reflection.Context.CustomReflectionContext
  type: Class
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomReflectionContext
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 10
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Represents a customizable reflection context.</p>\n"
  syntax:
    content: 'public abstract class CustomReflectionContext : ReflectionContext'
    content.vb: >-
      Public MustInherit Class CustomReflectionContext
          Inherits ReflectionContext
  inheritance:
  - System.Object
  - System.Reflection.ReflectionContext
  inheritedMembers:
  - System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.Context.CustomReflectionContext.#ctor
  commentId: M:System.Reflection.Context.CustomReflectionContext.#ctor
  id: '#ctor'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: CustomReflectionContext()
  nameWithType: CustomReflectionContext.CustomReflectionContext()
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext()
  type: Constructor
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 12
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.Context.CustomReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected CustomReflectionContext()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  commentId: M:System.Reflection.Context.CustomReflectionContext.#ctor(System.Reflection.ReflectionContext)
  id: '#ctor(System.Reflection.ReflectionContext)'
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: CustomReflectionContext(ReflectionContext)
  nameWithType: CustomReflectionContext.CustomReflectionContext(ReflectionContext)
  fullName: System.Reflection.Context.CustomReflectionContext.CustomReflectionContext(System.Reflection.ReflectionContext)
  type: Constructor
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 13
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Reflection.Context.CustomReflectionContext\" data-throw-if-not-resolved=\"false\"></xref> class with the specified reflection context as a base.</p>\n"
  syntax:
    content: protected CustomReflectionContext(ReflectionContext source)
    content.vb: Protected Sub New(source As ReflectionContext)
    parameters:
    - id: source
      type: System.Reflection.ReflectionContext
      description: "\n<p>The reflection context to use as a base.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  commentId: M:System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  id: AddProperties(System.Type)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: AddProperties(Type)
  nameWithType: CustomReflectionContext.AddProperties(Type)
  fullName: System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddProperties
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 14
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>When overridden in a derived class, provides a collection of additional properties for the specified type, as represented in this reflection context.</p>\n"
  syntax:
    content: protected virtual IEnumerable<PropertyInfo> AddProperties(Type type)
    content.vb: Protected Overridable Function AddProperties(type As Type) As IEnumerable(Of PropertyInfo)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The type to add properties to.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: "\n<p>A collection of additional properties for the specified type.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  commentId: M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: CreateProperty(Type, String, Func<Object, Object>, Action<Object, Object>)
  nameWithType: CustomReflectionContext.CreateProperty(Type, String, Func<Object, Object>, Action<Object, Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func<System.Object, System.Object>, System.Action<System.Object, System.Object>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProperty
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 15
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Creates an object that represents a property to be added to a type, to be used with the <xref href=\"System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: protected PropertyInfo CreateProperty(Type propertyType, string name, Func<object, object> getter, Action<object, object> setter)
    content.vb: Protected Function CreateProperty(propertyType As Type, name As String, getter As Func(Of Object, Object), setter As Action(Of Object, Object)) As PropertyInfo
    parameters:
    - id: propertyType
      type: System.Type
      description: "\n<p>The type of the property to create.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the property to create.</p>\n"
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>get</strong> accessor.</p>\n"
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>set</strong> accessor.</p>\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\n<p>An object that represents the property.</p>\n"
  nameWithType.vb: CustomReflectionContext.CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func(Of System.Object, System.Object), System.Action(Of System.Object, System.Object))
  name.vb: CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object))
- uid: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  commentId: M:System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  id: CreateProperty(System.Type,System.String,System.Func{System.Object,System.Object},System.Action{System.Object,System.Object},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: CreateProperty(Type, String, Func<Object, Object>, Action<Object, Object>, IEnumerable<Attribute>, IEnumerable<Attribute>, IEnumerable<Attribute>)
  nameWithType: CustomReflectionContext.CreateProperty(Type, String, Func<Object, Object>, Action<Object, Object>, IEnumerable<Attribute>, IEnumerable<Attribute>, IEnumerable<Attribute>)
  fullName: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func<System.Object, System.Object>, System.Action<System.Object, System.Object>, System.Collections.Generic.IEnumerable<System.Attribute>, System.Collections.Generic.IEnumerable<System.Attribute>, System.Collections.Generic.IEnumerable<System.Attribute>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateProperty
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 16
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Creates an object that represents a property to be added to a type, to be used with the <xref href=\"System.Reflection.Context.CustomReflectionContext.AddProperties(System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method and using the specified custom attributes.</p>\n"
  syntax:
    content: protected PropertyInfo CreateProperty(Type propertyType, string name, Func<object, object> getter, Action<object, object> setter, IEnumerable<Attribute> propertyCustomAttributes, IEnumerable<Attribute> getterCustomAttributes, IEnumerable<Attribute> setterCustomAttributes)
    content.vb: Protected Function CreateProperty(propertyType As Type, name As String, getter As Func(Of Object, Object), setter As Action(Of Object, Object), propertyCustomAttributes As IEnumerable(Of Attribute), getterCustomAttributes As IEnumerable(Of Attribute), setterCustomAttributes As IEnumerable(Of Attribute)) As PropertyInfo
    parameters:
    - id: propertyType
      type: System.Type
      description: "\n<p>The type of the property to create.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the property to create.</p>\n"
    - id: getter
      type: System.Func{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>get</strong> accessor.</p>\n"
    - id: setter
      type: System.Action{System.Object,System.Object}
      description: "\n<p>An object that represents the property's <strong>set</strong> accessor.</p>\n"
    - id: propertyCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of custom attributes to apply to the property.</p>\n"
    - id: getterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of custom attributes to apply to the property's <strong>get</strong> accessor.</p>\n"
    - id: setterCustomAttributes
      type: System.Collections.Generic.IEnumerable{System.Attribute}
      description: "\n<p>A collection of custom attributes to apply to the property's <strong>set</strong> accessor.</p>\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\n<p>An object that represents the property.</p>\n"
  nameWithType.vb: CustomReflectionContext.CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object), IEnumerable(Of Attribute), IEnumerable(Of Attribute), IEnumerable(Of Attribute))
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Reflection.Context.CustomReflectionContext.CreateProperty(System.Type, System.String, System.Func(Of System.Object, System.Object), System.Action(Of System.Object, System.Object), System.Collections.Generic.IEnumerable(Of System.Attribute), System.Collections.Generic.IEnumerable(Of System.Attribute), System.Collections.Generic.IEnumerable(Of System.Attribute))
  name.vb: CreateProperty(Type, String, Func(Of Object, Object), Action(Of Object, Object), IEnumerable(Of Attribute), IEnumerable(Of Attribute), IEnumerable(Of Attribute))
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(MemberInfo, IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(MemberInfo, IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 17
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>When overridden in a derived class, provides a list of custom attributes for the specified member, as represented in this reflection context.</p>\n"
  syntax:
    content: protected virtual IEnumerable<object> GetCustomAttributes(MemberInfo member, IEnumerable<object> declaredAttributes)
    content.vb: Protected Overridable Function GetCustomAttributes(member As MemberInfo, declaredAttributes As IEnumerable(Of Object)) As IEnumerable(Of Object)
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "\n<p>The member whose custom attributes will be returned.</p>\n"
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection of the member's attributes in its current context.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection that represents the custom attributes of the specified member in this reflection context.</p>\n"
  nameWithType.vb: CustomReflectionContext.GetCustomAttributes(MemberInfo, IEnumerable(Of Object))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: GetCustomAttributes(MemberInfo, IEnumerable(Of Object))
- uid: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  commentId: M:System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  id: GetCustomAttributes(System.Reflection.ParameterInfo,System.Collections.Generic.IEnumerable{System.Object})
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: GetCustomAttributes(ParameterInfo, IEnumerable<Object>)
  nameWithType: CustomReflectionContext.GetCustomAttributes(ParameterInfo, IEnumerable<Object>)
  fullName: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo, System.Collections.Generic.IEnumerable<System.Object>)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCustomAttributes
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 18
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>When overridden in a derived class, provides a list of custom attributes for the specified parameter, as represented in this reflection context.</p>\n"
  syntax:
    content: protected virtual IEnumerable<object> GetCustomAttributes(ParameterInfo parameter, IEnumerable<object> declaredAttributes)
    content.vb: Protected Overridable Function GetCustomAttributes(parameter As ParameterInfo, declaredAttributes As IEnumerable(Of Object)) As IEnumerable(Of Object)
    parameters:
    - id: parameter
      type: System.Reflection.ParameterInfo
      description: "\n<p>The parameter whose custom attributes will be returned.</p>\n"
    - id: declaredAttributes
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection of the parameter's attributes in its current context.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "\n<p>A collection that represents the custom attributes of the specified parameter in this reflection context.</p>\n"
  nameWithType.vb: CustomReflectionContext.GetCustomAttributes(ParameterInfo, IEnumerable(Of Object))
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Reflection.Context.CustomReflectionContext.GetCustomAttributes(System.Reflection.ParameterInfo, System.Collections.Generic.IEnumerable(Of System.Object))
  name.vb: GetCustomAttributes(ParameterInfo, IEnumerable(Of Object))
- uid: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  commentId: M:System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  id: MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: MapAssembly(Assembly)
  nameWithType: CustomReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.Context.CustomReflectionContext.MapAssembly(System.Reflection.Assembly)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapAssembly
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 19
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Gets the representation, in this reflection context, of an assembly that is represented by an object from another reflection context. </p>\n"
  syntax:
    content: public override Assembly MapAssembly(Assembly assembly)
    content.vb: Public Overrides Function MapAssembly(assembly As Assembly) As Assembly
    parameters:
    - id: assembly
      type: System.Reflection.Assembly
      description: "\n<p>The external representation of the assembly to represent in this context.</p>\n"
    return:
      type: System.Reflection.Assembly
      description: "\n<p>The representation of the assembly in this reflection context.</p>\n"
  overridden: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  id: MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.Context.CustomReflectionContext
  langs:
  - csharp
  - vb
  name: MapType(TypeInfo)
  nameWithType: CustomReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.Context.CustomReflectionContext.MapType(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MapType
    path: src/System.Reflection.Context/ref/System.Reflection.Context.cs
    startLine: 20
  assemblies:
  - System.Reflection.Context
  namespace: System.Reflection.Context
  summary: "\n<p>Gets the representation, in this reflection context, of a type represented by an object from another reflection context. </p>\n"
  syntax:
    content: public override TypeInfo MapType(TypeInfo type)
    content.vb: Public Overrides Function MapType(type As TypeInfo) As TypeInfo
    parameters:
    - id: type
      type: System.Reflection.TypeInfo
      description: "\n<p>The external representation of the type to represent in this context. </p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>The representation of the type in this reflection context. </p>\n"
  overridden: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Reflection.Context
  commentId: N:System.Reflection.Context
  isExternal: false
  name: System.Reflection.Context
  nameWithType: System.Reflection.Context
  fullName: System.Reflection.Context
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.ReflectionContext
  commentId: T:System.Reflection.ReflectionContext
  parent: System.Reflection
  isExternal: false
  name: ReflectionContext
  nameWithType: ReflectionContext
  fullName: System.Reflection.ReflectionContext
- uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  commentId: M:System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  parent: System.Reflection.ReflectionContext
  isExternal: true
  name: GetTypeForObject(Object)
  nameWithType: ReflectionContext.GetTypeForObject(Object)
  fullName: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
  spec.csharp:
  - uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
    name: GetTypeForObject
    nameWithType: ReflectionContext.GetTypeForObject
    fullName: System.Reflection.ReflectionContext.GetTypeForObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ReflectionContext.GetTypeForObject(System.Object)
    name: GetTypeForObject
    nameWithType: ReflectionContext.GetTypeForObject
    fullName: System.Reflection.ReflectionContext.GetTypeForObject
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyInfo>
  nameWithType: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  nameWithType.vb: IEnumerable(Of PropertyInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Func{System.Object,System.Object}
  commentId: T:System.Func{System.Object,System.Object}
  parent: System
  definition: System.Func`2
  name: Func<Object, Object>
  nameWithType: Func<Object, Object>
  fullName: System.Func<System.Object, System.Object>
  nameWithType.vb: Func(Of Object, Object)
  fullname.vb: System.Func(Of System.Object, System.Object)
  name.vb: Func(Of Object, Object)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{System.Object,System.Object}
  commentId: T:System.Action{System.Object,System.Object}
  parent: System
  definition: System.Action`2
  name: Action<Object, Object>
  nameWithType: Action<Object, Object>
  fullName: System.Action<System.Object, System.Object>
  nameWithType.vb: Action(Of Object, Object)
  fullname.vb: System.Action(Of System.Object, System.Object)
  name.vb: Action(Of Object, Object)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Func`2
  commentId: T:System.Func`2
  isExternal: false
  name: Func<T, TResult>
  nameWithType: Func<T, TResult>
  fullName: System.Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`2
  commentId: T:System.Action`2
  isExternal: false
  name: Action<T1, T2>
  nameWithType: Action<T1, T2>
  fullName: System.Action<T1, T2>
  nameWithType.vb: Action(Of T1, T2)
  fullname.vb: System.Action(Of T1, T2)
  name.vb: Action(Of T1, T2)
  spec.csharp:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`2
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Attribute}
  commentId: T:System.Collections.Generic.IEnumerable{System.Attribute}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Attribute>
  nameWithType: IEnumerable<Attribute>
  fullName: System.Collections.Generic.IEnumerable<System.Attribute>
  nameWithType.vb: IEnumerable(Of Attribute)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Attribute)
  name.vb: IEnumerable(Of Attribute)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: System.Attribute
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Collections.Generic.IEnumerable{System.Object}
  commentId: T:System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  nameWithType.vb: IEnumerable(Of Object)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object)
  name.vb: IEnumerable(Of Object)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.ParameterInfo
  commentId: T:System.Reflection.ParameterInfo
  parent: System.Reflection
  isExternal: false
  name: ParameterInfo
  nameWithType: ParameterInfo
  fullName: System.Reflection.ParameterInfo
- uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  commentId: M:System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  parent: System.Reflection.ReflectionContext
  isExternal: true
  name: MapAssembly(Assembly)
  nameWithType: ReflectionContext.MapAssembly(Assembly)
  fullName: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
  spec.csharp:
  - uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
    name: MapAssembly
    nameWithType: ReflectionContext.MapAssembly
    fullName: System.Reflection.ReflectionContext.MapAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ReflectionContext.MapAssembly(System.Reflection.Assembly)
    name: MapAssembly
    nameWithType: ReflectionContext.MapAssembly
    fullName: System.Reflection.ReflectionContext.MapAssembly
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: System.Reflection.Assembly
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  parent: System.Reflection.ReflectionContext
  isExternal: true
  name: MapType(TypeInfo)
  nameWithType: ReflectionContext.MapType(TypeInfo)
  fullName: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
  spec.csharp:
  - uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
    name: MapType
    nameWithType: ReflectionContext.MapType
    fullName: System.Reflection.ReflectionContext.MapType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ReflectionContext.MapType(System.Reflection.TypeInfo)
    name: MapType
    nameWithType: ReflectionContext.MapType
    fullName: System.Reflection.ReflectionContext.MapType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
