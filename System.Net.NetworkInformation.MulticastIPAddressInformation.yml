### YamlMime:ManagedReference
items:
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation
  commentId: T:System.Net.NetworkInformation.MulticastIPAddressInformation
  id: MulticastIPAddressInformation
  parent: System.Net.NetworkInformation
  children:
  - System.Net.NetworkInformation.MulticastIPAddressInformation.#ctor
  - System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime
  - System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime
  - System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime
  - System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState
  - System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin
  - System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin
  langs:
  - csharp
  - vb
  name: MulticastIPAddressInformation
  nameWithType: MulticastIPAddressInformation
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation
  type: Class
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastIPAddressInformation
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 222
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Provides information about a network interface's multicast address.</p>\n"
  syntax:
    content: 'public abstract class MulticastIPAddressInformation : IPAddressInformation'
    content.vb: >-
      Public MustInherit Class MulticastIPAddressInformation
          Inherits IPAddressInformation
  inheritance:
  - System.Object
  - System.Net.NetworkInformation.IPAddressInformation
  inheritedMembers:
  - System.Net.NetworkInformation.IPAddressInformation.Address
  - System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  - System.Net.NetworkInformation.IPAddressInformation.IsTransient
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.#ctor
  commentId: M:System.Net.NetworkInformation.MulticastIPAddressInformation.#ctor
  id: '#ctor'
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: MulticastIPAddressInformation()
  nameWithType: MulticastIPAddressInformation.MulticastIPAddressInformation()
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.MulticastIPAddressInformation()
  type: Constructor
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 224
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.NetworkInformation.MulticastIPAddressInformation\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected MulticastIPAddressInformation()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime
  commentId: P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime
  id: AddressPreferredLifetime
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: AddressPreferredLifetime
  nameWithType: MulticastIPAddressInformation.AddressPreferredLifetime
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.AddressPreferredLifetime
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressPreferredLifetime
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 225
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of seconds remaining during which this address is the preferred address.</p>\n"
  syntax:
    content: public abstract long AddressPreferredLifetime { get; }
    content.vb: Public MustOverride ReadOnly Property AddressPreferredLifetime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the number of seconds left for this address to remain preferred.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime
  commentId: P:System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime
  id: AddressValidLifetime
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: AddressValidLifetime
  nameWithType: MulticastIPAddressInformation.AddressValidLifetime
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.AddressValidLifetime
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddressValidLifetime
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 226
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets the number of seconds remaining during which this address is valid.</p>\n"
  syntax:
    content: public abstract long AddressValidLifetime { get; }
    content.vb: Public MustOverride ReadOnly Property AddressValidLifetime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that specifies the number of seconds left for this address to remain assigned.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime
  commentId: P:System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime
  id: DhcpLeaseLifetime
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: DhcpLeaseLifetime
  nameWithType: MulticastIPAddressInformation.DhcpLeaseLifetime
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.DhcpLeaseLifetime
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DhcpLeaseLifetime
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 227
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Specifies the amount of time remaining on the Dynamic Host Configuration Protocol (DHCP) lease for this IP address.</p>\n"
  syntax:
    content: public abstract long DhcpLeaseLifetime { get; }
    content.vb: Public MustOverride ReadOnly Property DhcpLeaseLifetime As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>An <xref href=\"System.Int64\" data-throw-if-not-resolved=\"false\"></xref> value that contains the number of seconds remaining before the computer must release the <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState
  commentId: P:System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState
  id: DuplicateAddressDetectionState
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: DuplicateAddressDetectionState
  nameWithType: MulticastIPAddressInformation.DuplicateAddressDetectionState
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.DuplicateAddressDetectionState
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DuplicateAddressDetectionState
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 228
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that indicates the state of the duplicate address detection algorithm.</p>\n"
  syntax:
    content: public abstract DuplicateAddressDetectionState DuplicateAddressDetectionState { get; }
    content.vb: Public MustOverride ReadOnly Property DuplicateAddressDetectionState As DuplicateAddressDetectionState
    parameters: []
    return:
      type: System.Net.NetworkInformation.DuplicateAddressDetectionState
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.DuplicateAddressDetectionState\" data-throw-if-not-resolved=\"false\"></xref> values that indicates the progress of the algorithm in determining the uniqueness of this IP address.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin
  commentId: P:System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin
  id: PrefixOrigin
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: PrefixOrigin
  nameWithType: MulticastIPAddressInformation.PrefixOrigin
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.PrefixOrigin
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrefixOrigin
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 229
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that identifies the source of a Multicast Internet Protocol (IP) address prefix.</p>\n"
  syntax:
    content: public abstract PrefixOrigin PrefixOrigin { get; }
    content.vb: Public MustOverride ReadOnly Property PrefixOrigin As PrefixOrigin
    parameters: []
    return:
      type: System.Net.NetworkInformation.PrefixOrigin
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.PrefixOrigin\" data-throw-if-not-resolved=\"false\"></xref> values that identifies how the prefix information was obtained.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin
  commentId: P:System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin
  id: SuffixOrigin
  parent: System.Net.NetworkInformation.MulticastIPAddressInformation
  langs:
  - csharp
  - vb
  name: SuffixOrigin
  nameWithType: MulticastIPAddressInformation.SuffixOrigin
  fullName: System.Net.NetworkInformation.MulticastIPAddressInformation.SuffixOrigin
  type: Property
  source:
    remote:
      path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SuffixOrigin
    path: src/System.Net.NetworkInformation/ref/System.Net.NetworkInformation.cs
    startLine: 230
  assemblies:
  - System.Net.NetworkInformation
  namespace: System.Net.NetworkInformation
  summary: "\n<p>Gets a value that identifies the source of a Multicast Internet Protocol (IP) address suffix.</p>\n"
  syntax:
    content: public abstract SuffixOrigin SuffixOrigin { get; }
    content.vb: Public MustOverride ReadOnly Property SuffixOrigin As SuffixOrigin
    parameters: []
    return:
      type: System.Net.NetworkInformation.SuffixOrigin
      description: "\n<p>One of the <xref href=\"System.Net.NetworkInformation.SuffixOrigin\" data-throw-if-not-resolved=\"false\"></xref> values that identifies how the suffix information was obtained.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>This property is not valid on computers running operating systems earlier than Windows XP. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
references:
- uid: System.Net.NetworkInformation
  commentId: N:System.Net.NetworkInformation
  isExternal: false
  name: System.Net.NetworkInformation
  nameWithType: System.Net.NetworkInformation
  fullName: System.Net.NetworkInformation
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.NetworkInformation.IPAddressInformation
  commentId: T:System.Net.NetworkInformation.IPAddressInformation
  parent: System.Net.NetworkInformation
  isExternal: false
  name: IPAddressInformation
  nameWithType: IPAddressInformation
  fullName: System.Net.NetworkInformation.IPAddressInformation
- uid: System.Net.NetworkInformation.IPAddressInformation.Address
  commentId: P:System.Net.NetworkInformation.IPAddressInformation.Address
  parent: System.Net.NetworkInformation.IPAddressInformation
  isExternal: false
  name: Address
  nameWithType: IPAddressInformation.Address
  fullName: System.Net.NetworkInformation.IPAddressInformation.Address
- uid: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  commentId: P:System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
  parent: System.Net.NetworkInformation.IPAddressInformation
  isExternal: false
  name: IsDnsEligible
  nameWithType: IPAddressInformation.IsDnsEligible
  fullName: System.Net.NetworkInformation.IPAddressInformation.IsDnsEligible
- uid: System.Net.NetworkInformation.IPAddressInformation.IsTransient
  commentId: P:System.Net.NetworkInformation.IPAddressInformation.IsTransient
  parent: System.Net.NetworkInformation.IPAddressInformation
  isExternal: false
  name: IsTransient
  nameWithType: IPAddressInformation.IsTransient
  fullName: System.Net.NetworkInformation.IPAddressInformation.IsTransient
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.NetworkInformation.DuplicateAddressDetectionState
  commentId: T:System.Net.NetworkInformation.DuplicateAddressDetectionState
  parent: System.Net.NetworkInformation
  isExternal: false
  name: DuplicateAddressDetectionState
  nameWithType: DuplicateAddressDetectionState
  fullName: System.Net.NetworkInformation.DuplicateAddressDetectionState
- uid: System.Net.NetworkInformation.PrefixOrigin
  commentId: T:System.Net.NetworkInformation.PrefixOrigin
  parent: System.Net.NetworkInformation
  isExternal: false
  name: PrefixOrigin
  nameWithType: PrefixOrigin
  fullName: System.Net.NetworkInformation.PrefixOrigin
- uid: System.Net.NetworkInformation.SuffixOrigin
  commentId: T:System.Net.NetworkInformation.SuffixOrigin
  parent: System.Net.NetworkInformation
  isExternal: false
  name: SuffixOrigin
  nameWithType: SuffixOrigin
  fullName: System.Net.NetworkInformation.SuffixOrigin
- uid: System.PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
