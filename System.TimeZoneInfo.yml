### YamlMime:ManagedReference
items:
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  id: TimeZoneInfo
  parent: System
  children:
  - System.TimeZoneInfo.BaseUtcOffset
  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  - System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  - System.TimeZoneInfo.DaylightName
  - System.TimeZoneInfo.DisplayName
  - System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  - System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  - System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  - System.TimeZoneInfo.GetHashCode
  - System.TimeZoneInfo.GetSystemTimeZones
  - System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  - System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  - System.TimeZoneInfo.Id
  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  - System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  - System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  - System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  - System.TimeZoneInfo.Local
  - System.TimeZoneInfo.StandardName
  - System.TimeZoneInfo.SupportsDaylightSavingTime
  - System.TimeZoneInfo.ToString
  - System.TimeZoneInfo.Utc
  langs:
  - csharp
  - vb
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TimeZoneInfo
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 55
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents any time zone in the world.</p>\n"
  syntax:
    content: >-
      [HostProtection(MayLeakOnAbort = true)]

      [TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")]

      public sealed class TimeZoneInfo : IEquatable<TimeZoneInfo>
    content.vb: >-
      <HostProtection(MayLeakOnAbort:=True)>

      <TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")>

      Public NotInheritable Class TimeZoneInfo
          Implements IEquatable(Of TimeZoneInfo)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.TimeZoneInfo}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.TimeZoneInfo.BaseUtcOffset
  commentId: P:System.TimeZoneInfo.BaseUtcOffset
  id: BaseUtcOffset
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: BaseUtcOffset
  nameWithType: TimeZoneInfo.BaseUtcOffset
  fullName: System.TimeZoneInfo.BaseUtcOffset
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BaseUtcOffset
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 312
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</p>\n"
  syntax:
    content: public TimeSpan BaseUtcOffset { get; }
    content.vb: Public ReadOnly Property BaseUtcOffset As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>An object that indicates the time difference between the current time zone's standard time and Coordinated Universal Time (UTC).</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
    commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.DaylightName
  commentId: P:System.TimeZoneInfo.DaylightName
  id: DaylightName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: DaylightName
  nameWithType: TimeZoneInfo.DaylightName
  fullName: System.TimeZoneInfo.DaylightName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DaylightName
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 306
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the display name for the current time zone's daylight saving time.</p>\n"
  syntax:
    content: public string DaylightName { get; }
    content.vb: Public ReadOnly Property DaylightName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The display name for the time zone's daylight saving time.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.DisplayName
  commentId: P:System.TimeZoneInfo.DisplayName
  id: DisplayName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: DisplayName
  nameWithType: TimeZoneInfo.DisplayName
  fullName: System.TimeZoneInfo.DisplayName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DisplayName
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 294
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the general display name that represents the time zone.</p>\n"
  syntax:
    content: public string DisplayName { get; }
    content.vb: Public ReadOnly Property DisplayName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The time zone's general display name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.Id
  commentId: P:System.TimeZoneInfo.Id
  id: Id
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: TimeZoneInfo.Id
  fullName: System.TimeZoneInfo.Id
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Id
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 288
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the time zone identifier.</p>\n"
  syntax:
    content: public string Id { get; }
    content.vb: Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The time zone identifier.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.Local
  commentId: P:System.TimeZoneInfo.Local
  id: Local
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Local
  nameWithType: TimeZoneInfo.Local
  fullName: System.TimeZoneInfo.Local
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Local
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 1077
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the local time zone.</p>\n"
  syntax:
    content: public static TimeZoneInfo Local { get; }
    content.vb: Public Shared ReadOnly Property Local As TimeZoneInfo
    parameters: []
    return:
      type: System.TimeZoneInfo
      description: "\n<p>An object that represents the local time zone.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.TimeZoneInfo.StandardName
  commentId: P:System.TimeZoneInfo.StandardName
  id: StandardName
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: StandardName
  nameWithType: TimeZoneInfo.StandardName
  fullName: System.TimeZoneInfo.StandardName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StandardName
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 300
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the display name for the time zone's standard time.</p>\n"
  syntax:
    content: public string StandardName { get; }
    content.vb: Public ReadOnly Property StandardName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The display name of the time zone's standard time.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.SupportsDaylightSavingTime
  commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  id: SupportsDaylightSavingTime
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: SupportsDaylightSavingTime
  nameWithType: TimeZoneInfo.SupportsDaylightSavingTime
  fullName: System.TimeZoneInfo.SupportsDaylightSavingTime
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SupportsDaylightSavingTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 318
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a value indicating whether the time zone has any daylight saving time rules.</p>\n"
  syntax:
    content: public bool SupportsDaylightSavingTime { get; }
    content.vb: Public ReadOnly Property SupportsDaylightSavingTime As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the time zone supports daylight saving time; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.TimeZoneInfo.Utc
  commentId: P:System.TimeZoneInfo.Utc
  id: Utc
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Utc
  nameWithType: TimeZoneInfo.Utc
  fullName: System.TimeZoneInfo.Utc
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Utc
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 1120
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the Coordinated Universal Time (UTC) zone.</p>\n"
  syntax:
    content: public static TimeZoneInfo Utc { get; }
    content.vb: Public Shared ReadOnly Property Utc As TimeZoneInfo
    parameters: []
    return:
      type: System.TimeZoneInfo
      description: "\n<p>An object that represents the Coordinated Universal Time (UTC) zone.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)
  id: ConvertTime(System.DateTime,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ConvertTime(DateTime, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(System.DateTime, System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConvertTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 765
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts a time to the time in a particular time zone.</p>\n"
  syntax:
    content: public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo destinationTimeZone)
    content.vb: Public Shared Function ConvertTime(dateTime As Date, destinationTimeZone As TimeZoneInfo) As Date
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>The date and time to convert.   </p>\n"
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: "\n<p>The time zone to convert <em>dateTime</em> to.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time in the destination time zone.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The value of the <em>dateTime</em> parameter represents an invalid time.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  id: ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTime, TimeZoneInfo, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(System.DateTime, System.TimeZoneInfo, System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConvertTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 784
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts a time from one time zone to another.</p>\n"
  syntax:
    content: public static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone)
    content.vb: Public Shared Function ConvertTime(dateTime As Date, sourceTimeZone As TimeZoneInfo, destinationTimeZone As TimeZoneInfo) As Date
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>The date and time to convert.</p>\n"
    - id: sourceTimeZone
      type: System.TimeZoneInfo
      description: "\n<p>The time zone of <em>dateTime</em>.</p>\n"
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: "\n<p>The time zone to convert <em>dateTime</em> to.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The date and time in the destination time zone that corresponds to the <em>dateTime</em> parameter in the source time zone.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>, but the <em>sourceTimeZone</em> parameter does not equal <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref>. For more information, see the Remarks section. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> parameter is <xref href=\"System.DateTimeKind.Utc\" data-throw-if-not-resolved=\"false\"></xref>, but the <em>sourceTimeZone</em> parameter does not equal <xref href=\"System.TimeZoneInfo.Utc\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The <em>dateTime</em> parameter is an invalid time (that is, it represents a time that does not exist because of a time zone's adjustment rules).</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>sourceTimeZone</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: erload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId
    commentId: Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  id: ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ConvertTime(DateTimeOffset, TimeZoneInfo)
  nameWithType: TimeZoneInfo.ConvertTime(DateTimeOffset, TimeZoneInfo)
  fullName: System.TimeZoneInfo.ConvertTime(System.DateTimeOffset, System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConvertTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 741
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts a time to the time in a particular time zone.</p>\n"
  syntax:
    content: public static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone)
    content.vb: Public Shared Function ConvertTime(dateTimeOffset As DateTimeOffset, destinationTimeZone As TimeZoneInfo) As DateTimeOffset
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: "\n<p>The date and time to convert.   </p>\n"
    - id: destinationTimeZone
      type: System.TimeZoneInfo
      description: "\n<p>The time zone to convert <em>dateTime</em> to.</p>\n"
    return:
      type: System.DateTimeOffset
      description: "\n<p>The date and time in the destination time zone.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value of the <em>destinationTimeZone</em> parameter is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  commentId: M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  id: Equals(System.TimeZoneInfo)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: Equals(TimeZoneInfo)
  nameWithType: TimeZoneInfo.Equals(TimeZoneInfo)
  fullName: System.TimeZoneInfo.Equals(System.TimeZoneInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 909
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object and another <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object are equal.</p>\n"
  syntax:
    content: public bool Equals(TimeZoneInfo other)
    content.vb: Public Function Equals(other As TimeZoneInfo) As Boolean
    parameters:
    - id: other
      type: System.TimeZoneInfo
      description: "\n<p>A second object to compare with the current object.  </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects are equal; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  commentId: M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  id: FindSystemTimeZoneById(System.String)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: FindSystemTimeZoneById(String)
  nameWithType: TimeZoneInfo.FindSystemTimeZoneById(String)
  fullName: System.TimeZoneInfo.FindSystemTimeZoneById(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindSystemTimeZoneById
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 2579
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves a <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object from the registry based on its identifier.</p>\n"
  syntax:
    content: public static TimeZoneInfo FindSystemTimeZoneById(string id)
    content.vb: Public Shared Function FindSystemTimeZoneById(id As String) As TimeZoneInfo
    parameters:
    - id: id
      type: System.String
      description: "\n<p>The time zone identifier, which corresponds to the <xref href=\"System.TimeZoneInfo.Id\" data-throw-if-not-resolved=\"false\"></xref> property.      </p>\n"
    return:
      type: System.TimeZoneInfo
      description: "\n<p>An object whose identifier is the value of the <em>id</em> parameter.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The system does not have enough memory to hold information about the time zone.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>id</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.TimeZoneNotFoundException
    commentId: T:System.TimeZoneNotFoundException
    description: "\n<p>The time zone identifier specified by <em>id</em> was not found. This means that a registry key whose name matches <em>id</em> does not exist, or that the key exists but does not contain any time zone data.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The process does not have the permissions required to read from the registry key that contains the time zone information.</p>\n"
  - type: System.InvalidTimeZoneException
    commentId: T:System.InvalidTimeZoneException
    description: "\n<p>The time zone identifier was found, but the registry data is corrupted.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.Id
    commentId: P:System.TimeZoneInfo.Id
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  id: GetAmbiguousTimeOffsets(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetAmbiguousTimeOffsets(DateTime)
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTime)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAmbiguousTimeOffsets
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 385
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</p>\n"
  syntax:
    content: public TimeSpan[] GetAmbiguousTimeOffsets(DateTime dateTime)
    content.vb: Public Function GetAmbiguousTimeOffsets(dateTime As Date) As TimeSpan()
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>A date and time.</p>\n"
    return:
      type: System.TimeSpan[]
      description: "\n<p>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dateTime</em> is not an ambiguous time.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  id: GetAmbiguousTimeOffsets(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetAmbiguousTimeOffsets(DateTimeOffset)
  nameWithType: TimeZoneInfo.GetAmbiguousTimeOffsets(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetAmbiguousTimeOffsets
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 348
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns information about the possible dates and times that an ambiguous date and time can be mapped to.</p>\n"
  syntax:
    content: public TimeSpan[] GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset)
    content.vb: Public Function GetAmbiguousTimeOffsets(dateTimeOffset As DateTimeOffset) As TimeSpan()
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: "\n<p>A date and time.</p>\n"
    return:
      type: System.TimeSpan[]
      description: "\n<p>An array of objects that represents possible Coordinated Universal Time (UTC) offsets that a particular date and time can be mapped to.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>dateTimeOffset</em> is not an ambiguous time.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.GetHashCode
  commentId: M:System.TimeZoneInfo.GetHashCode
  id: GetHashCode
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TimeZoneInfo.GetHashCode()
  fullName: System.TimeZoneInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 940
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Serves as a hash function for hashing algorithms and data structures such as hash tables.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that serves as the hash code for this <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.TimeZoneInfo.GetSystemTimeZones
  commentId: M:System.TimeZoneInfo.GetSystemTimeZones
  id: GetSystemTimeZones
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetSystemTimeZones()
  nameWithType: TimeZoneInfo.GetSystemTimeZones()
  fullName: System.TimeZoneInfo.GetSystemTimeZones()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSystemTimeZones
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 957
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a sorted collection of all the time zones about which information is available on the local system.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static ReadOnlyCollection<TimeZoneInfo> GetSystemTimeZones()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function GetSystemTimeZones As ReadOnlyCollection(Of TimeZoneInfo)
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
      description: "\n<p>A read-only collection of <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to store all time zone information.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have permission to read from the registry keys that contain time zone information.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZoneInfo.GetUtcOffset(DateTime)
  fullName: System.TimeZoneInfo.GetUtcOffset(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUtcOffset
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 476
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</p>\n"
  syntax:
    content: public TimeSpan GetUtcOffset(DateTime dateTime)
    content.vb: Public Function GetUtcOffset(dateTime As Date) As TimeSpan
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>The date and time to determine the offset for.   </p>\n"
    return:
      type: System.TimeSpan
      description: "\n<p>An object that indicates the time difference between the two time zones.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.BaseUtcOffset
    commentId: P:System.TimeZoneInfo.BaseUtcOffset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  id: GetUtcOffset(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: GetUtcOffset(DateTimeOffset)
  nameWithType: TimeZoneInfo.GetUtcOffset(DateTimeOffset)
  fullName: System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUtcOffset
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 471
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calculates the offset or difference between the time in this time zone and Coordinated Universal Time (UTC) for a particular date and time.</p>\n"
  syntax:
    content: public TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset)
    content.vb: Public Function GetUtcOffset(dateTimeOffset As DateTimeOffset) As TimeSpan
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: "\n<p>The date and time to determine the offset for.</p>\n"
    return:
      type: System.TimeSpan
      description: "\n<p>An object that indicates the time difference between Coordinated Universal Time (UTC) and the current time zone.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  id: IsAmbiguousTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsAmbiguousTime(DateTime)
  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTime)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAmbiguousTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 547
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</p>\n"
  syntax:
    content: public bool IsAmbiguousTime(DateTime dateTime)
    content.vb: Public Function IsAmbiguousTime(dateTime As Date) As Boolean
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>A date and time value.   </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>dateTime</em> parameter is ambiguous; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> value is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> and <em>dateTime</em> is an invalid time.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  id: IsAmbiguousTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsAmbiguousTime(DateTimeOffset)
  nameWithType: TimeZoneInfo.IsAmbiguousTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAmbiguousTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 537
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether a particular date and time in a particular time zone is ambiguous and can be mapped to two or more Coordinated Universal Time (UTC) times.</p>\n"
  syntax:
    content: public bool IsAmbiguousTime(DateTimeOffset dateTimeOffset)
    content.vb: Public Function IsAmbiguousTime(dateTimeOffset As DateTimeOffset) As Boolean
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: "\n<p>A date and time.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>dateTimeOffset</em> parameter is ambiguous in the current time zone; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDaylightSavingTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 592
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool IsDaylightSavingTime(DateTime dateTime)
    content.vb: Public Function IsDaylightSavingTime(dateTime As Date) As Boolean
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>A date and time value.   </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>dateTime</em> parameter is a daylight saving time; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.DateTime.Kind\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>dateTime</em> value is <xref href=\"System.DateTimeKind.Local\" data-throw-if-not-resolved=\"false\"></xref> and <em>dateTime</em> is an invalid time.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.SupportsDaylightSavingTime
    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  commentId: M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  id: IsDaylightSavingTime(System.DateTimeOffset)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsDaylightSavingTime(DateTimeOffset)
  nameWithType: TimeZoneInfo.IsDaylightSavingTime(DateTimeOffset)
  fullName: System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsDaylightSavingTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 585
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a specified date and time falls in the range of daylight saving time for the time zone of the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset)
    content.vb: Public Function IsDaylightSavingTime(dateTimeOffset As DateTimeOffset) As Boolean
    parameters:
    - id: dateTimeOffset
      type: System.DateTimeOffset
      description: "\n<p>A date and time value.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>dateTimeOffset</em> parameter is a daylight saving time; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.SupportsDaylightSavingTime
    commentId: P:System.TimeZoneInfo.SupportsDaylightSavingTime
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  commentId: M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  id: IsInvalidTime(System.DateTime)
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: IsInvalidTime(DateTime)
  nameWithType: TimeZoneInfo.IsInvalidTime(DateTime)
  fullName: System.TimeZoneInfo.IsInvalidTime(System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsInvalidTime
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 663
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether a particular date and time is invalid.</p>\n"
  syntax:
    content: public bool IsInvalidTime(DateTime dateTime)
    content.vb: Public Function IsInvalidTime(dateTime As Date) As Boolean
    parameters:
    - id: dateTime
      type: System.DateTime
      description: "\n<p>A date and time value.   </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>dateTime</em> is invalid; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
    commentId: M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.TimeZoneInfo.ToString
  commentId: M:System.TimeZoneInfo.ToString
  id: ToString
  parent: System.TimeZoneInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TimeZoneInfo.ToString()
  fullName: System.TimeZoneInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/TimeZoneInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/TimeZoneInfo.cs
    startLine: 1110
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object's display name.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The value of the <xref href=\"System.TimeZoneInfo.DisplayName\" data-throw-if-not-resolved=\"false\"></xref> property of the current <xref href=\"System.TimeZoneInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{System.TimeZoneInfo}
  commentId: T:System.IEquatable{System.TimeZoneInfo}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TimeZoneInfo>
  nameWithType: IEquatable<TimeZoneInfo>
  fullName: System.IEquatable<System.TimeZoneInfo>
  nameWithType.vb: IEquatable(Of TimeZoneInfo)
  fullname.vb: System.IEquatable(Of System.TimeZoneInfo)
  name.vb: IEquatable(Of TimeZoneInfo)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: false
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeZoneInfo
  commentId: T:System.TimeZoneInfo
  parent: System
  isExternal: false
  name: TimeZoneInfo
  nameWithType: TimeZoneInfo
  fullName: System.TimeZoneInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)
  commentId: M:System.IEquatable{System.TimeZoneInfo}.Equals(System.TimeZoneInfo)
  parent: System.IEquatable{System.TimeZoneInfo}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TimeZoneInfo)
  nameWithType: IEquatable<TimeZoneInfo>.Equals(TimeZoneInfo)
  fullName: System.IEquatable<System.TimeZoneInfo>.Equals(System.TimeZoneInfo)
  nameWithType.vb: IEquatable(Of TimeZoneInfo).Equals(TimeZoneInfo)
  fullname.vb: System.IEquatable(Of System.TimeZoneInfo).Equals(System.TimeZoneInfo)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<TimeZoneInfo>.Equals
    fullName: System.IEquatable<System.TimeZoneInfo>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of TimeZoneInfo).Equals
    fullName: System.IEquatable(Of System.TimeZoneInfo).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: false
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.TimeSpan[]
  name: TimeSpan[]
  nameWithType: TimeSpan[]
  fullName: System.TimeSpan[]
  nameWithType.vb: TimeSpan()
  fullname.vb: System.TimeSpan()
  name.vb: TimeSpan()
  spec.csharp:
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection{System.TimeZoneInfo}
  parent: System.Collections.ObjectModel
  definition: System.Collections.ObjectModel.ReadOnlyCollection`1
  name: ReadOnlyCollection<TimeZoneInfo>
  nameWithType: ReadOnlyCollection<TimeZoneInfo>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.TimeZoneInfo>
  nameWithType.vb: ReadOnlyCollection(Of TimeZoneInfo)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of System.TimeZoneInfo)
  name.vb: ReadOnlyCollection(Of TimeZoneInfo)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.TimeZoneInfo
    name: TimeZoneInfo
    nameWithType: TimeZoneInfo
    fullName: System.TimeZoneInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel.ReadOnlyCollection`1
  commentId: T:System.Collections.ObjectModel.ReadOnlyCollection`1
  isExternal: false
  name: ReadOnlyCollection<T>
  nameWithType: ReadOnlyCollection<T>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<T>
  nameWithType.vb: ReadOnlyCollection(Of T)
  fullname.vb: System.Collections.ObjectModel.ReadOnlyCollection(Of T)
  name.vb: ReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: System.Collections.ObjectModel.ReadOnlyCollection
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ObjectModel
  commentId: N:System.Collections.ObjectModel
  isExternal: false
  name: System.Collections.ObjectModel
  nameWithType: System.Collections.ObjectModel
  fullName: System.Collections.ObjectModel
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.TimeZoneNotFoundException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.InvalidTimeZoneException
  commentId: T:System.InvalidTimeZoneException
  isExternal: false
  name: InvalidTimeZoneException
  nameWithType: InvalidTimeZoneException
  fullName: System.InvalidTimeZoneException
