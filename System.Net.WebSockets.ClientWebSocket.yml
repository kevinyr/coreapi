### YamlMime:ManagedReference
items:
- uid: System.Net.WebSockets.ClientWebSocket
  commentId: T:System.Net.WebSockets.ClientWebSocket
  id: ClientWebSocket
  parent: System.Net.WebSockets
  children:
  - System.Net.WebSockets.ClientWebSocket.#ctor
  - System.Net.WebSockets.ClientWebSocket.Abort
  - System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.CloseStatus
  - System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  - System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.Dispose
  - System.Net.WebSockets.ClientWebSocket.Options
  - System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Net.WebSockets.ClientWebSocket.State
  - System.Net.WebSockets.ClientWebSocket.SubProtocol
  langs:
  - csharp
  - vb
  name: ClientWebSocket
  nameWithType: ClientWebSocket
  fullName: System.Net.WebSockets.ClientWebSocket
  type: Class
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientWebSocket
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 10
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Provides a client for connecting to WebSocket services.</p>\n"
  syntax:
    content: 'public sealed class ClientWebSocket : WebSocket'
    content.vb: >-
      Public NotInheritable Class ClientWebSocket
          Inherits WebSocket
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Net.WebSockets.ClientWebSocket.#ctor
  commentId: M:System.Net.WebSockets.ClientWebSocket.#ctor
  id: '#ctor'
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: ClientWebSocket()
  nameWithType: ClientWebSocket.ClientWebSocket()
  fullName: System.Net.WebSockets.ClientWebSocket.ClientWebSocket()
  type: Constructor
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 12
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Creates an instance of the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public ClientWebSocket()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatus
  commentId: P:System.Net.WebSockets.ClientWebSocket.CloseStatus
  id: CloseStatus
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: CloseStatus
  nameWithType: ClientWebSocket.CloseStatus
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatus
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseStatus
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 13
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Gets the reason why the close handshake was initiated on <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public override WebSocketCloseStatus? CloseStatus { get; }
    content.vb: Public Overrides ReadOnly Property CloseStatus As WebSocketCloseStatus?
    parameters: []
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "\n<p>Returns <xref href=\"System.Net.WebSockets.WebSocketCloseStatus\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The reason why the close handshake was initiated.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  commentId: P:System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: CloseStatusDescription
  nameWithType: ClientWebSocket.CloseStatusDescription
  fullName: System.Net.WebSockets.ClientWebSocket.CloseStatusDescription
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseStatusDescription
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 14
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Gets a description of the reason why the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance was closed.</p>\n"
  syntax:
    content: public override string CloseStatusDescription { get; }
    content.vb: Public Overrides ReadOnly Property CloseStatusDescription As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The description of the reason why the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance was closed.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.WebSockets.ClientWebSocket.Options
  commentId: P:System.Net.WebSockets.ClientWebSocket.Options
  id: Options
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: Options
  nameWithType: ClientWebSocket.Options
  fullName: System.Net.WebSockets.ClientWebSocket.Options
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Options
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 15
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Gets the WebSocket options for the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public ClientWebSocketOptions Options { get; }
    content.vb: Public ReadOnly Property Options As ClientWebSocketOptions
    parameters: []
    return:
      type: System.Net.WebSockets.ClientWebSocketOptions
      description: "\n<p>Returns <xref href=\"System.Net.WebSockets.ClientWebSocketOptions\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The WebSocket options for the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.WebSockets.ClientWebSocket.State
  commentId: P:System.Net.WebSockets.ClientWebSocket.State
  id: State
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: State
  nameWithType: ClientWebSocket.State
  fullName: System.Net.WebSockets.ClientWebSocket.State
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: State
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 16
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Get the WebSocket state of the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public override WebSocketState State { get; }
    content.vb: Public Overrides ReadOnly Property State As WebSocketState
    parameters: []
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "\n<p>Returns <xref href=\"System.Net.WebSockets.WebSocketState\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The WebSocket state of the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.WebSockets.ClientWebSocket.SubProtocol
  commentId: P:System.Net.WebSockets.ClientWebSocket.SubProtocol
  id: SubProtocol
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: SubProtocol
  nameWithType: ClientWebSocket.SubProtocol
  fullName: System.Net.WebSockets.ClientWebSocket.SubProtocol
  type: Property
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SubProtocol
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 17
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Gets the supported WebSocket sub-protocol for the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public override string SubProtocol { get; }
    content.vb: Public Overrides ReadOnly Property SubProtocol As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The supported WebSocket sub-protocol.</p>\n"
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Net.WebSockets.ClientWebSocket.Abort
  commentId: M:System.Net.WebSockets.ClientWebSocket.Abort
  id: Abort
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: Abort()
  nameWithType: ClientWebSocket.Abort()
  fullName: System.Net.WebSockets.ClientWebSocket.Abort()
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Abort
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 18
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Aborts the connection and cancels any pending IO operations.</p>\n"
  syntax:
    content: public override void Abort()
    content.vb: Public Overrides Sub Abort
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: CloseAsync(WebSocketCloseStatus, String, CancellationToken)
  nameWithType: ClientWebSocket.CloseAsync(WebSocketCloseStatus, String, CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseAsync
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 19
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Close the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance as an asynchronous operation.</p>\n"
  syntax:
    content: public override Task CloseAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)
    content.vb: Public Overrides Function CloseAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "\n<p>The WebSocket close status.</p>\n"
    - id: statusDescription
      type: System.String
      description: "\n<p>A description of the close status.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)
  nameWithType: ClientWebSocket.CloseOutputAsync(WebSocketCloseStatus, String, CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseOutputAsync
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 20
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Close the output for the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance as an asynchronous operation.</p>\n"
  syntax:
    content: public override Task CloseOutputAsync(WebSocketCloseStatus closeStatus, string statusDescription, CancellationToken cancellationToken)
    content.vb: Public Overrides Function CloseOutputAsync(closeStatus As WebSocketCloseStatus, statusDescription As String, cancellationToken As CancellationToken) As Task
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "\n<p>The WebSocket close status.</p>\n"
    - id: statusDescription
      type: System.String
      description: "\n<p>A description of the close status.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri,System.Threading.CancellationToken)
  id: ConnectAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: ConnectAsync(Uri, CancellationToken)
  nameWithType: ClientWebSocket.ConnectAsync(Uri, CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ConnectAsync(System.Uri, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConnectAsync
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 21
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Connect to a WebSocket server as an asynchronous operation.</p>\n"
  syntax:
    content: public Task ConnectAsync(Uri uri, CancellationToken cancellationToken)
    content.vb: Public Function ConnectAsync(uri As Uri, cancellationToken As CancellationToken) As Task
    parameters:
    - id: uri
      type: System.Uri
      description: "\n<p>The URI of the WebSocket server to connect to.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token used to propagate notification that the  operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.WebSockets.ClientWebSocket.Dispose
  commentId: M:System.Net.WebSockets.ClientWebSocket.Dispose
  id: Dispose
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ClientWebSocket.Dispose()
  fullName: System.Net.WebSockets.ClientWebSocket.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 22
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public override void Dispose()
    content.vb: Public Overrides Sub Dispose
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: ReceiveAsync(ArraySegment<Byte>, CancellationToken)
  nameWithType: ClientWebSocket.ReceiveAsync(ArraySegment<Byte>, CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment<System.Byte>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveAsync
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 23
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Receive data on <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> as an asynchronous operation.</p>\n"
  syntax:
    content: public override Task<WebSocketReceiveResult> ReceiveAsync(ArraySegment<byte> buffer, CancellationToken cancellationToken)
    content.vb: Public Overrides Function ReceiveAsync(buffer As ArraySegment(Of Byte), cancellationToken As CancellationToken) As Task(Of WebSocketReceiveResult)
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "\n<p>The buffer to receive the response.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  nameWithType.vb: ClientWebSocket.ReceiveAsync(ArraySegment(Of Byte), CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.WebSockets.ClientWebSocket.ReceiveAsync(System.ArraySegment(Of System.Byte), System.Threading.CancellationToken)
  name.vb: ReceiveAsync(ArraySegment(Of Byte), CancellationToken)
- uid: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  commentId: M:System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Net.WebSockets.ClientWebSocket
  langs:
  - csharp
  - vb
  name: SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)
  nameWithType: ClientWebSocket.SendAsync(ArraySegment<Byte>, WebSocketMessageType, Boolean, CancellationToken)
  fullName: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment<System.Byte>, System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.WebSockets.Client/ref/System.Net.WebSockets.Client.cs
    startLine: 24
  assemblies:
  - System.Net.WebSockets.Client
  namespace: System.Net.WebSockets
  summary: "\n<p>Send data on <xref href=\"System.Net.WebSockets.ClientWebSocket\" data-throw-if-not-resolved=\"false\"></xref> as an asynchronous operation.</p>\n"
  syntax:
    content: public override Task SendAsync(ArraySegment<byte> buffer, WebSocketMessageType messageType, bool endOfMessage, CancellationToken cancellationToken)
    content.vb: Public Overrides Function SendAsync(buffer As ArraySegment(Of Byte), messageType As WebSocketMessageType, endOfMessage As Boolean, cancellationToken As CancellationToken) As Task
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "\n<p>The buffer containing the message to be sent.</p>\n"
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "\n<p>Specifies whether the buffer is clear text or in a binary format.</p>\n"
    - id: endOfMessage
      type: System.Boolean
      description: "\n<p>Specifies whether this is the final asynchronous send. Set to <strong>true</strong> if this is the final send; <strong>false</strong> otherwise.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token used to propagate notification that this  operation should be canceled.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  nameWithType.vb: ClientWebSocket.SendAsync(ArraySegment(Of Byte), WebSocketMessageType, Boolean, CancellationToken)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Net.WebSockets.ClientWebSocket.SendAsync(System.ArraySegment(Of System.Byte), System.Net.WebSockets.WebSocketMessageType, System.Boolean, System.Threading.CancellationToken)
  name.vb: SendAsync(ArraySegment(Of Byte), WebSocketMessageType, Boolean, CancellationToken)
references:
- uid: System.Net.WebSockets
  commentId: N:System.Net.WebSockets
  isExternal: false
  name: System.Net.WebSockets
  nameWithType: System.Net.WebSockets
  fullName: System.Net.WebSockets
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  commentId: T:System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  definition: System.Nullable`1
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  nameWithType.vb: Nullable(Of WebSocketCloseStatus)
  fullname.vb: System.Nullable(Of System.Net.WebSockets.WebSocketCloseStatus)
  name.vb: Nullable(Of WebSocketCloseStatus)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: System.Net.WebSockets.WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: System.Net.WebSockets.WebSocketCloseStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.WebSockets.ClientWebSocketOptions
  commentId: T:System.Net.WebSockets.ClientWebSocketOptions
  parent: System.Net.WebSockets
  isExternal: false
  name: ClientWebSocketOptions
  nameWithType: ClientWebSocketOptions
  fullName: System.Net.WebSockets.ClientWebSocketOptions
- uid: System.Net.WebSockets.WebSocketState
  commentId: T:System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Net.WebSockets.WebSocketCloseStatus
  commentId: T:System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: false
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ArraySegment{System.Byte}
  commentId: T:System.ArraySegment{System.Byte}
  parent: System
  definition: System.ArraySegment`1
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  nameWithType.vb: ArraySegment(Of Byte)
  fullname.vb: System.ArraySegment(Of System.Byte)
  name.vb: ArraySegment(Of Byte)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  commentId: T:System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  nameWithType.vb: Task(Of WebSocketReceiveResult)
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.WebSockets.WebSocketReceiveResult)
  name.vb: Task(Of WebSocketReceiveResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: System.Net.WebSockets.WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: System.Net.WebSockets.WebSocketReceiveResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArraySegment`1
  commentId: T:System.ArraySegment`1
  parent: System
  isExternal: false
  name: ArraySegment<T>
  nameWithType: ArraySegment<T>
  fullName: System.ArraySegment<T>
  nameWithType.vb: ArraySegment(Of T)
  fullname.vb: System.ArraySegment(Of T)
  name.vb: ArraySegment(Of T)
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: System.ArraySegment
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.WebSockets.WebSocketMessageType
  commentId: T:System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
