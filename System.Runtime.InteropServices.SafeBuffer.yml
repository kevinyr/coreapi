### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.SafeBuffer
  commentId: T:System.Runtime.InteropServices.SafeBuffer
  id: SafeBuffer
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  - System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  - System.Runtime.InteropServices.SafeBuffer.ByteLength
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  - System.Runtime.InteropServices.SafeBuffer.IsInvalid
  - System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  - System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  - System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  - System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  langs:
  - csharp
  - vb
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SafeBuffer
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 80
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Provides a controlled memory buffer that can be used for reading and writing. Attempts to access memory outside the controlled buffer (underruns and overruns) raise exceptions.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public abstract class SafeBuffer : SafeHandleZeroOrMinusOneIsInvalid, IDisposable
    content.vb: >-
      <SecurityCritical>

      Public MustInherit Class SafeBuffer
          Inherits SafeHandleZeroOrMinusOneIsInvalid
          Implements IDisposable
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  inheritance:
  - System.Object
  - System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - System.Runtime.InteropServices.SafeHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Runtime.InteropServices.SafeHandle.handle
  - System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  - System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - System.Runtime.InteropServices.SafeHandle.Close
  - System.Runtime.InteropServices.SafeHandle.Dispose
  - System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  - System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  - System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - System.Runtime.InteropServices.SafeHandle.IsClosed
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: SafeBuffer(Boolean)
  nameWithType: SafeBuffer.SafeBuffer(Boolean)
  fullName: System.Runtime.InteropServices.SafeBuffer.SafeBuffer(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 89
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Runtime.InteropServices.SafeBuffer\" data-throw-if-not-resolved=\"false\"></xref> class, and specifies whether the buffer handle is to be reliably released.</p>\n"
  syntax:
    content: protected SafeBuffer(bool ownsHandle)
    content.vb: Protected Sub New(ownsHandle As Boolean)
    parameters:
    - id: ownsHandle
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to reliably release the handle during the finalization phase; <strong>false</strong> to prevent reliable release (not recommended).</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Runtime.InteropServices.SafeBuffer.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeBuffer.IsInvalid
  id: IsInvalid
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: IsInvalid
  nameWithType: SafeBuffer.IsInvalid
  fullName: System.Runtime.InteropServices.SafeBuffer.IsInvalid
  type: Property
  source:
    remote:
      path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInvalid
    path: src/System.Runtime.InteropServices/ref/System.Runtime.InteropServices.cs
    startLine: 698
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: public override bool IsInvalid { get; }
    content.vb: Public Overrides ReadOnly Property IsInvalid As Boolean
    parameters: []
    return:
      type: System.Boolean
  overridden: System.Runtime.InteropServices.SafeHandle.IsInvalid
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Runtime.InteropServices.SafeBuffer.ByteLength
  commentId: P:System.Runtime.InteropServices.SafeBuffer.ByteLength
  id: ByteLength
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: ByteLength
  nameWithType: SafeBuffer.ByteLength
  fullName: System.Runtime.InteropServices.SafeBuffer.ByteLength
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ByteLength
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 355
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the size of the buffer, in bytes.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public ulong ByteLength

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
      }
    content.vb: >-
      <CLSCompliant(False)>

      Public ReadOnly Property ByteLength As ULong
    parameters: []
    return:
      type: System.UInt64
      description: "\n<p>The number of bytes in the memory buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)
  id: AcquirePointer(System.Byte*@)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: AcquirePointer(ref Byte*)
  nameWithType: SafeBuffer.AcquirePointer(ref Byte*)
  fullName: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(ref System.Byte*)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AcquirePointer
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 176
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Obtains a pointer from a <xref href=\"System.Runtime.InteropServices.SafeBuffer\" data-throw-if-not-resolved=\"false\"></xref> object for a block of memory.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public void AcquirePointer(ref byte *pointer)
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub AcquirePointer(ByRef pointer As Byte *)
    parameters:
    - id: pointer
      type: System.Byte*
      description: "\n<p>A byte pointer, passed by reference, to receive the pointer from within the <xref href=\"System.Runtime.InteropServices.SafeBuffer\" data-throw-if-not-resolved=\"false\"></xref> object. You must set this pointer to <strong>null</strong> before you call this method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: SafeBuffer.AcquirePointer(ByRef Byte*)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.AcquirePointer(ByRef System.Byte*)
  name.vb: AcquirePointer(ByRef Byte*)
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)
  id: Initialize(System.UInt32,System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Initialize(UInt32, UInt32)
  nameWithType: SafeBuffer.Initialize(UInt32, UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 118
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Specifies the allocation size of the memory buffer by using the specified number of elements and element size. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void Initialize(uint numElements, uint sizeOfEachElement)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub Initialize(numElements As UInteger, sizeOfEachElement As UInteger)
    parameters:
    - id: numElements
      type: System.UInt32
      description: "\n<p>The number of elements in the buffer.</p>\n"
    - id: sizeOfEachElement
      type: System.UInt32
      description: "\n<p>The size of each element in the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>numElements</em> is less than zero. </p>\n<p>-or-</p>\n<p>\n<em>sizeOfEachElement</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>numElements</em> multiplied by <em>sizeOfEachElement</em> is greater than the available address space.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  id: Initialize(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Initialize(UInt64)
  nameWithType: SafeBuffer.Initialize(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 99
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Defines the allocation size of the memory region in bytes. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void Initialize(ulong numBytes)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub Initialize(numBytes As ULong)
    parameters:
    - id: numBytes
      type: System.UInt64
      description: "\n<p>The number of bytes in the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>numBytes</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>numBytes</em> is greater than the available address space.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Initialize``1(System.UInt32)
  id: Initialize``1(System.UInt32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Initialize<T>(UInt32)
  nameWithType: SafeBuffer.Initialize<T>(UInt32)
  fullName: System.Runtime.InteropServices.SafeBuffer.Initialize<T>(System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Initialize
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 140
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Defines the allocation size of the memory region by specifying the number of value types. You must call this method before you use the <xref href=\"System.Runtime.InteropServices.SafeBuffer\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void Initialize<T>(uint numElements)where T : struct
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub Initialize(Of T As Structure)(numElements As UInteger)
    parameters:
    - id: numElements
      type: System.UInt32
      description: "\n<p>The number of elements of the value type to allocate memory for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The value type to allocate memory for.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>numElements</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>numElements</em> multiplied by the size of each element is greater than the available address space.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: SafeBuffer.Initialize(Of T)(UInt32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Initialize(Of T)(System.UInt32)
  name.vb: Initialize(Of T)(UInt32)
- uid: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  id: Read``1(System.UInt64)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Read<T>(UInt64)
  nameWithType: SafeBuffer.Read<T>(UInt64)
  fullName: System.Runtime.InteropServices.SafeBuffer.Read<T>(System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Read
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 213
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a value type from memory at the specified offset.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public T Read<T>(ulong byteOffset)where T : struct
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Function Read(Of T As Structure)(byteOffset As ULong) As T
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: "\n<p>The location from which to read the value type. You may have to consider alignment issues.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The value type to read.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value type that was read from memory.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
    commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: SafeBuffer.Read(Of T)(UInt64)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Read(Of T)(System.UInt64)
  name.vb: Read(Of T)(UInt64)
- uid: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: ReadArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.ReadArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.ReadArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadArray
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 241
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads the specified number of value types from memory starting at the offset, and writes them into an array starting at the index. </p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public void ReadArray<T>(ulong byteOffset, T[] array, int index, int count)where T : struct
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub ReadArray(Of T As Structure)(byteOffset As ULong, array As T(), index As Integer, count As Integer)
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: "\n<p>The location from which to start reading.</p>\n"
    - id: array
      type: '{T}[]'
      description: "\n<p>The output array to write to.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The location in the output array to begin writing to.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of value types to read from the input array and to write to the output array.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The value type to read.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of the array minus the index is less than <em>count</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: SafeBuffer.ReadArray(Of T)(UInt64, T(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.ReadArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: ReadArray(Of T)(UInt64, T(), Int32, Int32)
- uid: System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  commentId: M:System.Runtime.InteropServices.SafeBuffer.ReleasePointer
  id: ReleasePointer
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: ReleasePointer()
  nameWithType: SafeBuffer.ReleasePointer()
  fullName: System.Runtime.InteropServices.SafeBuffer.ReleasePointer()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleasePointer
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 196
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Releases a pointer that was obtained by the <xref href=\"System.Runtime.InteropServices.SafeBuffer.AcquirePointer(System.Byte*@)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public void ReleasePointer()
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Sub ReleasePointer
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.Write``1(System.UInt64,``0)
  id: Write``1(System.UInt64,``0)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: Write<T>(UInt64, T)
  nameWithType: SafeBuffer.Write<T>(UInt64, T)
  fullName: System.Runtime.InteropServices.SafeBuffer.Write<T>(System.UInt64, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 288
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a value type to memory at the given location.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public void Write<T>(ulong byteOffset, T value)where T : struct
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub Write(Of T As Structure)(byteOffset As ULong, value As T)
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: "\n<p>The location at which to start writing. You may have to consider alignment issues.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The value to write.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The value type to write.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
    commentId: M:System.Runtime.InteropServices.SafeBuffer.Read``1(System.UInt64)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: SafeBuffer.Write(Of T)(UInt64, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.Write(Of T)(System.UInt64, T)
  name.vb: Write(Of T)(UInt64, T)
- uid: System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.SafeBuffer.WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  id: WriteArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.SafeBuffer
  langs:
  - csharp
  - vb
  name: WriteArray<T>(UInt64, T[], Int32, Int32)
  nameWithType: SafeBuffer.WriteArray<T>(UInt64, T[], Int32, Int32)
  fullName: System.Runtime.InteropServices.SafeBuffer.WriteArray<T>(System.UInt64, T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteArray
    path: src/mscorlib/src/System/Runtime/InteropServices/SafeBuffer.cs
    startLine: 313
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes the specified number of value types to a memory location by reading bytes starting from the specified location in the input array.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public void WriteArray<T>(ulong byteOffset, T[] array, int index, int count)where T : struct
    content.vb: >-
      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub WriteArray(Of T As Structure)(byteOffset As ULong, array As T(), index As Integer, count As Integer)
    parameters:
    - id: byteOffset
      type: System.UInt64
      description: "\n<p>The location in memory to write to.</p>\n"
    - id: array
      type: '{T}[]'
      description: "\n<p>The input array.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset in the array to start reading from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of value types to write.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The value type to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> or <em>count</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of the input array minus <em>index</em> is less than <em>count</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Runtime.InteropServices.SafeBuffer.Initialize(System.UInt32,System.UInt32)\" data-throw-if-not-resolved=\"false\"></xref> method has not been called.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
    commentId: M:System.Runtime.InteropServices.SafeBuffer.ReadArray``1(System.UInt64,``0[],System.Int32,System.Int32)
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: SafeBuffer.WriteArray(Of T)(UInt64, T(), Int32, Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.InteropServices.SafeBuffer.WriteArray(Of T)(System.UInt64, T(), System.Int32, System.Int32)
  name.vb: WriteArray(Of T)(UInt64, T(), Int32, Int32)
references:
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  parent: System.Runtime.ConstrainedExecution
  isExternal: true
  name: CriticalFinalizerObject
  nameWithType: CriticalFinalizerObject
  fullName: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
- uid: System.Runtime.InteropServices.SafeHandle
  commentId: T:System.Runtime.InteropServices.SafeHandle
  parent: System.Runtime.InteropServices
  isExternal: false
  name: SafeHandle
  nameWithType: SafeHandle
  fullName: System.Runtime.InteropServices.SafeHandle
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Runtime.InteropServices.SafeHandle.handle
  commentId: F:System.Runtime.InteropServices.SafeHandle.handle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: handle
  nameWithType: SafeHandle.handle
  fullName: System.Runtime.InteropServices.SafeHandle.handle
- uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: SetHandle(IntPtr)
  nameWithType: SafeHandle.SetHandle(IntPtr)
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)
    name: SetHandle
    nameWithType: SafeHandle.SetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousGetHandle()
  nameWithType: SafeHandle.DangerousGetHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
    name: DangerousGetHandle
    nameWithType: SafeHandle.DangerousGetHandle
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousGetHandle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Close
  commentId: M:System.Runtime.InteropServices.SafeHandle.Close
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Close()
  nameWithType: SafeHandle.Close()
  fullName: System.Runtime.InteropServices.SafeHandle.Close()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    nameWithType: SafeHandle.Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Close
    name: Close
    nameWithType: SafeHandle.Close
    fullName: System.Runtime.InteropServices.SafeHandle.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: Dispose()
  nameWithType: SafeHandle.Dispose()
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  commentId: M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: SafeHandle.Dispose(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: SafeHandle.Dispose
    fullName: System.Runtime.InteropServices.SafeHandle.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  commentId: M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: SetHandleAsInvalid()
  nameWithType: SafeHandle.SetHandleAsInvalid()
  fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
    name: SetHandleAsInvalid
    nameWithType: SafeHandle.SetHandleAsInvalid
    fullName: System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  commentId: M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafeHandle.ReleaseHandle()
  fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
    name: ReleaseHandle
    nameWithType: SafeHandle.ReleaseHandle
    fullName: System.Runtime.InteropServices.SafeHandle.ReleaseHandle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: true
  name: DangerousAddRef(Boolean)
  nameWithType: SafeHandle.DangerousAddRef(Boolean)
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean)
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)
    name: DangerousAddRef
    nameWithType: SafeHandle.DangerousAddRef
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousAddRef
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  commentId: M:System.Runtime.InteropServices.SafeHandle.DangerousRelease
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: DangerousRelease()
  nameWithType: SafeHandle.DangerousRelease()
  fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease()
  spec.csharp:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Runtime.InteropServices.SafeHandle.DangerousRelease
    name: DangerousRelease
    nameWithType: SafeHandle.DangerousRelease
    fullName: System.Runtime.InteropServices.SafeHandle.DangerousRelease
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.SafeHandle.IsClosed
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsClosed
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsClosed
  nameWithType: SafeHandle.IsClosed
  fullName: System.Runtime.InteropServices.SafeHandle.IsClosed
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Runtime.ConstrainedExecution
  commentId: N:System.Runtime.ConstrainedExecution
  isExternal: false
  name: System.Runtime.ConstrainedExecution
  nameWithType: System.Runtime.ConstrainedExecution
  fullName: System.Runtime.ConstrainedExecution
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.InteropServices.SafeHandle.IsInvalid
  commentId: P:System.Runtime.InteropServices.SafeHandle.IsInvalid
  parent: System.Runtime.InteropServices.SafeHandle
  isExternal: false
  name: IsInvalid
  nameWithType: SafeHandle.IsInvalid
  fullName: System.Runtime.InteropServices.SafeHandle.IsInvalid
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Byte*
  name: Byte*
  nameWithType: Byte*
  fullName: System.Byte*
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
