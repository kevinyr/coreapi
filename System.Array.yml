items:
- uid: System.Array
  commentId: T:System.Array
  id: Array
  parent: System
  children:
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch(System.Array,System.Object)
  - System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  - System.Array.BinarySearch``1(``0[],``0)
  - System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  - System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Array.Clear(System.Array,System.Int32,System.Int32)
  - System.Array.Clone
  - System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.Copy(System.Array,System.Array,System.Int32)
  - System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - System.Array.CopyTo(System.Array,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32)
  - System.Array.CreateInstance(System.Type,System.Int32[])
  - System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  - System.Array.Empty``1
  - System.Array.Exists``1(``0[],System.Predicate{``0})
  - System.Array.Find``1(``0[],System.Predicate{``0})
  - System.Array.FindAll``1(``0[],System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindIndex``1(``0[],System.Predicate{``0})
  - System.Array.FindLast``1(``0[],System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  - System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  - System.Array.GetEnumerator
  - System.Array.GetLength(System.Int32)
  - System.Array.GetLowerBound(System.Int32)
  - System.Array.GetUpperBound(System.Int32)
  - System.Array.GetValue(System.Int32)
  - System.Array.GetValue(System.Int32[])
  - System.Array.IndexOf(System.Array,System.Object)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32)
  - System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.IndexOf``1(``0[],``0)
  - System.Array.IndexOf``1(``0[],``0,System.Int32)
  - System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Initialize
  - System.Array.LastIndexOf(System.Array,System.Object)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  - System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  - System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  - System.Array.Length
  - System.Array.Rank
  - System.Array.Resize``1(``0[]@,System.Int32)
  - System.Array.Reverse(System.Array)
  - System.Array.Reverse(System.Array,System.Int32,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32)
  - System.Array.SetValue(System.Object,System.Int32[])
  - System.Array.Sort(System.Array)
  - System.Array.Sort(System.Array,System.Array)
  - System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Collections.IComparer)
  - System.Array.Sort(System.Array,System.Int32,System.Int32)
  - System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  - System.Array.Sort``1(``0[])
  - System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``1(``0[],System.Comparison{``0})
  - System.Array.Sort``1(``0[],System.Int32,System.Int32)
  - System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[])
  - System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  - System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  - System.Array.System#Collections#ICollection#Count
  - System.Array.System#Collections#ICollection#IsSynchronized
  - System.Array.System#Collections#ICollection#SyncRoot
  - System.Array.System#Collections#IList#Add(System.Object)
  - System.Array.System#Collections#IList#Clear
  - System.Array.System#Collections#IList#Contains(System.Object)
  - System.Array.System#Collections#IList#IndexOf(System.Object)
  - System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.Array.System#Collections#IList#IsFixedSize
  - System.Array.System#Collections#IList#IsReadOnly
  - System.Array.System#Collections#IList#Item(System.Int32)
  - System.Array.System#Collections#IList#Remove(System.Object)
  - System.Array.System#Collections#IList#RemoveAt(System.Int32)
  - System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  - System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  - System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  - System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  langs:
  - csharp
  - vb
  name: Array
  fullName: System.Array
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Array
    path: src/mscorlib/src/System/Array.cs
    startLine: 26
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Provides methods for creating, manipulating, searching, and sorting arrays, thereby serving as the base class for all arrays in the common language runtime.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public abstract class Array : ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public MustInherit Class Array
          Implements ICloneable, IList, ICollection, IEnumerable, IStructuralComparable, IStructuralEquatable
  seealso:
  - type: System.Object
    commentId: T:System.Object
  - type: System.Type
    commentId: T:System.Type
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  - System.Collections.IStructuralComparable
  - System.Collections.IStructuralEquatable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  nameWithType: Array
- uid: System.Array.Length
  commentId: P:System.Array.Length
  id: Length
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Length
  fullName: System.Array.Length
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the total number of elements in all the dimensions of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      public int Length

      {
          [SecuritySafeCritical]
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          [MethodImpl(MethodImplOptions.InternalCall)]
          get;
      }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The total number of elements in all the dimensions of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>; zero if there are no elements in the array.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The array is multidimensional and contains more than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements.</p>\n"
  seealso:
  - type: System.Array.GetLength(System.Int32)
    commentId: M:System.Array.GetLength(System.Int32)
  - type: System.Array.GetUpperBound(System.Int32)
    commentId: M:System.Array.GetUpperBound(System.Int32)
  - type: System.Array.GetLowerBound(System.Int32)
    commentId: M:System.Array.GetLowerBound(System.Int32)
  - type: System.Array.LongLength
    commentId: P:System.Array.LongLength
  - type: System.Collections.ICollection.Count
    commentId: P:System.Collections.ICollection.Count
  - type: System.Array.Rank
    commentId: P:System.Array.Rank
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Array.Length
- uid: System.Array.Rank
  commentId: P:System.Array.Rank
  id: Rank
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Rank
  fullName: System.Array.Rank
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the rank (number of dimensions) of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. For example, a one-dimensional array returns 1, a two-dimensional array returns 2, and so on. </p>\n"
  syntax:
    content: >-
      public int Rank

      {
          [SecuritySafeCritical]
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          [MethodImpl(MethodImplOptions.InternalCall)]
          get;
      }
    content.vb: Public ReadOnly Property Rank As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The rank (number of dimensions) of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.Length
    commentId: P:System.Array.Length
  - type: System.Array.GetLength(System.Int32)
    commentId: M:System.Array.GetLength(System.Int32)
  - type: System.Array.LongLength
    commentId: P:System.Array.LongLength
  - type: System.Array.GetLongLength(System.Int32)
    commentId: M:System.Array.GetLongLength(System.Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Array.Rank
- uid: System.Array.System#Collections#ICollection#Count
  commentId: P:System.Array.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.Count
  fullName: System.Array.System.Collections.ICollection.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.ICollection.Count
    path: src/mscorlib/src/System/Array.cs
    startLine: 663
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the number of elements contained in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: int ICollection.Count { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.Count As Integer Implements ICollection.Count
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements contained in the collection.</p>\n"
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.Count
  nameWithType: Array.ICollection.Count
  nameWithType.vb: Array.System.Collections.ICollection.Count
- uid: System.Array.System#Collections#ICollection#IsSynchronized
  commentId: P:System.Array.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  fullName: System.Array.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 73
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
  nameWithType: Array.ICollection.IsSynchronized
  nameWithType.vb: Array.System.Collections.ICollection.IsSynchronized
- uid: System.Array.System#Collections#ICollection#SyncRoot
  commentId: P:System.Array.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  fullName: System.Array.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
  nameWithType: Array.ICollection.SyncRoot
  nameWithType.vb: Array.System.Collections.ICollection.SyncRoot
- uid: System.Array.System#Collections#IList#IsFixedSize
  commentId: P:System.Array.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  fullName: System.Array.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsFixedSize
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 75
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
  nameWithType: Array.IList.IsFixedSize
  nameWithType.vb: Array.System.Collections.IList.IsFixedSize
- uid: System.Array.System#Collections#IList#IsReadOnly
  commentId: P:System.Array.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  fullName: System.Array.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsReadOnly
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 76
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
  nameWithType: Array.IList.IsReadOnly
  nameWithType.vb: Array.System.Collections.IList.IsReadOnly
- uid: System.Array.System#Collections#IList#Item(System.Int32)
  commentId: P:System.Array.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  fullName: System.Array.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.this[]
    path: src/mscorlib/src/System/Array.cs
    startLine: 688
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of the element to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ICollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> does not have exactly one dimension.</p>\n"
  implements:
  - System.Collections.IList.Item(System.Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.Array.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
  nameWithType: Array.IList.Item[Int32]
  nameWithType.vb: Array.System.Collections.IList.Item(Int32)
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Int32, Int32, Object)
  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 846
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each element of the array and by the specified value.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch(Array array, int index, int length, object value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The sorted one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to search.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the range to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object)
- uid: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Int32, Int32, Object, IComparer)
  fullName: System.Array.BinarySearch(System.Array, System.Int32, System.Int32, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 891
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch(Array array, int index, int length, object value, IComparer comparer)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(array As Array, index As Integer, length As Integer, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The sorted one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to search.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the range to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to search for.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, <em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.BinarySearch(Array, Int32, Int32, Object, IComparer)
- uid: System.Array.BinarySearch(System.Array,System.Object)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object)
  id: BinarySearch(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Object)
  fullName: System.Array.BinarySearch(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 822
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches an entire one-dimensional sorted array for a specific element, using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface implemented by each element of the array and by the specified object.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch(Array array, object value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The sorted one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to search for.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n<p></p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.BinarySearch(Array, Object)
- uid: System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  commentId: M:System.Array.BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Array,System.Object,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch(Array, Object, IComparer)
  fullName: System.Array.BinarySearch(System.Array, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 866
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches an entire one-dimensional sorted array for a value using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch(Array array, object value, IComparer comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(array As Array, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The sorted one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to search for.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, <em>value</em> does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface, and the search encounters an element that does not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.BinarySearch(Array, Object, IComparer)
- uid: System.Array.BinarySearch``1(``0[],``0)
  commentId: M:System.Array.BinarySearch``1(``0[],``0)
  id: BinarySearch``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T)
  fullName: System.Array.BinarySearch<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 966
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches an entire one-dimensional sorted array for a specific element, using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implemented by each element of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> and by the specified object.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch<T>(T[] array, T value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The sorted one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), T)
  name.vb: BinarySearch(Of T)(T(), T)
  nameWithType: Array.BinarySearch<T>(T[], T)
  nameWithType.vb: Array.BinarySearch(Of T)(T(), T)
- uid: System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], T, IComparer<T>)
  fullName: System.Array.BinarySearch<T>(T[], T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 975
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches an entire one-dimensional sorted array for a value using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch<T>(T[] array, T value, IComparer<T> comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(Of T)(array As T(), value As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The sorted one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search. </p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to search for.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and <em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), T, IComparer(Of T))
  nameWithType: Array.BinarySearch<T>(T[], T, IComparer<T>)
  nameWithType.vb: Array.BinarySearch(Of T)(T(), T, IComparer(Of T))
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T)
  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 984
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implemented by each element of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> and by the specified value.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch<T>(T[] array, int index, int length, T value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The sorted one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to search.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the range to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T)
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T)
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T)
  nameWithType.vb: Array.BinarySearch(Of T)(T(), Int32, Int32, T)
- uid: System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(``0[],System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  fullName: System.Array.BinarySearch<T>(T[], System.Int32, System.Int32, T, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Array.cs
    startLine: 990
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches a range of elements in a one-dimensional sorted array for a value, using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int BinarySearch<T>(T[] array, int index, int length, T value, IComparer<T> comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function BinarySearch(Of T)(array As T(), index As Integer, length As Integer, value As T, comparer As IComparer(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The sorted one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to search.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The length of the range to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to search for.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the specified <em>value</em> in the specified <em>array</em>, if <em>value</em> is found; otherwise, a negative number. If <em>value</em> is not found and <em>value</em> is less than one or more elements in <em>array</em>, the negative number returned is the bitwise complement of the index of the first element that is larger than <em>value</em>. If <em>value</em> is not found and <em>value</em> is greater than all elements in <em>array</em>, the negative number returned is the bitwise complement of (the index of the last element plus 1). If this method is called with a non-sorted <em>array</em>, the return value can be incorrect and a negative number could be returned, even if <em>value</em> is present in <em>array</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>comparer</em> is <strong>null</strong>, and <em>value</em> is of a type that is not compatible with the elements of <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and <em>T</em> does not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.Sort(System.Array)
    commentId: M:System.Array.Sort(System.Array)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.BinarySearch(Of T)(T(), System.Int32, System.Int32, T, System.Collections.Generic.IComparer(Of T))
  name.vb: BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
  nameWithType: Array.BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>)
  nameWithType.vb: Array.BinarySearch(Of T)(T(), Int32, Int32, T, IComparer(Of T))
- uid: System.Array.Clear(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Clear(System.Array,System.Int32,System.Int32)
  id: Clear(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Clear(Array, Int32, Int32)
  fullName: System.Array.Clear(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sets a range of elements in an array to the default value of each element type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static void Clear(Array array, int index, int length)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Sub Clear(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The array whose elements need to be cleared.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range of elements to clear.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements to clear.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n<p>-or-</p>\n<p>The sum of <em>index</em> and <em>length</em> is greater than the size of <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Clear(Array, Int32, Int32)
- uid: System.Array.Clone
  commentId: M:System.Array.Clone
  id: Clone
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Array.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Array.cs
    startLine: 730
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a shallow copy of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public object Clone()
    content.vb: Public Function Clone As Object
    return:
      type: System.Object
      description: "\n<p>A shallow copy of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.Copy(System.Array,System.Array,System.Int32)
    commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  - type: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
    commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.Clone()
- uid: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: ConstrainedCopy(Array, Int32, Array, Int32, Int32)
  fullName: System.Array.ConstrainedCopy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstrainedCopy
    path: src/mscorlib/src/System/Array.cs
    startLine: 305
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a range of elements from an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> starting at the specified source index and pastes them to another <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> starting at the specified destination index.  Guarantees that all changes are undone if the copy does not succeed completely.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static void ConstrainedCopy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Sub ConstrainedCopy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
      description: "\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to copy.</p>\n"
    - id: sourceIndex
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.</p>\n"
    - id: destinationArray
      type: System.Array
      description: "\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that receives the data.</p>\n"
    - id: destinationIndex
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the number of elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceArray</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>destinationArray</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\n"
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<p>The <em>sourceArray</em> type is neither the same as nor derived from the <em>destinationArray</em> type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>.</p>\n"
  seealso:
  - type: System.Array.Copy(System.Array,System.Array,System.Int32)
    commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  - type: System.Array.Clone
    commentId: M:System.Array.Clone
  - type: System.Runtime.ConstrainedExecution.ReliabilityContractAttribute
    commentId: T:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute
  - type: System.Runtime.ConstrainedExecution.Cer
    commentId: T:System.Runtime.ConstrainedExecution.Cer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.ConstrainedCopy(Array, Int32, Array, Int32, Int32)
- uid: System.Array.Copy(System.Array,System.Array,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  id: Copy(System.Array,System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Copy(Array, Array, Int32)
  fullName: System.Array.Copy(System.Array, System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Array.cs
    startLine: 262
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a range of elements from an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> starting at the first element and pastes them into another <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> starting at the first element. The length is specified as a 32-bit integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Copy(Array sourceArray, Array destinationArray, int length)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Copy(sourceArray As Array, destinationArray As Array, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
      description: "\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to copy.</p>\n"
    - id: destinationArray
      type: System.Array
      description: "\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that receives the data.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the number of elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceArray</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>destinationArray</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\n"
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<p>\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>length</em> is greater than the number of elements in <em>sourceArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is greater than the number of elements in <em>destinationArray</em>.</p>\n"
  seealso:
  - type: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
    commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - type: System.Array.Clone
    commentId: M:System.Array.Clone
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Copy(Array, Array, Int32)
- uid: System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  id: Copy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Copy(Array, Int32, Array, Int32, Int32)
  fullName: System.Array.Copy(System.Array, System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Array.cs
    startLine: 284
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies a range of elements from an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> starting at the specified source index and pastes them to another <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> starting at the specified destination index. The length and the indexes are specified as 32-bit integers.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Copy(Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Copy(sourceArray As Array, sourceIndex As Integer, destinationArray As Array, destinationIndex As Integer, length As Integer)
    parameters:
    - id: sourceArray
      type: System.Array
      description: "\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the data to copy.</p>\n"
    - id: sourceIndex
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the index in the <em>sourceArray</em> at which copying begins.</p>\n"
    - id: destinationArray
      type: System.Array
      description: "\n<p>The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that receives the data.</p>\n"
    - id: destinationIndex
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the index in the <em>destinationArray</em> at which storing begins.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the number of elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>sourceArray</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>destinationArray</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>sourceArray</em> and <em>destinationArray</em> have different ranks.</p>\n"
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<p>\n<em>sourceArray</em> and <em>destinationArray</em> are of incompatible types.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>At least one element in <em>sourceArray</em> cannot be cast to the type of <em>destinationArray</em>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>sourceIndex</em> is less than the lower bound of the first dimension of <em>sourceArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>destinationIndex</em> is less than the lower bound of the first dimension of <em>destinationArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>length</em> is greater than the number of elements from <em>sourceIndex</em> to the end of <em>sourceArray</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is greater than the number of elements from <em>destinationIndex</em> to the end of <em>destinationArray</em>.</p>\n"
  seealso:
  - type: System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
    commentId: M:System.Array.ConstrainedCopy(System.Array,System.Int32,System.Array,System.Int32,System.Int32)
  - type: System.Array.Clone
    commentId: M:System.Array.Clone
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Copy(Array, Int32, Array, Int32, Int32)
- uid: System.Array.CopyTo(System.Array,System.Int32)
  commentId: M:System.Array.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  fullName: System.Array.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Array.cs
    startLine: 1030
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Copies all the elements of the current one-dimensional array to the specified one-dimensional array starting at the specified destination array index. The index is specified as a 32-bit integer.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional array that is the destination of the elements copied from the current array.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the index in <em>array</em> at which copying begins.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or-</p>\n<p>The number of elements in the source array is greater than the available number of elements from <em>index</em> to the end of the destination <em>array</em>.</p>\n"
  - type: System.ArrayTypeMismatchException
    commentId: T:System.ArrayTypeMismatchException
    description: "\n<p>The type of the source <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>The source array is multidimensional.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>At least one element in the source <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast to the type of destination <em>array</em>.</p>\n"
  seealso:
  - type: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - type: System.Array.Copy(System.Array,System.Array,System.Int32)
    commentId: M:System.Array.Copy(System.Array,System.Array,System.Int32)
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.CopyTo(Array, Int32)
- uid: System.Array.CreateInstance(System.Type,System.Int32)
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32)
  id: CreateInstance(System.Type,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32)
  fullName: System.Array.CreateInstance(System.Type, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Array.cs
    startLine: 66
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and length, with zero-based indexing.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static Array CreateInstance(Type elementType, int length)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function CreateInstance(elementType As Type, length As Integer) As Array
    parameters:
    - id: elementType
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The size of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    return:
      type: System.Array
      description: "\n<p>A new one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> with the specified length, using zero-based indexing.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>elementType</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>elementType</em> is not a valid <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>elementType</em> is not supported. For example, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> is not supported.</p>\n<p>-or-</p>\n<p>\n<em>elementType</em> is an open generic type.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.CreateInstance(Type, Int32)
- uid: System.Array.CreateInstance(System.Type,System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[])
  id: CreateInstance(System.Type,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32[])
  fullName: System.Array.CreateInstance(System.Type, System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Array.cs
    startLine: 132
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and dimension lengths, with zero-based indexing. The dimension lengths are specified in an array of 32-bit integers.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static Array CreateInstance(Type elementType, params int[] lengths)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function CreateInstance(elementType As Type, ParamArray lengths As Integer()) As Array
    parameters:
    - id: elementType
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    - id: lengths
      type: System.Int32[]
      description: "\n<p>An array of 32-bit integers that represent the size of each dimension of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    return:
      type: System.Array
      description: "\n<p>A new multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> with the specified length for each dimension, using zero-based indexing.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>elementType</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>lengths</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>elementType</em> is not a valid <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The <em>lengths</em> array contains less than one element.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>elementType</em> is not supported. For example, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> is not supported. </p>\n<p>-or-</p>\n<p>\n<em>elementType</em> is an open generic type.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Any value in <em>lengths</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32())
  name.vb: CreateInstance(Type, Int32())
  nameWithType: Array.CreateInstance(Type, Int32[])
  nameWithType.vb: Array.CreateInstance(Type, Int32())
- uid: System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  commentId: M:System.Array.CreateInstance(System.Type,System.Int32[],System.Int32[])
  id: CreateInstance(System.Type,System.Int32[],System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: CreateInstance(Type, Int32[], Int32[])
  fullName: System.Array.CreateInstance(System.Type, System.Int32[], System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateInstance
    path: src/mscorlib/src/System/Array.cs
    startLine: 186
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Creates a multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> and dimension lengths, with the specified lower bounds.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static Array CreateInstance(Type elementType, int[] lengths, int[] lowerBounds)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function CreateInstance(elementType As Type, lengths As Integer(), lowerBounds As Integer()) As Array
    parameters:
    - id: elementType
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    - id: lengths
      type: System.Int32[]
      description: "\n<p>A one-dimensional array that contains the size of each dimension of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    - id: lowerBounds
      type: System.Int32[]
      description: "\n<p>A one-dimensional array that contains the lower bound (starting index) of each dimension of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to create.</p>\n"
    return:
      type: System.Array
      description: "\n<p>A new multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> with the specified length and lower bound for each dimension.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>elementType</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>lengths</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>lowerBounds</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>elementType</em> is not a valid <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>The <em>lengths</em> array contains less than one element.</p>\n<p>-or-</p>\n<p>The <em>lengths</em> and <em>lowerBounds</em> arrays do not contain the same number of elements.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>elementType</em> is not supported. For example, <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref> is not supported. </p>\n<p>-or-</p>\n<p>\n<em>elementType</em> is an open generic type.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Any value in <em>lengths</em> is less than zero.</p>\n<p>-or-</p>\n<p>Any value in <em>lowerBounds</em> is very large, such that the sum of a dimension's lower bound and length is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.CreateInstance(System.Type, System.Int32(), System.Int32())
  name.vb: CreateInstance(Type, Int32(), Int32())
  nameWithType: Array.CreateInstance(Type, Int32[], Int32[])
  nameWithType.vb: Array.CreateInstance(Type, Int32(), Int32())
- uid: System.Array.Empty``1
  commentId: M:System.Array.Empty``1
  id: Empty``1
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Empty<T>()
  fullName: System.Array.Empty<T>()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Empty
    path: src/mscorlib/src/System/Array.cs
    startLine: 1051
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an empty array.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static T[] Empty<T>()
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function Empty(Of T) As T()
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: '{T}[]'
      description: "\n<p>Returns an empty <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Empty(Of T)()
  name.vb: Empty(Of T)()
  nameWithType: Array.Empty<T>()
  nameWithType.vb: Array.Empty(Of T)()
- uid: System.Array.Exists``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  id: Exists``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Exists<T>(T[], Predicate<T>)
  fullName: System.Array.Exists<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/Array.cs
    startLine: 1062
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the specified array contains elements that match the conditions defined by the specified predicate.</p>\n"
  syntax:
    content: public static bool Exists<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function Exists(Of T)(array As T(), match As Predicate(Of T)) As Boolean
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the elements to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>array</em> contains one or more elements that match the conditions defined by the specified predicate; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Array.TrueForAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Exists(Of T)(T(), System.Predicate(Of T))
  name.vb: Exists(Of T)(T(), Predicate(Of T))
  nameWithType: Array.Exists<T>(T[], Predicate<T>)
  nameWithType.vb: Array.Exists(Of T)(T(), Predicate(Of T))
- uid: System.Array.Find``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  id: Find``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Find<T>(T[], Predicate<T>)
  fullName: System.Array.Find<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Find
    path: src/mscorlib/src/System/Array.cs
    startLine: 1066
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static T Find<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function Find(Of T)(array As T(), match As Predicate(Of T)) As T
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based array to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The predicate that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Find(Of T)(T(), System.Predicate(Of T))
  name.vb: Find(Of T)(T(), Predicate(Of T))
  nameWithType: Array.Find<T>(T[], Predicate<T>)
  nameWithType.vb: Array.Find(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  id: FindAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindAll<T>(T[], Predicate<T>)
  fullName: System.Array.FindAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindAll
    path: src/mscorlib/src/System/Array.cs
    startLine: 1084
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Retrieves all the elements that match the conditions defined by the specified predicate.</p>\n"
  syntax:
    content: public static T[] FindAll<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindAll(Of T)(array As T(), match As Predicate(Of T)) As T()
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the elements to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: '{T}[]'
      description: "\n<p>An <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindAll(Of T)(T(), System.Predicate(Of T))
  name.vb: FindAll(Of T)(T(), Predicate(Of T))
  nameWithType: Array.FindAll<T>(T[], Predicate<T>)
  nameWithType.vb: Array.FindAll(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1123
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that starts at the specified index and contains the specified number of elements.</p>\n"
  syntax:
    content: public static int FindIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
  nameWithType: Array.FindIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType.vb: Array.FindIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Int32, Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1113
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that extends from the specified index to the last element.</p>\n"
  syntax:
    content: public static int FindIndex<T>(T[] array, int startIndex, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Int32, Predicate(Of T))
  nameWithType: Array.FindIndex<T>(T[], Int32, Predicate<T>)
  nameWithType.vb: Array.FindIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: System.Array.FindIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindIndex``1(``0[],System.Predicate{``0})
  id: FindIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindIndex<T>(T[], Predicate<T>)
  fullName: System.Array.FindIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1103
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static int FindIndex<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindIndex(Of T)(T(), Predicate(Of T))
  nameWithType: Array.FindIndex<T>(T[], Predicate<T>)
  nameWithType.vb: Array.FindIndex(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindLast``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  id: FindLast``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLast<T>(T[], Predicate<T>)
  fullName: System.Array.FindLast<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLast
    path: src/mscorlib/src/System/Array.cs
    startLine: 1149
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static T FindLast<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindLast(Of T)(array As T(), match As Predicate(Of T)) As T
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type <em>T</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLast(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLast(Of T)(T(), Predicate(Of T))
  nameWithType: Array.FindLast<T>(T[], Predicate<T>)
  nameWithType.vb: Array.FindLast(Of T)(T(), Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1185
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int startIndex, int count, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, count As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Int32, Predicate<T>)
  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Int32, Int32, Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Int32,System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Int32, Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Int32, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1176
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  syntax:
    content: public static int FindLastIndex<T>(T[] array, int startIndex, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), startIndex As Integer, match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Int32, System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
  nameWithType: Array.FindLastIndex<T>(T[], Int32, Predicate<T>)
  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Int32, Predicate(Of T))
- uid: System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.FindLastIndex``1(``0[],System.Predicate{``0})
  id: FindLastIndex``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: FindLastIndex<T>(T[], Predicate<T>)
  fullName: System.Array.FindLastIndex<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FindLastIndex
    path: src/mscorlib/src/System/Array.cs
    startLine: 1167
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static int FindLastIndex<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function FindLastIndex(Of T)(array As T(), match As Predicate(Of T)) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The <xref href=\"System.Predicate`1\" data-throw-if-not-resolved=\"false\"></xref> that defines the conditions of the element to search for.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of an element that matches the conditions defined by <em>match</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Array.Find``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Find``1(``0[],System.Predicate{``0})
  - type: System.Array.FindLast``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindLast``1(``0[],System.Predicate{``0})
  - type: System.Array.FindAll``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.FindAll``1(``0[],System.Predicate{``0})
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.FindLastIndex(Of T)(T(), System.Predicate(Of T))
  name.vb: FindLastIndex(Of T)(T(), Predicate(Of T))
  nameWithType: Array.FindLastIndex<T>(T[], Predicate<T>)
  nameWithType.vb: Array.FindLastIndex(Of T)(T(), Predicate(Of T))
- uid: System.Array.GetEnumerator
  commentId: M:System.Array.GetEnumerator
  id: GetEnumerator
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: System.Array.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Array.cs
    startLine: 1241
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public IEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.GetEnumerator()
- uid: System.Array.GetLength(System.Int32)
  commentId: M:System.Array.GetLength(System.Int32)
  id: GetLength(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetLength(Int32)
  fullName: System.Array.GetLength(System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets a 32-bit integer that represents the number of elements in the specified dimension of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public int GetLength(int dimension)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Function GetLength(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
      description: "\n<p>A zero-based dimension of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> whose length needs to be determined.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the number of elements in the specified dimension.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>dimension</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>dimension</em> is equal to or greater than <xref href=\"System.Array.Rank\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.Length
    commentId: P:System.Array.Length
  - type: System.Array.GetLongLength(System.Int32)
    commentId: M:System.Array.GetLongLength(System.Int32)
  - type: System.Collections.ICollection.Count
    commentId: P:System.Collections.ICollection.Count
  - type: System.Array.Rank
    commentId: P:System.Array.Rank
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.GetLength(Int32)
- uid: System.Array.GetLowerBound(System.Int32)
  commentId: M:System.Array.GetLowerBound(System.Int32)
  id: GetLowerBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetLowerBound(Int32)
  fullName: System.Array.GetLowerBound(System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the index of the first element of the specified dimension in the array.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public int GetLowerBound(int dimension)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Function GetLowerBound(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
      description: "\n<p>A zero-based dimension of the array whose starting index needs to be determined.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the first element of the specified dimension in the array.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>dimension</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>dimension</em> is equal to or greater than <xref href=\"System.Array.Rank\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.GetUpperBound(System.Int32)
    commentId: M:System.Array.GetUpperBound(System.Int32)
  - type: System.Array.Rank
    commentId: P:System.Array.Rank
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.GetLowerBound(Int32)
- uid: System.Array.GetUpperBound(System.Int32)
  commentId: M:System.Array.GetUpperBound(System.Int32)
  id: GetUpperBound(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetUpperBound(Int32)
  fullName: System.Array.GetUpperBound(System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the index of the last element of the specified dimension in the array.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public int GetUpperBound(int dimension)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Function GetUpperBound(dimension As Integer) As Integer
    parameters:
    - id: dimension
      type: System.Int32
      description: "\n<p>A zero-based dimension of the array whose upper bound needs to be determined.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the last element of the specified dimension in the array, or -1 if the specified dimension is empty. </p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>dimension</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>dimension</em> is equal to or greater than <xref href=\"System.Array.Rank\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.GetLowerBound(System.Int32)
    commentId: M:System.Array.GetLowerBound(System.Int32)
  - type: System.Array.Rank
    commentId: P:System.Array.Rank
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.GetUpperBound(Int32)
- uid: System.Array.GetValue(System.Int32)
  commentId: M:System.Array.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  fullName: System.Array.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 359
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value at the specified position in the one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. The index is specified as a 32-bit integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public object GetValue(int index)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetValue(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the position of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> element to get.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value at the specified position in the one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> does not have exactly one dimension.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.GetLowerBound(System.Int32)
    commentId: M:System.Array.GetLowerBound(System.Int32)
  - type: System.Array.GetUpperBound(System.Int32)
    commentId: M:System.Array.GetUpperBound(System.Int32)
  - type: System.Array.SetValue(System.Object,System.Int32)
    commentId: M:System.Array.SetValue(System.Object,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.GetValue(Int32)
- uid: System.Array.GetValue(System.Int32[])
  commentId: M:System.Array.GetValue(System.Int32[])
  id: GetValue(System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: GetValue(Int32[])
  fullName: System.Array.GetValue(System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 344
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value at the specified position in the multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. The indexes are specified as an array of 32-bit integers.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public object GetValue(params int[] indices)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetValue(ParamArray indices As Integer()) As Object
    parameters:
    - id: indices
      type: System.Int32[]
      description: "\n<p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> element to get.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value at the specified position in the multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>indices</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of dimensions in the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is not equal to the number of elements in <em>indices</em>.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Any element in <em>indices</em> is outside the range of valid indexes for the corresponding dimension of the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.GetLowerBound(System.Int32)
    commentId: M:System.Array.GetLowerBound(System.Int32)
  - type: System.Array.GetUpperBound(System.Int32)
    commentId: M:System.Array.GetUpperBound(System.Int32)
  - type: System.Array.SetValue(System.Object,System.Int32)
    commentId: M:System.Array.SetValue(System.Object,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Array.GetValue(System.Int32())
  name.vb: GetValue(Int32())
  nameWithType: Array.GetValue(Int32[])
  nameWithType.vb: Array.GetValue(Int32())
- uid: System.Array.IndexOf(System.Array,System.Object)
  commentId: M:System.Array.IndexOf(System.Array,System.Object)
  id: IndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object)
  fullName: System.Array.IndexOf(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1254
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int IndexOf(Array array, object value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function IndexOf(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional array to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the first occurrence of <em>value</em> in <em>array</em>, if found; otherwise, the lower bound of the array minus 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  seealso:
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.IndexOf(Array, Object)
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object, Int32)
  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1270
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int IndexOf(Array array, object value, int startIndex)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional array to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting index of the search. 0 (zero) is valid in an empty array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the first occurrence of <em>value</em>, if it’s found, within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element; otherwise, the lower bound of the array minus 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  seealso:
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.IndexOf(Array, Object, Int32)
- uid: System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf(Array, Object, Int32, Int32)
  fullName: System.Array.IndexOf(System.Array, System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1286
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of ifs first occurrence. The range extends from a specified index for a specified number of elements.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int IndexOf(Array array, object value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function IndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional array to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting index of the search. 0 (zero) is valid in an empty array.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the first occurrence of <em>value</em>, if it’s found in the <em>array</em> from index <em>startIndex</em> to <em>startIndex</em> + <em>count</em> - 1; otherwise, the lower bound of the array minus 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  seealso:
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.IndexOf(Array, Object, Int32, Int32)
- uid: System.Array.IndexOf``1(``0[],``0)
  commentId: M:System.Array.IndexOf``1(``0[],``0)
  id: IndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T)
  fullName: System.Array.IndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1341
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of its first occurrence in a one-dimensional array.</p>\n"
  syntax:
    content: public static int IndexOf<T>(T[] array, T value)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based array to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> in the entire <em>array</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T)
  name.vb: IndexOf(Of T)(T(), T)
  nameWithType: Array.IndexOf<T>(T[], T)
  nameWithType.vb: Array.IndexOf(Of T)(T(), T)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32)
  fullName: System.Array.IndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1353
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object in a range of elements of a one dimensional array, and returns the index of its first occurrence. The range extends from a specified index to the end of the array.</p>\n"
  syntax:
    content: public static int IndexOf<T>(T[] array, T value, int startIndex)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based array to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty array.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from <em>startIndex</em> to the last element, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32)
  nameWithType.vb: Array.IndexOf(Of T)(T(), T, Int32)
- uid: System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.IndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: IndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IndexOf<T>(T[], T, Int32, Int32)
  fullName: System.Array.IndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1363
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object in a range of elements of a one-dimensional array, and returns the index of its first occurrence. The range extends from a specified index for a specified number of elements.</p>\n"
  syntax:
    content: public static int IndexOf<T>(T[] array, T value, int startIndex, int count)
    content.vb: Public Shared Function IndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based array to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty array.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in <em>array</em> that starts at <em>startIndex</em> and contains the number of elements specified in <em>count</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.LastIndexOf(System.Array,System.Object)
    commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.IndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: IndexOf(Of T)(T(), T, Int32, Int32)
  nameWithType: Array.IndexOf<T>(T[], T, Int32, Int32)
  nameWithType.vb: Array.IndexOf(Of T)(T(), T, Int32, Int32)
- uid: System.Array.Initialize
  commentId: M:System.Array.Initialize
  id: Initialize
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Initialize()
  fullName: System.Array.Initialize()
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes every element of the value-type <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> by calling the default constructor of the value type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public void Initialize()
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Sub Initialize
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.Initialize()
- uid: System.Array.LastIndexOf(System.Array,System.Object)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object)
  id: LastIndexOf(System.Array,System.Object)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object)
  fullName: System.Array.LastIndexOf(System.Array, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1391
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of the last occurrence within the entire one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int LastIndexOf(Array array, object value)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function LastIndexOf(array As Array, value As Object) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, the lower bound of the array minus 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  seealso:
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.LastIndexOf(Array, Object)
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object, Int32)
  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1406
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int LastIndexOf(Array array, object value, int startIndex)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting index of the backward search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  seealso:
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.LastIndexOf(Array, Object, Int32)
- uid: System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Array,System.Object,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf(Array, Object, Int32, Int32)
  fullName: System.Array.LastIndexOf(System.Array, System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1422
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int LastIndexOf(Array array, object value, int startIndex, int count)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function LastIndexOf(array As Array, value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The starting index of the backward search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, the lower bound of the array minus 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  seealso:
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.LastIndexOf(Array, Object, Int32, Int32)
- uid: System.Array.LastIndexOf``1(``0[],``0)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0)
  id: LastIndexOf``1(``0[],``0)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T)
  fullName: System.Array.LastIndexOf<T>(T[], T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1478
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of the last occurrence within the entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the entire <em>array</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T)
  name.vb: LastIndexOf(Of T)(T(), T)
  nameWithType: Array.LastIndexOf<T>(T[], T)
  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32)
  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1488
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that extends from the first element to <em>startIndex</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32)
  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T, Int32)
- uid: System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  commentId: M:System.Array.LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  id: LastIndexOf``1(``0[],``0,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: LastIndexOf<T>(T[], T, Int32, Int32)
  fullName: System.Array.LastIndexOf<T>(T[], T, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 1498
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Searches for the specified object and returns the index of the last occurrence within the range of elements in the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  syntax:
    content: public static int LastIndexOf<T>(T[] array, T value, int startIndex, int count)
    content.vb: Public Shared Function LastIndexOf(Of T)(array As T(), value As T, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to search.</p>\n"
    - id: value
      type: '{T}'
      description: "\n<p>The object to locate in <em>array</em>.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in <em>array</em> that contains the number of elements specified in <em>count</em> and ends at <em>startIndex</em>, if found; otherwise, –1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or-</p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in <em>array</em>.</p>\n"
  seealso:
  - type: System.Array.IndexOf(System.Array,System.Object)
    commentId: M:System.Array.IndexOf(System.Array,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.LastIndexOf(Of T)(T(), T, System.Int32, System.Int32)
  name.vb: LastIndexOf(Of T)(T(), T, Int32, Int32)
  nameWithType: Array.LastIndexOf<T>(T[], T, Int32, Int32)
  nameWithType.vb: Array.LastIndexOf(Of T)(T(), T, Int32, Int32)
- uid: System.Array.Resize``1(``0[]@,System.Int32)
  commentId: M:System.Array.Resize``1(``0[]@,System.Int32)
  id: Resize``1(``0[]@,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Resize<T>(ref T[], Int32)
  fullName: System.Array.Resize<T>(ref T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Resize
    path: src/mscorlib/src/System/Array.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Changes the number of elements of a one-dimensional array to the specified new size.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Resize<T>(ref T[] array, int newSize)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Resize(Of T)(ByRef array As T(), newSize As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based array to resize, or <strong>null</strong> to create a new array with the specified size.</p>\n"
    - id: newSize
      type: System.Int32
      description: "\n<p>The size of the new array.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>newSize</em> is less than zero.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Resize(Of T)(ByRef T(), System.Int32)
  name.vb: Resize(Of T)(ByRef T(), Int32)
  nameWithType: Array.Resize<T>(ref T[], Int32)
  nameWithType.vb: Array.Resize(Of T)(ByRef T(), Int32)
- uid: System.Array.Reverse(System.Array)
  commentId: M:System.Array.Reverse(System.Array)
  id: Reverse(System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Reverse(Array)
  fullName: System.Array.Reverse(System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Array.cs
    startLine: 1545
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reverses the sequence of the elements in the entire one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Reverse(Array array)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Reverse(array As Array)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to reverse.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Reverse(Array)
- uid: System.Array.Reverse(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Reverse(System.Array,System.Int32,System.Int32)
  id: Reverse(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Reverse(Array, Int32, Int32)
  fullName: System.Array.Reverse(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Array.cs
    startLine: 1559
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Reverses the sequence of the elements in a range of elements in the one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Reverse(Array array, int index, int length)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Reverse(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to reverse.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the section to reverse.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the section to reverse.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Reverse(Array, Int32, Int32)
- uid: System.Array.SetValue(System.Object,System.Int32)
  commentId: M:System.Array.SetValue(System.Object,System.Int32)
  id: SetValue(System.Object,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: SetValue(Object, Int32)
  fullName: System.Array.SetValue(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 463
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sets a value to the element at the specified position in the one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. The index is specified as a 32-bit integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetValue(object value, int index)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetValue(value As Object, index As Integer)
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The new value for the specified element.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>A 32-bit integer that represents the position of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> element to set.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> does not have exactly one dimension.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> cannot be cast to the element type of the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is outside the range of valid indexes for the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.GetLowerBound(System.Int32)
    commentId: M:System.Array.GetLowerBound(System.Int32)
  - type: System.Array.GetUpperBound(System.Int32)
    commentId: M:System.Array.GetUpperBound(System.Int32)
  - type: System.Array.GetValue(System.Int32)
    commentId: M:System.Array.GetValue(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Array.SetValue(Object, Int32)
- uid: System.Array.SetValue(System.Object,System.Int32[])
  commentId: M:System.Array.SetValue(System.Object,System.Int32[])
  id: SetValue(System.Object,System.Int32[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: SetValue(Object, Int32[])
  fullName: System.Array.SetValue(System.Object, System.Int32[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetValue
    path: src/mscorlib/src/System/Array.cs
    startLine: 508
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sets a value to the element at the specified position in the multidimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. The indexes are specified as an array of 32-bit integers.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetValue(object value, params int[] indices)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetValue(value As Object, ParamArray indices As Integer())
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The new value for the specified element.</p>\n"
    - id: indices
      type: System.Int32[]
      description: "\n<p>A one-dimensional array of 32-bit integers that represent the indexes specifying the position of the element to set.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>indices</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The number of dimensions in the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is not equal to the number of elements in <em>indices</em>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>value</em> cannot be cast to the element type of the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Any element in <em>indices</em> is outside the range of valid indexes for the corresponding dimension of the current <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Array.GetLowerBound(System.Int32)
    commentId: M:System.Array.GetLowerBound(System.Int32)
  - type: System.Array.GetUpperBound(System.Int32)
    commentId: M:System.Array.GetUpperBound(System.Int32)
  - type: System.Array.GetValue(System.Int32)
    commentId: M:System.Array.GetValue(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Array.SetValue(System.Object, System.Int32())
  name.vb: SetValue(Object, Int32())
  nameWithType: Array.SetValue(Object, Int32[])
  nameWithType.vb: Array.SetValue(Object, Int32())
- uid: System.Array.Sort(System.Array)
  commentId: M:System.Array.Sort(System.Array)
  id: Sort(System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array)
  fullName: System.Array.Sort(System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1609
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in an entire one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array array)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(array As Array)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array)
- uid: System.Array.Sort(System.Array,System.Array)
  commentId: M:System.Array.Sort(System.Array,System.Array)
  id: Sort(System.Array,System.Array)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array)
  fullName: System.Array.Sort(System.Array, System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1623
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a pair of one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array keys, Array items)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(keys As Array, items As Array)
    parameters:
    - id: keys
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort.</p>\n"
    - id: items
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to sort only the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>The <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n<p>-or-</p>\n<p>The <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Collections.IDictionary
    commentId: T:System.Collections.IDictionary
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, Array)
- uid: System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, IComparer)
  fullName: System.Array.Sort(System.Array, System.Array, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1673
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a pair of one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array keys, Array items, IComparer comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(keys As Array, items As Array, comparer As IComparer)
    parameters:
    - id: keys
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort.</p>\n"
    - id: items
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to sort only the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>The <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n<p>-or-</p>\n<p>The <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>. </p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, Array, IComparer)
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, Int32, Int32)
  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1646
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a range of elements in a pair of one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each key.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array keys, Array items, int index, int length)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer)
    parameters:
    - id: keys
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort.</p>\n"
    - id: items
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to sort only the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>The <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n<p>-or-</p>\n<p>The <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, Array, Int32, Int32)
- uid: System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Array, Int32, Int32, IComparer)
  fullName: System.Array.Sort(System.Array, System.Array, System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1700
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a range of elements in a pair of one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array keys, Array items, int index, int length, IComparer comparer)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(keys As Array, items As Array, index As Integer, length As Integer, comparer As IComparer)
    parameters:
    - id: keys
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort.</p>\n"
    - id: items
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to each of the keys in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to sort only the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>The <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n<p>-or-</p>\n<p>The <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, Array, Int32, Int32, IComparer)
- uid: System.Array.Sort(System.Array,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Collections.IComparer)
  id: Sort(System.Array,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, IComparer)
  fullName: System.Array.Sort(System.Array, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1657
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array array, IComparer comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(array As Array, comparer As IComparer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional array to sort.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The implementation to use when comparing elements.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, IComparer)
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32)
  id: Sort(System.Array,System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Int32, Int32)
  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1635
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in a range of elements in a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array array, int index, int length)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(array As Array, index As Integer, length As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, Int32, Int32)
- uid: System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Array.Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Array,System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort(Array, Int32, Int32, IComparer)
  fullName: System.Array.Sort(System.Array, System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1687
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in a range of elements in a one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort(Array array, int index, int length, IComparer comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(array As Array, index As Integer, length As Integer, comparer As IComparer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or-</p>\n<p>\n<strong>null</strong> to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.RankException
    commentId: T:System.RankException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>. </p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface.</p>\n"
  seealso:
  - type: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - type: System.IComparable
    commentId: T:System.IComparable
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Array.Sort(Array, Int32, Int32, IComparer)
- uid: System.Array.Sort``1(``0[])
  commentId: M:System.Array.Sort``1(``0[])
  id: Sort``1(``0[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[])
  fullName: System.Array.Sort<T>(T[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1744
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in an entire <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each element of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<T>(T[] array)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of T)(array As T())
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T())
  name.vb: Sort(Of T)(T())
  nameWithType: Array.Sort<T>(T[])
  nameWithType.vb: Array.Sort(Of T)(T())
- uid: System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], IComparer<T>)
  fullName: System.Array.Sort<T>(T[], System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1770
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<T>(T[] array, IComparer<T> comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of T)(array As T(), comparer As IComparer(Of T))
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-base <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each element.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), IComparer(Of T))
  nameWithType: Array.Sort<T>(T[], IComparer<T>)
  nameWithType.vb: Array.Sort(Of T)(T(), IComparer(Of T))
- uid: System.Array.Sort``1(``0[],System.Comparison{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Comparison{``0})
  id: Sort``1(``0[],System.Comparison{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Comparison<T>)
  fullName: System.Array.Sort<T>(T[], System.Comparison<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1836
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Comparison`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static void Sort<T>(T[] array, Comparison<T> comparison)
    content.vb: Public Shared Sub Sort(Of T)(array As T(), comparison As Comparison(Of T))
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort</p>\n"
    - id: comparison
      type: System.Comparison{{T}}
      description: "\n<p>The <xref href=\"System.Comparison`1\" data-throw-if-not-resolved=\"false\"></xref> to use when comparing elements.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>comparison</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The implementation of <em>comparison</em> caused an error during the sort. For example, <em>comparison</em> might not return 0 when comparing an item with itself.</p>\n"
  seealso:
  - type: System.Comparison`1
    commentId: T:System.Comparison`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Comparison(Of T))
  name.vb: Sort(Of T)(T(), Comparison(Of T))
  nameWithType: Array.Sort<T>(T[], Comparison<T>)
  nameWithType.vb: Array.Sort(Of T)(T(), Comparison(Of T))
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32)
  id: Sort``1(``0[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32)
  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1760
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in a range of elements in an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each element of the <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<T>(T[] array, int index, int length)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer)
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32)
  name.vb: Sort(Of T)(T(), Int32, Int32)
  nameWithType: Array.Sort<T>(T[], Int32, Int32)
  nameWithType.vb: Array.Sort(Of T)(T(), Int32, Int32)
- uid: System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``1(``0[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<T>(T[], Int32, Int32, IComparer<T>)
  fullName: System.Array.Sort<T>(T[], System.Int32, System.Int32, System.Collections.Generic.IComparer<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1786
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts the elements in a range of elements in an <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<T>(T[] array, int index, int length, IComparer<T> comparer)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of T)(array As T(), index As Integer, length As Integer, comparer As IComparer(Of T))
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to sort.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{T}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each element.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>array</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in <em>array</em>. </p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in <em>array</em> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of T)(T(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of T))
  name.vb: Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
  nameWithType: Array.Sort<T>(T[], Int32, Int32, IComparer<T>)
  nameWithType.vb: Array.Sort(Of T)(T(), Int32, Int32, IComparer(Of T))
- uid: System.Array.Sort``2(``0[],``1[])
  commentId: M:System.Array.Sort``2(``0[],``1[])
  id: Sort``2(``0[],``1[])
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[])
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1752
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a pair of <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each key.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue())
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort. </p>\n"
    - id: items
      type: '{TValue}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\n"
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the elements of the key array.</p>\n"
    - id: TValue
      description: "\n<p>The type of the elements of the items array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  - type: System.Collections.Generic.IDictionary`2
    commentId: T:System.Collections.Generic.IDictionary`2
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue())
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue())
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[])
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue())
- uid: System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1778
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a pair of <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, IComparer<TKey> comparer)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), comparer As IComparer(Of TKey))
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort. </p>\n"
    - id: items
      type: '{TValue}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each element.</p>\n"
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the elements of the key array.</p>\n"
    - id: TValue
      description: "\n<p>The type of the elements of the items array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Collections.Generic.IComparer(Of TKey))
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], IComparer<TKey>)
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), IComparer(Of TKey))
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32)
  id: Sort``2(``0[],``1[],System.Int32,System.Int32)
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1765
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a range of elements in a pair of <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each key.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer)
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort. </p>\n"
    - id: items
      type: '{TValue}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the elements of the key array.</p>\n"
    - id: TValue
      description: "\n<p>The type of the elements of the items array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>One or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32)
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32)
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32)
- uid: System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Array.Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  id: Sort``2(``0[],``1[],System.Int32,System.Int32,System.Collections.Generic.IComparer{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  fullName: System.Array.Sort<TKey, TValue>(TKey[], TValue[], System.Int32, System.Int32, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Array.cs
    startLine: 1808
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Sorts a range of elements in a pair of <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> objects (one contains the keys and the other contains the corresponding items) based on the keys in the first <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> using the specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      public static void Sort<TKey, TValue>(TKey[] keys, TValue[] items, int index, int length, IComparer<TKey> comparer)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      Public Shared Sub Sort(Of TKey, TValue)(keys As TKey(), items As TValue(), index As Integer, length As Integer, comparer As IComparer(Of TKey))
    parameters:
    - id: keys
      type: '{TKey}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the keys to sort. </p>\n"
    - id: items
      type: '{TValue}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that contains the items that correspond to the keys in <em>keys</em>, or <strong>null</strong> to sort only <em>keys</em>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The starting index of the range to sort.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements in the range to sort.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>The <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation to use when comparing elements, or <strong>null</strong> to use the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface implementation of each element.</p>\n"
    typeParameters:
    - id: TKey
      description: "\n<p>The type of the elements of the key array.</p>\n"
    - id: TValue
      description: "\n<p>The type of the elements of the items array.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>keys</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than the lower bound of <em>keys</em>.</p>\n<p>-or-</p>\n<p>\n<em>length</em> is less than zero.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>items</em> is not <strong>null</strong>, and the lower bound of <em>keys</em> does not match the lower bound of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and the length of <em>keys</em> is greater than the length of <em>items</em>.</p>\n<p>-or-</p>\n<p>\n<em>index</em> and <em>length</em> do not specify a valid range in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>\n<em>items</em> is not <strong>null</strong>, and <em>index</em> and <em>length</em> do not specify a valid range in the <em>items</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n<p>-or-</p>\n<p>The implementation of <em>comparer</em> caused an error during the sort. For example, <em>comparer</em> might not return 0 when comparing an item with itself.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong>, and one or more elements in the <em>keys</em><xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> do not implement the <xref href=\"System.IComparable`1\" data-throw-if-not-resolved=\"false\"></xref> generic interface.</p>\n"
  seealso:
  - type: System.Collections.Generic.IComparer`1
    commentId: T:System.Collections.Generic.IComparer`1
  - type: System.IComparable`1
    commentId: T:System.IComparable`1
  - type: System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
    commentId: M:System.Array.BinarySearch(System.Array,System.Int32,System.Int32,System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.Sort(Of TKey, TValue)(TKey(), TValue(), System.Int32, System.Int32, System.Collections.Generic.IComparer(Of TKey))
  name.vb: Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))
  nameWithType: Array.Sort<TKey, TValue>(TKey[], TValue[], Int32, Int32, IComparer<TKey>)
  nameWithType.vb: Array.Sort(Of TKey, TValue)(TKey(), TValue(), Int32, Int32, IComparer(Of TKey))
- uid: System.Array.System#Collections#IList#Add(System.Object)
  commentId: M:System.Array.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  fullName: System.Array.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Add
    path: src/mscorlib/src/System/Array.cs
    startLine: 693
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Calling this method always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> exception. </p>\n"
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to be added to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>Adding a value to an array is not supported. No value is returned. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  implements:
  - System.Collections.IList.Add(System.Object)
  name.vb: System.Collections.IList.Add(Object)
  nameWithType: Array.IList.Add(Object)
  nameWithType.vb: Array.System.Collections.IList.Add(Object)
- uid: System.Array.System#Collections#IList#Clear
  commentId: M:System.Array.System#Collections#IList#Clear
  id: System#Collections#IList#Clear
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Clear()
  fullName: System.Array.System.Collections.IList.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Clear
    path: src/mscorlib/src/System/Array.cs
    startLine: 703
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes all items from the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void IList.Clear()
    content.vb: Sub System.Collections.IList.Clear Implements IList.Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  implements:
  - System.Collections.IList.Clear
  name.vb: System.Collections.IList.Clear()
  nameWithType: Array.IList.Clear()
  nameWithType.vb: Array.System.Collections.IList.Clear()
- uid: System.Array.System#Collections#IList#Contains(System.Object)
  commentId: M:System.Array.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  fullName: System.Array.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Contains
    path: src/mscorlib/src/System/Array.cs
    startLine: 698
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in the current list. The element to locate can be <strong>null</strong> for reference types.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value</em> is found in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.Contains(System.Object)
  name.vb: System.Collections.IList.Contains(Object)
  nameWithType: Array.IList.Contains(Object)
  nameWithType.vb: Array.System.Collections.IList.Contains(Object)
- uid: System.Array.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.Array.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  fullName: System.Array.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.IndexOf
    path: src/mscorlib/src/System/Array.cs
    startLine: 708
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines the index of a specific item in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to locate in the current list.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of value if found in the list; otherwise, -1.</p>\n"
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  name.vb: System.Collections.IList.IndexOf(Object)
  nameWithType: Array.IList.IndexOf(Object)
  nameWithType.vb: Array.System.Collections.IList.IndexOf(Object)
- uid: System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.Array.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  fullName: System.Array.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Insert
    path: src/mscorlib/src/System/Array.cs
    startLine: 713
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Inserts an item to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index at which <em>value</em> should be inserted.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The object to insert.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<em>value</em> is null reference in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
  nameWithType: Array.IList.Insert(Int32, Object)
  nameWithType.vb: Array.System.Collections.IList.Insert(Int32, Object)
- uid: System.Array.System#Collections#IList#Remove(System.Object)
  commentId: M:System.Array.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  fullName: System.Array.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.Remove
    path: src/mscorlib/src/System/Array.cs
    startLine: 718
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The object to remove from the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  implements:
  - System.Collections.IList.Remove(System.Object)
  name.vb: System.Collections.IList.Remove(Object)
  nameWithType: Array.IList.Remove(Object)
  nameWithType.vb: Array.System.Collections.IList.Remove(Object)
- uid: System.Array.System#Collections#IList#RemoveAt(System.Int32)
  commentId: M:System.Array.System#Collections#IList#RemoveAt(System.Int32)
  id: System#Collections#IList#RemoveAt(System.Int32)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IList.RemoveAt(Int32)
  fullName: System.Array.System.Collections.IList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IList.RemoveAt
    path: src/mscorlib/src/System/Array.cs
    startLine: 723
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Removes the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> item at the specified index.</p>\n"
  syntax:
    content: void IList.RemoveAt(int index)
    content.vb: Sub System.Collections.IList.RemoveAt(index As Integer) Implements IList.RemoveAt
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of the element to remove.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>index is not a valid index in the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  name.vb: System.Collections.IList.RemoveAt(Int32)
  nameWithType: Array.IList.RemoveAt(Int32)
  nameWithType.vb: Array.System.Collections.IList.RemoveAt(Int32)
- uid: System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  commentId: M:System.Array.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  id: System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralComparable.CompareTo(Object, IComparer)
  fullName: System.Array.System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IStructuralComparable.CompareTo
    path: src/mscorlib/src/System/Array.cs
    startLine: 735
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the current collection object precedes, occurs in the same position as, or follows another object in the sort order.</p>\n"
  syntax:
    content: int IStructuralComparable.CompareTo(object other, IComparer comparer)
    content.vb: Function System.Collections.IStructuralComparable.CompareTo(other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>An object that compares the current object and <em>other</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>An integer that indicates the relationship of the current collection object to other, as shown in the following table.</p>\n<p>Return value</p>\n<p>Description</p>\n<table><tbody><tr><td>\n<p>-1</p>\n</td><td>\n<p>The current instance precedes <em>other</em>.</p>\n</td></tr><tr><td>\n<p>0</p>\n</td><td>\n<p>The current instance and <em>other</em> are equal.</p>\n</td></tr><tr><td>\n<p>1</p>\n</td><td>\n<p>The current instance follows <em>other</em>.</p>\n</td></tr></tbody></table>\n"
  implements:
  - System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  name.vb: System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType: Array.IStructuralComparable.CompareTo(Object, IComparer)
  nameWithType.vb: Array.System.Collections.IStructuralComparable.CompareTo(Object, IComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.Equals(Object, IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IStructuralEquatable.Equals
    path: src/mscorlib/src/System/Array.cs
    startLine: 760
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether an object is equal to the current instance.</p>\n"
  syntax:
    content: bool IStructuralEquatable.Equals(object other, IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.Equals(other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The object to compare with the current instance.</p>\n"
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that determines whether the current instance and <em>other</em> are equal. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the two objects are equal; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.Equals(Object, IEqualityComparer)
  nameWithType.vb: Array.System.Collections.IStructuralEquatable.Equals(Object, IEqualityComparer)
- uid: System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  commentId: M:System.Array.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  id: System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)
  isEii: true
  parent: System.Array
  langs:
  - csharp
  - vb
  name: IStructuralEquatable.GetHashCode(IEqualityComparer)
  fullName: System.Array.System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Collections.IStructuralEquatable.GetHashCode
    path: src/mscorlib/src/System/Array.cs
    startLine: 795
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a hash code for the current instance.</p>\n"
  syntax:
    content: int IStructuralEquatable.GetHashCode(IEqualityComparer comparer)
    content.vb: Function System.Collections.IStructuralEquatable.GetHashCode(comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode
    parameters:
    - id: comparer
      type: System.Collections.IEqualityComparer
      description: "\n<p>An object that computes the hash code of the current object.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The hash code for the current instance.</p>\n"
  implements:
  - System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  name.vb: System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType: Array.IStructuralEquatable.GetHashCode(IEqualityComparer)
  nameWithType.vb: Array.System.Collections.IStructuralEquatable.GetHashCode(IEqualityComparer)
- uid: System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  commentId: M:System.Array.TrueForAll``1(``0[],System.Predicate{``0})
  id: TrueForAll``1(``0[],System.Predicate{``0})
  parent: System.Array
  langs:
  - csharp
  - vb
  name: TrueForAll<T>(T[], Predicate<T>)
  fullName: System.Array.TrueForAll<T>(T[], System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Array.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrueForAll
    path: src/mscorlib/src/System/Array.cs
    startLine: 1850
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether every element in the array matches the conditions defined by the specified predicate.</p>\n"
  syntax:
    content: public static bool TrueForAll<T>(T[] array, Predicate<T> match)
    content.vb: Public Shared Function TrueForAll(Of T)(array As T(), match As Predicate(Of T)) As Boolean
    parameters:
    - id: array
      type: '{T}[]'
      description: "\n<p>The one-dimensional, zero-based <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> to check against the conditions.</p>\n"
    - id: match
      type: System.Predicate{{T}}
      description: "\n<p>The predicate that defines the conditions to check against the elements.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the elements of the array.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every element in <em>array</em> matches the conditions defined by the specified predicate; otherwise, <strong>false</strong>. If there are no elements in the array, the return value is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Array.Exists``1(``0[],System.Predicate{``0})
    commentId: M:System.Array.Exists``1(``0[],System.Predicate{``0})
  - type: System.Predicate`1
    commentId: T:System.Predicate`1
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Array.TrueForAll(Of T)(T(), System.Predicate(Of T))
  name.vb: TrueForAll(Of T)(T(), Predicate(Of T))
  nameWithType: Array.TrueForAll<T>(T[], Predicate<T>)
  nameWithType.vb: Array.TrueForAll(Of T)(T(), Predicate(Of T))
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  fullName: System.Collections.IList
  nameWithType: IList
  commentId: T:System.Collections.IList
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  fullName: System.Collections.ICollection
  nameWithType: ICollection
  commentId: T:System.Collections.ICollection
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  nameWithType: IEnumerable
  commentId: T:System.Collections.IEnumerable
- uid: System.Collections.IStructuralComparable
  parent: System.Collections
  isExternal: false
  name: IStructuralComparable
  fullName: System.Collections.IStructuralComparable
  nameWithType: IStructuralComparable
  commentId: T:System.Collections.IStructuralComparable
- uid: System.Collections.IStructuralEquatable
  parent: System.Collections
  isExternal: false
  name: IStructuralEquatable
  fullName: System.Collections.IStructuralEquatable
  nameWithType: IStructuralEquatable
  commentId: T:System.Collections.IStructuralEquatable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  nameWithType: System.Collections
  commentId: N:System.Collections
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  fullName: System.Collections.ICollection.Count
  nameWithType: ICollection.Count
  commentId: P:System.Collections.ICollection.Count
- uid: System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
  nameWithType: ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
  nameWithType: ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
- uid: System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
  nameWithType: IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
  nameWithType: IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    fullName: System.Collections.IList.Item
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.Item[Int32]
  nameWithType.vb: IList.Item(Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
- uid: System.Array
  parent: System
  isExternal: false
  name: Array
  fullName: System.Array
  nameWithType: Array
  commentId: T:System.Array
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  fullName: System.Collections.IComparer
  nameWithType: IComparer
  commentId: T:System.Collections.IComparer
- uid: '{T}[]'
  name: T[]
  fullName: T[]
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    fullName: T
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    fullName: T
  - name: ()
    fullName: ()
  nameWithType: T[]
  nameWithType.vb: T()
- uid: '{T}'
  definition: T
  name: T
  fullName: T
  nameWithType: T
  commentId: '!:T'
- uid: T
  isExternal: false
  name: T
  fullName: T
  nameWithType: T
- uid: System.Collections.Generic.IComparer{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IComparer<T>
  nameWithType.vb: IComparer(Of T)
  commentId: T:System.Collections.Generic.IComparer{`0}
- uid: System.Collections.Generic.IComparer`1
  isExternal: false
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IComparer<T>
  nameWithType.vb: IComparer(Of T)
  commentId: T:System.Collections.Generic.IComparer`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    fullName: (
  - uid: System.Array
    name: Array
    fullName: System.Array
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ICollection.CopyTo(Array, Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
- uid: System.Int32[]
  name: Int32[]
  fullName: System.Int32[]
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Int32[]
  nameWithType.vb: Int32()
- uid: System.Predicate{{T}}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Predicate<T>
  nameWithType.vb: Predicate(Of T)
  commentId: T:System.Predicate{``0}
- uid: System.Predicate`1
  isExternal: false
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Predicate<T>
  nameWithType.vb: Predicate(Of T)
  commentId: T:System.Predicate`1
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IEnumerable.GetEnumerator()
  commentId: M:System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  fullName: System.Collections.IEnumerator
  nameWithType: IEnumerator
  commentId: T:System.Collections.IEnumerator
- uid: System.Comparison{{T}}
  parent: System
  definition: System.Comparison`1
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Comparison<T>
  nameWithType.vb: Comparison(Of T)
  commentId: T:System.Comparison{`0}
- uid: System.Comparison`1
  isExternal: false
  name: Comparison<T>
  fullName: System.Comparison<T>
  fullname.vb: System.Comparison(Of T)
  name.vb: Comparison(Of T)
  spec.csharp:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Comparison`1
    name: Comparison
    fullName: System.Comparison
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Comparison<T>
  nameWithType.vb: Comparison(Of T)
  commentId: T:System.Comparison`1
- uid: '{TKey}[]'
  name: TKey[]
  fullName: TKey[]
  fullname.vb: TKey()
  name.vb: TKey()
  spec.csharp:
  - name: TKey
    fullName: TKey
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TKey
    fullName: TKey
  - name: ()
    fullName: ()
  nameWithType: TKey[]
  nameWithType.vb: TKey()
- uid: '{TValue}[]'
  name: TValue[]
  fullName: TValue[]
  fullname.vb: TValue()
  name.vb: TValue()
  spec.csharp:
  - name: TValue
    fullName: TValue
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TValue
    fullName: TValue
  - name: ()
    fullName: ()
  nameWithType: TValue[]
  nameWithType.vb: TValue()
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  nameWithType: IComparer<TKey>
  nameWithType.vb: IComparer(Of TKey)
  commentId: T:System.Collections.Generic.IComparer{``1}
- uid: System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    fullName: System.Collections.IList.Add
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.Add(Object)
  commentId: M:System.Collections.IList.Add(System.Object)
- uid: System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    fullName: System.Collections.IList.Clear
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IList.Clear()
  commentId: M:System.Collections.IList.Clear
- uid: System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    fullName: System.Collections.IList.Contains
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.Contains(Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
- uid: System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.IndexOf(Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    fullName: System.Collections.IList.Insert
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.Insert(Int32, Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
- uid: System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    fullName: System.Collections.IList.Remove
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.Remove(Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
- uid: System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IList.RemoveAt(Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
- uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
  parent: System.Collections.IStructuralComparable
  isExternal: true
  name: CompareTo(Object, IComparer)
  fullName: System.Collections.IStructuralComparable.CompareTo(System.Object, System.Collections.IComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
    name: CompareTo
    fullName: System.Collections.IStructuralComparable.CompareTo
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IComparer
    name: IComparer
    fullName: System.Collections.IComparer
  - name: )
    fullName: )
  nameWithType: IStructuralComparable.CompareTo(Object, IComparer)
  commentId: M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)
- uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: true
  name: Equals(Object, IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.Equals(System.Object, System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
    name: Equals
    fullName: System.Collections.IStructuralEquatable.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  nameWithType: IStructuralEquatable.Equals(Object, IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: false
  name: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
  nameWithType: IEqualityComparer
  commentId: T:System.Collections.IEqualityComparer
- uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  parent: System.Collections.IStructuralEquatable
  isExternal: false
  name: GetHashCode(IEqualityComparer)
  fullName: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
  spec.csharp:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
    name: GetHashCode
    fullName: System.Collections.IStructuralEquatable.GetHashCode
  - name: (
    fullName: (
  - uid: System.Collections.IEqualityComparer
    name: IEqualityComparer
    fullName: System.Collections.IEqualityComparer
  - name: )
    fullName: )
  nameWithType: IStructuralEquatable.GetHashCode(IEqualityComparer)
  commentId: M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
  nameWithType: OverflowException
  commentId: T:System.OverflowException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.RankException
  isExternal: false
  name: RankException
  fullName: System.RankException
  nameWithType: RankException
  commentId: T:System.RankException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
- uid: System.ArrayTypeMismatchException
  isExternal: false
  name: ArrayTypeMismatchException
  fullName: System.ArrayTypeMismatchException
  nameWithType: ArrayTypeMismatchException
  commentId: T:System.ArrayTypeMismatchException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
  nameWithType: InvalidCastException
  commentId: T:System.InvalidCastException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
  nameWithType: NullReferenceException
  commentId: T:System.NullReferenceException
