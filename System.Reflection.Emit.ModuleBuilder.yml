### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.ModuleBuilder
  commentId: T:System.Reflection.Emit.ModuleBuilder
  id: ModuleBuilder
  parent: System.Reflection.Emit
  children:
  - System.Reflection.Emit.ModuleBuilder.Assembly
  - System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  - System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  - System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  - System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  - System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  - System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  - System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  - System.Reflection.Emit.ModuleBuilder.GetHashCode
  - System.Reflection.Emit.ModuleBuilder.Name
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  - System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  langs:
  - csharp
  - vb
  name: ModuleBuilder
  nameWithType: ModuleBuilder
  fullName: System.Reflection.Emit.ModuleBuilder
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ModuleBuilder
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 52
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines and represents a module in a dynamic assembly.</p>\n"
  syntax:
    content: >-
      [HostProtection(MayLeakOnAbort = true)]

      [ClassInterface(ClassInterfaceType.None)]

      [ComDefaultInterface(typeof (_ModuleBuilder))]

      [ComVisible(true)]

      public class ModuleBuilder : Module, _Module, ISerializable, ICustomAttributeProvider, _ModuleBuilder
    content.vb: >-
      <HostProtection(MayLeakOnAbort:=True)>

      <ClassInterface(ClassInterfaceType.None)>

      <ComDefaultInterface(GetType(_ModuleBuilder))>

      <ComVisible(True)>

      Public Class ModuleBuilder
          Inherits
           Module  Implements _Module, ISerializable, ICustomAttributeProvider, _ModuleBuilder
  inheritance:
  - System.Object
  - System.Reflection.Module
  implements:
  - System.Runtime.InteropServices._Module
  - System.Runtime.Serialization.ISerializable
  - System.Reflection.ICustomAttributeProvider
  inheritedMembers:
  - System.Reflection.Module.FilterTypeName
  - System.Reflection.Module.FilterTypeNameIgnoreCase
  - System.Reflection.Module.ToString
  - System.Reflection.Module.GetCustomAttributes(System.Boolean)
  - System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  - System.Reflection.Module.GetCustomAttributesData
  - System.Reflection.Module.ResolveMethod(System.Int32)
  - System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveField(System.Int32)
  - System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveType(System.Int32)
  - System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveMember(System.Int32)
  - System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  - System.Reflection.Module.ResolveSignature(System.Int32)
  - System.Reflection.Module.ResolveString(System.Int32)
  - System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  - System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Reflection.Module.GetType(System.String,System.Boolean)
  - System.Reflection.Module.GetType(System.String)
  - System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  - System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  - System.Reflection.Module.GetTypes
  - System.Reflection.Module.IsResource
  - System.Reflection.Module.GetFields
  - System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.Module.GetField(System.String)
  - System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.Module.GetMethods
  - System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetMethod(System.String,System.Type[])
  - System.Reflection.Module.GetMethod(System.String)
  - System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Module.GetSignerCertificate
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  - System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  - System.Reflection.Module.CustomAttributes
  - System.Reflection.Module.MDStreamVersion
  - System.Reflection.Module.ModuleVersionId
  - System.Reflection.Module.MetadataToken
  - System.Reflection.Module.ScopeName
  - System.Reflection.Module.ModuleHandle
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Reflection.Module.System.Reflection.ModuleExtensions.HasModuleVersionId
  - System.Reflection.Module.System.Reflection.ModuleExtensions.GetModuleVersionId
  - System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
  - System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
  - System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
  - System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
  - System.Reflection.Module.System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Reflection.Emit.ModuleBuilder.Assembly
  commentId: P:System.Reflection.Emit.ModuleBuilder.Assembly
  id: Assembly
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: ModuleBuilder.Assembly
  fullName: System.Reflection.Emit.ModuleBuilder.Assembly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assembly
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1078
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets the dynamic assembly that defined this instance of <xref href=\"System.Reflection.Emit.ModuleBuilder\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override Assembly Assembly { get; }
    content.vb: Public Overrides ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
      description: "\n<p>The dynamic assembly that defined the current dynamic module.</p>\n"
  overridden: System.Reflection.Module.Assembly
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  commentId: P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  id: FullyQualifiedName
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: FullyQualifiedName
  nameWithType: ModuleBuilder.FullyQualifiedName
  fullName: System.Reflection.Emit.ModuleBuilder.FullyQualifiedName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullyQualifiedName
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 949
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Gets a <strong>String</strong> representing the fully qualified name and path to this module.</p>\n"
  syntax:
    content: >-
      public override string FullyQualifiedName

      {
          [SecurityCritical]
          get;
      }
    content.vb: Public Overrides ReadOnly Property FullyQualifiedName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The fully qualified module name.</p>\n"
  overridden: System.Reflection.Module.FullyQualifiedName
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.Name
  commentId: P:System.Reflection.Emit.ModuleBuilder.Name
  id: Name
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: ModuleBuilder.Name
  fullName: System.Reflection.Emit.ModuleBuilder.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1070
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>A string that indicates that this is an in-memory module.</p>\n"
  syntax:
    content: public override string Name { get; }
    content.vb: Public Overrides ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Text that indicates that this is an in-memory module.</p>\n"
  overridden: System.Reflection.Module.Name
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  commentId: M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions
  id: CreateGlobalFunctions
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: CreateGlobalFunctions()
  nameWithType: ModuleBuilder.CreateGlobalFunctions()
  fullName: System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateGlobalFunctions
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1527
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Completes the global function definitions and global data definitions for this dynamic module.</p>\n"
  syntax:
    content: public void CreateGlobalFunctions()
    content.vb: Public Sub CreateGlobalFunctions
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This method was called previously. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineEnum(String, TypeAttributes, Type)
  nameWithType: ModuleBuilder.DefineEnum(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineEnum
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1213
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines an enumeration type that is a value type with a single non-static field called <em>value__</em> of the specified type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public EnumBuilder DefineEnum(string name, TypeAttributes visibility, Type underlyingType)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineEnum(name As String, visibility As TypeAttributes, underlyingType As Type) As EnumBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the enumeration type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: visibility
      type: System.Reflection.TypeAttributes
      description: "\n<p>The type attributes for the enumeration. The attributes are any bits defined by <xref href=\"System.Reflection.TypeAttributes.VisibilityMask\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: underlyingType
      type: System.Type
      description: "\n<p>The underlying type for the enumeration. This must be a built-in integer type. </p>\n"
    return:
      type: System.Reflection.Emit.EnumBuilder
      description: "\n<p>The defined enumeration.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Attributes other than visibility attributes are provided.</p>\n<p>-or- </p>\n<p>An enumeration with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>The visibility attributes do not match the scope of the enumeration. For example, <xref href=\"System.Reflection.TypeAttributes.NestedPublic\" data-throw-if-not-resolved=\"false\"></xref> is specified for <em>visibility</em>, but the enumeration is not a nested type. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGlobalMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1427
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.</p>\n"
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the method. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: "\n<p>The attributes of the method. <em>attributes</em> must include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: "\n<p>The calling convention for the method. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method. </p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the method's parameters. </p>\n"
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: "\n<p>The defined global method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is not static. That is, <em>attributes</em> does not include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>An element in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  nameWithType.vb: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type())
  name.vb: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type[], Type[], Type[], Type[][], Type[][])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type[], System.Type[], System.Type[], System.Type[][], System.Type[][])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGlobalMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1435
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.</p>\n"
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, CallingConventions callingConvention, Type returnType, Type[] requiredReturnTypeCustomModifiers, Type[] optionalReturnTypeCustomModifiers, Type[] parameterTypes, Type[][] requiredParameterTypeCustomModifiers, Type[][] optionalParameterTypeCustomModifiers)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, callingConvention As CallingConventions, returnType As Type, requiredReturnTypeCustomModifiers As Type(), optionalReturnTypeCustomModifiers As Type(), parameterTypes As Type(), requiredParameterTypeCustomModifiers As Type()(), optionalParameterTypeCustomModifiers As Type()()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the method. <em>name</em> cannot contain embedded null characters. </p>\n"
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: "\n<p>The attributes of the method. <em>attributes</em> must include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: "\n<p>The calling convention for the method. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method. </p>\n"
    - id: requiredReturnTypeCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the required custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the return type has no required custom modifiers, specify <strong>null</strong>. </p>\n"
    - id: optionalReturnTypeCustomModifiers
      type: System.Type[]
      description: "\n<p>An array of types representing the optional custom modifiers for the return type, such as <xref href=\"System.Runtime.CompilerServices.IsConst\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Runtime.CompilerServices.IsBoxed\" data-throw-if-not-resolved=\"false\"></xref>. If the return type has no optional custom modifiers, specify <strong>null</strong>. </p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the method's parameters. </p>\n"
    - id: requiredParameterTypeCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify <strong>null</strong> instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    - id: optionalParameterTypeCustomModifiers
      type: System.Type[][]
      description: "\n<p>An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify <strong>null</strong> instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify <strong>null</strong> instead of an array of arrays.</p>\n"
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: "\n<p>The defined global method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is not static. That is, <em>attributes</em> does not include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or-</p>\n<p>An element in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> method has been previously called. </p>\n"
  nameWithType.vb: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Reflection.CallingConventions, System.Type, System.Type(), System.Type(), System.Type(), System.Type()(), System.Type()())
  name.vb: DefineGlobalMethod(String, MethodAttributes, CallingConventions, Type, Type(), Type(), Type(), Type()(), Type()())
- uid: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  id: DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineGlobalMethod(String, MethodAttributes, Type, Type[])
  nameWithType: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineGlobalMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1420
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines a global method with the specified name, attributes, return type, and parameter types.</p>\n"
  syntax:
    content: public MethodBuilder DefineGlobalMethod(string name, MethodAttributes attributes, Type returnType, Type[] parameterTypes)
    content.vb: Public Function DefineGlobalMethod(name As String, attributes As MethodAttributes, returnType As Type, parameterTypes As Type()) As MethodBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the method. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attributes
      type: System.Reflection.MethodAttributes
      description: "\n<p>The attributes of the method. <em>attributes</em> must include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method. </p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the method's parameters. </p>\n"
    return:
      type: System.Reflection.Emit.MethodBuilder
      description: "\n<p>The defined global method.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The method is not static. That is, <em>attributes</em> does not include <xref href=\"System.Reflection.MethodAttributes.Static\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The length of <em>name</em> is zero </p>\n<p>-or-</p>\n<p>An element in the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> array is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  nameWithType.vb: ModuleBuilder.DefineGlobalMethod(String, MethodAttributes, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String, System.Reflection.MethodAttributes, System.Type, System.Type())
  name.vb: DefineGlobalMethod(String, MethodAttributes, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  id: DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineInitializedData(String, Byte[], FieldAttributes)
  nameWithType: ModuleBuilder.DefineInitializedData(String, Byte[], FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String, System.Byte[], System.Reflection.FieldAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineInitializedData
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1551
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines an initialized data field in the .sdata section of the portable executable (PE) file.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public FieldBuilder DefineInitializedData(string name, byte[] data, FieldAttributes attributes)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineInitializedData(name As String, data As Byte(), attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name used to refer to the data. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: data
      type: System.Byte[]
      description: "\n<p>The binary large object (BLOB) of data. </p>\n"
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: "\n<p>The attributes for the field. The default is <strong>Static</strong>. </p>\n"
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: "\n<p>A field to reference the data.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>name</em> is zero.</p>\n<p>-or- </p>\n<p>The size of <em>data</em> is less than or equal to zero or greater than or equal to 0x3f0000. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> or <em>data</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  nameWithType.vb: ModuleBuilder.DefineInitializedData(String, Byte(), FieldAttributes)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String, System.Byte(), System.Reflection.FieldAttributes)
  name.vb: DefineInitializedData(String, Byte(), FieldAttributes)
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  id: DefineType(System.String)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String)
  nameWithType: ModuleBuilder.DefineType(String)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1098
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> for a private type with the specified name in this module.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TypeBuilder DefineType(string name)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineType(name As String) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type, including the namespace. <em>name</em> cannot contain embedded nulls. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A private type with the specified name.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)
  id: DefineType(System.String,System.Reflection.TypeAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1109
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name and the type attributes.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineType(name As String, attr As TypeAttributes) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attr
      type: System.Reflection.TypeAttributes
      description: "\n<p>The attributes of the defined type. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A <strong>TypeBuilder</strong> created with all of the requested attributes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1120
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given type name, its attributes, and the type that the defined type extends.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attr
      type: System.Reflection.TypeAttributes
      description: "\n<p>The attribute to be associated with the type. </p>\n"
    - id: parent
      type: System.Type
      description: "\n<p>The type that the defined type extends. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A <strong>TypeBuilder</strong> created with all of the requested attributes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, Int32)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1135
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, the attributes, the type that the defined type extends, and the total size of the type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, int typesize)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, typesize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attr
      type: System.Reflection.TypeAttributes
      description: "\n<p>The attributes of the defined type. </p>\n"
    - id: parent
      type: System.Type
      description: "\n<p>The type that the defined type extends. </p>\n"
    - id: typesize
      type: System.Int32
      description: "\n<p>The total size of the type. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A <strong>TypeBuilder</strong> object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, PackingSize)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, PackingSize)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1185
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, the attributes, the type that the defined type extends, and the packing size of the type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packsize)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, packsize As PackingSize) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attr
      type: System.Reflection.TypeAttributes
      description: "\n<p>The attributes of the defined type. </p>\n"
    - id: parent
      type: System.Type
      description: "\n<p>The type that the defined type extends. </p>\n"
    - id: packsize
      type: System.Reflection.Emit.PackingSize
      description: "\n<p>The packing size of the type. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A <strong>TypeBuilder</strong> object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, PackingSize, Int32)
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, PackingSize, Int32)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Reflection.Emit.PackingSize, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1150
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, PackingSize packingSize, int typesize)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, packingSize As PackingSize, typesize As Integer) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attr
      type: System.Reflection.TypeAttributes
      description: "\n<p>The attributes of the defined type. </p>\n"
    - id: parent
      type: System.Type
      description: "\n<p>The type that the defined type extends. </p>\n"
    - id: packingSize
      type: System.Reflection.Emit.PackingSize
      description: "\n<p>The packing size of the type. </p>\n"
    - id: typesize
      type: System.Int32
      description: "\n<p>The total size of the type. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A <strong>TypeBuilder</strong> created with all of the requested attributes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  id: DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineType(String, TypeAttributes, Type, Type[])
  nameWithType: ModuleBuilder.DefineType(String, TypeAttributes, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineType
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1164
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Constructs a <strong>TypeBuilder</strong> given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ComVisible(true)]

      public TypeBuilder DefineType(string name, TypeAttributes attr, Type parent, Type[] interfaces)
    content.vb: >-
      <SecuritySafeCritical>

      <ComVisible(True)>

      Public Function DefineType(name As String, attr As TypeAttributes, parent As Type, interfaces As Type()) As TypeBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The full path of the type. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: attr
      type: System.Reflection.TypeAttributes
      description: "\n<p>The attributes to be associated with the type. </p>\n"
    - id: parent
      type: System.Type
      description: "\n<p>The type that the defined type extends. </p>\n"
    - id: interfaces
      type: System.Type[]
      description: "\n<p>The list of interfaces that the type implements. </p>\n"
    return:
      type: System.Reflection.Emit.TypeBuilder
      description: "\n<p>A <strong>TypeBuilder</strong> created with all of the requested attributes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>A type with the given name exists in the parent assembly of this module.</p>\n<p>-or- </p>\n<p>Nested type attributes are set on a type that is not nested. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: ModuleBuilder.DefineType(String, TypeAttributes, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.DefineType(System.String, System.Reflection.TypeAttributes, System.Type, System.Type())
  name.vb: DefineType(String, TypeAttributes, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  commentId: M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  id: DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: DefineUninitializedData(String, Int32, FieldAttributes)
  nameWithType: ModuleBuilder.DefineUninitializedData(String, Int32, FieldAttributes)
  fullName: System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String, System.Int32, System.Reflection.FieldAttributes)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DefineUninitializedData
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 1586
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public FieldBuilder DefineUninitializedData(string name, int size, FieldAttributes attributes)
    content.vb: >-
      <SecurityCritical>

      Public Function DefineUninitializedData(name As String, size As Integer, attributes As FieldAttributes) As FieldBuilder
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name used to refer to the data. <em>name</em> cannot contain embedded nulls. </p>\n"
    - id: size
      type: System.Int32
      description: "\n<p>The size of the data field. </p>\n"
    - id: attributes
      type: System.Reflection.FieldAttributes
      description: "\n<p>The attributes for the field. </p>\n"
    return:
      type: System.Reflection.Emit.FieldBuilder
      description: "\n<p>A field to reference the data.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The length of <em>name</em> is zero.</p>\n<p>-or- </p>\n<p>\n<em>size</em> is less than or equal to zero, or greater than or equal to 0x003f0000. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions\" data-throw-if-not-resolved=\"false\"></xref> has been previously called. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  commentId: M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: ModuleBuilder.Equals(Object)
  fullName: System.Reflection.Emit.ModuleBuilder.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 763
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns a value that indicates whether this instance is equal to the specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> equals the type and value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Reflection.Module.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  id: GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: GetArrayMethod(Type, String, CallingConventions, Type, Type[])
  nameWithType: ModuleBuilder.GetArrayMethod(Type, String, CallingConventions, Type, Type[])
  fullName: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArrayMethod
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 2037
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the named method on an array class.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public MethodInfo GetArrayMethod(Type arrayClass, string methodName, CallingConventions callingConvention, Type returnType, Type[] parameterTypes)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetArrayMethod(arrayClass As Type, methodName As String, callingConvention As CallingConventions, returnType As Type, parameterTypes As Type()) As MethodInfo
    parameters:
    - id: arrayClass
      type: System.Type
      description: "\n<p>An array class. </p>\n"
    - id: methodName
      type: System.String
      description: "\n<p>The name of a method on the array class. </p>\n"
    - id: callingConvention
      type: System.Reflection.CallingConventions
      description: "\n<p>The method's calling convention. </p>\n"
    - id: returnType
      type: System.Type
      description: "\n<p>The return type of the method. </p>\n"
    - id: parameterTypes
      type: System.Type[]
      description: "\n<p>The types of the method's parameters. </p>\n"
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>The named method on an array class.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>arrayClass</em> is not an array. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>arrayClass</em> or <em>methodName</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: ModuleBuilder.GetArrayMethod(Type, String, CallingConventions, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type, System.String, System.Reflection.CallingConventions, System.Type, System.Type())
  name.vb: GetArrayMethod(Type, String, CallingConventions, Type, Type())
- uid: System.Reflection.Emit.ModuleBuilder.GetHashCode
  commentId: M:System.Reflection.Emit.ModuleBuilder.GetHashCode
  id: GetHashCode
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: ModuleBuilder.GetHashCode()
  fullName: System.Reflection.Emit.ModuleBuilder.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 768
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Reflection.Module.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  commentId: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  id: SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(ConstructorInfo, Byte[])
  nameWithType: ModuleBuilder.SetCustomAttribute(ConstructorInfo, Byte[])
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 2211
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ComVisible(true)]

      public void SetCustomAttribute(ConstructorInfo con, byte[] binaryAttribute)
    content.vb: >-
      <SecurityCritical>

      <ComVisible(True)>

      Public Sub SetCustomAttribute(con As ConstructorInfo, binaryAttribute As Byte())
    parameters:
    - id: con
      type: System.Reflection.ConstructorInfo
      description: "\n<p>The constructor for the custom attribute. </p>\n"
    - id: binaryAttribute
      type: System.Byte[]
      description: "\n<p>A byte BLOB representing the attribute. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>con</em> or <em>binaryAttribute</em> is <strong>null</strong>. </p>\n"
  nameWithType.vb: ModuleBuilder.SetCustomAttribute(ConstructorInfo, Byte())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo, System.Byte())
  name.vb: SetCustomAttribute(ConstructorInfo, Byte())
- uid: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  commentId: M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  id: SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  parent: System.Reflection.Emit.ModuleBuilder
  langs:
  - csharp
  - vb
  name: SetCustomAttribute(CustomAttributeBuilder)
  nameWithType: ModuleBuilder.SetCustomAttribute(CustomAttributeBuilder)
  fullName: System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCustomAttribute
    path: src/mscorlib/src/System/Reflection/Emit/ModuleBuilder.cs
    startLine: 2232
  assemblies:
  - System.Reflection.Emit
  namespace: System.Reflection.Emit
  summary: "\n<p>Applies a custom attribute to this module by using a custom attribute builder.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetCustomAttribute(CustomAttributeBuilder customBuilder)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetCustomAttribute(customBuilder As CustomAttributeBuilder)
    parameters:
    - id: customBuilder
      type: System.Reflection.Emit.CustomAttributeBuilder
      description: "\n<p>An instance of a helper class that specifies the custom attribute to apply. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>customBuilder</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Reflection.Emit
  commentId: N:System.Reflection.Emit
  isExternal: false
  name: System.Reflection.Emit
  nameWithType: System.Reflection.Emit
  fullName: System.Reflection.Emit
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.Module
  commentId: T:System.Reflection.Module
  parent: System.Reflection
  isExternal: false
  name: Module
  nameWithType: Module
  fullName: System.Reflection.Module
- uid: System.Runtime.InteropServices._Module
  commentId: T:System.Runtime.InteropServices._Module
  parent: System.Runtime.InteropServices
  isExternal: true
  name: _Module
  nameWithType: _Module
  fullName: System.Runtime.InteropServices._Module
- uid: System.Runtime.Serialization.ISerializable
  commentId: T:System.Runtime.Serialization.ISerializable
  parent: System.Runtime.Serialization
  isExternal: false
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
- uid: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.Module.FilterTypeName
  commentId: F:System.Reflection.Module.FilterTypeName
  parent: System.Reflection.Module
  isExternal: true
  name: FilterTypeName
  nameWithType: Module.FilterTypeName
  fullName: System.Reflection.Module.FilterTypeName
- uid: System.Reflection.Module.FilterTypeNameIgnoreCase
  commentId: F:System.Reflection.Module.FilterTypeNameIgnoreCase
  parent: System.Reflection.Module
  isExternal: true
  name: FilterTypeNameIgnoreCase
  nameWithType: Module.FilterTypeNameIgnoreCase
  fullName: System.Reflection.Module.FilterTypeNameIgnoreCase
- uid: System.Reflection.Module.ToString
  commentId: M:System.Reflection.Module.ToString
  parent: System.Reflection.Module
  isExternal: true
  name: ToString()
  nameWithType: Module.ToString()
  fullName: System.Reflection.Module.ToString()
  spec.csharp:
  - uid: System.Reflection.Module.ToString
    name: ToString
    nameWithType: Module.ToString
    fullName: System.Reflection.Module.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ToString
    name: ToString
    nameWithType: Module.ToString
    fullName: System.Reflection.Module.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.Module.GetCustomAttributes(System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetCustomAttributes(Boolean)
  nameWithType: Module.GetCustomAttributes(Boolean)
  fullName: System.Reflection.Module.GetCustomAttributes(System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    nameWithType: Module.GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Boolean)
    name: GetCustomAttributes
    nameWithType: Module.GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetCustomAttributes(Type, Boolean)
  nameWithType: Module.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.Module.GetCustomAttributes(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Module.GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetCustomAttributes(System.Type,System.Boolean)
    name: GetCustomAttributes
    nameWithType: Module.GetCustomAttributes
    fullName: System.Reflection.Module.GetCustomAttributes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.Module.IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: IsDefined(Type, Boolean)
  nameWithType: Module.IsDefined(Type, Boolean)
  fullName: System.Reflection.Module.IsDefined(System.Type, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Module.IsDefined
    fullName: System.Reflection.Module.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.IsDefined(System.Type,System.Boolean)
    name: IsDefined
    nameWithType: Module.IsDefined
    fullName: System.Reflection.Module.IsDefined
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetCustomAttributesData
  commentId: M:System.Reflection.Module.GetCustomAttributesData
  parent: System.Reflection.Module
  isExternal: true
  name: GetCustomAttributesData()
  nameWithType: Module.GetCustomAttributesData()
  fullName: System.Reflection.Module.GetCustomAttributesData()
  spec.csharp:
  - uid: System.Reflection.Module.GetCustomAttributesData
    name: GetCustomAttributesData
    nameWithType: Module.GetCustomAttributesData
    fullName: System.Reflection.Module.GetCustomAttributesData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetCustomAttributesData
    name: GetCustomAttributesData
    nameWithType: Module.GetCustomAttributesData
    fullName: System.Reflection.Module.GetCustomAttributesData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveMethod(System.Int32)
  commentId: M:System.Reflection.Module.ResolveMethod(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMethod(Int32)
  nameWithType: Module.ResolveMethod(Int32)
  fullName: System.Reflection.Module.ResolveMethod(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32)
    name: ResolveMethod
    nameWithType: Module.ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32)
    name: ResolveMethod
    nameWithType: Module.ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMethod(Int32, Type[], Type[])
  nameWithType: Module.ResolveMethod(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveMethod(System.Int32, System.Type[], System.Type[])
  nameWithType.vb: Module.ResolveMethod(Int32, Type(), Type())
  fullname.vb: System.Reflection.Module.ResolveMethod(System.Int32, System.Type(), System.Type())
  name.vb: ResolveMethod(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
    name: ResolveMethod
    nameWithType: Module.ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])
    name: ResolveMethod
    nameWithType: Module.ResolveMethod
    fullName: System.Reflection.Module.ResolveMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveField(System.Int32)
  commentId: M:System.Reflection.Module.ResolveField(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveField(Int32)
  nameWithType: Module.ResolveField(Int32)
  fullName: System.Reflection.Module.ResolveField(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveField(System.Int32)
    name: ResolveField
    nameWithType: Module.ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveField(System.Int32)
    name: ResolveField
    nameWithType: Module.ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveField(Int32, Type[], Type[])
  nameWithType: Module.ResolveField(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveField(System.Int32, System.Type[], System.Type[])
  nameWithType.vb: Module.ResolveField(Int32, Type(), Type())
  fullname.vb: System.Reflection.Module.ResolveField(System.Int32, System.Type(), System.Type())
  name.vb: ResolveField(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
    name: ResolveField
    nameWithType: Module.ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveField(System.Int32,System.Type[],System.Type[])
    name: ResolveField
    nameWithType: Module.ResolveField
    fullName: System.Reflection.Module.ResolveField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveType(System.Int32)
  commentId: M:System.Reflection.Module.ResolveType(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveType(Int32)
  nameWithType: Module.ResolveType(Int32)
  fullName: System.Reflection.Module.ResolveType(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveType(System.Int32)
    name: ResolveType
    nameWithType: Module.ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveType(System.Int32)
    name: ResolveType
    nameWithType: Module.ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveType(Int32, Type[], Type[])
  nameWithType: Module.ResolveType(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveType(System.Int32, System.Type[], System.Type[])
  nameWithType.vb: Module.ResolveType(Int32, Type(), Type())
  fullname.vb: System.Reflection.Module.ResolveType(System.Int32, System.Type(), System.Type())
  name.vb: ResolveType(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
    name: ResolveType
    nameWithType: Module.ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])
    name: ResolveType
    nameWithType: Module.ResolveType
    fullName: System.Reflection.Module.ResolveType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveMember(System.Int32)
  commentId: M:System.Reflection.Module.ResolveMember(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMember(Int32)
  nameWithType: Module.ResolveMember(Int32)
  fullName: System.Reflection.Module.ResolveMember(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMember(System.Int32)
    name: ResolveMember
    nameWithType: Module.ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMember(System.Int32)
    name: ResolveMember
    nameWithType: Module.ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  commentId: M:System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveMember(Int32, Type[], Type[])
  nameWithType: Module.ResolveMember(Int32, Type[], Type[])
  fullName: System.Reflection.Module.ResolveMember(System.Int32, System.Type[], System.Type[])
  nameWithType.vb: Module.ResolveMember(Int32, Type(), Type())
  fullname.vb: System.Reflection.Module.ResolveMember(System.Int32, System.Type(), System.Type())
  name.vb: ResolveMember(Int32, Type(), Type())
  spec.csharp:
  - uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
    name: ResolveMember
    nameWithType: Module.ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveMember(System.Int32,System.Type[],System.Type[])
    name: ResolveMember
    nameWithType: Module.ResolveMember
    fullName: System.Reflection.Module.ResolveMember
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveSignature(System.Int32)
  commentId: M:System.Reflection.Module.ResolveSignature(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveSignature(Int32)
  nameWithType: Module.ResolveSignature(Int32)
  fullName: System.Reflection.Module.ResolveSignature(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveSignature(System.Int32)
    name: ResolveSignature
    nameWithType: Module.ResolveSignature
    fullName: System.Reflection.Module.ResolveSignature
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveSignature(System.Int32)
    name: ResolveSignature
    nameWithType: Module.ResolveSignature
    fullName: System.Reflection.Module.ResolveSignature
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.ResolveString(System.Int32)
  commentId: M:System.Reflection.Module.ResolveString(System.Int32)
  parent: System.Reflection.Module
  isExternal: true
  name: ResolveString(Int32)
  nameWithType: Module.ResolveString(Int32)
  fullName: System.Reflection.Module.ResolveString(System.Int32)
  spec.csharp:
  - uid: System.Reflection.Module.ResolveString(System.Int32)
    name: ResolveString
    nameWithType: Module.ResolveString
    fullName: System.Reflection.Module.ResolveString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.ResolveString(System.Int32)
    name: ResolveString
    nameWithType: Module.ResolveString
    fullName: System.Reflection.Module.ResolveString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  commentId: M:System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
  parent: System.Reflection.Module
  isExternal: true
  name: GetPEKind(PortableExecutableKinds, ImageFileMachine)
  nameWithType: Module.GetPEKind(PortableExecutableKinds, ImageFileMachine)
  fullName: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds, System.Reflection.ImageFileMachine)
  spec.csharp:
  - uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    name: GetPEKind
    nameWithType: Module.GetPEKind
    fullName: System.Reflection.Module.GetPEKind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.PortableExecutableKinds
    name: PortableExecutableKinds
    nameWithType: PortableExecutableKinds
    fullName: System.Reflection.PortableExecutableKinds
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.ImageFileMachine
    name: ImageFileMachine
    nameWithType: ImageFileMachine
    fullName: System.Reflection.ImageFileMachine
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)
    name: GetPEKind
    nameWithType: Module.GetPEKind
    fullName: System.Reflection.Module.GetPEKind
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.PortableExecutableKinds
    name: PortableExecutableKinds
    nameWithType: PortableExecutableKinds
    fullName: System.Reflection.PortableExecutableKinds
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.ImageFileMachine
    name: ImageFileMachine
    nameWithType: ImageFileMachine
    fullName: System.Reflection.ImageFileMachine
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  commentId: M:System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Reflection.Module
  isExternal: true
  name: GetObjectData(SerializationInfo, StreamingContext)
  nameWithType: Module.GetObjectData(SerializationInfo, StreamingContext)
  fullName: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext)
  spec.csharp:
  - uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Module.GetObjectData
    fullName: System.Reflection.Module.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
    name: GetObjectData
    nameWithType: Module.GetObjectData
    fullName: System.Reflection.Module.GetObjectData
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Runtime.Serialization.SerializationInfo
    name: SerializationInfo
    nameWithType: SerializationInfo
    fullName: System.Runtime.Serialization.SerializationInfo
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.StreamingContext
    name: StreamingContext
    nameWithType: StreamingContext
    fullName: System.Runtime.Serialization.StreamingContext
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetType(System.String,System.Boolean)
  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetType(String, Boolean)
  nameWithType: Module.GetType(String, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean)
    name: GetType
    nameWithType: Module.GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean)
    name: GetType
    nameWithType: Module.GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetType(System.String)
  commentId: M:System.Reflection.Module.GetType(System.String)
  parent: System.Reflection.Module
  isExternal: true
  name: GetType(String)
  nameWithType: Module.GetType(String)
  fullName: System.Reflection.Module.GetType(System.String)
  spec.csharp:
  - uid: System.Reflection.Module.GetType(System.String)
    name: GetType
    nameWithType: Module.GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetType(System.String)
    name: GetType
    nameWithType: Module.GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  commentId: M:System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
  parent: System.Reflection.Module
  isExternal: true
  name: GetType(String, Boolean, Boolean)
  nameWithType: Module.GetType(String, Boolean, Boolean)
  fullName: System.Reflection.Module.GetType(System.String, System.Boolean, System.Boolean)
  spec.csharp:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
    name: GetType
    nameWithType: Module.GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetType(System.String,System.Boolean,System.Boolean)
    name: GetType
    nameWithType: Module.GetType
    fullName: System.Reflection.Module.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  commentId: M:System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
  parent: System.Reflection.Module
  isExternal: true
  name: FindTypes(TypeFilter, Object)
  nameWithType: Module.FindTypes(TypeFilter, Object)
  fullName: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter, System.Object)
  spec.csharp:
  - uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
    name: FindTypes
    nameWithType: Module.FindTypes
    fullName: System.Reflection.Module.FindTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.TypeFilter
    name: TypeFilter
    nameWithType: TypeFilter
    fullName: System.Reflection.TypeFilter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.FindTypes(System.Reflection.TypeFilter,System.Object)
    name: FindTypes
    nameWithType: Module.FindTypes
    fullName: System.Reflection.Module.FindTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.TypeFilter
    name: TypeFilter
    nameWithType: TypeFilter
    fullName: System.Reflection.TypeFilter
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetTypes
  commentId: M:System.Reflection.Module.GetTypes
  parent: System.Reflection.Module
  isExternal: true
  name: GetTypes()
  nameWithType: Module.GetTypes()
  fullName: System.Reflection.Module.GetTypes()
  spec.csharp:
  - uid: System.Reflection.Module.GetTypes
    name: GetTypes
    nameWithType: Module.GetTypes
    fullName: System.Reflection.Module.GetTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetTypes
    name: GetTypes
    nameWithType: Module.GetTypes
    fullName: System.Reflection.Module.GetTypes
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.IsResource
  commentId: M:System.Reflection.Module.IsResource
  parent: System.Reflection.Module
  isExternal: true
  name: IsResource()
  nameWithType: Module.IsResource()
  fullName: System.Reflection.Module.IsResource()
  spec.csharp:
  - uid: System.Reflection.Module.IsResource
    name: IsResource
    nameWithType: Module.IsResource
    fullName: System.Reflection.Module.IsResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.IsResource
    name: IsResource
    nameWithType: Module.IsResource
    fullName: System.Reflection.Module.IsResource
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetFields
  commentId: M:System.Reflection.Module.GetFields
  parent: System.Reflection.Module
  isExternal: true
  name: GetFields()
  nameWithType: Module.GetFields()
  fullName: System.Reflection.Module.GetFields()
  spec.csharp:
  - uid: System.Reflection.Module.GetFields
    name: GetFields
    nameWithType: Module.GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetFields
    name: GetFields
    nameWithType: Module.GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: true
  name: GetFields(BindingFlags)
  nameWithType: Module.GetFields(BindingFlags)
  fullName: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
    name: GetFields
    nameWithType: Module.GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetFields(System.Reflection.BindingFlags)
    name: GetFields
    nameWithType: Module.GetFields
    fullName: System.Reflection.Module.GetFields
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetField(System.String)
  commentId: M:System.Reflection.Module.GetField(System.String)
  parent: System.Reflection.Module
  isExternal: true
  name: GetField(String)
  nameWithType: Module.GetField(String)
  fullName: System.Reflection.Module.GetField(System.String)
  spec.csharp:
  - uid: System.Reflection.Module.GetField(System.String)
    name: GetField
    nameWithType: Module.GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetField(System.String)
    name: GetField
    nameWithType: Module.GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: true
  name: GetField(String, BindingFlags)
  nameWithType: Module.GetField(String, BindingFlags)
  fullName: System.Reflection.Module.GetField(System.String, System.Reflection.BindingFlags)
  spec.csharp:
  - uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
    name: GetField
    nameWithType: Module.GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetField(System.String,System.Reflection.BindingFlags)
    name: GetField
    nameWithType: Module.GetField
    fullName: System.Reflection.Module.GetField
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetMethods
  commentId: M:System.Reflection.Module.GetMethods
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethods()
  nameWithType: Module.GetMethods()
  fullName: System.Reflection.Module.GetMethods()
  spec.csharp:
  - uid: System.Reflection.Module.GetMethods
    name: GetMethods
    nameWithType: Module.GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethods
    name: GetMethods
    nameWithType: Module.GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethods(BindingFlags)
  nameWithType: Module.GetMethods(BindingFlags)
  fullName: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
  spec.csharp:
  - uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
    name: GetMethods
    nameWithType: Module.GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethods(System.Reflection.BindingFlags)
    name: GetMethods
    nameWithType: Module.GetMethods
    fullName: System.Reflection.Module.GetMethods
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: System.Reflection.Module.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  nameWithType.vb: Module.GetMethod(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  fullname.vb: System.Reflection.Module.GetMethod(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  name.vb: GetMethod(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  spec.csharp:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethod
    nameWithType: Module.GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    nameWithType: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    nameWithType: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethod
    nameWithType: Module.GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    nameWithType: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    nameWithType: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
  commentId: M:System.Reflection.Module.GetMethod(System.String,System.Type[])
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethod(String, Type[])
  nameWithType: Module.GetMethod(String, Type[])
  fullName: System.Reflection.Module.GetMethod(System.String, System.Type[])
  nameWithType.vb: Module.GetMethod(String, Type())
  fullname.vb: System.Reflection.Module.GetMethod(System.String, System.Type())
  name.vb: GetMethod(String, Type())
  spec.csharp:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
    name: GetMethod
    nameWithType: Module.GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethod(System.String,System.Type[])
    name: GetMethod
    nameWithType: Module.GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetMethod(System.String)
  commentId: M:System.Reflection.Module.GetMethod(System.String)
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethod(String)
  nameWithType: Module.GetMethod(String)
  fullName: System.Reflection.Module.GetMethod(System.String)
  spec.csharp:
  - uid: System.Reflection.Module.GetMethod(System.String)
    name: GetMethod
    nameWithType: Module.GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethod(System.String)
    name: GetMethod
    nameWithType: Module.GetMethod
    fullName: System.Reflection.Module.GetMethod
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Module
  isExternal: true
  name: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  nameWithType: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type[], ParameterModifier[])
  fullName: System.Reflection.Module.GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type[], System.Reflection.ParameterModifier[])
  nameWithType.vb: Module.GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  fullname.vb: System.Reflection.Module.GetMethodImpl(System.String, System.Reflection.BindingFlags, System.Reflection.Binder, System.Reflection.CallingConventions, System.Type(), System.Reflection.ParameterModifier())
  name.vb: GetMethodImpl(String, BindingFlags, Binder, CallingConventions, Type(), ParameterModifier())
  spec.csharp:
  - uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethodImpl
    nameWithType: Module.GetMethodImpl
    fullName: System.Reflection.Module.GetMethodImpl
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    nameWithType: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    nameWithType: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetMethodImpl(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])
    name: GetMethodImpl
    nameWithType: Module.GetMethodImpl
    fullName: System.Reflection.Module.GetMethodImpl
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.BindingFlags
    name: BindingFlags
    nameWithType: BindingFlags
    fullName: System.Reflection.BindingFlags
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.Binder
    name: Binder
    nameWithType: Binder
    fullName: System.Reflection.Binder
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.CallingConventions
    name: CallingConventions
    nameWithType: CallingConventions
    fullName: System.Reflection.CallingConventions
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.GetSignerCertificate
  commentId: M:System.Reflection.Module.GetSignerCertificate
  parent: System.Reflection.Module
  isExternal: true
  name: GetSignerCertificate()
  nameWithType: Module.GetSignerCertificate()
  fullName: System.Reflection.Module.GetSignerCertificate()
  spec.csharp:
  - uid: System.Reflection.Module.GetSignerCertificate
    name: GetSignerCertificate
    nameWithType: Module.GetSignerCertificate
    fullName: System.Reflection.Module.GetSignerCertificate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetSignerCertificate
    name: GetSignerCertificate
    nameWithType: Module.GetSignerCertificate
    fullName: System.Reflection.Module.GetSignerCertificate
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.GetTypeInfoCount(UInt32)
  nameWithType: Module._Module.GetTypeInfoCount(UInt32)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount(System.UInt32)
  nameWithType.vb: Module.System.Runtime.InteropServices._Module.GetTypeInfoCount(UInt32)
  name.vb: System.Runtime.InteropServices._Module.GetTypeInfoCount(UInt32)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
    name: _Module.GetTypeInfoCount
    nameWithType: Module._Module.GetTypeInfoCount
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfoCount(System.UInt32@)
    name: System.Runtime.InteropServices._Module.GetTypeInfoCount
    nameWithType: Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfoCount
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  nameWithType: Module._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr)
  nameWithType.vb: Module.System.Runtime.InteropServices._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  name.vb: System.Runtime.InteropServices._Module.GetTypeInfo(UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: _Module.GetTypeInfo
    nameWithType: Module._Module.GetTypeInfo
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._Module.GetTypeInfo
    nameWithType: Module.System.Runtime.InteropServices._Module.GetTypeInfo
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetTypeInfo
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  nameWithType: Module._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr)
  nameWithType.vb: Module.System.Runtime.InteropServices._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  name.vb: System.Runtime.InteropServices._Module.GetIDsOfNames(Guid, IntPtr, UInt32, UInt32, IntPtr)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: _Module.GetIDsOfNames
    nameWithType: Module._Module.GetIDsOfNames
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)
    name: System.Runtime.InteropServices._Module.GetIDsOfNames
    nameWithType: Module.System.Runtime.InteropServices._Module.GetIDsOfNames
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.GetIDsOfNames
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  commentId: M:System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
  parent: System.Reflection.Module
  isExternal: true
  name: _Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  nameWithType: Module._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr)
  nameWithType.vb: Module.System.Runtime.InteropServices._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  name.vb: System.Runtime.InteropServices._Module.Invoke(UInt32, Guid, UInt32, Int16, IntPtr, IntPtr, IntPtr, IntPtr)
  spec.csharp:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: _Module.Invoke
    nameWithType: Module._Module.Invoke
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.System#Runtime#InteropServices#_Module#Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)
    name: System.Runtime.InteropServices._Module.Invoke
    nameWithType: Module.System.Runtime.InteropServices._Module.Invoke
    fullName: System.Reflection.Module.System.Runtime.InteropServices._Module.Invoke
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.CustomAttributes
  commentId: P:System.Reflection.Module.CustomAttributes
  parent: System.Reflection.Module
  isExternal: true
  name: CustomAttributes
  nameWithType: Module.CustomAttributes
  fullName: System.Reflection.Module.CustomAttributes
- uid: System.Reflection.Module.MDStreamVersion
  commentId: P:System.Reflection.Module.MDStreamVersion
  parent: System.Reflection.Module
  isExternal: true
  name: MDStreamVersion
  nameWithType: Module.MDStreamVersion
  fullName: System.Reflection.Module.MDStreamVersion
- uid: System.Reflection.Module.ModuleVersionId
  commentId: P:System.Reflection.Module.ModuleVersionId
  parent: System.Reflection.Module
  isExternal: true
  name: ModuleVersionId
  nameWithType: Module.ModuleVersionId
  fullName: System.Reflection.Module.ModuleVersionId
- uid: System.Reflection.Module.MetadataToken
  commentId: P:System.Reflection.Module.MetadataToken
  parent: System.Reflection.Module
  isExternal: true
  name: MetadataToken
  nameWithType: Module.MetadataToken
  fullName: System.Reflection.Module.MetadataToken
- uid: System.Reflection.Module.ScopeName
  commentId: P:System.Reflection.Module.ScopeName
  parent: System.Reflection.Module
  isExternal: true
  name: ScopeName
  nameWithType: Module.ScopeName
  fullName: System.Reflection.Module.ScopeName
- uid: System.Reflection.Module.ModuleHandle
  commentId: P:System.Reflection.Module.ModuleHandle
  parent: System.Reflection.Module
  isExternal: true
  name: ModuleHandle
  nameWithType: Module.ModuleHandle
  fullName: System.Reflection.Module.ModuleHandle
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.ModuleExtensions.HasModuleVersionId
  commentId: M:System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  parent: System.Reflection.ModuleExtensions
  definition: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  name: HasModuleVersionId()
  nameWithType: ModuleExtensions.HasModuleVersionId()
  fullName: System.Reflection.ModuleExtensions.HasModuleVersionId()
  spec.csharp:
  - uid: System.Reflection.ModuleExtensions.HasModuleVersionId
    name: HasModuleVersionId
    nameWithType: ModuleExtensions.HasModuleVersionId
    fullName: System.Reflection.ModuleExtensions.HasModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ModuleExtensions.HasModuleVersionId
    name: HasModuleVersionId
    nameWithType: ModuleExtensions.HasModuleVersionId
    fullName: System.Reflection.ModuleExtensions.HasModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.ModuleExtensions.GetModuleVersionId
  commentId: M:System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  parent: System.Reflection.ModuleExtensions
  definition: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  name: GetModuleVersionId()
  nameWithType: ModuleExtensions.GetModuleVersionId()
  fullName: System.Reflection.ModuleExtensions.GetModuleVersionId()
  spec.csharp:
  - uid: System.Reflection.ModuleExtensions.GetModuleVersionId
    name: GetModuleVersionId
    nameWithType: ModuleExtensions.GetModuleVersionId
    fullName: System.Reflection.ModuleExtensions.GetModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ModuleExtensions.GetModuleVersionId
    name: GetModuleVersionId
    nameWithType: ModuleExtensions.GetModuleVersionId
    fullName: System.Reflection.ModuleExtensions.GetModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  name: GetCustomAttribute(Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  name: GetCustomAttribute<T>()
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>()
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>()
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)()
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)()
  name.vb: GetCustomAttribute(Of T)()
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
    name: GetCustomAttribute<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1
    name: GetCustomAttribute(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttribute(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  name: GetCustomAttributes()
  nameWithType: CustomAttributeExtensions.GetCustomAttributes()
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes()
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  name: GetCustomAttributes(Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  name: GetCustomAttributes<T>()
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>()
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>()
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)()
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)()
  name.vb: GetCustomAttributes(Of T)()
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
    name: GetCustomAttributes<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1
    name: GetCustomAttributes(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttributes(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  parent: System.Reflection.CustomAttributeExtensions
  definition: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  name: IsDefined(Type)
  nameWithType: CustomAttributeExtensions.IsDefined(Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  commentId: M:System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  isExternal: true
  name: HasModuleVersionId(Module)
  nameWithType: ModuleExtensions.HasModuleVersionId(Module)
  fullName: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
  spec.csharp:
  - uid: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
    name: HasModuleVersionId
    nameWithType: ModuleExtensions.HasModuleVersionId
    fullName: System.Reflection.ModuleExtensions.HasModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ModuleExtensions.HasModuleVersionId(System.Reflection.Module)
    name: HasModuleVersionId
    nameWithType: ModuleExtensions.HasModuleVersionId
    fullName: System.Reflection.ModuleExtensions.HasModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.ModuleExtensions
  commentId: T:System.Reflection.ModuleExtensions
  parent: System.Reflection
  isExternal: false
  name: ModuleExtensions
  nameWithType: ModuleExtensions
  fullName: System.Reflection.ModuleExtensions
- uid: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  commentId: M:System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  isExternal: true
  name: GetModuleVersionId(Module)
  nameWithType: ModuleExtensions.GetModuleVersionId(Module)
  fullName: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
  spec.csharp:
  - uid: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
    name: GetModuleVersionId
    nameWithType: ModuleExtensions.GetModuleVersionId
    fullName: System.Reflection.ModuleExtensions.GetModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.ModuleExtensions.GetModuleVersionId(System.Reflection.Module)
    name: GetModuleVersionId
    nameWithType: ModuleExtensions.GetModuleVersionId
    fullName: System.Reflection.ModuleExtensions.GetModuleVersionId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
  isExternal: true
  name: GetCustomAttribute(Module, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute(Module, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module, System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(System.Reflection.Module,System.Type)
    name: GetCustomAttribute
    nameWithType: CustomAttributeExtensions.GetCustomAttribute
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions
  commentId: T:System.Reflection.CustomAttributeExtensions
  parent: System.Reflection
  isExternal: false
  name: CustomAttributeExtensions
  nameWithType: CustomAttributeExtensions
  fullName: System.Reflection.CustomAttributeExtensions
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
  isExternal: true
  name: GetCustomAttribute<T>(Module)
  nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>(Module)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>(System.Reflection.Module)
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttribute(Of T)(Module)
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)(System.Reflection.Module)
  name.vb: GetCustomAttribute(Of T)(Module)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
    name: GetCustomAttribute<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttribute<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttribute``1(System.Reflection.Module)
    name: GetCustomAttribute(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttribute(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttribute(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  isExternal: true
  name: GetCustomAttributes(Module)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
  isExternal: true
  name: GetCustomAttributes(Module, Type)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes(Module, Type)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module, System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(System.Reflection.Module,System.Type)
    name: GetCustomAttributes
    nameWithType: CustomAttributeExtensions.GetCustomAttributes
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  commentId: M:System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
  isExternal: true
  name: GetCustomAttributes<T>(Module)
  nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>(Module)
  fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>(System.Reflection.Module)
  nameWithType.vb: CustomAttributeExtensions.GetCustomAttributes(Of T)(Module)
  fullname.vb: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)(System.Reflection.Module)
  name.vb: GetCustomAttributes(Of T)(Module)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
    name: GetCustomAttributes<T>
    nameWithType: CustomAttributeExtensions.GetCustomAttributes<T>
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.GetCustomAttributes``1(System.Reflection.Module)
    name: GetCustomAttributes(Of T)
    nameWithType: CustomAttributeExtensions.GetCustomAttributes(Of T)
    fullName: System.Reflection.CustomAttributeExtensions.GetCustomAttributes(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  commentId: M:System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
  isExternal: true
  name: IsDefined(Module, Type)
  nameWithType: CustomAttributeExtensions.IsDefined(Module, Type)
  fullName: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module, System.Type)
  spec.csharp:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.CustomAttributeExtensions.IsDefined(System.Reflection.Module,System.Type)
    name: IsDefined
    nameWithType: CustomAttributeExtensions.IsDefined
    fullName: System.Reflection.CustomAttributeExtensions.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Reflection.Module
    name: Module
    nameWithType: Module
    fullName: System.Reflection.Module
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.Module.Assembly
  commentId: P:System.Reflection.Module.Assembly
  parent: System.Reflection.Module
  isExternal: true
  name: Assembly
  nameWithType: Module.Assembly
  fullName: System.Reflection.Module.Assembly
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.Module.FullyQualifiedName
  commentId: P:System.Reflection.Module.FullyQualifiedName
  parent: System.Reflection.Module
  isExternal: true
  name: FullyQualifiedName
  nameWithType: Module.FullyQualifiedName
  fullName: System.Reflection.Module.FullyQualifiedName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Module.Name
  commentId: P:System.Reflection.Module.Name
  parent: System.Reflection.Module
  isExternal: true
  name: Name
  nameWithType: Module.Name
  fullName: System.Reflection.Module.Name
- uid: System.Reflection.TypeAttributes
  commentId: T:System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Emit.EnumBuilder
  commentId: T:System.Reflection.Emit.EnumBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: EnumBuilder
  nameWithType: EnumBuilder
  fullName: System.Reflection.Emit.EnumBuilder
- uid: System.Reflection.MethodAttributes
  commentId: T:System.Reflection.MethodAttributes
  parent: System.Reflection
  isExternal: false
  name: MethodAttributes
  nameWithType: MethodAttributes
  fullName: System.Reflection.MethodAttributes
- uid: System.Reflection.CallingConventions
  commentId: T:System.Reflection.CallingConventions
  parent: System.Reflection
  isExternal: false
  name: CallingConventions
  nameWithType: CallingConventions
  fullName: System.Reflection.CallingConventions
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.Emit.MethodBuilder
  commentId: T:System.Reflection.Emit.MethodBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: MethodBuilder
  nameWithType: MethodBuilder
  fullName: System.Reflection.Emit.MethodBuilder
- uid: System.Type[][]
  name: Type[][]
  nameWithType: Type[][]
  fullName: System.Type[][]
  nameWithType.vb: Type()()
  fullname.vb: System.Type()()
  name.vb: Type()()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.FieldAttributes
  commentId: T:System.Reflection.FieldAttributes
  parent: System.Reflection
  isExternal: false
  name: FieldAttributes
  nameWithType: FieldAttributes
  fullName: System.Reflection.FieldAttributes
- uid: System.Reflection.Emit.FieldBuilder
  commentId: T:System.Reflection.Emit.FieldBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: FieldBuilder
  nameWithType: FieldBuilder
  fullName: System.Reflection.Emit.FieldBuilder
- uid: System.Reflection.Emit.TypeBuilder
  commentId: T:System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Emit.PackingSize
  commentId: T:System.Reflection.Emit.PackingSize
  parent: System.Reflection.Emit
  isExternal: false
  name: PackingSize
  nameWithType: PackingSize
  fullName: System.Reflection.Emit.PackingSize
- uid: System.Reflection.Module.Equals(System.Object)
  commentId: M:System.Reflection.Module.Equals(System.Object)
  parent: System.Reflection.Module
  isExternal: true
  name: Equals(Object)
  nameWithType: Module.Equals(Object)
  fullName: System.Reflection.Module.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.Module.Equals(System.Object)
    name: Equals
    nameWithType: Module.Equals
    fullName: System.Reflection.Module.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.Equals(System.Object)
    name: Equals
    nameWithType: Module.Equals
    fullName: System.Reflection.Module.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.Module.GetHashCode
  commentId: M:System.Reflection.Module.GetHashCode
  parent: System.Reflection.Module
  isExternal: true
  name: GetHashCode()
  nameWithType: Module.GetHashCode()
  fullName: System.Reflection.Module.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.Module.GetHashCode
    name: GetHashCode
    nameWithType: Module.GetHashCode
    fullName: System.Reflection.Module.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.Module.GetHashCode
    name: GetHashCode
    nameWithType: Module.GetHashCode
    fullName: System.Reflection.Module.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.Emit.CustomAttributeBuilder
  commentId: T:System.Reflection.Emit.CustomAttributeBuilder
  parent: System.Reflection.Emit
  isExternal: false
  name: CustomAttributeBuilder
  nameWithType: CustomAttributeBuilder
  fullName: System.Reflection.Emit.CustomAttributeBuilder
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
