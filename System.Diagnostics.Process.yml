items:
- uid: System.Diagnostics.Process
  commentId: T:System.Diagnostics.Process
  id: Process
  parent: System.Diagnostics
  children:
  - System.Diagnostics.Process.#ctor
  - System.Diagnostics.Process.BasePriority
  - System.Diagnostics.Process.BeginErrorReadLine
  - System.Diagnostics.Process.BeginOutputReadLine
  - System.Diagnostics.Process.CancelErrorRead
  - System.Diagnostics.Process.CancelOutputRead
  - System.Diagnostics.Process.Dispose
  - System.Diagnostics.Process.Dispose(System.Boolean)
  - System.Diagnostics.Process.EnableRaisingEvents
  - System.Diagnostics.Process.EnterDebugMode
  - System.Diagnostics.Process.ErrorDataReceived
  - System.Diagnostics.Process.ExitCode
  - System.Diagnostics.Process.Exited
  - System.Diagnostics.Process.ExitTime
  - System.Diagnostics.Process.GetCurrentProcess
  - System.Diagnostics.Process.GetProcessById(System.Int32)
  - System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - System.Diagnostics.Process.GetProcesses
  - System.Diagnostics.Process.GetProcesses(System.String)
  - System.Diagnostics.Process.GetProcessesByName(System.String)
  - System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
  - System.Diagnostics.Process.HasExited
  - System.Diagnostics.Process.Id
  - System.Diagnostics.Process.Kill
  - System.Diagnostics.Process.LeaveDebugMode
  - System.Diagnostics.Process.MachineName
  - System.Diagnostics.Process.MainModule
  - System.Diagnostics.Process.MaxWorkingSet
  - System.Diagnostics.Process.MinWorkingSet
  - System.Diagnostics.Process.Modules
  - System.Diagnostics.Process.NonpagedSystemMemorySize64
  - System.Diagnostics.Process.OnExited
  - System.Diagnostics.Process.OutputDataReceived
  - System.Diagnostics.Process.PagedMemorySize64
  - System.Diagnostics.Process.PagedSystemMemorySize64
  - System.Diagnostics.Process.PeakPagedMemorySize64
  - System.Diagnostics.Process.PeakVirtualMemorySize64
  - System.Diagnostics.Process.PeakWorkingSet64
  - System.Diagnostics.Process.PriorityBoostEnabled
  - System.Diagnostics.Process.PriorityClass
  - System.Diagnostics.Process.PrivateMemorySize64
  - System.Diagnostics.Process.PrivilegedProcessorTime
  - System.Diagnostics.Process.ProcessName
  - System.Diagnostics.Process.ProcessorAffinity
  - System.Diagnostics.Process.Refresh
  - System.Diagnostics.Process.SafeHandle
  - System.Diagnostics.Process.SessionId
  - System.Diagnostics.Process.StandardError
  - System.Diagnostics.Process.StandardInput
  - System.Diagnostics.Process.StandardOutput
  - System.Diagnostics.Process.Start
  - System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  - System.Diagnostics.Process.Start(System.String)
  - System.Diagnostics.Process.Start(System.String,System.String)
  - System.Diagnostics.Process.StartInfo
  - System.Diagnostics.Process.StartTime
  - System.Diagnostics.Process.Threads
  - System.Diagnostics.Process.TotalProcessorTime
  - System.Diagnostics.Process.UserProcessorTime
  - System.Diagnostics.Process.VirtualMemorySize64
  - System.Diagnostics.Process.WaitForExit
  - System.Diagnostics.Process.WaitForExit(System.Int32)
  - System.Diagnostics.Process.WorkingSet64
  langs:
  - csharp
  - vb
  name: Process
  fullName: System.Diagnostics.Process
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Process
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 20
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Provides access to local and remote processes and enables you to start and stop local system processes.</p>\n"
  syntax:
    content: 'public class Process : IDisposable'
    content.vb: >-
      Public Class Process
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: Process
- uid: System.Diagnostics.Process.#ctor
  commentId: M:System.Diagnostics.Process.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Process()
  fullName: System.Diagnostics.Process.Process()
  type: Constructor
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 93
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public Process()
    content.vb: Public Sub New
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.Process()
- uid: System.Diagnostics.Process.BasePriority
  commentId: P:System.Diagnostics.Process.BasePriority
  id: BasePriority
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: BasePriority
  fullName: System.Diagnostics.Process.BasePriority
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BasePriority
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 150
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the base priority of the associated process.</p>\n"
  syntax:
    content: public int BasePriority { get; }
    content.vb: Public ReadOnly Property BasePriority As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The base priority, which is computed from the <xref href=\"System.Diagnostics.Process.PriorityClass\" data-throw-if-not-resolved=\"false\"></xref> of the associated process.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong> to access this property on Windows 98 and Windows Me.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process has exited.</p>\n<p>-or- </p>\n<p>The process has not started, so there is no process ID. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  - type: System.Diagnostics.ProcessPriorityClass
    commentId: T:System.Diagnostics.ProcessPriorityClass
  - type: System.Diagnostics.ThreadPriorityLevel
    commentId: T:System.Diagnostics.ThreadPriorityLevel
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.BasePriority
- uid: System.Diagnostics.Process.EnableRaisingEvents
  commentId: P:System.Diagnostics.Process.EnableRaisingEvents
  id: EnableRaisingEvents
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: EnableRaisingEvents
  fullName: System.Diagnostics.Process.EnableRaisingEvents
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableRaisingEvents
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 553
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets whether the <xref href=\"System.Diagnostics.Process.Exited\" data-throw-if-not-resolved=\"false\"></xref> event should be raised when the process terminates.</p>\n"
  syntax:
    content: public bool EnableRaisingEvents { get; set; }
    content.vb: Public Property EnableRaisingEvents As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Diagnostics.Process.Exited\" data-throw-if-not-resolved=\"false\"></xref> event should be raised when the associated process is terminated (through either an exit or a call to <xref href=\"System.Diagnostics.Process.Kill\" data-throw-if-not-resolved=\"false\"></xref>); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.WaitForExit(System.Int32)
    commentId: M:System.Diagnostics.Process.WaitForExit(System.Int32)
  - type: System.Diagnostics.Process.Exited
    commentId: E:System.Diagnostics.Process.Exited
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  - type: System.Diagnostics.Process.Handle
    commentId: P:System.Diagnostics.Process.Handle
  - type: System.Diagnostics.Process.ExitTime
    commentId: P:System.Diagnostics.Process.ExitTime
  - type: System.Diagnostics.Process.HasExited
    commentId: P:System.Diagnostics.Process.HasExited
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.EnableRaisingEvents
- uid: System.Diagnostics.Process.ExitCode
  commentId: P:System.Diagnostics.Process.ExitCode
  id: ExitCode
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: ExitCode
  fullName: System.Diagnostics.Process.ExitCode
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExitCode
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 166
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the value that the associated process specified when it terminated.</p>\n"
  syntax:
    content: public int ExitCode { get; }
    content.vb: Public ReadOnly Property ExitCode As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The code that the associated process specified when it terminated.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process has not exited.</p>\n<p>-or- </p>\n<p>The process <xref href=\"System.Diagnostics.Process.Handle\" data-throw-if-not-resolved=\"false\"></xref> is not valid. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are trying to access the <xref href=\"System.Diagnostics.Process.ExitCode\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.HasExited
    commentId: P:System.Diagnostics.Process.HasExited
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  - type: System.Diagnostics.Process.WaitForExit(System.Int32)
    commentId: M:System.Diagnostics.Process.WaitForExit(System.Int32)
  - type: System.Diagnostics.Process.EnableRaisingEvents
    commentId: P:System.Diagnostics.Process.EnableRaisingEvents
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.ExitCode
- uid: System.Diagnostics.Process.ExitTime
  commentId: P:System.Diagnostics.Process.ExitTime
  id: ExitTime
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: ExitTime
  fullName: System.Diagnostics.Process.ExitTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExitTime
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 203
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the time that the associated process exited.</p>\n"
  syntax:
    content: public DateTime ExitTime { get; }
    content.vb: Public ReadOnly Property ExitTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>A <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> that indicates when the associated process was terminated.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are trying to access the <xref href=\"System.Diagnostics.Process.ExitTime\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.Handle
    commentId: P:System.Diagnostics.Process.Handle
  - type: System.Diagnostics.Process.ExitCode
    commentId: P:System.Diagnostics.Process.ExitCode
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.ExitTime
- uid: System.Diagnostics.Process.HasExited
  commentId: P:System.Diagnostics.Process.HasExited
  id: HasExited
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: HasExited
  fullName: System.Diagnostics.Process.HasExited
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasExited
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 181
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value indicating whether the associated process has been terminated.</p>\n"
  syntax:
    content: public bool HasExited { get; }
    content.vb: Public ReadOnly Property HasExited As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operating system process referenced by the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component has terminated; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There is no process associated with the object. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The exit code for the process could not be retrieved. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are trying to access the <xref href=\"System.Diagnostics.Process.HasExited\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.ExitCode
    commentId: P:System.Diagnostics.Process.ExitCode
  - type: System.Diagnostics.Process.ExitTime
    commentId: P:System.Diagnostics.Process.ExitTime
  - type: System.Diagnostics.Process.WaitForExit(System.Int32)
    commentId: M:System.Diagnostics.Process.WaitForExit(System.Int32)
  - type: System.Diagnostics.Process.EnableRaisingEvents
    commentId: P:System.Diagnostics.Process.EnableRaisingEvents
  - type: System.Diagnostics.Process.OnExited
    commentId: M:System.Diagnostics.Process.OnExited
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.HasExited
- uid: System.Diagnostics.Process.Id
  commentId: P:System.Diagnostics.Process.Id
  id: Id
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Id
  fullName: System.Diagnostics.Process.Id
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Id
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 223
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the unique identifier for the associated process.</p>\n"
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The system-generated unique identifier of the process that is referenced by this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process's <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> property has not been set.</p>\n<p>-or- </p>\n<p>There is no process associated with this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set the <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> property to <strong>false</strong> to access this property on Windows 98 and Windows Me.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.Handle
    commentId: P:System.Diagnostics.Process.Handle
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.Id
- uid: System.Diagnostics.Process.MachineName
  commentId: P:System.Diagnostics.Process.MachineName
  id: MachineName
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: MachineName
  fullName: System.Diagnostics.Process.MachineName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MachineName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 238
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name of the computer the associated process is running on.</p>\n"
  syntax:
    content: public string MachineName { get; }
    content.vb: Public ReadOnly Property MachineName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the computer that the associated process is running on.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There is no process associated with this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.GetProcesses
    commentId: M:System.Diagnostics.Process.GetProcesses
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.MachineName
- uid: System.Diagnostics.Process.MainModule
  commentId: P:System.Diagnostics.Process.MainModule
  id: MainModule
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: MainModule
  fullName: System.Diagnostics.Process.MainModule
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MainModule
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 35
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the main module for the associated process.</p>\n"
  syntax:
    content: public ProcessModule MainModule { get; }
    content.vb: Public ReadOnly Property MainModule As ProcessModule
    parameters: []
    return:
      type: System.Diagnostics.ProcessModule
      description: "\n<p>The <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> that was used to start the process.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are trying to access the <xref href=\"System.Diagnostics.Process.MainModule\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>A 32-bit process is trying to access the modules of a 64-bit process.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> to access this property on Windows 98 and Windows Me.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> is not available.</p>\n<p>-or- </p>\n<p>The process has exited. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.Modules
    commentId: P:System.Diagnostics.Process.Modules
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.MainModule
- uid: System.Diagnostics.Process.MaxWorkingSet
  commentId: P:System.Diagnostics.Process.MaxWorkingSet
  id: MaxWorkingSet
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: MaxWorkingSet
  fullName: System.Diagnostics.Process.MaxWorkingSet
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxWorkingSet
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 253
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the maximum allowable working set size, in bytes, for the associated process.</p>\n"
  syntax:
    content: public IntPtr MaxWorkingSet { get; set; }
    content.vb: Public Property MaxWorkingSet As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>The maximum working set size that is allowed in memory for the process, in bytes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The maximum working set size is invalid. It must be greater than or equal to the minimum working set size.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>Working set information cannot be retrieved from the associated process resource.</p>\n<p>-or- </p>\n<p>The process identifier or process handle is zero because the process has not been started. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are trying to access the <xref href=\"System.Diagnostics.Process.MaxWorkingSet\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> is not available.</p>\n<p>-or- </p>\n<p>The process has exited. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.MinWorkingSet
    commentId: P:System.Diagnostics.Process.MinWorkingSet
  - type: System.Diagnostics.Process.WorkingSet64
    commentId: P:System.Diagnostics.Process.WorkingSet64
  - type: System.Diagnostics.Process.PeakWorkingSet64
    commentId: P:System.Diagnostics.Process.PeakWorkingSet64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.MaxWorkingSet
- uid: System.Diagnostics.Process.MinWorkingSet
  commentId: P:System.Diagnostics.Process.MinWorkingSet
  id: MinWorkingSet
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: MinWorkingSet
  fullName: System.Diagnostics.Process.MinWorkingSet
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MinWorkingSet
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 272
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the minimum allowable working set size, in bytes, for the associated process.</p>\n"
  syntax:
    content: public IntPtr MinWorkingSet { get; set; }
    content.vb: Public Property MinWorkingSet As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>The minimum working set size that is required in memory for the process, in bytes.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The minimum working set size is invalid. It must be less than or equal to the maximum working set size.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>Working set information cannot be retrieved from the associated process resource.</p>\n<p>-or- </p>\n<p>The process identifier or process handle is zero because the process has not been started. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are trying to access the <xref href=\"System.Diagnostics.Process.MinWorkingSet\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> is not available.</p>\n<p>-or- </p>\n<p>The process has exited.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.MaxWorkingSet
    commentId: P:System.Diagnostics.Process.MaxWorkingSet
  - type: System.Diagnostics.Process.WorkingSet64
    commentId: P:System.Diagnostics.Process.WorkingSet64
  - type: System.Diagnostics.Process.PeakWorkingSet64
    commentId: P:System.Diagnostics.Process.PeakWorkingSet64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.MinWorkingSet
- uid: System.Diagnostics.Process.Modules
  commentId: P:System.Diagnostics.Process.Modules
  id: Modules
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Modules
  fullName: System.Diagnostics.Process.Modules
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Modules
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 285
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the modules that have been loaded by the associated process.</p>\n"
  syntax:
    content: public ProcessModuleCollection Modules { get; }
    content.vb: Public ReadOnly Property Modules As ProcessModuleCollection
    parameters: []
    return:
      type: System.Diagnostics.ProcessModuleCollection
      description: "\n<p>An array of type <xref href=\"System.Diagnostics.ProcessModule\" data-throw-if-not-resolved=\"false\"></xref> that represents the modules that have been loaded by the associated process.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.Modules\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> is not available.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> to access this property on Windows 98 and Windows Me.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.Modules\" data-throw-if-not-resolved=\"false\"></xref> property for either the system process or the idle process. These processes do not have modules.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessModule
    commentId: T:System.Diagnostics.ProcessModule
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.Modules
- uid: System.Diagnostics.Process.NonpagedSystemMemorySize64
  commentId: P:System.Diagnostics.Process.NonpagedSystemMemorySize64
  id: NonpagedSystemMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: NonpagedSystemMemorySize64
  fullName: System.Diagnostics.Process.NonpagedSystemMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NonpagedSystemMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 305
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of nonpaged system memory, in bytes, allocated for the associated process.</p>\n"
  syntax:
    content: public long NonpagedSystemMemorySize64 { get; }
    content.vb: Public ReadOnly Property NonpagedSystemMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of system memory, in bytes, allocated for the associated process that cannot be written to the virtual memory paging file.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.PagedSystemMemorySize64
    commentId: P:System.Diagnostics.Process.PagedSystemMemorySize64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.NonpagedSystemMemorySize64
- uid: System.Diagnostics.Process.PagedMemorySize64
  commentId: P:System.Diagnostics.Process.PagedMemorySize64
  id: PagedMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PagedMemorySize64
  fullName: System.Diagnostics.Process.PagedMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PagedMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 314
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of paged memory, in bytes, allocated for the associated process.</p>\n"
  syntax:
    content: public long PagedMemorySize64 { get; }
    content.vb: Public ReadOnly Property PagedMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of memory, in bytes, allocated in the virtual memory paging file for the associated process.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.PeakPagedMemorySize64
    commentId: P:System.Diagnostics.Process.PeakPagedMemorySize64
  - type: System.Diagnostics.Process.PagedSystemMemorySize64
    commentId: P:System.Diagnostics.Process.PagedSystemMemorySize64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PagedMemorySize64
- uid: System.Diagnostics.Process.PagedSystemMemorySize64
  commentId: P:System.Diagnostics.Process.PagedSystemMemorySize64
  id: PagedSystemMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PagedSystemMemorySize64
  fullName: System.Diagnostics.Process.PagedSystemMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PagedSystemMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 323
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of pageable system memory, in bytes, allocated for the associated process.</p>\n"
  syntax:
    content: public long PagedSystemMemorySize64 { get; }
    content.vb: Public ReadOnly Property PagedSystemMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of system memory, in bytes, allocated for the associated process that can be written to the virtual memory paging file.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.PagedSystemMemorySize64
    commentId: P:System.Diagnostics.Process.PagedSystemMemorySize64
  - type: System.Diagnostics.Process.NonpagedSystemMemorySize64
    commentId: P:System.Diagnostics.Process.NonpagedSystemMemorySize64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PagedSystemMemorySize64
- uid: System.Diagnostics.Process.PeakPagedMemorySize64
  commentId: P:System.Diagnostics.Process.PeakPagedMemorySize64
  id: PeakPagedMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PeakPagedMemorySize64
  fullName: System.Diagnostics.Process.PeakPagedMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PeakPagedMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 332
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the maximum amount of memory in the virtual memory paging file, in bytes, used by the associated process.</p>\n"
  syntax:
    content: public long PeakPagedMemorySize64 { get; }
    content.vb: Public ReadOnly Property PeakPagedMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The maximum amount of memory, in bytes, allocated in the virtual memory paging file for the associated process since it was started.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.PagedMemorySize64
    commentId: P:System.Diagnostics.Process.PagedMemorySize64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PeakPagedMemorySize64
- uid: System.Diagnostics.Process.PeakVirtualMemorySize64
  commentId: P:System.Diagnostics.Process.PeakVirtualMemorySize64
  id: PeakVirtualMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PeakVirtualMemorySize64
  fullName: System.Diagnostics.Process.PeakVirtualMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PeakVirtualMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 350
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the maximum amount of virtual memory, in bytes, used by the associated process.</p>\n"
  syntax:
    content: public long PeakVirtualMemorySize64 { get; }
    content.vb: Public ReadOnly Property PeakVirtualMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The maximum amount of virtual memory, in bytes, allocated for the associated process since it was started.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.VirtualMemorySize64
    commentId: P:System.Diagnostics.Process.VirtualMemorySize64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PeakVirtualMemorySize64
- uid: System.Diagnostics.Process.PeakWorkingSet64
  commentId: P:System.Diagnostics.Process.PeakWorkingSet64
  id: PeakWorkingSet64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PeakWorkingSet64
  fullName: System.Diagnostics.Process.PeakWorkingSet64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PeakWorkingSet64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 341
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the maximum amount of physical memory, in bytes, used by the associated process.</p>\n"
  syntax:
    content: public long PeakWorkingSet64 { get; }
    content.vb: Public ReadOnly Property PeakWorkingSet64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The maximum amount of physical memory, in bytes, allocated for the associated process since it was started.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.WorkingSet64
    commentId: P:System.Diagnostics.Process.WorkingSet64
  - type: System.Diagnostics.Process.MinWorkingSet
    commentId: P:System.Diagnostics.Process.MinWorkingSet
  - type: System.Diagnostics.Process.MaxWorkingSet
    commentId: P:System.Diagnostics.Process.MaxWorkingSet
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PeakWorkingSet64
- uid: System.Diagnostics.Process.PriorityBoostEnabled
  commentId: P:System.Diagnostics.Process.PriorityBoostEnabled
  id: PriorityBoostEnabled
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PriorityBoostEnabled
  fullName: System.Diagnostics.Process.PriorityBoostEnabled
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PriorityBoostEnabled
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 366
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets a value indicating whether the associated process priority should temporarily be boosted by the operating system when the main window has the focus.</p>\n"
  syntax:
    content: public bool PriorityBoostEnabled { get; set; }
    content.vb: Public Property PriorityBoostEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if dynamic boosting of the process priority should take place for a process when it is taken out of the wait state; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>Priority boost information could not be retrieved from the associated process resource. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n<p>-or- </p>\n<p>The process identifier or process handle is zero. (The process has not been started.) </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.PriorityBoostEnabled\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> is not available.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  - type: System.Diagnostics.Process.BasePriority
    commentId: P:System.Diagnostics.Process.BasePriority
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.PriorityBoostEnabled
- uid: System.Diagnostics.Process.PriorityClass
  commentId: P:System.Diagnostics.Process.PriorityClass
  id: PriorityClass
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PriorityClass
  fullName: System.Diagnostics.Process.PriorityClass
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PriorityClass
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 391
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the overall priority category for the associated process.</p>\n"
  syntax:
    content: public ProcessPriorityClass PriorityClass { get; set; }
    content.vb: Public Property PriorityClass As ProcessPriorityClass
    parameters: []
    return:
      type: System.Diagnostics.ProcessPriorityClass
      description: "\n<p>The priority category for the associated process, from which the <xref href=\"System.Diagnostics.Process.BasePriority\" data-throw-if-not-resolved=\"false\"></xref> of the process is calculated.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>Process priority information could not be set or retrieved from the associated process resource.</p>\n<p>-or- </p>\n<p>The process identifier or process handle is zero. (The process has not been started.) </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.PriorityClass\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> is not available.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>You have set the <xref href=\"System.Diagnostics.Process.PriorityClass\" data-throw-if-not-resolved=\"false\"></xref> to <strong>AboveNormal</strong> or <strong>BelowNormal</strong> when using Windows 98 or Windows Millennium Edition (Windows Me). These platforms do not support those values for the priority class. </p>\n"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "\n<p>Priority class cannot be set because it does not use a valid value, as defined in the <xref href=\"System.Diagnostics.ProcessPriorityClass\" data-throw-if-not-resolved=\"false\"></xref> enumeration.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.BasePriority
    commentId: P:System.Diagnostics.Process.BasePriority
  - type: System.Diagnostics.Process.PriorityBoostEnabled
    commentId: P:System.Diagnostics.Process.PriorityBoostEnabled
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.PriorityClass
- uid: System.Diagnostics.Process.PrivateMemorySize64
  commentId: P:System.Diagnostics.Process.PrivateMemorySize64
  id: PrivateMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PrivateMemorySize64
  fullName: System.Diagnostics.Process.PrivateMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivateMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 415
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of private memory, in bytes, allocated for the associated process.</p>\n"
  syntax:
    content: public long PrivateMemorySize64 { get; }
    content.vb: Public ReadOnly Property PrivateMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of memory, in bytes, allocated for the associated process that cannot be shared with other processes.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PrivateMemorySize64
- uid: System.Diagnostics.Process.PrivilegedProcessorTime
  commentId: P:System.Diagnostics.Process.PrivilegedProcessorTime
  id: PrivilegedProcessorTime
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: PrivilegedProcessorTime
  fullName: System.Diagnostics.Process.PrivilegedProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivilegedProcessorTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 48
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the privileged processor time for this process.</p>\n"
  syntax:
    content: public TimeSpan PrivilegedProcessorTime { get; }
    content.vb: Public ReadOnly Property PrivilegedProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that indicates the amount of time that the process has spent running code inside the operating system core.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.PrivilegedProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.UserProcessorTime
    commentId: P:System.Diagnostics.Process.UserProcessorTime
  - type: System.Diagnostics.Process.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.Process.PrivilegedProcessorTime
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.PrivilegedProcessorTime
- uid: System.Diagnostics.Process.ProcessName
  commentId: P:System.Diagnostics.Process.ProcessName
  id: ProcessName
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: ProcessName
  fullName: System.Diagnostics.Process.ProcessName
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 430
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the name of the process.</p>\n"
  syntax:
    content: public string ProcessName { get; }
    content.vb: Public ReadOnly Property ProcessName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name that the system uses to identify the process to the user.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process does not have an identifier, or no process is associated with the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The associated process has exited. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> to access this property on Windows 98 and Windows Me.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is not on this computer.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.ProcessName
- uid: System.Diagnostics.Process.ProcessorAffinity
  commentId: P:System.Diagnostics.Process.ProcessorAffinity
  id: ProcessorAffinity
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: ProcessorAffinity
  fullName: System.Diagnostics.Process.ProcessorAffinity
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessorAffinity
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 445
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the processors on which the threads in this process can be scheduled to run.</p>\n"
  syntax:
    content: public IntPtr ProcessorAffinity { get; set; }
    content.vb: Public Property ProcessorAffinity As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>A bitmask representing the processors that the threads in the associated process can run on. The default depends on the number of processors on the computer. The default value is 2 n -1, where n is the number of processors.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>\n<xref href=\"System.Diagnostics.Process.ProcessorAffinity\" data-throw-if-not-resolved=\"false\"></xref> information could not be set or retrieved from the associated process resource.</p>\n<p>-or- </p>\n<p>The process identifier or process handle is zero. (The process has not been started.) </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.ProcessorAffinity\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> was not available.</p>\n<p>-or- </p>\n<p>The process has exited. </p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.ProcessorAffinity
- uid: System.Diagnostics.Process.SafeHandle
  commentId: P:System.Diagnostics.Process.SafeHandle
  id: SafeHandle
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: SafeHandle
  fullName: System.Diagnostics.Process.SafeHandle
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SafeHandle
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 126
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the native handle to this process.</p>\n"
  syntax:
    content: public SafeProcessHandle SafeHandle { get; }
    content.vb: Public ReadOnly Property SafeHandle As SafeProcessHandle
    parameters: []
    return:
      type: Microsoft.Win32.SafeHandles.SafeProcessHandle
      description: "\n<p>The native handle to this process.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.SafeHandle
- uid: System.Diagnostics.Process.SessionId
  commentId: P:System.Diagnostics.Process.SessionId
  id: SessionId
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: SessionId
  fullName: System.Diagnostics.Process.SessionId
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SessionId
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 464
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the Terminal Services session identifier for the associated process.</p>\n"
  syntax:
    content: public int SessionId { get; }
    content.vb: Public ReadOnly Property SessionId As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The Terminal Services session identifier for the associated process.</p>\n"
  exceptions:
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>There is no session associated with this process.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There is no process associated with this session identifier.</p>\n<p>-or-</p>\n<p>The associated process is not on this machine. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The <xref href=\"System.Diagnostics.Process.SessionId\" data-throw-if-not-resolved=\"false\"></xref> property is not supported on Windows 98.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.SessionId
- uid: System.Diagnostics.Process.StandardError
  commentId: P:System.Diagnostics.Process.StandardError
  id: StandardError
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: StandardError
  fullName: System.Diagnostics.Process.StandardError
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StandardError
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 625
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets a stream used to read the error output of the application.</p>\n"
  syntax:
    content: public StreamReader StandardError { get; }
    content.vb: Public ReadOnly Property StandardError As StreamReader
    parameters: []
    return:
      type: System.IO.StreamReader
      description: "\n<p>A <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> that can be used to read the standard error stream of the application.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream has not been defined for redirection; ensure <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardError\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong> and <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>false</strong>.</p>\n<p>- or - </p>\n<p>The <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream has been opened for asynchronous read operations with <xref href=\"System.Diagnostics.Process.BeginErrorReadLine\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.StandardInput
    commentId: P:System.Diagnostics.Process.StandardInput
  - type: System.Diagnostics.Process.StandardOutput
    commentId: P:System.Diagnostics.Process.StandardOutput
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardError
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.StandardError
- uid: System.Diagnostics.Process.StandardInput
  commentId: P:System.Diagnostics.Process.StandardInput
  id: StandardInput
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: StandardInput
  fullName: System.Diagnostics.Process.StandardInput
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StandardInput
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 584
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets a stream used to write the input of the application.</p>\n"
  syntax:
    content: public StreamWriter StandardInput { get; }
    content.vb: Public ReadOnly Property StandardInput As StreamWriter
    parameters: []
    return:
      type: System.IO.StreamWriter
      description: "\n<p>A <xref href=\"System.IO.StreamWriter\" data-throw-if-not-resolved=\"false\"></xref> that can be used to write the standard input stream of the application.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.Process.StandardInput\" data-throw-if-not-resolved=\"false\"></xref> stream has not been defined because <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardInput\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>false</strong>. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.StandardOutput
    commentId: P:System.Diagnostics.Process.StandardOutput
  - type: System.Diagnostics.Process.StandardError
    commentId: P:System.Diagnostics.Process.StandardError
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardInput
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardInput
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.StandardInput
- uid: System.Diagnostics.Process.StandardOutput
  commentId: P:System.Diagnostics.Process.StandardOutput
  id: StandardOutput
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: StandardOutput
  fullName: System.Diagnostics.Process.StandardOutput
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StandardOutput
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 600
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets a stream used to read the textual output of the application.</p>\n"
  syntax:
    content: public StreamReader StandardOutput { get; }
    content.vb: Public ReadOnly Property StandardOutput As StreamReader
    parameters: []
    return:
      type: System.IO.StreamReader
      description: "\n<p>A <xref href=\"System.IO.StreamReader\" data-throw-if-not-resolved=\"false\"></xref> that can be used to read the standard output stream of the application.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream has not been defined for redirection; ensure <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong> and <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>false</strong>.</p>\n<p>- or - </p>\n<p>The <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream has been opened for asynchronous read operations with <xref href=\"System.Diagnostics.Process.BeginOutputReadLine\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.StandardInput
    commentId: P:System.Diagnostics.Process.StandardInput
  - type: System.Diagnostics.Process.StandardError
    commentId: P:System.Diagnostics.Process.StandardError
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.StandardOutput
- uid: System.Diagnostics.Process.StartInfo
  commentId: P:System.Diagnostics.Process.StartInfo
  id: StartInfo
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: StartInfo
  fullName: System.Diagnostics.Process.StartInfo
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartInfo
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 479
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the properties to pass to the <xref href=\"System.Diagnostics.Process.Start\" data-throw-if-not-resolved=\"false\"></xref> method of the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public ProcessStartInfo StartInfo { get; set; }
    content.vb: Public Property StartInfo As ProcessStartInfo
    parameters: []
    return:
      type: System.Diagnostics.ProcessStartInfo
      description: "\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo\" data-throw-if-not-resolved=\"false\"></xref> that represents the data with which to start the process. These arguments include the name of the executable file or document used to start the process.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value that specifies the <xref href=\"System.Diagnostics.Process.StartInfo\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.Start
    commentId: M:System.Diagnostics.Process.Start
  - type: System.Diagnostics.ProcessStartInfo.FileName
    commentId: P:System.Diagnostics.ProcessStartInfo.FileName
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: Process.StartInfo
- uid: System.Diagnostics.Process.StartTime
  commentId: P:System.Diagnostics.Process.StartTime
  id: StartTime
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: StartTime
  fullName: System.Diagnostics.Process.StartTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 57
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the time that the associated process was started.</p>\n"
  syntax:
    content: public DateTime StartTime { get; }
    content.vb: Public ReadOnly Property StartTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>An object  that indicates when the process started. An exception is thrown if the process is not running.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.StartTime\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process has exited.</p>\n<p>-or-</p>\n<p>The process has not been started.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred in the call to the Windows function.</p>\n"
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.StartTime
- uid: System.Diagnostics.Process.Threads
  commentId: P:System.Diagnostics.Process.Threads
  id: Threads
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Threads
  fullName: System.Diagnostics.Process.Threads
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Threads
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 516
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the set of threads that are running in the associated process.</p>\n"
  syntax:
    content: public ProcessThreadCollection Threads { get; }
    content.vb: Public ReadOnly Property Threads As ProcessThreadCollection
    parameters: []
    return:
      type: System.Diagnostics.ProcessThreadCollection
      description: "\n<p>An array of type <xref href=\"System.Diagnostics.ProcessThread\" data-throw-if-not-resolved=\"false\"></xref> representing the operating system threads currently running in the associated process.</p>\n"
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "\n<p>The process does not have an <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref>, or no process is associated with the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>-or- </p>\n<p>The associated process has exited. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me); set <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> to <strong>false</strong> to access this property on Windows 98 and Windows Me.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessThread
    commentId: T:System.Diagnostics.ProcessThread
  - type: System.Diagnostics.Process.BasePriority
    commentId: P:System.Diagnostics.Process.BasePriority
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.Threads
- uid: System.Diagnostics.Process.TotalProcessorTime
  commentId: P:System.Diagnostics.Process.TotalProcessorTime
  id: TotalProcessorTime
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: TotalProcessorTime
  fullName: System.Diagnostics.Process.TotalProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TotalProcessorTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 59
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the total processor time for this process.</p>\n"
  syntax:
    content: public TimeSpan TotalProcessorTime { get; }
    content.vb: Public ReadOnly Property TotalProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that indicates the amount of time that the associated process has spent utilizing the CPU. This value is the sum of the <xref href=\"System.Diagnostics.Process.UserProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> and the <xref href=\"System.Diagnostics.Process.PrivilegedProcessorTime\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.TotalProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.UserProcessorTime
    commentId: P:System.Diagnostics.Process.UserProcessorTime
  - type: System.Diagnostics.Process.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.Process.PrivilegedProcessorTime
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.TotalProcessorTime
- uid: System.Diagnostics.Process.UserProcessorTime
  commentId: P:System.Diagnostics.Process.UserProcessorTime
  id: UserProcessorTime
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: UserProcessorTime
  fullName: System.Diagnostics.Process.UserProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserProcessorTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 60
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the user processor time for this process.</p>\n"
  syntax:
    content: public TimeSpan UserProcessorTime { get; }
    content.vb: Public ReadOnly Property UserProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that indicates the amount of time that the associated process has spent running code inside the application portion of the process (not inside the operating system core).</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to access the <xref href=\"System.Diagnostics.Process.UserProcessorTime\" data-throw-if-not-resolved=\"false\"></xref> property for a process that is running on a remote computer. This property is available only for processes that are running on the local computer. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.UserProcessorTime
    commentId: P:System.Diagnostics.Process.UserProcessorTime
  - type: System.Diagnostics.Process.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.Process.PrivilegedProcessorTime
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.UserProcessorTime
- uid: System.Diagnostics.Process.VirtualMemorySize64
  commentId: P:System.Diagnostics.Process.VirtualMemorySize64
  id: VirtualMemorySize64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: VirtualMemorySize64
  fullName: System.Diagnostics.Process.VirtualMemorySize64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VirtualMemorySize64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 537
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of the virtual memory, in bytes, allocated for the associated process.</p>\n"
  syntax:
    content: public long VirtualMemorySize64 { get; }
    content.vb: Public ReadOnly Property VirtualMemorySize64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of virtual memory, in bytes, allocated for the associated process.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.PeakVirtualMemorySize64
    commentId: P:System.Diagnostics.Process.PeakVirtualMemorySize64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.VirtualMemorySize64
- uid: System.Diagnostics.Process.WorkingSet64
  commentId: P:System.Diagnostics.Process.WorkingSet64
  id: WorkingSet64
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: WorkingSet64
  fullName: System.Diagnostics.Process.WorkingSet64
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WorkingSet64
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 647
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of physical memory, in bytes, allocated for the associated process.</p>\n"
  syntax:
    content: public long WorkingSet64 { get; }
    content.vb: Public ReadOnly Property WorkingSet64 As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>The amount of physical memory, in bytes, allocated for the associated process.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition (Windows Me), which does not support this property.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.MinWorkingSet
    commentId: P:System.Diagnostics.Process.MinWorkingSet
  - type: System.Diagnostics.Process.MaxWorkingSet
    commentId: P:System.Diagnostics.Process.MaxWorkingSet
  - type: System.Diagnostics.Process.PeakWorkingSet64
    commentId: P:System.Diagnostics.Process.PeakWorkingSet64
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Process.WorkingSet64
- uid: System.Diagnostics.Process.ErrorDataReceived
  commentId: E:System.Diagnostics.Process.ErrorDataReceived
  id: ErrorDataReceived
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: ErrorDataReceived
  fullName: System.Diagnostics.Process.ErrorDataReceived
  type: Event
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ErrorDataReceived
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 72
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Occurs when an application writes to its redirected <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream.</p>\n"
  syntax:
    content: public event DataReceivedEventHandler ErrorDataReceived
    content.vb: Public Event ErrorDataReceived As DataReceivedEventHandler
    return:
      type: System.Diagnostics.DataReceivedEventHandler
  seealso:
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardError
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - type: System.Diagnostics.Process.StandardError
    commentId: P:System.Diagnostics.Process.StandardError
  - type: System.Diagnostics.Process.BeginErrorReadLine
    commentId: M:System.Diagnostics.Process.BeginErrorReadLine
  - type: System.Diagnostics.Process.CancelErrorRead
    commentId: M:System.Diagnostics.Process.CancelErrorRead
  - type: System.Diagnostics.DataReceivedEventHandler
    commentId: T:System.Diagnostics.DataReceivedEventHandler
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.ErrorDataReceived
- uid: System.Diagnostics.Process.Exited
  commentId: E:System.Diagnostics.Process.Exited
  id: Exited
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Exited
  fullName: System.Diagnostics.Process.Exited
  type: Event
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Exited
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 656
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Occurs when a process exits.</p>\n"
  syntax:
    content: public event EventHandler Exited
    content.vb: Public Event Exited As EventHandler
    return:
      type: System.EventHandler
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.Exited
- uid: System.Diagnostics.Process.OutputDataReceived
  commentId: E:System.Diagnostics.Process.OutputDataReceived
  id: OutputDataReceived
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: OutputDataReceived
  fullName: System.Diagnostics.Process.OutputDataReceived
  type: Event
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OutputDataReceived
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 71
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Occurs each time an application writes a line to its redirected <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream. </p>\n"
  syntax:
    content: public event DataReceivedEventHandler OutputDataReceived
    content.vb: Public Event OutputDataReceived As DataReceivedEventHandler
    return:
      type: System.Diagnostics.DataReceivedEventHandler
  seealso:
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - type: System.Diagnostics.Process.StandardOutput
    commentId: P:System.Diagnostics.Process.StandardOutput
  - type: System.Diagnostics.Process.BeginOutputReadLine
    commentId: M:System.Diagnostics.Process.BeginOutputReadLine
  - type: System.Diagnostics.Process.CancelOutputRead
    commentId: M:System.Diagnostics.Process.CancelOutputRead
  - type: System.Diagnostics.DataReceivedEventHandler
    commentId: T:System.Diagnostics.DataReceivedEventHandler
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.OutputDataReceived
- uid: System.Diagnostics.Process.BeginErrorReadLine
  commentId: M:System.Diagnostics.Process.BeginErrorReadLine
  id: BeginErrorReadLine
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: BeginErrorReadLine()
  fullName: System.Diagnostics.Process.BeginErrorReadLine()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginErrorReadLine
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1268
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Begins asynchronous read operations on the redirected <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream of the application.</p>\n"
  syntax:
    content: public void BeginErrorReadLine()
    content.vb: Public Sub BeginErrorReadLine
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardError\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n<p>- or - </p>\n<p>An asynchronous read operation is already in progress on the <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream.</p>\n<p>- or - </p>\n<p>The <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream has been used by a synchronous read operation. </p>\n"
  seealso:
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardError
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - type: System.Diagnostics.Process.StandardError
    commentId: P:System.Diagnostics.Process.StandardError
  - type: System.Diagnostics.Process.ErrorDataReceived
    commentId: E:System.Diagnostics.Process.ErrorDataReceived
  - type: System.Diagnostics.DataReceivedEventHandler
    commentId: T:System.Diagnostics.DataReceivedEventHandler
  - type: System.Diagnostics.Process.CancelErrorRead
    commentId: M:System.Diagnostics.Process.CancelErrorRead
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.BeginErrorReadLine()
- uid: System.Diagnostics.Process.BeginOutputReadLine
  commentId: M:System.Diagnostics.Process.BeginOutputReadLine
  id: BeginOutputReadLine
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: BeginOutputReadLine()
  fullName: System.Diagnostics.Process.BeginOutputReadLine()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BeginOutputReadLine
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1230
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Begins asynchronous read operations on the redirected <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream of the application.</p>\n"
  syntax:
    content: public void BeginOutputReadLine()
    content.vb: Public Sub BeginOutputReadLine
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>false</strong>.</p>\n<p>- or - </p>\n<p>An asynchronous read operation is already in progress on the <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream.</p>\n<p>- or - </p>\n<p>The <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream has been used by a synchronous read operation. </p>\n"
  seealso:
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - type: System.Diagnostics.Process.StandardOutput
    commentId: P:System.Diagnostics.Process.StandardOutput
  - type: System.Diagnostics.Process.OutputDataReceived
    commentId: E:System.Diagnostics.Process.OutputDataReceived
  - type: System.Diagnostics.DataReceivedEventHandler
    commentId: T:System.Diagnostics.DataReceivedEventHandler
  - type: System.Diagnostics.Process.CancelOutputRead
    commentId: M:System.Diagnostics.Process.CancelOutputRead
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.BeginOutputReadLine()
- uid: System.Diagnostics.Process.CancelErrorRead
  commentId: M:System.Diagnostics.Process.CancelErrorRead
  id: CancelErrorRead
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: CancelErrorRead()
  fullName: System.Diagnostics.Process.CancelErrorRead()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelErrorRead
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1325
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Cancels the asynchronous read operation on the redirected <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream of an application.</p>\n"
  syntax:
    content: public void CancelErrorRead()
    content.vb: Public Sub CancelErrorRead
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.Process.StandardError\" data-throw-if-not-resolved=\"false\"></xref> stream is not enabled for asynchronous read operations. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.BeginErrorReadLine
    commentId: M:System.Diagnostics.Process.BeginErrorReadLine
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardError
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardError
  - type: System.Diagnostics.Process.StandardError
    commentId: P:System.Diagnostics.Process.StandardError
  - type: System.Diagnostics.Process.ErrorDataReceived
    commentId: E:System.Diagnostics.Process.ErrorDataReceived
  - type: System.Diagnostics.DataReceivedEventHandler
    commentId: T:System.Diagnostics.DataReceivedEventHandler
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.CancelErrorRead()
- uid: System.Diagnostics.Process.CancelOutputRead
  commentId: M:System.Diagnostics.Process.CancelOutputRead
  id: CancelOutputRead
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: CancelOutputRead()
  fullName: System.Diagnostics.Process.CancelOutputRead()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CancelOutputRead
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1305
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Cancels the asynchronous read operation on the redirected <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream of an application.</p>\n"
  syntax:
    content: public void CancelOutputRead()
    content.vb: Public Sub CancelOutputRead
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Diagnostics.Process.StandardOutput\" data-throw-if-not-resolved=\"false\"></xref> stream is not enabled for asynchronous read operations. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.BeginOutputReadLine
    commentId: M:System.Diagnostics.Process.BeginOutputReadLine
  - type: System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
    commentId: P:System.Diagnostics.ProcessStartInfo.RedirectStandardOutput
  - type: System.Diagnostics.Process.StandardOutput
    commentId: P:System.Diagnostics.Process.StandardOutput
  - type: System.Diagnostics.Process.OutputDataReceived
    commentId: E:System.Diagnostics.Process.OutputDataReceived
  - type: System.Diagnostics.DataReceivedEventHandler
    commentId: T:System.Diagnostics.DataReceivedEventHandler
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.CancelOutputRead()
- uid: System.Diagnostics.Process.EnterDebugMode
  commentId: M:System.Diagnostics.Process.EnterDebugMode
  id: EnterDebugMode
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: EnterDebugMode()
  fullName: System.Diagnostics.Process.EnterDebugMode()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnterDebugMode
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 70
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Puts a <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component in state to interact with operating system processes that run in a special mode by enabling the native property <strong>SeDebugPrivilege</strong> on the current thread.</p>\n"
  syntax:
    content: public static void EnterDebugMode()
    content.vb: Public Shared Sub EnterDebugMode
  seealso:
  - type: System.Diagnostics.Process.LeaveDebugMode
    commentId: M:System.Diagnostics.Process.LeaveDebugMode
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.EnterDebugMode()
- uid: System.Diagnostics.Process.GetCurrentProcess
  commentId: M:System.Diagnostics.Process.GetCurrentProcess
  id: GetCurrentProcess
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetCurrentProcess()
  fullName: System.Diagnostics.Process.GetCurrentProcess()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetCurrentProcess
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 959
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component and associates it with the currently active process.</p>\n"
  syntax:
    content: public static Process GetCurrentProcess()
    content.vb: Public Shared Function GetCurrentProcess As Process
    return:
      type: System.Diagnostics.Process
      description: "\n<p>A new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component associated with the process resource that is running the calling application.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  - type: System.Diagnostics.Process.GetProcesses
    commentId: M:System.Diagnostics.Process.GetProcesses
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetCurrentProcess()
- uid: System.Diagnostics.Process.GetProcessById(System.Int32)
  commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32)
  id: GetProcessById(System.Int32)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetProcessById(Int32)
  fullName: System.Diagnostics.Process.GetProcessById(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProcessById
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 892
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Returns a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component, given the identifier of a process on the local computer.</p>\n"
  syntax:
    content: public static Process GetProcessById(int processId)
    content.vb: Public Shared Function GetProcessById(processId As Integer) As Process
    parameters:
    - id: processId
      type: System.Int32
      description: "\n<p>The system-unique identifier of a process resource. </p>\n"
    return:
      type: System.Diagnostics.Process
      description: "\n<p>A <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component that is associated with the local process resource identified by the <em>processId</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The process specified by the <em>processId</em> parameter is not running. The identifier might be expired. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process was not started by this object.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.Id
    commentId: P:System.Diagnostics.Process.Id
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  - type: System.Diagnostics.Process.GetProcesses
    commentId: M:System.Diagnostics.Process.GetProcesses
  - type: System.Diagnostics.Process.GetCurrentProcess
    commentId: M:System.Diagnostics.Process.GetCurrentProcess
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetProcessById(Int32)
- uid: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  id: GetProcessById(System.Int32,System.String)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetProcessById(Int32, String)
  fullName: System.Diagnostics.Process.GetProcessById(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProcessById
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 876
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Returns a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component, given a process identifier and the name of a computer on the network.</p>\n"
  syntax:
    content: public static Process GetProcessById(int processId, string machineName)
    content.vb: Public Shared Function GetProcessById(processId As Integer, machineName As String) As Process
    parameters:
    - id: processId
      type: System.Int32
      description: "\n<p>The system-unique identifier of a process resource. </p>\n"
    - id: machineName
      type: System.String
      description: "\n<p>The name of a computer on the network. </p>\n"
    return:
      type: System.Diagnostics.Process
      description: "\n<p>A <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component that is associated with a remote process resource identified by the <em>processId</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The process specified by the <em>processId</em> parameter is not running. The identifier might be expired.</p>\n<p>-or- </p>\n<p>The <em>machineName</em> parameter syntax is invalid. The name might have length zero (0). </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>machineName</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process was not started by this object.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.Id
    commentId: P:System.Diagnostics.Process.Id
  - type: System.Diagnostics.Process.MachineName
    commentId: P:System.Diagnostics.Process.MachineName
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  - type: System.Diagnostics.Process.GetProcesses
    commentId: M:System.Diagnostics.Process.GetProcesses
  - type: System.Diagnostics.Process.GetCurrentProcess
    commentId: M:System.Diagnostics.Process.GetCurrentProcess
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetProcessById(Int32, String)
- uid: System.Diagnostics.Process.GetProcesses
  commentId: M:System.Diagnostics.Process.GetProcesses
  id: GetProcesses
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetProcesses()
  fullName: System.Diagnostics.Process.GetProcesses()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProcesses
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 916
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Creates a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component for each process resource on the local computer.</p>\n"
  syntax:
    content: public static Process[] GetProcesses()
    content.vb: Public Shared Function GetProcesses As Process()
    return:
      type: System.Diagnostics.Process[]
      description: "\n<p>An array of type <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that represents all the process resources running on the local computer.</p>\n"
  seealso:
  - type: System.Diagnostics.Process.MachineName
    commentId: P:System.Diagnostics.Process.MachineName
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  - type: System.Diagnostics.Process.GetCurrentProcess
    commentId: M:System.Diagnostics.Process.GetCurrentProcess
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetProcesses()
- uid: System.Diagnostics.Process.GetProcesses(System.String)
  commentId: M:System.Diagnostics.Process.GetProcesses(System.String)
  id: GetProcesses(System.String)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetProcesses(String)
  fullName: System.Diagnostics.Process.GetProcesses(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProcesses
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 928
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Creates a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component for each process resource on the specified computer.</p>\n"
  syntax:
    content: public static Process[] GetProcesses(string machineName)
    content.vb: Public Shared Function GetProcesses(machineName As String) As Process()
    parameters:
    - id: machineName
      type: System.String
      description: "\n<p>The computer from which to read the list of processes. </p>\n"
    return:
      type: System.Diagnostics.Process[]
      description: "\n<p>An array of type <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that represents all the process resources running on the specified computer.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>machineName</em> parameter syntax is invalid. It might have length zero (0). </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>machineName</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The operating system platform does not support this operation on remote computers. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>A problem occurred accessing an underlying system API. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.MachineName
    commentId: P:System.Diagnostics.Process.MachineName
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - type: System.Diagnostics.Process.GetProcessesByName(System.String)
    commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  - type: System.Diagnostics.Process.GetCurrentProcess
    commentId: M:System.Diagnostics.Process.GetCurrentProcess
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetProcesses(String)
- uid: System.Diagnostics.Process.GetProcessesByName(System.String)
  commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String)
  id: GetProcessesByName(System.String)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetProcessesByName(String)
  fullName: System.Diagnostics.Process.GetProcessesByName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProcessesByName
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 905
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Creates an array of new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> components and associates them with all the process resources on the local computer that share the specified process name.</p>\n"
  syntax:
    content: public static Process[] GetProcessesByName(string processName)
    content.vb: Public Shared Function GetProcessesByName(processName As String) As Process()
    parameters:
    - id: processName
      type: System.String
      description: "\n<p>The friendly name of the process. </p>\n"
    return:
      type: System.Diagnostics.Process[]
      description: "\n<p>An array of type <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that represents the process resources running the specified application or file.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.ProcessName
    commentId: P:System.Diagnostics.Process.ProcessName
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - type: System.Diagnostics.Process.GetProcesses
    commentId: M:System.Diagnostics.Process.GetProcesses
  - type: System.Diagnostics.Process.GetCurrentProcess
    commentId: M:System.Diagnostics.Process.GetCurrentProcess
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetProcessesByName(String)
- uid: System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
  commentId: M:System.Diagnostics.Process.GetProcessesByName(System.String,System.String)
  id: GetProcessesByName(System.String,System.String)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: GetProcessesByName(String, String)
  fullName: System.Diagnostics.Process.GetProcessesByName(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProcessesByName
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 77
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Creates an array of new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> components and associates them with all the process resources on a remote computer that share the specified process name.</p>\n"
  syntax:
    content: public static Process[] GetProcessesByName(string processName, string machineName)
    content.vb: Public Shared Function GetProcessesByName(processName As String, machineName As String) As Process()
    parameters:
    - id: processName
      type: System.String
      description: "\n<p>The friendly name of the process. </p>\n"
    - id: machineName
      type: System.String
      description: "\n<p>The name of a computer on the network. </p>\n"
    return:
      type: System.Diagnostics.Process[]
      description: "\n<p>An array of type <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that represents the process resources running the specified application or file.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>machineName</em> parameter syntax is invalid. It might have length zero (0). </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>machineName</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The operating system platform does not support this operation on remote computers. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>There are problems accessing the performance counter API's used to get process information. This exception is specific to Windows NT, Windows 2000, and Windows XP. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>A problem occurred accessing an underlying system API. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.ProcessName
    commentId: P:System.Diagnostics.Process.ProcessName
  - type: System.Diagnostics.Process.MachineName
    commentId: P:System.Diagnostics.Process.MachineName
  - type: System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
    commentId: M:System.Diagnostics.Process.GetProcessById(System.Int32,System.String)
  - type: System.Diagnostics.Process.GetProcesses
    commentId: M:System.Diagnostics.Process.GetProcesses
  - type: System.Diagnostics.Process.GetCurrentProcess
    commentId: M:System.Diagnostics.Process.GetCurrentProcess
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  - type: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.GetProcessesByName(String, String)
- uid: System.Diagnostics.Process.Kill
  commentId: M:System.Diagnostics.Process.Kill
  id: Kill
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Kill()
  fullName: System.Diagnostics.Process.Kill()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Kill
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 78
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Immediately stops the associated process.</p>\n"
  syntax:
    content: public void Kill()
    content.vb: Public Sub Kill
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The associated process could not be terminated. </p>\n<p>-or-</p>\n<p>The process is terminating.</p>\n<p>-or- </p>\n<p>The associated process is a Win16 executable.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>You are attempting to call <xref href=\"System.Diagnostics.Process.Kill\" data-throw-if-not-resolved=\"false\"></xref> for a process that is running on a remote computer. The method is available only for processes running on the local computer.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The process has already exited. </p>\n<p>-or-</p>\n<p>There is no process associated with this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Environment.Exit(System.Int32)
    commentId: M:System.Environment.Exit(System.Int32)
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Start
    commentId: M:System.Diagnostics.Process.Start
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.Kill()
- uid: System.Diagnostics.Process.LeaveDebugMode
  commentId: M:System.Diagnostics.Process.LeaveDebugMode
  id: LeaveDebugMode
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: LeaveDebugMode()
  fullName: System.Diagnostics.Process.LeaveDebugMode()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LeaveDebugMode
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 79
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Takes a <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component out of the state that lets it interact with operating system processes that run in a special mode.</p>\n"
  syntax:
    content: public static void LeaveDebugMode()
    content.vb: Public Shared Sub LeaveDebugMode
  seealso:
  - type: System.Diagnostics.Process.EnterDebugMode
    commentId: M:System.Diagnostics.Process.EnterDebugMode
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.LeaveDebugMode()
- uid: System.Diagnostics.Process.OnExited
  commentId: M:System.Diagnostics.Process.OnExited
  id: OnExited
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: OnExited()
  fullName: System.Diagnostics.Process.OnExited()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OnExited
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 969
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Raises the <xref href=\"System.Diagnostics.Process.Exited\" data-throw-if-not-resolved=\"false\"></xref> event.</p>\n"
  syntax:
    content: protected void OnExited()
    content.vb: Protected Sub OnExited
  seealso:
  - type: System.Diagnostics.Process.Exited
    commentId: E:System.Diagnostics.Process.Exited
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: Process.OnExited()
- uid: System.Diagnostics.Process.Refresh
  commentId: M:System.Diagnostics.Process.Refresh
  id: Refresh
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Refresh()
  fullName: System.Diagnostics.Process.Refresh()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Refresh
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1005
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Discards any information about the associated process that has been cached inside the process component.</p>\n"
  syntax:
    content: public void Refresh()
    content.vb: Public Sub Refresh
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.Refresh()
- uid: System.Diagnostics.Process.Start
  commentId: M:System.Diagnostics.Process.Start
  id: Start
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Start()
  fullName: System.Diagnostics.Process.Start()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1075
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Starts (or reuses) the process resource that is specified by the <xref href=\"System.Diagnostics.Process.StartInfo\" data-throw-if-not-resolved=\"false\"></xref> property of this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component and associates it with the component.</p>\n"
  syntax:
    content: public bool Start()
    content.vb: Public Function Start As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a process resource is started; <strong>false</strong> if no new process resource is started (for example, if an existing process is reused).</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No file name was specified in the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component's <xref href=\"System.Diagnostics.Process.StartInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> member of the <xref href=\"System.Diagnostics.Process.StartInfo\" data-throw-if-not-resolved=\"false\"></xref> property is <strong>true</strong> while <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardInput\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardError\" data-throw-if-not-resolved=\"false\"></xref> is <strong>true</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>There was an error in opening the associated file. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The process object has already been disposed. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.StartInfo
    commentId: P:System.Diagnostics.Process.StartInfo
  - type: System.Diagnostics.ProcessStartInfo.FileName
    commentId: P:System.Diagnostics.ProcessStartInfo.FileName
  - type: System.Diagnostics.ProcessStartInfo
    commentId: T:System.Diagnostics.ProcessStartInfo
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.Start()
- uid: System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  commentId: M:System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  id: Start(System.Diagnostics.ProcessStartInfo)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Start(ProcessStartInfo)
  fullName: System.Diagnostics.Process.Start(System.Diagnostics.ProcessStartInfo)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1135
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Starts the process resource that is specified by the parameter containing process start information (for example, the file name of the process to start) and associates the resource with a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component.</p>\n"
  syntax:
    content: public static Process Start(ProcessStartInfo startInfo)
    content.vb: Public Shared Function Start(startInfo As ProcessStartInfo) As Process
    parameters:
    - id: startInfo
      type: System.Diagnostics.ProcessStartInfo
      description: "\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo\" data-throw-if-not-resolved=\"false\"></xref> that contains the information that is used to start the process, including the file name and any command-line arguments. </p>\n"
    return:
      type: System.Diagnostics.Process
      description: "\n<p>A new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that is associated with the process resource, or <strong>null</strong> if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <xref href=\"System.Diagnostics.Process.HasExited\" data-throw-if-not-resolved=\"false\"></xref> property already set to <strong>true</strong>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No file name was specified in the <em>startInfo</em> parameter's <xref href=\"System.Diagnostics.ProcessStartInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>startInfo</em> parameter is <strong>true</strong> and the <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardInput\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardOutput\" data-throw-if-not-resolved=\"false\"></xref>, or <xref href=\"System.Diagnostics.ProcessStartInfo.RedirectStandardError\" data-throw-if-not-resolved=\"false\"></xref> property is also <strong>true</strong>.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Diagnostics.ProcessStartInfo.UseShellExecute\" data-throw-if-not-resolved=\"false\"></xref> property of the <em>startInfo</em> parameter is <strong>true</strong> and the <xref href=\"System.Diagnostics.ProcessStartInfo.UserName\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong> or empty or the <xref href=\"System.Diagnostics.ProcessStartInfo.Password\" data-throw-if-not-resolved=\"false\"></xref> property is not <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>startInfo</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The process object has already been disposed. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified in the <em>startInfo</em> parameter's <xref href=\"System.Diagnostics.ProcessStartInfo.FileName\" data-throw-if-not-resolved=\"false\"></xref> property could not be found.</p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when opening the associated file. </p>\n<p>-or-</p>\n<p>The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\"</p>\n"
  seealso:
  - type: System.Diagnostics.Process.StartInfo
    commentId: P:System.Diagnostics.Process.StartInfo
  - type: System.Diagnostics.ProcessStartInfo.FileName
    commentId: P:System.Diagnostics.ProcessStartInfo.FileName
  - type: System.Diagnostics.ProcessStartInfo
    commentId: T:System.Diagnostics.ProcessStartInfo
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.Start(ProcessStartInfo)
- uid: System.Diagnostics.Process.Start(System.String)
  commentId: M:System.Diagnostics.Process.Start(System.String)
  id: Start(System.String)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Start(String)
  fullName: System.Diagnostics.Process.Start(System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1109
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Starts a process resource by specifying the name of a document or application file and associates the resource with a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component.</p>\n"
  syntax:
    content: public static Process Start(string fileName)
    content.vb: Public Shared Function Start(fileName As String) As Process
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The name of a document or application file to run in the process. </p>\n"
    return:
      type: System.Diagnostics.Process
      description: "\n<p>A new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that is associated with the process resource, or <strong>null</strong> if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <xref href=\"System.Diagnostics.Process.HasExited\" data-throw-if-not-resolved=\"false\"></xref> property already set to <strong>true</strong>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when opening the associated file. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The process object has already been disposed. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The PATH environment variable has a string containing quotes.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessStartInfo.FileName
    commentId: P:System.Diagnostics.ProcessStartInfo.FileName
  - type: System.Diagnostics.Process.StartInfo
    commentId: P:System.Diagnostics.Process.StartInfo
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.Start(String)
- uid: System.Diagnostics.Process.Start(System.String,System.String)
  commentId: M:System.Diagnostics.Process.Start(System.String,System.String)
  id: Start(System.String,System.String)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Start(String, String)
  fullName: System.Diagnostics.Process.Start(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Start
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1122
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Starts a process resource by specifying the name of an application and a set of command-line arguments, and associates the resource with a new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component.</p>\n"
  syntax:
    content: public static Process Start(string fileName, string arguments)
    content.vb: Public Shared Function Start(fileName As String, arguments As String) As Process
    parameters:
    - id: fileName
      type: System.String
      description: "\n<p>The name of an application file to run in the process. </p>\n"
    - id: arguments
      type: System.String
      description: "\n<p>Command-line arguments to pass when starting the process. </p>\n"
    return:
      type: System.Diagnostics.Process
      description: "\n<p>A new <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> that is associated with the process resource, or <strong>null</strong> if no process resource is started. Note that a new process that’s started alongside already running instances of the same process will be independent from the others. In addition, Start may return a non-null Process with its <xref href=\"System.Diagnostics.Process.HasExited\" data-throw-if-not-resolved=\"false\"></xref> property already set to <strong>true</strong>. In this case, the started process may have activated an existing instance of itself and then exited.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>fileName</em> or <em>arguments</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>An error occurred when opening the associated file. </p>\n<p>-or-</p>\n<p>The sum of the length of the arguments and the length of the full path to the process exceeds 2080. The error message associated with this exception can be one of the following: \"The data area passed to a system call is too small.\" or \"Access is denied.\"</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The process object has already been disposed. </p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The PATH environment variable has a string containing quotes.</p>\n"
  seealso:
  - type: System.Diagnostics.ProcessStartInfo.FileName
    commentId: P:System.Diagnostics.ProcessStartInfo.FileName
  - type: System.Diagnostics.Process.StartInfo
    commentId: P:System.Diagnostics.Process.StartInfo
  - type: System.Diagnostics.ProcessStartInfo
    commentId: T:System.Diagnostics.ProcessStartInfo
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Process.Start(String, String)
- uid: System.Diagnostics.Process.WaitForExit
  commentId: M:System.Diagnostics.Process.WaitForExit
  id: WaitForExit
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: WaitForExit()
  fullName: System.Diagnostics.Process.WaitForExit()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForExit
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1203
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Instructs the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component to wait indefinitely for the associated process to exit.</p>\n"
  syntax:
    content: public void WaitForExit()
    content.vb: Public Sub WaitForExit
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The wait setting could not be accessed. </p>\n"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "\n<p>No process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> has been set, and a <xref href=\"System.Diagnostics.Process.Handle\" data-throw-if-not-resolved=\"false\"></xref> from which the <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> property can be determined does not exist.</p>\n<p>-or- </p>\n<p>There is no process associated with this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>-or- </p>\n<p>You are attempting to call <xref href=\"System.Diagnostics.Process.WaitForExit\" data-throw-if-not-resolved=\"false\"></xref> for a process that is running on a remote computer. This method is available only for processes that are running on the local computer. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  - type: System.Diagnostics.Process.Handle
    commentId: P:System.Diagnostics.Process.Handle
  - type: System.Diagnostics.Process.ExitTime
    commentId: P:System.Diagnostics.Process.ExitTime
  - type: System.Diagnostics.Process.EnableRaisingEvents
    commentId: P:System.Diagnostics.Process.EnableRaisingEvents
  - type: System.Diagnostics.Process.HasExited
    commentId: P:System.Diagnostics.Process.HasExited
  - type: System.Diagnostics.Process.Exited
    commentId: E:System.Diagnostics.Process.Exited
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.WaitForExit()
- uid: System.Diagnostics.Process.WaitForExit(System.Int32)
  commentId: M:System.Diagnostics.Process.WaitForExit(System.Int32)
  id: WaitForExit(System.Int32)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: WaitForExit(Int32)
  fullName: System.Diagnostics.Process.WaitForExit(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitForExit
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1212
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Instructs the <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> component to wait the specified number of milliseconds for the associated process to exit.</p>\n"
  syntax:
    content: public bool WaitForExit(int milliseconds)
    content.vb: Public Function WaitForExit(milliseconds As Integer) As Boolean
    parameters:
    - id: milliseconds
      type: System.Int32
      description: "\n<p>The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the associated process has exited; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The wait setting could not be accessed. </p>\n"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "\n<p>No process <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> has been set, and a <xref href=\"System.Diagnostics.Process.Handle\" data-throw-if-not-resolved=\"false\"></xref> from which the <xref href=\"System.Diagnostics.Process.Id\" data-throw-if-not-resolved=\"false\"></xref> property can be determined does not exist.</p>\n<p>-or- </p>\n<p>There is no process associated with this <xref href=\"System.Diagnostics.Process\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n<p>-or- </p>\n<p>You are attempting to call <xref href=\"System.Diagnostics.Process.WaitForExit(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> for a process that is running on a remote computer. This method is available only for processes that are running on the local computer. </p>\n"
  seealso:
  - type: System.Diagnostics.Process.CloseMainWindow
    commentId: M:System.Diagnostics.Process.CloseMainWindow
  - type: System.Diagnostics.Process.Kill
    commentId: M:System.Diagnostics.Process.Kill
  - type: System.Diagnostics.Process.Handle
    commentId: P:System.Diagnostics.Process.Handle
  - type: System.Diagnostics.Process.ExitTime
    commentId: P:System.Diagnostics.Process.ExitTime
  - type: System.Diagnostics.Process.EnableRaisingEvents
    commentId: P:System.Diagnostics.Process.EnableRaisingEvents
  - type: System.Diagnostics.Process.HasExited
    commentId: P:System.Diagnostics.Process.HasExited
  - type: System.Diagnostics.Process.Exited
    commentId: E:System.Diagnostics.Process.Exited
  - type: System.Diagnostics.Process.SynchronizingObject
    commentId: P:System.Diagnostics.Process.SynchronizingObject
  see:
  - type: System.Security.Permissions.SecurityAction.LinkDemand
    commentId: F:System.Security.Permissions.SecurityAction.LinkDemand
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.WaitForExit(Int32)
- uid: System.Diagnostics.Process.Dispose
  commentId: M:System.Diagnostics.Process.Dispose
  id: Dispose
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Diagnostics.Process.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 1361
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Process.Dispose()
- uid: System.Diagnostics.Process.Dispose(System.Boolean)
  commentId: M:System.Diagnostics.Process.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Process
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Diagnostics.Process.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Diagnostics.Process/src/System/Diagnostics/Process.cs
    startLine: 706
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Release all resources used by this process.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: Process.Dispose(Boolean)
references:
- uid: System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  fullName: System.Diagnostics
  nameWithType: System.Diagnostics
  commentId: N:System.Diagnostics
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  fullName: System.DateTime
  nameWithType: DateTime
  commentId: T:System.DateTime
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Diagnostics.ProcessModule
  parent: System.Diagnostics
  isExternal: false
  name: ProcessModule
  fullName: System.Diagnostics.ProcessModule
  nameWithType: ProcessModule
  commentId: T:System.Diagnostics.ProcessModule
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
  nameWithType: IntPtr
  commentId: T:System.IntPtr
- uid: System.Diagnostics.ProcessModuleCollection
  parent: System.Diagnostics
  isExternal: false
  name: ProcessModuleCollection
  fullName: System.Diagnostics.ProcessModuleCollection
  nameWithType: ProcessModuleCollection
  commentId: T:System.Diagnostics.ProcessModuleCollection
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.Diagnostics.ProcessPriorityClass
  parent: System.Diagnostics
  isExternal: false
  name: ProcessPriorityClass
  fullName: System.Diagnostics.ProcessPriorityClass
  nameWithType: ProcessPriorityClass
  commentId: T:System.Diagnostics.ProcessPriorityClass
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  fullName: System.TimeSpan
  nameWithType: TimeSpan
  commentId: T:System.TimeSpan
- uid: Microsoft.Win32.SafeHandles.SafeProcessHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeProcessHandle
  fullName: Microsoft.Win32.SafeHandles.SafeProcessHandle
  nameWithType: SafeProcessHandle
  commentId: T:Microsoft.Win32.SafeHandles.SafeProcessHandle
- uid: Microsoft.Win32.SafeHandles
  isExternal: false
  name: Microsoft.Win32.SafeHandles
  fullName: Microsoft.Win32.SafeHandles
  nameWithType: Microsoft.Win32.SafeHandles
  commentId: N:Microsoft.Win32.SafeHandles
- uid: System.IO.StreamReader
  parent: System.IO
  isExternal: false
  name: StreamReader
  fullName: System.IO.StreamReader
  nameWithType: StreamReader
  commentId: T:System.IO.StreamReader
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  nameWithType: System.IO
  commentId: N:System.IO
- uid: System.IO.StreamWriter
  parent: System.IO
  isExternal: false
  name: StreamWriter
  fullName: System.IO.StreamWriter
  nameWithType: StreamWriter
  commentId: T:System.IO.StreamWriter
- uid: System.Diagnostics.ProcessStartInfo
  parent: System.Diagnostics
  isExternal: false
  name: ProcessStartInfo
  fullName: System.Diagnostics.ProcessStartInfo
  nameWithType: ProcessStartInfo
  commentId: T:System.Diagnostics.ProcessStartInfo
- uid: System.Diagnostics.ProcessThreadCollection
  parent: System.Diagnostics
  isExternal: false
  name: ProcessThreadCollection
  fullName: System.Diagnostics.ProcessThreadCollection
  nameWithType: ProcessThreadCollection
  commentId: T:System.Diagnostics.ProcessThreadCollection
- uid: System.Diagnostics.DataReceivedEventHandler
  parent: System.Diagnostics
  isExternal: false
  name: DataReceivedEventHandler
  fullName: System.Diagnostics.DataReceivedEventHandler
  nameWithType: DataReceivedEventHandler
  commentId: T:System.Diagnostics.DataReceivedEventHandler
- uid: System.EventHandler
  parent: System
  isExternal: false
  name: EventHandler
  fullName: System.EventHandler
  nameWithType: EventHandler
  commentId: T:System.EventHandler
- uid: System.Diagnostics.Process
  parent: System.Diagnostics
  isExternal: false
  name: Process
  fullName: System.Diagnostics.Process
  nameWithType: Process
  commentId: T:System.Diagnostics.Process
- uid: System.Diagnostics.Process[]
  name: Process[]
  fullName: System.Diagnostics.Process[]
  fullname.vb: System.Diagnostics.Process()
  name.vb: Process()
  spec.csharp:
  - uid: System.Diagnostics.Process
    name: Process
    fullName: System.Diagnostics.Process
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Diagnostics.Process
    name: Process
    fullName: System.Diagnostics.Process
  - name: ()
    fullName: ()
  nameWithType: Process[]
  nameWithType.vb: Process()
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.ComponentModel.Win32Exception
  isExternal: false
  name: Win32Exception
  fullName: System.ComponentModel.Win32Exception
  nameWithType: Win32Exception
  commentId: T:System.ComponentModel.Win32Exception
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  fullName: System.NullReferenceException
  nameWithType: NullReferenceException
  commentId: T:System.NullReferenceException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.SystemException
  parent: System
  isExternal: true
  name: SystemException
  fullName: System.SystemException
  commentId: T:System.SystemException
  nameWithType: SystemException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  fullName: System.IO.FileNotFoundException
  nameWithType: FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
