### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.DispatchOperation
  commentId: T:System.ServiceModel.Dispatcher.DispatchOperation
  id: DispatchOperation
  parent: System.ServiceModel.Dispatcher
  children:
  - System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)
  - System.ServiceModel.Dispatcher.DispatchOperation.Action
  - System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters
  - System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest
  - System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay
  - System.ServiceModel.Dispatcher.DispatchOperation.Name
  - System.ServiceModel.Dispatcher.DispatchOperation.Parent
  - System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply
  langs:
  - csharp
  - vb
  name: DispatchOperation
  nameWithType: DispatchOperation
  fullName: System.ServiceModel.Dispatcher.DispatchOperation
  type: Class
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: DispatchOperation
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1382
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Used to modify or extend the execution behavior of a specific service operation in a service endpoint. This class cannot be inherited. </p>\n"
  syntax:
    content: public sealed class DispatchOperation
    content.vb: Public NotInheritable Class DispatchOperation
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)
  commentId: M:System.ServiceModel.Dispatcher.DispatchOperation.#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)
  id: '#ctor(System.ServiceModel.Dispatcher.DispatchRuntime,System.String,System.String)'
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: DispatchOperation(DispatchRuntime, String, String)
  nameWithType: DispatchOperation.DispatchOperation(DispatchRuntime, String, String)
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.DispatchOperation(System.ServiceModel.Dispatcher.DispatchRuntime, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1384
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.DispatchOperation\" data-throw-if-not-resolved=\"false\"></xref> class using the specified dispatch run-time, name, and action values.</p>\n"
  syntax:
    content: public DispatchOperation(DispatchRuntime parent, string name, string action)
    content.vb: Public Sub New(parent As DispatchRuntime, name As String, action As String)
    parameters:
    - id: parent
      type: System.ServiceModel.Dispatcher.DispatchRuntime
      description: "\n<p>The associated <xref href=\"System.ServiceModel.Dispatcher.DispatchRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the dispatch operation.This is used as the key to the <xref href=\"System.ServiceModel.Dispatcher.DispatchRuntime.Operations\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
    - id: action
      type: System.String
      description: "\n<p>The message action for which this dispatch operation is being created.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Dispatcher.DispatchOperation.Action
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.Action
  id: Action
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: Action
  nameWithType: DispatchOperation.Action
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.Action
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Action
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1385
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the value of the action for this operation.</p>\n"
  syntax:
    content: public string Action { get; }
    content.vb: Public ReadOnly Property Action As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value of the action for this operation.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters
  id: AutoDisposeParameters
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: AutoDisposeParameters
  nameWithType: DispatchOperation.AutoDisposeParameters
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.AutoDisposeParameters
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: AutoDisposeParameters
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1386
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets whether parameters are to be automatically disposed.</p>\n"
  syntax:
    content: public bool AutoDisposeParameters { get; set; }
    content.vb: Public Property AutoDisposeParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the parameters are to be automatically disposed; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest
  id: DeserializeRequest
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: DeserializeRequest
  nameWithType: DispatchOperation.DeserializeRequest
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.DeserializeRequest
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: DeserializeRequest
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1387
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.ServiceModel.Dispatcher.DispatchOperation.Formatter\" data-throw-if-not-resolved=\"false\"></xref> property value is used to deserialize the request message.</p>\n"
  syntax:
    content: public bool DeserializeRequest { get; set; }
    content.vb: Public Property DeserializeRequest As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>false</strong> if the return type is of type <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref> and there are no out parameters; otherwise, <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay
  id: IsOneWay
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: IsOneWay
  nameWithType: DispatchOperation.IsOneWay
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.IsOneWay
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IsOneWay
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1388
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets a value that indicates if the operation is a one-way operation.</p>\n"
  syntax:
    content: public bool IsOneWay { get; }
    content.vb: Public ReadOnly Property IsOneWay As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the operation has only an input; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ServiceModel.Dispatcher.DispatchOperation.Name
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.Name
  id: Name
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DispatchOperation.Name
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.Name
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Name
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1389
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the name of the operation.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the operation. This is used as the key to the <xref href=\"System.ServiceModel.Dispatcher.DispatchRuntime.Operations\" data-throw-if-not-resolved=\"false\"></xref> collection.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ServiceModel.Dispatcher.DispatchOperation.Parent
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.Parent
  id: Parent
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: Parent
  nameWithType: DispatchOperation.Parent
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.Parent
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Parent
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1390
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the associated <xref href=\"System.ServiceModel.Dispatcher.DispatchRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public DispatchRuntime Parent { get; }
    content.vb: Public ReadOnly Property Parent As DispatchRuntime
    parameters: []
    return:
      type: System.ServiceModel.Dispatcher.DispatchRuntime
      description: "\n<p>The associated <xref href=\"System.ServiceModel.Dispatcher.DispatchRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply
  commentId: P:System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply
  id: SerializeReply
  parent: System.ServiceModel.Dispatcher.DispatchOperation
  langs:
  - csharp
  - vb
  name: SerializeReply
  nameWithType: DispatchOperation.SerializeReply
  fullName: System.ServiceModel.Dispatcher.DispatchOperation.SerializeReply
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SerializeReply
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1391
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets a value that specifies whether the <xref href=\"System.ServiceModel.Dispatcher.DispatchOperation.Formatter\" data-throw-if-not-resolved=\"false\"></xref> object serializes reply messages.</p>\n"
  syntax:
    content: public bool SerializeReply { get; set; }
    content.vb: Public Property SerializeReply As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.ServiceModel.Dispatcher.DispatchOperation.Formatter\" data-throw-if-not-resolved=\"false\"></xref> property serializes the return values into a reply message; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.ServiceModel.Dispatcher
  commentId: N:System.ServiceModel.Dispatcher
  isExternal: false
  name: System.ServiceModel.Dispatcher
  nameWithType: System.ServiceModel.Dispatcher
  fullName: System.ServiceModel.Dispatcher
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ServiceModel.Dispatcher.DispatchRuntime
  commentId: T:System.ServiceModel.Dispatcher.DispatchRuntime
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: DispatchRuntime
  nameWithType: DispatchRuntime
  fullName: System.ServiceModel.Dispatcher.DispatchRuntime
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
