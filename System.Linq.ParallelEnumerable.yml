items:
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  id: ParallelEnumerable
  parent: System.Linq
  children:
  - System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  - System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  - System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  - System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.Empty``1
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  - System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  - System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  - System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  - System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  - System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  - System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  - System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  - System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  - System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  - System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  - System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  - System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  - System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  - System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  - System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  - System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  - System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  - System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  langs:
  - csharp
  - vb
  name: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
  type: Class
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ParallelEnumerable
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 15
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Provides a set of methods for querying objects that implement ParallelQuery{TSource}. This is the parallel equivalent of <xref href=\"System.Linq.Enumerable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static class ParallelEnumerable
    content.vb: Public Module ParallelEnumerable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
  nameWithType: ParallelEnumerable
- uid: System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  id: Aggregate``1(System.Linq.ParallelQuery{``0},System.Func{``0,``0,``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TSource, TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 17
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Applies in parallel an accumulator function over a sequence.</p>\n"
  syntax:
    content: public static TSource Aggregate<TSource>(this ParallelQuery<TSource> source, Func<TSource, TSource, TSource> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource)(source As ParallelQuery(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: func
      type: System.Func{{TSource},{TSource},{TSource}}
      description: "\n<p>An accumulator function to be invoked on each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The final accumulator value.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TSource, TSource))
  name.vb: Aggregate(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, TSource, TSource))
  nameWithType: ParallelEnumerable.Aggregate<TSource>(ParallelQuery<TSource>, Func<TSource, TSource, TSource>)
  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, TSource, TSource))
- uid: System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  id: Aggregate``2(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 18
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value.</p>\n"
  syntax:
    content: public static TAccumulate Aggregate<TSource, TAccumulate>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    return:
      type: '{TAccumulate}'
      description: "\n<p>The final accumulator value.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate))
  name.vb: Aggregate(Of TSource, TAccumulate)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>)
  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate))
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 19
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</p>\n"
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: updateAccumulatorFunc
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on each element in a partition. </p>\n"
    - id: combineAccumulatorsFunc
      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on the yielded accumulator result from each partition. </p>\n"
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: "\n<p>A function to transform the final accumulator value into the result value. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    - id: TResult
      description: "\n<p>The type of the resulting value.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The transformed final accumulator value.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>updateAccumulatorFunc</em> or <em>combineAccumulatorsFunc</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, TAccumulate, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 20
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Applies in parallel an accumulator function over a sequence. The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</p>\n"
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: seed
      type: '{TAccumulate}'
      description: "\n<p>The initial accumulator value.</p>\n"
    - id: func
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on each element.</p>\n"
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: "\n<p>A function to transform the final accumulator value into the result value.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    - id: TResult
      description: "\n<p>The type of the resulting value.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The transformed final accumulator value.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>func</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), TAccumulate, System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), TAccumulate, Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  id: Aggregate``3(System.Linq.ParallelQuery{``0},System.Func{``1},System.Func{``1,``0,``1},System.Func{``1,``1,``1},System.Func{``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  fullName: System.Linq.ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TAccumulate>, System.Func<TAccumulate, TSource, TAccumulate>, System.Func<TAccumulate, TAccumulate, TAccumulate>, System.Func<TAccumulate, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Aggregate
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 21
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Applies in parallel an accumulator function over a sequence. This overload is not available in the sequential implementation.</p>\n"
  syntax:
    content: public static TResult Aggregate<TSource, TAccumulate, TResult>(this ParallelQuery<TSource> source, Func<TAccumulate> seedFactory, Func<TAccumulate, TSource, TAccumulate> updateAccumulatorFunc, Func<TAccumulate, TAccumulate, TAccumulate> combineAccumulatorsFunc, Func<TAccumulate, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Aggregate(Of TSource, TAccumulate, TResult)(source As ParallelQuery(Of TSource), seedFactory As Func(Of TAccumulate), updateAccumulatorFunc As Func(Of TAccumulate, TSource, TAccumulate), combineAccumulatorsFunc As Func(Of TAccumulate, TAccumulate, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to aggregate over.</p>\n"
    - id: seedFactory
      type: System.Func{{TAccumulate}}
      description: "\n<p>A function that returns the initial accumulator value. </p>\n"
    - id: updateAccumulatorFunc
      type: System.Func{{TAccumulate},{TSource},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on each element in a partition. </p>\n"
    - id: combineAccumulatorsFunc
      type: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
      description: "\n<p>An accumulator function to be invoked on the yielded accumulator result from each partition.</p>\n"
    - id: resultSelector
      type: System.Func{{TAccumulate},{TResult}}
      description: "\n<p>A function to transform the final accumulator value into the result value. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TAccumulate
      description: "\n<p>The type of the accumulator value.</p>\n"
    - id: TResult
      description: "\n<p>The type of the resulting value.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The transformed final accumulator value.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>seedFactory</em> or <em>updateAccumulatorFunc</em> or <em>combineAccumulatorsFunc</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TAccumulate), System.Func(Of TAccumulate, TSource, TAccumulate), System.Func(Of TAccumulate, TAccumulate, TAccumulate), System.Func(Of TAccumulate, TResult))
  name.vb: Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), Func(Of TAccumulate), Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
  nameWithType: ParallelEnumerable.Aggregate<TSource, TAccumulate, TResult>(ParallelQuery<TSource>, Func<TAccumulate>, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TAccumulate, TAccumulate>, Func<TAccumulate, TResult>)
  nameWithType.vb: ParallelEnumerable.Aggregate(Of TSource, TAccumulate, TResult)(ParallelQuery(Of TSource), Func(Of TAccumulate), Func(Of TAccumulate, TSource, TAccumulate), Func(Of TAccumulate, TAccumulate, TAccumulate), Func(Of TAccumulate, TResult))
- uid: System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: All``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.All<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: All
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 22
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines in parallel whether all elements of a sequence satisfy a condition.</p>\n"
  syntax:
    content: public static bool All<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function All(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements to apply the predicate to.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, false..</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.All(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: All(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.All<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.All(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0})
  id: Any``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 23
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines whether a parallel sequence contains any elements.</p>\n"
  syntax:
    content: public static bool Any<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to check for emptiness.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the source sequence contains any elements; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Any(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Any<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Any(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Any``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Any<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 24
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines in parallel whether any element of a sequence satisfies a condition.</p>\n"
  syntax:
    content: public static bool Any<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Any(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to whose elements the predicate will be applied.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if any elements in the source sequence pass the test in the specified predicate; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Any(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Any(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.Any<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.Any(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsEnumerable``1(System.Linq.ParallelQuery{``0})
  id: AsEnumerable``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsEnumerable<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsEnumerable<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsEnumerable
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 25
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Converts a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> into an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to force sequential evaluation of the query.</p>\n"
  syntax:
    content: public static IEnumerable<TSource> AsEnumerable<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsEnumerable(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to cast as <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The input sequence typed as <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsEnumerable(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsEnumerable(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.AsEnumerable<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.AsEnumerable(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  commentId: M:System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  id: AsOrdered(System.Linq.ParallelQuery)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsOrdered(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.AsOrdered(System.Linq.ParallelQuery)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsOrdered
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 26
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on non-generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</p>\n"
  syntax:
    content: public static ParallelQuery AsOrdered(this ParallelQuery source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsOrdered(source As ParallelQuery) As ParallelQuery
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: "\n<p>The input sequence.</p>\n"
    return:
      type: System.Linq.ParallelQuery
      description: "\n<p>The source sequence which will maintain the original ordering in the subsequent query operators.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>thrown if <em>source</em> contains no elements</p>\n<p>-or-</p>\n<p> if AsOrdered is called midway through a query. It is allowed to be called immediately after <xref href=\"System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ParallelEnumerable.AsOrdered(ParallelQuery)
- uid: System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsOrdered``1(System.Linq.ParallelQuery{``0})
  id: AsOrdered``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsOrdered<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsOrdered<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsOrdered
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 27
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Enables treatment of a data source as if it were ordered, overriding the default of unordered. AsOrdered may only be invoked on generic sequences returned by AsParallel, ParallelEnumerable.Range, and ParallelEnumerable.Repeat.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> AsOrdered<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsOrdered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The input sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The source sequence which will maintain the original ordering in the subsequent query operators.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Thrown if <em>source</em> contains no elements</p>\n<p>-or-</p>\n<p>if <em>source</em> is not one of AsParallel, ParallelEnumerable.Range, or ParallelEnumerable.Repeat.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsOrdered(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsOrdered(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.AsOrdered<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.AsOrdered(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  id: AsParallel(System.Collections.IEnumerable)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsParallel
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 28
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Enables parallelization of a query.</p>\n"
  syntax:
    content: public static ParallelQuery AsParallel(this IEnumerable source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsParallel(source As IEnumerable) As ParallelQuery
    parameters:
    - id: source
      type: System.Collections.IEnumerable
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to convert to a <xref href=\"System.Linq.ParallelQuery\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.ParallelQuery
      description: "\n<p>The source as a ParallelQuery to bind to ParallelEnumerable extension methods.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  id: AsParallel``1(System.Collections.Concurrent.Partitioner{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsParallel<TSource>(Partitioner<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Concurrent.Partitioner<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsParallel
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 29
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Enables parallelization of a query, as sourced by a custom partitioner that is responsible for splitting the input sequence into partitions.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> AsParallel<TSource>(this Partitioner<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsParallel(Of TSource)(source As Partitioner(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Concurrent.Partitioner{{TSource}}
      description: "\n<p>A partitioner over the input sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The <em>source</em> as a ParallelQuery to bind to ParallelEnumerable extension methods.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Concurrent.Partitioner(Of TSource))
  name.vb: AsParallel(Of TSource)(Partitioner(Of TSource))
  nameWithType: ParallelEnumerable.AsParallel<TSource>(Partitioner<TSource>)
  nameWithType.vb: ParallelEnumerable.AsParallel(Of TSource)(Partitioner(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  id: AsParallel``1(System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsParallel<TSource>(IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsParallel<TSource>(System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsParallel
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 30
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Enables parallelization of a query.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> AsParallel<TSource>(this IEnumerable<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsParallel(Of TSource)(source As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to convert to a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The source as a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> to bind to ParallelEnumerable extension methods.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsParallel(Of TSource)(System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: AsParallel(Of TSource)(IEnumerable(Of TSource))
  nameWithType: ParallelEnumerable.AsParallel<TSource>(IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.AsParallel(Of TSource)(IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsSequential``1(System.Linq.ParallelQuery{``0})
  id: AsSequential``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsSequential<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsSequential<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsSequential
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 31
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Converts a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> into an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to force sequential evaluation of the query.</p>\n"
  syntax:
    content: public static IEnumerable<TSource> AsSequential<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsSequential(Of TSource)(source As ParallelQuery(Of TSource)) As IEnumerable(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> to convert to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>The source as an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> to bind to sequential extension methods.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsSequential(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsSequential(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.AsSequential<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.AsSequential(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.AsUnordered``1(System.Linq.ParallelQuery{``0})
  id: AsUnordered``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: AsUnordered<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.AsUnordered<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AsUnordered
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 32
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Allows an intermediate query to be treated as if no ordering is implied among the elements.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> AsUnordered<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AsUnordered(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The input sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The source sequence with arbitrary order.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.AsUnordered(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: AsUnordered(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.AsUnordered<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.AsUnordered(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Decimal})
  id: Average(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 33
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static decimal Average(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Average(ParallelQuery(Of Decimal))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Decimal>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Double})
  id: Average(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 34
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static double Average(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Average(ParallelQuery(Of Double))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Double>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int32})
  id: Average(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 35
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static double Average(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Average(ParallelQuery(Of Int32))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Int32>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Int64})
  id: Average(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 36
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static double Average(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Long)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Average(ParallelQuery(Of Int64))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Int64>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 37
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static decimal ? Average(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 38
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static double ? Average(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: "\n<p>The source sequence.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>Returns the average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>A sequence of values that are used to calculate an average.The average of the sequence of values.<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 39
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static double ? Average(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Integer?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 40
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static double ? Average(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Long?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Average(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 41
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static float ? Average(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Average(ParallelQuery(Of Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery{System.Single})
  id: Average(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 42
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values.</p>\n"
  syntax:
    content: public static float Average(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Average(ParallelQuery(Of Single))
  nameWithType: ParallelEnumerable.Average(ParallelQuery<Single>)
  nameWithType.vb: ParallelEnumerable.Average(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 43
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static decimal Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>(Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 44
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 45
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 46
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 47
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static decimal ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 48
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 49
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 50
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum or count of the elements in the sequence is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 51
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static float ? Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Average``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Average<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Average
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 52
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the average of a sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static float Average<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Average(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values that are used to calculate an average.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The average of the sequence of values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p> (Thrown as inner exception in an <xref href=\"System.AggregateException\" data-throw-if-not-resolved=\"false\"></xref>). The <em>selector</em> function returns a value greater than MaxValue for the element type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Average(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  nameWithType: ParallelEnumerable.Average<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  nameWithType.vb: ParallelEnumerable.Average(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  commentId: M:System.Linq.ParallelEnumerable.Cast``1(System.Linq.ParallelQuery)
  id: Cast``1(System.Linq.ParallelQuery)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Cast<TResult>(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.Cast<TResult>(System.Linq.ParallelQuery)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Cast
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 53
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Converts the elements of a ParallelQuery to the specified type.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Cast<TResult>(this ParallelQuery source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Cast(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: "\n<p>The sequence that contains the elements to be converted.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type to convert the elements of <em>source</em> to.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that contains each element of the source sequence converted to the specified type.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source sequence could not be converted to <em>TResult</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Cast(Of TResult)(System.Linq.ParallelQuery)
  name.vb: Cast(Of TResult)(ParallelQuery)
  nameWithType: ParallelEnumerable.Cast<TResult>(ParallelQuery)
  nameWithType.vb: ParallelEnumerable.Cast(Of TResult)(ParallelQuery)
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Concat``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 54
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Concat overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Concat<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  nameWithType: ParallelEnumerable.Concat<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.Concat(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Concat``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Concat<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Concat
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 56
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Concatenates two parallel sequences.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Concat<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Concat(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The first sequence to concatenate.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to concatenate to the first sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the concatenated elements of the two input sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Concat(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Concat(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Concat<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Concat(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  commentId: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0)
  id: Contains``1(System.Linq.ParallelQuery{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(ParallelQuery<TSource>, TSource)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 57
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines in parallel whether a sequence contains a specified element by using the default equality comparer.</p>\n"
  syntax:
    content: public static bool Contains<TSource>(this ParallelQuery<TSource> source, TSource value)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence in which to locate a value.</p>\n"
    - id: value
      type: '{TSource}'
      description: "\n<p>The value to locate in the sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the source sequence contains an element that has the specified value; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)
  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource)
  nameWithType: ParallelEnumerable.Contains<TSource>(ParallelQuery<TSource>, TSource)
  nameWithType.vb: ParallelEnumerable.Contains(Of TSource)(ParallelQuery(Of TSource), TSource)
- uid: System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: Contains``1(System.Linq.ParallelQuery{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Contains<TSource>(System.Linq.ParallelQuery<TSource>, TSource, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 58
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines in parallel whether a sequence contains a specified element by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static bool Contains<TSource>(this ParallelQuery<TSource> source, TSource value, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Contains(Of TSource)(source As ParallelQuery(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence in which to locate a value.</p>\n"
    - id: value
      type: '{TSource}'
      description: "\n<p>The value to locate in the sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An equality comparer to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the source sequence contains an element that has the specified value; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Contains(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource, System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Contains(Of TSource)(ParallelQuery(Of TSource), TSource, IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Contains<TSource>(ParallelQuery<TSource>, TSource, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Contains(Of TSource)(ParallelQuery(Of TSource), TSource, IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0})
  id: Count``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 59
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the number of elements in a parallel sequence.</p>\n"
  syntax:
    content: public static int Count<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements to be counted.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of elements in the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The number of elements in source is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. (In this case the InnerException is <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>) -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Count(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Count<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Count(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Count``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Count<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 60
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns a number that represents how many elements in the specified parallel sequence satisfy a condition.</p>\n"
  syntax:
    content: public static int Count<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Count(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements to be counted.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The number of elements in source is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. (In this case the InnerException is <xref href=\"System.OverflowException\" data-throw-if-not-resolved=\"false\"></xref>) -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Count(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Count(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.Count<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.Count(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 61
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the elements of the specified parallel sequence or the type parameter's default value in a singleton collection if the sequence is empty.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return a default value for if it is empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains default(TSource) if <em>source</em> is empty; otherwise, <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.DefaultIfEmpty<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  commentId: M:System.Linq.ParallelEnumerable.DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  id: DefaultIfEmpty``1(System.Linq.ParallelQuery{``0},``0)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)
  fullName: System.Linq.ParallelEnumerable.DefaultIfEmpty<TSource>(System.Linq.ParallelQuery<TSource>, TSource)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultIfEmpty
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 62
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the elements of the specified parallel sequence or the specified value in a singleton collection if the sequence is empty.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> DefaultIfEmpty<TSource>(this ParallelQuery<TSource> source, TSource defaultValue)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DefaultIfEmpty(Of TSource)(source As ParallelQuery(Of TSource), defaultValue As TSource) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the specified value for if it is empty.</p>\n"
    - id: defaultValue
      type: '{TSource}'
      description: "\n<p>The value to return if the sequence is empty.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains defaultValue if <em>source</em> is empty; otherwise, <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.DefaultIfEmpty(Of TSource)(System.Linq.ParallelQuery(Of TSource), TSource)
  name.vb: DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource), TSource)
  nameWithType: ParallelEnumerable.DefaultIfEmpty<TSource>(ParallelQuery<TSource>, TSource)
  nameWithType.vb: ParallelEnumerable.DefaultIfEmpty(Of TSource)(ParallelQuery(Of TSource), TSource)
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0})
  id: Distinct``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 63
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns distinct elements from a parallel sequence by using the default equality comparer to compare values.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Distinct<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to remove duplicate elements from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains distinct elements from the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Distinct<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Distinct(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Distinct``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Distinct<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Distinct
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 64
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns distinct elements from a parallel sequence by using a specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Distinct<TSource>(this ParallelQuery<TSource> source, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Distinct(Of TSource)(source As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to remove duplicate elements from.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref>  to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains distinct elements from the source sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Distinct(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Distinct(Of TSource)(ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Distinct<TSource>(ParallelQuery<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Distinct(Of TSource)(ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: ElementAt``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ElementAt<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.ElementAt<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAt
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 65
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the element at a specified index in a parallel sequence.</p>\n"
  syntax:
    content: public static TSource ElementAt<TSource>(this ParallelQuery<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAt(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to return an element from.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to retrieve.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The element at the specified position in the source sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0 or greater than or equal to the number of elements in <em>source</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ElementAt(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: ElementAt(Of TSource)(ParallelQuery(Of TSource), Int32)
  nameWithType: ParallelEnumerable.ElementAt<TSource>(ParallelQuery<TSource>, Int32)
  nameWithType.vb: ParallelEnumerable.ElementAt(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: ElementAtOrDefault``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.ElementAtOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ElementAtOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 66
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the element at a specified index in a parallel sequence or a default value if the index is out of range.</p>\n"
  syntax:
    content: public static TSource ElementAtOrDefault<TSource>(this ParallelQuery<TSource> source, int index)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ElementAtOrDefault(Of TSource)(source As ParallelQuery(Of TSource), index As Integer) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to return an element from.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to retrieve.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(TSource) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ElementAtOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: ElementAtOrDefault(Of TSource)(ParallelQuery(Of TSource), Int32)
  nameWithType: ParallelEnumerable.ElementAtOrDefault<TSource>(ParallelQuery<TSource>, Int32)
  nameWithType.vb: ParallelEnumerable.ElementAtOrDefault(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.Empty``1
  commentId: M:System.Linq.ParallelEnumerable.Empty``1
  id: Empty``1
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Empty<TResult>()
  fullName: System.Linq.ParallelEnumerable.Empty<TResult>()
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 67
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns an empty ParallelQuery{TResult} that has the specified type argument.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Empty<TResult>()
    content.vb: Public Shared Function Empty(Of TResult) As ParallelQuery(Of TResult)
    typeParameters:
    - id: TResult
      description: "\n<p>The type to assign to the type parameter of the returned generic sequence.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>An empty sequence whose type argument is <em>TResult</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Empty(Of TResult)()
  name.vb: Empty(Of TResult)()
  nameWithType: ParallelEnumerable.Empty<TResult>()
  nameWithType.vb: ParallelEnumerable.Empty(Of TResult)()
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 68
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Except overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 70
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Except overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 72
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Produces the set difference of two parallel sequences by using the default equality comparer to compare values.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements that are not also in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Except``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Except<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Except
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 73
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Produces the set difference of two parallel sequences by using the specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Except<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Except(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements that are not also in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. </p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>\n<xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the set difference of the elements of two sequences.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Except(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Except<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Except(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0})
  id: First``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 74
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a parallel sequence.</p>\n"
  syntax:
    content: public static TSource First<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the first element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The first element in the specified sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: First(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.First<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.First(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: First``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.First<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: First
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 75
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the first element in a parallel sequence that satisfies a specified condition.</p>\n"
  syntax:
    content: public static TSource First<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function First(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The first element in the sequence that passes the test in the specified predicate function.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element in <em>source</em> satisfies the condition in <em>predicate</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.First(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: First(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.First<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.First(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 76
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the first element of a parallel sequence, or a default value if the sequence contains no elements.</p>\n"
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the first element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(TSource) if <em>source</em> is empty; otherwise, the first element in <em>source</em>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.FirstOrDefault<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.FirstOrDefault(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: FirstOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.FirstOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FirstOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 77
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the first element of the parallel sequence that satisfies a condition or a default value if no such element is found.</p>\n"
  syntax:
    content: public static TSource FirstOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function FirstOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default(TSource) if <em>source</em> is empty or if no element passes the test specified by predicate; otherwise, the first element in <em>source</em> that passes the test specified by predicate.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.FirstOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: FirstOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.FirstOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.FirstOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  commentId: M:System.Linq.ParallelEnumerable.ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  id: ForAll``1(System.Linq.ParallelQuery{``0},System.Action{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)
  fullName: System.Linq.ParallelEnumerable.ForAll<TSource>(System.Linq.ParallelQuery<TSource>, System.Action<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ForAll
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 78
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel the specified action for each element in the <em>source</em>.</p>\n"
  syntax:
    content: public static void ForAll<TSource>(this ParallelQuery<TSource> source, Action<TSource> action)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ForAll(Of TSource)(source As ParallelQuery(Of TSource), action As Action(Of TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> whose elements will be processed by <em>action</em>.</p>\n"
    - id: action
      type: System.Action{{TSource}}
      description: "\n<p>An Action to invoke on each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ForAll(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Action(Of TSource))
  name.vb: ForAll(Of TSource)(ParallelQuery(Of TSource), Action(Of TSource))
  nameWithType: ParallelEnumerable.ForAll<TSource>(ParallelQuery<TSource>, Action<TSource>)
  nameWithType.vb: ParallelEnumerable.ForAll(Of TSource)(ParallelQuery(Of TSource), Action(Of TSource))
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 79
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a specified key selector function.</p>\n"
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource}that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}
      description: "\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 80
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and compares the keys by using a specified <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TSource>> GroupBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TSource))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.OrderedParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}
      description: "\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 81
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</p>\n"
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ParallelQuery(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>An <xref href=\"System.Linq.OrderedParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in the <xref href=\"System.Linq.IGrouping`2\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 82
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a key selector function. The keys are compared by using a comparer and each group's elements are projected by using a specified function.</p>\n"
  syntax:
    content: public static ParallelQuery<IGrouping<TKey, TElement>> GroupBy<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of IGrouping(Of TKey, TElement))
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource}that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an IGrouping.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An IComparer{TSource} to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in the IGrouping</p>\n"
    return:
      type: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}
      description: "\n<p>A sequence of groups that are sorted descending according to <em>TKey</em>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 83
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult))
  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult))
- uid: System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 84
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The keys are compared by using a specified comparer.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TKey, IEnumerable<TSource>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence of groups.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TKey, IEnumerable<TSource>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TKey, IEnumerable(Of TSource), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 85
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups in parallel the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. The elements of each group are projected by using a specified function.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an IGrouping<TKey, TElement>.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each IGrouping{TKey, TElement}.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult))
- uid: System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  id: GroupBy``4(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 86
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key. Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> GroupBy<TSource, TKey, TElement, TResult>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, Func<TKey, IEnumerable<TElement>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupBy(Of TSource, TKey, TElement, TResult)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements to group.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract the key for each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A function to map each source element to an element in an IGrouping{Key, TElement}.</p>\n"
    - id: resultSelector
      type: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
      description: "\n<p>A function to create a result value from each group.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the elements in each IGrouping{TKey, TElement}.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result value returned by <em>resultSelector</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence of elements of type <em>TResult</em> where each element represents a projection over a group and its key.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.GroupBy<TSource, TKey, TElement, TResult>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, Func<TKey, IEnumerable<TElement>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.GroupBy(Of TSource, TKey, TElement, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), Func(Of TKey, IEnumerable(Of TElement), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 87
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This GroupJoin overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TInner
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TKey
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TResult
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 89
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This GroupJoin overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TInner
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TKey
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TResult
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 91
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Correlates in parallel the elements of two sequences based on equality of keys and groups the results. The default equality comparer is used to compare keys.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>)
  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult))
- uid: System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  id: GroupJoin``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GroupJoin
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 92
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Correlates in parallel the elements of two sequences based on key equality and groups the results. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> GroupJoin<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, IEnumerable<TInner>, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GroupJoin(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to hash and compare keys.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing a grouped join on two sequences.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.GroupJoin<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, IEnumerable<TInner>, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.GroupJoin(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, IEnumerable(Of TInner), TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 93
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Intersect overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 95
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Intersect overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 97
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Produces the set intersection of two parallel sequences by using the default equality comparer to compare values.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements that also appear in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements that also appear in the first sequence will be returned.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Intersect``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Intersect<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Intersect
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 98
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Produces the set intersection of two parallel sequences by using the specified IEqualityComparer{T} to compare values.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Intersect<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Intersect(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements that also appear in <em>second</em> will be returned.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements that also appear in the first sequence will be returned.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements that form the set intersection of two sequences.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Intersect(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Intersect<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Intersect(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 99
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Join overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when invoked.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TInner
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TKey
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TResult
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Collections.Generic.IEnumerable<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 101
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Join overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when invoked.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, IEnumerable<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: inner
      type: System.Collections.Generic.IEnumerable{{TInner}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TInner
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TKey
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TResult
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Collections.Generic.IEnumerable(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, IEnumerable<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), IEnumerable(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 103
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Correlates in parallel the elements of two sequences based on matching keys. The default equality comparer is used to compare keys.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>)
  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult))
- uid: System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  commentId: M:System.Linq.ParallelEnumerable.Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  id: Join``4(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(System.Linq.ParallelQuery<TOuter>, System.Linq.ParallelQuery<TInner>, System.Func<TOuter, TKey>, System.Func<TInner, TKey>, System.Func<TOuter, TInner, TResult>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Join
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 104
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Correlates in parallel the elements of two sequences based on matching keys. A specified <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> is used to compare keys.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Join<TOuter, TInner, TKey, TResult>(this ParallelQuery<TOuter> outer, ParallelQuery<TInner> inner, Func<TOuter, TKey> outerKeySelector, Func<TInner, TKey> innerKeySelector, Func<TOuter, TInner, TResult> resultSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Join(Of TOuter, TInner, TKey, TResult)(outer As ParallelQuery(Of TOuter), inner As ParallelQuery(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As ParallelQuery(Of TResult)
    parameters:
    - id: outer
      type: System.Linq.ParallelQuery{{TOuter}}
      description: "\n<p>The first sequence to join.</p>\n"
    - id: inner
      type: System.Linq.ParallelQuery{{TInner}}
      description: "\n<p>The sequence to join to the first sequence.</p>\n"
    - id: outerKeySelector
      type: System.Func{{TOuter},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the first sequence.</p>\n"
    - id: innerKeySelector
      type: System.Func{{TInner},{TKey}}
      description: "\n<p>A function to extract the join key from each element of the second sequence.</p>\n"
    - id: resultSelector
      type: System.Func{{TOuter},{TInner},{TResult}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to hash and compare keys.</p>\n"
    typeParameters:
    - id: TOuter
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TInner
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TKey
      description: "\n<p>The type of the keys returned by the key selector functions.</p>\n"
    - id: TResult
      description: "\n<p>The type of the result elements.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing an inner join on two sequences.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>action</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(System.Linq.ParallelQuery(Of TOuter), System.Linq.ParallelQuery(Of TInner), System.Func(Of TOuter, TKey), System.Func(Of TInner, TKey), System.Func(Of TOuter, TInner, TResult), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.Join<TOuter, TInner, TKey, TResult>(ParallelQuery<TOuter>, ParallelQuery<TInner>, Func<TOuter, TKey>, Func<TInner, TKey>, Func<TOuter, TInner, TResult>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.Join(Of TOuter, TInner, TKey, TResult)(ParallelQuery(Of TOuter), ParallelQuery(Of TInner), Func(Of TOuter, TKey), Func(Of TInner, TKey), Func(Of TOuter, TInner, TResult), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0})
  id: Last``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 105
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a parallel sequence.</p>\n"
  syntax:
    content: public static TSource Last<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the last element from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The value at the last position in the source sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Last(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Last<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Last(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Last``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Last<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Last
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 106
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a parallel sequence that satisfies a specified condition.</p>\n"
  syntax:
    content: public static TSource Last<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Last(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The last element in the sequence that passes the test in the specified predicate function.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element in <em>source</em> satisfies the condition in <em>predicate</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Last(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Last(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.Last<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.Last(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0})
  id: LastOrDefault``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 107
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a parallel sequence, or a default value if the sequence contains no elements.</p>\n"
  syntax:
    content: public static TSource LastOrDefault<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return an element from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default() if the source sequence is empty; otherwise, the last element in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.LastOrDefault<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.LastOrDefault(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: LastOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.LastOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LastOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 108
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the last element of a parallel sequence that satisfies a condition, or a default value if no such element is found.</p>\n"
  syntax:
    content: public static TSource LastOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LastOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return an element from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>default() if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LastOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LastOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.LastOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.LastOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0})
  id: LongCount``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 109
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns an Int64 that represents the total number of elements in a parallel sequence.</p>\n"
  syntax:
    content: public static long LongCount<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements to be counted.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The number of elements in the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The number of elements in source is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The computed result is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.LongCount<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.LongCount(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: LongCount``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.LongCount<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LongCount
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 110
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns an Int64 that represents how many elements in a parallel sequence satisfy a condition.</p>\n"
  syntax:
    content: public static long LongCount<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function LongCount(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements to be counted.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>A number that represents how many elements in the sequence satisfy the condition in the predicate function.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The number of elements in source is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>The computed result is greater than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.LongCount(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: LongCount(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.LongCount<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.LongCount(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Decimal})
  id: Max(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 111
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static decimal Max(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Max(ParallelQuery(Of Decimal))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Decimal>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Double})
  id: Max(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 112
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static double Max(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Max(ParallelQuery(Of Double))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Double>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int32})
  id: Max(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 113
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static int Max(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Max(ParallelQuery(Of Int32))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Int32>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Int64})
  id: Max(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 114
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static long Max(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Max(ParallelQuery(Of Int64))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Int64>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 115
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static decimal ? Max(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 116
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static double ? Max(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 117
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static int ? Max(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 118
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static long ? Max(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Max(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 119
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static float ? Max(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Max(ParallelQuery(Of Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery{System.Single})
  id: Max(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 120
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static float Max(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Max(ParallelQuery(Of Single))
  nameWithType: ParallelEnumerable.Max(ParallelQuery<Single>)
  nameWithType.vb: ParallelEnumerable.Max(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0})
  id: Max``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 121
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the maximum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static TSource Max<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements in the source sequence.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 122
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static decimal Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 123
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static double Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 124
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static int Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 125
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static long Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 126
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static decimal ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 127
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static double ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 128
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static int ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 129
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static long ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 130
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static float ? Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Max``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 131
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static float Max<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  nameWithType: ParallelEnumerable.Max<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Max``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Max<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Max
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 132
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the maximum value.</p>\n"
  syntax:
    content: public static TResult Max<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Max(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the maximum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by <em>selector</em>.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The maximum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Max(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Max(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
  nameWithType: ParallelEnumerable.Max<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  nameWithType.vb: ParallelEnumerable.Max(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Decimal})
  id: Min(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 133
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static decimal Min(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Min(ParallelQuery(Of Decimal))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Decimal>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Double})
  id: Min(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 134
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static double Min(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Min(ParallelQuery(Of Double))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Double>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int32})
  id: Min(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 135
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static int Min(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Min(ParallelQuery(Of Int32))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Int32>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Int64})
  id: Min(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 136
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static long Min(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Min(ParallelQuery(Of Int64))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Int64>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 137
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static decimal ? Min(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 138
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static double ? Min(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 139
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static int ? Min(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 140
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static long ? Min(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Min(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 141
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static float ? Min(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Min(ParallelQuery(Of Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery{System.Single})
  id: Min(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 142
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static float Min(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Min(ParallelQuery(Of Single))
  nameWithType: ParallelEnumerable.Min(ParallelQuery<Single>)
  nameWithType.vb: ParallelEnumerable.Min(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0})
  id: Min``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 143
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the minimum value in a parallel sequence of values.</p>\n"
  syntax:
    content: public static TSource Min<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 144
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static decimal Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 145
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static double Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 146
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static int Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 147
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static long Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 148
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static decimal ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 149
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static double ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 150
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static int ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 151
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static long ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 152
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static float ? Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Min``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 153
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static float Min<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  nameWithType: ParallelEnumerable.Min<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Min``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Min<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Min
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 154
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Invokes in parallel a transform function on each element of a sequence and returns the minimum value.</p>\n"
  syntax:
    content: public static TResult Min<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Min(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As TResult
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to determine the minimum value of.</p>\n"
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the value returned by <em>selector</em>.</p>\n"
    return:
      type: '{TResult}'
      description: "\n<p>The minimum value in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> contains no elements and <em>TSource</em> is a non-nullable value type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Min(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Min(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
  nameWithType: ParallelEnumerable.Min<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  nameWithType.vb: ParallelEnumerable.Min(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  commentId: M:System.Linq.ParallelEnumerable.OfType``1(System.Linq.ParallelQuery)
  id: OfType``1(System.Linq.ParallelQuery)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OfType<TResult>(ParallelQuery)
  fullName: System.Linq.ParallelEnumerable.OfType<TResult>(System.Linq.ParallelQuery)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OfType
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 155
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Filters the elements of a ParallelQuery based on a specified type.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> OfType<TResult>(this ParallelQuery source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OfType(Of TResult)(source As ParallelQuery) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery
      description: "\n<p>The sequence whose elements to filter.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type to filter the elements of the sequence on.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that contains elements from the input sequence of type .</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OfType(Of TResult)(System.Linq.ParallelQuery)
  name.vb: OfType(Of TResult)(ParallelQuery)
  nameWithType: ParallelEnumerable.OfType<TResult>(ParallelQuery)
  nameWithType.vb: ParallelEnumerable.OfType(Of TResult)(ParallelQuery)
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 156
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sorts in parallel the elements of a sequence in ascending order according to a key.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderBy``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderBy<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 157
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sorts in parallel the elements of a sequence in ascending order by using a specified comparer.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderBy<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderBy(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An IComparer{TKey} to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderBy(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  nameWithType: ParallelEnumerable.OrderBy<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.OrderBy(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 158
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sorts in parallel the elements of a sequence in descending order according to a key.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: OrderByDescending``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.OrderByDescending<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OrderByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 159
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sorts the elements of a sequence in descending order by using a specified comparer.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> OrderByDescending<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function OrderByDescending(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to order.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An IComparer{TKey} to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} whose elements are sorted descending according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>KeySelector</em> is a null reference (Nothing in Visual Basic)..</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.OrderByDescending(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  nameWithType: ParallelEnumerable.OrderByDescending<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.OrderByDescending(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Range(System.Int32,System.Int32)
  id: Range(System.Int32,System.Int32)
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Range(Int32, Int32)
  fullName: System.Linq.ParallelEnumerable.Range(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Range
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 160
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Generates a parallel sequence of integral numbers within a specified range.</p>\n"
  syntax:
    content: public static ParallelQuery<int> Range(int start, int count)
    content.vb: Public Shared Function Range(start As Integer, count As Integer) As ParallelQuery(Of Integer)
    parameters:
    - id: start
      type: System.Int32
      description: "\n<p>The value of the first integer in the sequence.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of sequential integers to generate.</p>\n"
    return:
      type: System.Linq.ParallelQuery{System.Int32}
      description: "\n<p>An IEnumerable<Int32> in C# or IEnumerable(Of Int32) in Visual Basic that contains a range of sequential integral numbers.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than 0 -or- <em>start</em> + <em>count</em> - 1 is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ParallelEnumerable.Range(Int32, Int32)
- uid: System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Repeat``1(``0,System.Int32)
  id: Repeat``1(``0,System.Int32)
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Repeat<TResult>(TResult, Int32)
  fullName: System.Linq.ParallelEnumerable.Repeat<TResult>(TResult, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Repeat
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 161
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Generates a parallel sequence that contains one repeated value.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Repeat<TResult>(TResult element, int count)
    content.vb: Public Shared Function Repeat(Of TResult)(element As TResult, count As Integer) As ParallelQuery(Of TResult)
    parameters:
    - id: element
      type: '{TResult}'
      description: "\n<p>The value to be repeated.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times to repeat the value in the generated sequence.</p>\n"
    typeParameters:
    - id: TResult
      description: "\n<p>The type of the value to be repeated in the result sequence.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that contains a repeated value.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than 0.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Repeat(Of TResult)(TResult, System.Int32)
  name.vb: Repeat(Of TResult)(TResult, Int32)
  nameWithType: ParallelEnumerable.Repeat<TResult>(TResult, Int32)
  nameWithType.vb: ParallelEnumerable.Repeat(Of TResult)(TResult, Int32)
- uid: System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Reverse``1(System.Linq.ParallelQuery{``0})
  id: Reverse``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Reverse<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Reverse<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reverse
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 162
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Inverts the order of the elements in a parallel sequence.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Reverse<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Reverse(Of TSource)(source As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to reverse.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements correspond to those of the input sequence in reverse order.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Reverse(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Reverse(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Reverse<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Reverse(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 163
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Projects in parallel each element of a sequence into a new form.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Select<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to invoke a transform function on.</p>\n"
    - id: selector
      type: System.Func{{TSource},{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of elements resturned by selector.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence whose elements are the result of invoking the transform function on each element of <em>source</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TResult))
  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
  nameWithType: ParallelEnumerable.Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, TResult>)
  nameWithType.vb: ParallelEnumerable.Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, TResult))
- uid: System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  commentId: M:System.Linq.ParallelEnumerable.Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  id: Select``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)
  fullName: System.Linq.ParallelEnumerable.Select<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Select
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 164
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Projects in parallel each element of a sequence into a new form by incorporating the element's index.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Select<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, TResult> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Select(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to invoke a transform function on.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32,{TResult}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of elements resturned by selector.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence whose elements are the result of invoking the transform function on each element of <em>source</em>, based on the index supplied to <em>selector</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by the query. This condition might occur in streaming scenarios.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Select(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, TResult))
  name.vb: Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, TResult))
  nameWithType: ParallelEnumerable.Select<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, TResult>)
  nameWithType.vb: ParallelEnumerable.Select(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, TResult))
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 165
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Projects in parallel each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref> and flattens the resulting sequences into one sequence.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the sequence returned by selector.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))
  nameWithType: ParallelEnumerable.SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TResult>>)
  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TResult)))
- uid: System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  id: SelectMany``2(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 166
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Projects in parallel each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, and flattens the resulting sequences into one sequence. The index of each source element is used in the projected form of that element.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TResult>> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TResult)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of the elements of the sequence returned by selector.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by the query.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult)))
  name.vb: SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))
  nameWithType: ParallelEnumerable.SelectMany<TSource, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TResult>>)
  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TResult)))
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 167
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this ParallelQuery<TSource> source, Func<TSource, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: collectionSelector
      type: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
      description: "\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n"
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\n"
    - id: TCollection
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of elements in the result sequence.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> based on the index supplied to <em>collectionSelector</em>, and then mapping each of those sequence elements and their corresponding source element to a result element. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by the query.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  nameWithType: ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  id: SelectMany``3(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  fullName: System.Linq.ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>, System.Func<TSource, TCollection, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SelectMany
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 168
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Projects each element of a sequence to an <xref href=\"System.Collections.Generic.IEnumerable`1\" data-throw-if-not-resolved=\"false\"></xref>, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein. The index of each source element is used in the intermediate projected form of that element.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> SelectMany<TSource, TCollection, TResult>(this ParallelQuery<TSource> source, Func<TSource, int, IEnumerable<TCollection>> collectionSelector, Func<TSource, TCollection, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SelectMany(Of TSource, TCollection, TResult)(source As ParallelQuery(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to project.</p>\n"
    - id: collectionSelector
      type: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
      description: "\n<p>A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</p>\n"
    - id: resultSelector
      type: System.Func{{TSource},{TCollection},{TResult}}
      description: "\n<p>A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the intermediate elements collected by <em>collectionSelector</em>.</p>\n"
    - id: TCollection
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TResult
      description: "\n<p>The type of elements to return.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence whose elements are the result of invoking the one-to-many transform function <em>collectionSelector</em> on each element of <em>source</em> based on the index supplied to <em>collectionSelector</em>, and then mapping each of those sequence elements and their corresponding source element to a result element.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by the query.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection)), System.Func(Of TSource, TCollection, TResult))
  name.vb: SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
  nameWithType: ParallelEnumerable.SelectMany<TSource, TCollection, TResult>(ParallelQuery<TSource>, Func<TSource, Int32, IEnumerable<TCollection>>, Func<TSource, TCollection, TResult>)
  nameWithType.vb: ParallelEnumerable.SelectMany(Of TSource, TCollection, TResult)(ParallelQuery(Of TSource), Func(Of TSource, Int32, IEnumerable(Of TCollection)), Func(Of TSource, TCollection, TResult))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 169
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Thrown every time this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 171
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This SequenceEqual overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>Thrown every time this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 173
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines whether two parallel sequences are equal by comparing the elements by using the default equality comparer for their type.</p>\n"
  syntax:
    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to compare to second.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to compare to the first input sequence.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: SequenceEqual``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.SequenceEqual<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SequenceEqual
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 174
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Determines whether two parallel sequences are equal by comparing their elements by using a specified IEqualityComparer{T}.</p>\n"
  syntax:
    content: public static bool SequenceEqual<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SequenceEqual(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to compare to <em>second</em>.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to compare to the first input sequence.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to use to compare elements.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>true if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, false.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SequenceEqual(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.SequenceEqual<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.SequenceEqual(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0})
  id: Single``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 175
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a parallel sequence, and throws an exception if there is not exactly one element in the sequence.</p>\n"
  syntax:
    content: public static TSource Single<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the single element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The input sequence contains more than one element. -or- The input sequence is empty.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: Single(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Single<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Single(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Single``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Single<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Single
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 176
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a parallel sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</p>\n"
  syntax:
    content: public static TSource Single<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Single(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the single element of.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test an element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence that satisfies a condition.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>No element satisfies the condition in <em>predicate</em>. -or- More than one element satisfies the condition in <em>predicate</em>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Single(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Single(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.Single<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.Single(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 177
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a parallel sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</p>\n"
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the single element of.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence, or default() if the sequence contains no elements.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.SingleOrDefault<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.SingleOrDefault(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: SingleOrDefault``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.SingleOrDefault<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SingleOrDefault
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 178
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns the only element of a parallel sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</p>\n"
  syntax:
    content: public static TSource SingleOrDefault<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SingleOrDefault(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return the single element of.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test an element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}'
      description: "\n<p>The single element of the input sequence that satisfies the condition, or default() if no such element is found.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>source</em> is empty or multiple elements are returned.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SingleOrDefault(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SingleOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.SingleOrDefault<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.SingleOrDefault(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: Skip``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Skip<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.Skip<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 179
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Bypasses a specified number of elements in a parallel sequence and then returns the remaining elements.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Skip<TSource>(this ParallelQuery<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Skip(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to skip before returning the remaining elements.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements that occur after the specified index in the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Count is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref></p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Skip(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: Skip(Of TSource)(ParallelQuery(Of TSource), Int32)
  nameWithType: ParallelEnumerable.Skip<TSource>(ParallelQuery<TSource>, Int32)
  nameWithType.vb: ParallelEnumerable.Skip(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 180
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> SkipWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: SkipWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.ParallelEnumerable.SkipWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 181
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Bypasses elements in a parallel sequence as long as a specified condition is true and then returns the remaining elements. The element's index is used in the logic of the predicate function.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> SkipWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SkipWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: "\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by predicate.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by the query.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.SkipWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
  nameWithType: ParallelEnumerable.SkipWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType.vb: ParallelEnumerable.SkipWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Decimal})
  id: Sum(System.Linq.ParallelQuery{System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Decimal>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 182
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static decimal Sum(this ParallelQuery<decimal> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Decimal}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Decimal))
  name.vb: Sum(ParallelQuery(Of Decimal))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Decimal>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Decimal))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Double})
  id: Sum(System.Linq.ParallelQuery{System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Double>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 183
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static double Sum(this ParallelQuery<double> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Double}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Double))
  name.vb: Sum(ParallelQuery(Of Double))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Double>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Double))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int32})
  id: Sum(System.Linq.ParallelQuery{System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Int32>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 184
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static int Sum(this ParallelQuery<int> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int32}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int32))
  name.vb: Sum(ParallelQuery(Of Int32))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Int32>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Int32))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Int64})
  id: Sum(System.Linq.ParallelQuery{System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Int64>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 185
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static long Sum(this ParallelQuery<long> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Int64}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Int64))
  name.vb: Sum(ParallelQuery(Of Int64))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Int64>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Int64))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 186
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static decimal ? Sum(this ParallelQuery<decimal ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 187
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static double ? Sum(this ParallelQuery<double ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Double}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Double)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 188
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static int ? Sum(this ParallelQuery<int ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 189
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static long ? Sum(this ParallelQuery<long ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  id: Sum(System.Linq.ParallelQuery{System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 190
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static float ? Sum(this ParallelQuery<float ? > source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Nullable{System.Single}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or-  One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Nullable(Of System.Single)))
  name.vb: Sum(ParallelQuery(Of Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery{System.Single})
  id: Sum(System.Linq.ParallelQuery{System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum(ParallelQuery<Single>)
  fullName: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery<System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 191
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of a sequence of values.</p>\n"
  syntax:
    content: public static float Sum(this ParallelQuery<float> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(source As ParallelQuery(Of Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{System.Single}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(System.Linq.ParallelQuery(Of System.Single))
  name.vb: Sum(ParallelQuery(Of Single))
  nameWithType: ParallelEnumerable.Sum(ParallelQuery<Single>)
  nameWithType.vb: ParallelEnumerable.Sum(ParallelQuery(Of Single))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Decimal})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Decimal>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 192
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static decimal Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Decimal}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Decimal))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Decimal>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Decimal))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Double})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Double>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 193
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, double> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double)) As Double
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Double}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Double))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Double>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Double))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 194
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static int Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, int> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer)) As Integer
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int32}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements in the source sequence.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int32>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int64})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int64>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 195
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static long Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, long> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long)) As Long
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Int64}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int64))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Int64>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int64))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Decimal}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Decimal>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 196
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static decimal ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, decimal ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Decimal?)) As Decimal?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Decimal}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Decimal}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Decimal.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Decimal)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Decimal>>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Decimal)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Double}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Double>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 197
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static double ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, double ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Double?)) As Double?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Double}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Double}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Double.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Double)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Double>>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Double)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int32}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int32>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 198
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static int ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, int ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Integer?)) As Integer?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int32}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int32}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int32)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int32>>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int32)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Int64}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Int64>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 199
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static long ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, long ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Long?)) As Long?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Int64}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Int64}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Int64.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Int64)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Int64>>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Int64)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Nullable{System.Single}})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Nullable<System.Single>>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 200
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static float ? Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, float ? > selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single?)) As Single?
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Nullable{System.Single}}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Nullable{System.Single}
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or-  One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Nullable(Of System.Single)))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Nullable<Single>>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Nullable(Of Single)))
- uid: System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  commentId: M:System.Linq.ParallelEnumerable.Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  id: Sum``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Single})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  fullName: System.Linq.ParallelEnumerable.Sum<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Single>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sum
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 201
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Computes in parallel the sum of the sequence of values that are obtained by invoking a transform function on each element of the input sequence.</p>\n"
  syntax:
    content: public static float Sum<TSource>(this ParallelQuery<TSource> source, Func<TSource, float> selector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Sum(Of TSource)(source As ParallelQuery(Of TSource), selector As Func(Of TSource, Single)) As Single
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence of values to calculate the sum of.</p>\n"
    - id: selector
      type: System.Func{{TSource},System.Single}
      description: "\n<p>A transform function to apply to each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The sum of the projected values in the sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>selector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>The sum is larger than <xref href=\"System.Single.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Sum(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Single))
  name.vb: Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
  nameWithType: ParallelEnumerable.Sum<TSource>(ParallelQuery<TSource>, Func<TSource, Single>)
  nameWithType.vb: ParallelEnumerable.Sum(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Single))
- uid: System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: Take``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Take<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.Take<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Take
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 202
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns a specified number of contiguous elements from the start of a parallel sequence.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Take<TSource>(this ParallelQuery<TSource> source, int count)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Take(Of TSource)(source As ParallelQuery(Of TSource), count As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to return.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the specified number of elements from the start of the input sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Take(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: Take(Of TSource)(ParallelQuery(Of TSource), Int32)
  nameWithType: ParallelEnumerable.Take<TSource>(ParallelQuery<TSource>, Int32)
  nameWithType.vb: ParallelEnumerable.Take(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 203
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns elements from a parallel sequence as long as a specified condition is true.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> TakeWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements from the input sequence that occur before the element at which the test no longer passes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: TakeWhile``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.ParallelEnumerable.TakeWhile<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TakeWhile
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 204
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Returns elements from a parallel sequence as long as a specified condition is true. The element's index is used in the logic of the predicate function.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> TakeWhile<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function TakeWhile(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to return elements from.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: "\n<p>A function to test each source element for a condition; the second parameter of the function represents the index of the source element. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements from the input sequence that occur before the element at which the test no longer passes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by this query.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.TakeWhile(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
  nameWithType: ParallelEnumerable.TakeWhile<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType.vb: ParallelEnumerable.TakeWhile(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 205
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order according to a key.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenBy``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenBy<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenBy
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 206
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenBy<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenBy(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An IComparer{TKey} to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} whose elements are sorted according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenBy(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  nameWithType: ParallelEnumerable.ThenBy<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.ThenBy(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 207
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in descending order, according to a key.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements are sorted descending according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  id: ThenByDescending``2(System.Linq.OrderedParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ThenByDescending<TSource, TKey>(System.Linq.OrderedParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThenByDescending
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 208
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Performs in parallel a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</p>\n"
  syntax:
    content: public static OrderedParallelQuery<TSource> ThenByDescending<TSource, TKey>(this OrderedParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ThenByDescending(Of TSource, TKey)(source As OrderedParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As OrderedParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>An OrderedParallelQuery{TSource} that contains elements to sort.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from an element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IComparer{{TKey}}
      description: "\n<p>An IComparer{TKey} to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.OrderedParallelQuery{{TSource}}
      description: "\n<p>A sequence whose elements are sorted descending according to a key.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ThenByDescending(Of TSource, TKey)(System.Linq.OrderedParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IComparer(Of TKey))
  name.vb: ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
  nameWithType: ParallelEnumerable.ThenByDescending<TSource, TKey>(OrderedParallelQuery<TSource>, Func<TSource, TKey>, IComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.ThenByDescending(Of TSource, TKey)(OrderedParallelQuery(Of TSource), Func(Of TSource, TKey), IComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.ToArray``1(System.Linq.ParallelQuery{``0})
  id: ToArray``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToArray<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.ToArray<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToArray
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 209
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates an array from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static TSource[] ToArray<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToArray(Of TSource)(source As ParallelQuery(Of TSource)) As TSource()
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to create an array from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: '{TSource}[]'
      description: "\n<p>An array that contains the elements from the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToArray(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: ToArray(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.ToArray<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.ToArray(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 210
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function.</p>\n"
  syntax:
    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 211
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref>  from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function and key comparer.</p>\n"
  syntax:
    content: public static Dictionary<TKey, TSource> ToDictionary<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 212
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to specified key selector and element selector functions.</p>\n"
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToDictionary``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToDictionary
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 213
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function, a comparer, and an element selector function.</p>\n"
  syntax:
    content: public static Dictionary<TKey, TElement> ToDictionary<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToDictionary(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to create a <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.Dictionary`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>\n<em>keySelector</em> produces a key that is a null reference (Nothing in Visual Basic). -or- <em>keySelector</em> produces duplicate keys for two elements. -or- One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.ToDictionary<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.ToDictionary(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.ToList``1(System.Linq.ParallelQuery{``0})
  id: ToList``1(System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToList<TSource>(ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.ToList<TSource>(System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToList
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 214
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> from an <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static List<TSource> ToList<TSource>(this ParallelQuery<TSource> source)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToList(Of TSource)(source As ParallelQuery(Of TSource)) As List(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to create a <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of <em>source</em>.</p>\n"
    return:
      type: System.Collections.Generic.List{{TSource}}
      description: "\n<p>A <xref href=\"System.Collections.Generic.List`1\" data-throw-if-not-resolved=\"false\"></xref>  that contains elements from the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToList(Of TSource)(System.Linq.ParallelQuery(Of TSource))
  name.vb: ToList(Of TSource)(ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.ToList<TSource>(ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.ToList(Of TSource)(ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 215
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates an <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function.</p>\n"
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to create a <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey))
  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>)
  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey))
- uid: System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``2(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 216
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates an <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function and key comparer.</p>\n"
  syntax:
    content: public static ILookup<TKey, TSource> ToLookup<TSource, TKey>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to create a <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TSource}}
      description: "\n<p>A <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains keys and values.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey>(ParallelQuery<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey)(ParallelQuery(Of TSource), Func(Of TSource, TKey), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 217
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates an <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to specified key selector and element selector functions.</p>\n"
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to create a <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
      description: "\n<p>A <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> that contains values of type <em>TElement</em> selected from the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement))
  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>)
  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement))
- uid: System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  commentId: M:System.Linq.ParallelEnumerable.ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  id: ToLookup``3(System.Linq.ParallelQuery{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  fullName: System.Linq.ParallelEnumerable.ToLookup<TSource, TKey, TElement>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, TKey>, System.Func<TSource, TElement>, System.Collections.Generic.IEqualityComparer<TKey>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToLookup
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 218
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Creates an <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from a <xref href=\"System.Linq.ParallelQuery`1\" data-throw-if-not-resolved=\"false\"></xref> according to a specified key selector function, a comparer and an element selector function.</p>\n"
  syntax:
    content: public static ILookup<TKey, TElement> ToLookup<TSource, TKey, TElement>(this ParallelQuery<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, IEqualityComparer<TKey> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ToLookup(Of TSource, TKey, TElement)(source As ParallelQuery(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>The sequence to create a <xref href=\"System.Linq.ILookup`2\" data-throw-if-not-resolved=\"false\"></xref> from.</p>\n"
    - id: keySelector
      type: System.Func{{TSource},{TKey}}
      description: "\n<p>A function to extract a key from each element.</p>\n"
    - id: elementSelector
      type: System.Func{{TSource},{TElement}}
      description: "\n<p>A transform function to produce a result element value from each element. </p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TKey}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare keys.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    - id: TKey
      description: "\n<p>The type of the key returned by <em>keySelector</em>.</p>\n"
    - id: TElement
      description: "\n<p>The type of the value returned by <em>elementSelector</em>.</p>\n"
    return:
      type: System.Linq.ILookup{{TKey},{TElement}}
      description: "\n<p>A Lookup<(Of <(TKey, TElement>)>) that contains values of type TElement selected from the input sequence.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>keySelector</em> or <em>elementSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, TKey), System.Func(Of TSource, TElement), System.Collections.Generic.IEqualityComparer(Of TKey))
  name.vb: ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
  nameWithType: ParallelEnumerable.ToLookup<TSource, TKey, TElement>(ParallelQuery<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, IEqualityComparer<TKey>)
  nameWithType.vb: ParallelEnumerable.ToLookup(Of TSource, TKey, TElement)(ParallelQuery(Of TSource), Func(Of TSource, TKey), Func(Of TSource, TElement), IEqualityComparer(Of TKey))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 219
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Union overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>)
  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEnumerable<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 221
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Union overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when called.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, IEnumerable<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEnumerable(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, IEnumerable<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), IEnumerable(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 223
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Produces the set union of two parallel sequences by using the default equality comparer.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the first set for the union.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the second set for the union.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements from both input sequences, excluding duplicates.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>)
  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource))
- uid: System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Linq.ParallelEnumerable.Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  id: Union``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``0},System.Collections.Generic.IEqualityComparer{``0})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  fullName: System.Linq.ParallelEnumerable.Union<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelQuery<TSource>, System.Collections.Generic.IEqualityComparer<TSource>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Union
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 224
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Produces the set union of two parallel sequences by using a specified IEqualityComparer{T}.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Union<TSource>(this ParallelQuery<TSource> first, ParallelQuery<TSource> second, IEqualityComparer<TSource> comparer)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Union(Of TSource)(first As ParallelQuery(Of TSource), second As ParallelQuery(Of TSource), comparer As IEqualityComparer(Of TSource)) As ParallelQuery(Of TSource)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the first set for the union.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence whose distinct elements form the second set for the union.</p>\n"
    - id: comparer
      type: System.Collections.Generic.IEqualityComparer{{TSource}}
      description: "\n<p>An <xref href=\"System.Collections.Generic.IEqualityComparer`1\" data-throw-if-not-resolved=\"false\"></xref> to compare values.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of the input sequences.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains the elements from both input sequences, excluding duplicates.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Union(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelQuery(Of TSource), System.Collections.Generic.IEqualityComparer(Of TSource))
  name.vb: Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
  nameWithType: ParallelEnumerable.Union<TSource>(ParallelQuery<TSource>, ParallelQuery<TSource>, IEqualityComparer<TSource>)
  nameWithType.vb: ParallelEnumerable.Union(Of TSource)(ParallelQuery(Of TSource), ParallelQuery(Of TSource), IEqualityComparer(Of TSource))
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 225
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Filters in parallel a sequence of values based on a predicate.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Where<TSource>(this ParallelQuery<TSource> source, Func<TSource, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to filter.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of source.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements from the input sequence that satisfy the condition.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Boolean))
  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
  nameWithType: ParallelEnumerable.Where<TSource>(ParallelQuery<TSource>, Func<TSource, Boolean>)
  nameWithType.vb: ParallelEnumerable.Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Boolean))
- uid: System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  commentId: M:System.Linq.ParallelEnumerable.Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  id: Where``1(System.Linq.ParallelQuery{``0},System.Func{``0,System.Int32,System.Boolean})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  fullName: System.Linq.ParallelEnumerable.Where<TSource>(System.Linq.ParallelQuery<TSource>, System.Func<TSource, System.Int32, System.Boolean>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Where
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 226
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Filters in parallel a sequence of values based on a predicate. Each element's index is used in the logic of the predicate function.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> Where<TSource>(this ParallelQuery<TSource> source, Func<TSource, int, bool> predicate)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Where(Of TSource)(source As ParallelQuery(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence to filter.</p>\n"
    - id: predicate
      type: System.Func{{TSource},System.Int32,System.Boolean}
      description: "\n<p>A function to test each element for a condition.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of the elements of source.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A sequence that contains elements from the input sequence that satisfy the condition.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> or <em>predicate</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>More than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref> elements are enumerated by the query.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Where(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Func(Of TSource, System.Int32, System.Boolean))
  name.vb: Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
  nameWithType: ParallelEnumerable.Where<TSource>(ParallelQuery<TSource>, Func<TSource, Int32, Boolean>)
  nameWithType.vb: ParallelEnumerable.Where(Of TSource)(ParallelQuery(Of TSource), Func(Of TSource, Int32, Boolean))
- uid: System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  commentId: M:System.Linq.ParallelEnumerable.WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  id: WithCancellation``1(System.Linq.ParallelQuery{``0},System.Threading.CancellationToken)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)
  fullName: System.Linq.ParallelEnumerable.WithCancellation<TSource>(System.Linq.ParallelQuery<TSource>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithCancellation
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 227
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sets the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to associate with the query.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> WithCancellation<TSource>(this ParallelQuery<TSource> source, CancellationToken cancellationToken)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithCancellation(Of TSource)(source As ParallelQuery(Of TSource), cancellationToken As CancellationToken) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A ParallelQuery on which to set the option.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>ParallelQuery representing the same query as source, but with the registered cancellation token.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> associated with the <em>cancellationToken</em> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>WithCancellation</em> is used multiple times in the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithCancellation(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Threading.CancellationToken)
  name.vb: WithCancellation(Of TSource)(ParallelQuery(Of TSource), CancellationToken)
  nameWithType: ParallelEnumerable.WithCancellation<TSource>(ParallelQuery<TSource>, CancellationToken)
  nameWithType.vb: ParallelEnumerable.WithCancellation(Of TSource)(ParallelQuery(Of TSource), CancellationToken)
- uid: System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  commentId: M:System.Linq.ParallelEnumerable.WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  id: WithDegreeOfParallelism``1(System.Linq.ParallelQuery{``0},System.Int32)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)
  fullName: System.Linq.ParallelEnumerable.WithDegreeOfParallelism<TSource>(System.Linq.ParallelQuery<TSource>, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithDegreeOfParallelism
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 228
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sets the degree of parallelism to use in a query. Degree of parallelism is the maximum number of concurrently executing tasks that will be used to process the query.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> WithDegreeOfParallelism<TSource>(this ParallelQuery<TSource> source, int degreeOfParallelism)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithDegreeOfParallelism(Of TSource)(source As ParallelQuery(Of TSource), degreeOfParallelism As Integer) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A ParallelQuery on which to set the limit on the degrees of parallelism.</p>\n"
    - id: degreeOfParallelism
      type: System.Int32
      description: "\n<p>The degree of parallelism for the query. The default value is Math.Min(<xref href=\"System.Environment.ProcessorCount\" data-throw-if-not-resolved=\"false\"></xref>, <strong>MAX_SUPPORTED_DOP</strong>) where <strong>MAX_SUPPORTED_DOP</strong> is 512. </p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>ParallelQuery representing the same query as source, with the limit on the degrees of parallelism set.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>degreeOfParallelism</em> is less than 1 or greater than 511. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>WithDegreeOfParallelism is used multiple times in the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithDegreeOfParallelism(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Int32)
  name.vb: WithDegreeOfParallelism(Of TSource)(ParallelQuery(Of TSource), Int32)
  nameWithType: ParallelEnumerable.WithDegreeOfParallelism<TSource>(ParallelQuery<TSource>, Int32)
  nameWithType.vb: ParallelEnumerable.WithDegreeOfParallelism(Of TSource)(ParallelQuery(Of TSource), Int32)
- uid: System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  commentId: M:System.Linq.ParallelEnumerable.WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  id: WithExecutionMode``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelExecutionMode)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)
  fullName: System.Linq.ParallelEnumerable.WithExecutionMode<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelExecutionMode)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithExecutionMode
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 229
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sets the execution mode of the query.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> WithExecutionMode<TSource>(this ParallelQuery<TSource> source, ParallelExecutionMode executionMode)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithExecutionMode(Of TSource)(source As ParallelQuery(Of TSource), executionMode As ParallelExecutionMode) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A ParallelQuery on which to set the option.</p>\n"
    - id: executionMode
      type: System.Linq.ParallelExecutionMode
      description: "\n<p>The mode in which to execute the query.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>ParallelQuery representing the same query as source, but with the registered execution mode.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>executionMode</em> is not a valid <xref href=\"System.Linq.ParallelExecutionMode\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>WithExecutionMode is used multiple times in the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithExecutionMode(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelExecutionMode)
  name.vb: WithExecutionMode(Of TSource)(ParallelQuery(Of TSource), ParallelExecutionMode)
  nameWithType: ParallelEnumerable.WithExecutionMode<TSource>(ParallelQuery<TSource>, ParallelExecutionMode)
  nameWithType.vb: ParallelEnumerable.WithExecutionMode(Of TSource)(ParallelQuery(Of TSource), ParallelExecutionMode)
- uid: System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  commentId: M:System.Linq.ParallelEnumerable.WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  id: WithMergeOptions``1(System.Linq.ParallelQuery{``0},System.Linq.ParallelMergeOptions)
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)
  fullName: System.Linq.ParallelEnumerable.WithMergeOptions<TSource>(System.Linq.ParallelQuery<TSource>, System.Linq.ParallelMergeOptions)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WithMergeOptions
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 230
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Sets the merge options for this query, which specify how the query will buffer output.</p>\n"
  syntax:
    content: public static ParallelQuery<TSource> WithMergeOptions<TSource>(this ParallelQuery<TSource> source, ParallelMergeOptions mergeOptions)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WithMergeOptions(Of TSource)(source As ParallelQuery(Of TSource), mergeOptions As ParallelMergeOptions) As ParallelQuery(Of TSource)
    parameters:
    - id: source
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>A ParallelQuery on which to set the option.</p>\n"
    - id: mergeOptions
      type: System.Linq.ParallelMergeOptions
      description: "\n<p>The merge options to set for this query.</p>\n"
    typeParameters:
    - id: TSource
      description: "\n<p>The type of elements of <em>source</em>.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TSource}}
      description: "\n<p>ParallelQuery representing the same query as source, but with the registered merge options.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>mergeOptions</em> is not a valid <xref href=\"System.Linq.ParallelMergeOptions\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>WithMergeOptions</em> is used multiple times in the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.WithMergeOptions(Of TSource)(System.Linq.ParallelQuery(Of TSource), System.Linq.ParallelMergeOptions)
  name.vb: WithMergeOptions(Of TSource)(ParallelQuery(Of TSource), ParallelMergeOptions)
  nameWithType: ParallelEnumerable.WithMergeOptions<TSource>(ParallelQuery<TSource>, ParallelMergeOptions)
  nameWithType.vb: ParallelEnumerable.WithMergeOptions(Of TSource)(ParallelQuery(Of TSource), ParallelMergeOptions)
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Linq.ParallelQuery{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Collections.Generic.IEnumerable<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 231
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>This Zip overload should never be called. This method is marked as obsolete and always throws <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref> when invoked.</p>\n"
  syntax:
    content: >-
      [Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")]

      public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this ParallelQuery<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <Obsolete("The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.")>

      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TFirst}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: second
      type: System.Collections.Generic.IEnumerable{{TSecond}}
      description: "\n<p>This parameter is not used.</p>\n"
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
      description: "\n<p>This parameter is not used.</p>\n"
    typeParameters:
    - id: TFirst
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TSecond
      description: "\n<p>This type parameter is not used.</p>\n"
    - id: TResult
      description: "\n<p>This type parameter is not used.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>This overload always throws a <xref href=\"System.NotSupportedException\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The exception that occurs when this method is called.</p>\n"
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: The second data source of a binary operator must be of type System.Linq.ParallelQuery<T> rather than System.Collections.Generic.IEnumerable<T>. To fix this problem, use the AsParallel() extension method to convert the right data source to System.Linq.ParallelQuery<T>.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Collections.Generic.IEnumerable(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
  nameWithType: ParallelEnumerable.Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, TResult>)
  nameWithType.vb: ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), IEnumerable(Of TSecond), Func(Of TFirst, TSecond, TResult))
- uid: System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  commentId: M:System.Linq.ParallelEnumerable.Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  id: Zip``3(System.Linq.ParallelQuery{``0},System.Linq.ParallelQuery{``1},System.Func{``0,``1,``2})
  isExtensionMethod: true
  parent: System.Linq.ParallelEnumerable
  langs:
  - csharp
  - vb
  name: Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)
  fullName: System.Linq.ParallelEnumerable.Zip<TFirst, TSecond, TResult>(System.Linq.ParallelQuery<TFirst>, System.Linq.ParallelQuery<TSecond>, System.Func<TFirst, TSecond, TResult>)
  type: Method
  source:
    remote:
      path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Zip
    path: src/System.Linq.Parallel/ref/System.Linq.Parallel.cs
    startLine: 233
  assemblies:
  - System.Linq.Parallel
  namespace: System.Linq
  summary: "\n<p>Merges in parallel two sequences by using the specified predicate function.</p>\n"
  syntax:
    content: public static ParallelQuery<TResult> Zip<TFirst, TSecond, TResult>(this ParallelQuery<TFirst> first, ParallelQuery<TSecond> second, Func<TFirst, TSecond, TResult> resultSelector)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Zip(Of TFirst, TSecond, TResult)(first As ParallelQuery(Of TFirst), second As ParallelQuery(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As ParallelQuery(Of TResult)
    parameters:
    - id: first
      type: System.Linq.ParallelQuery{{TFirst}}
      description: "\n<p>The first sequence to zip.</p>\n"
    - id: second
      type: System.Linq.ParallelQuery{{TSecond}}
      description: "\n<p>The second sequence to zip.</p>\n"
    - id: resultSelector
      type: System.Func{{TFirst},{TSecond},{TResult}}
      description: "\n<p>A function to create a result element from two matching elements.</p>\n"
    typeParameters:
    - id: TFirst
      description: "\n<p>The type of the elements of the first sequence.</p>\n"
    - id: TSecond
      description: "\n<p>The type of the elements of the second sequence.</p>\n"
    - id: TResult
      description: "\n<p>The type of the return elements.</p>\n"
    return:
      type: System.Linq.ParallelQuery{{TResult}}
      description: "\n<p>A sequence that has elements of type <em>TResult</em> that are obtained by performing <em>resultSelector</em> pairwise on two sequences. If the sequence lengths are unequal, this truncates to the length of the shorter sequence.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>first</em> or <em>second</em> or <em>resultSelector</em> is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The query was canceled with the token passed in through <em>WithCancellation</em>.</p>\n"
  - type: System.AggregateException
    commentId: T:System.AggregateException
    description: "\n<p>One or more exceptions occurred during the evaluation of the query.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Linq.ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(System.Linq.ParallelQuery(Of TFirst), System.Linq.ParallelQuery(Of TSecond), System.Func(Of TFirst, TSecond, TResult))
  name.vb: Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), ParallelQuery(Of TSecond), Func(Of TFirst, TSecond, TResult))
  nameWithType: ParallelEnumerable.Zip<TFirst, TSecond, TResult>(ParallelQuery<TFirst>, ParallelQuery<TSecond>, Func<TFirst, TSecond, TResult>)
  nameWithType.vb: ParallelEnumerable.Zip(Of TFirst, TSecond, TResult)(ParallelQuery(Of TFirst), ParallelQuery(Of TSecond), Func(Of TFirst, TSecond, TResult))
references:
- uid: System.Linq
  isExternal: false
  name: System.Linq
  fullName: System.Linq
  commentId: N:System.Linq
  nameWithType: System.Linq
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Linq.ParallelQuery{{TSource}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TSource>
  fullName: System.Linq.ParallelQuery<TSource>
  fullname.vb: System.Linq.ParallelQuery(Of TSource)
  name.vb: ParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{`0}
  nameWithType: ParallelQuery<TSource>
  nameWithType.vb: ParallelQuery(Of TSource)
- uid: System.Func{{TSource},{TSource},{TSource}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TSource, TSource>
  fullName: System.Func<TSource, TSource, TSource>
  fullname.vb: System.Func(Of TSource, TSource, TSource)
  name.vb: Func(Of TSource, TSource, TSource)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``0,``0}
  nameWithType: Func<TSource, TSource, TSource>
  nameWithType.vb: Func(Of TSource, TSource, TSource)
- uid: '{TSource}'
  definition: TSource
  name: TSource
  fullName: TSource
  commentId: '!:TSource'
  nameWithType: TSource
- uid: System.Linq.ParallelQuery`1
  isExternal: false
  name: ParallelQuery<TSource>
  fullName: System.Linq.ParallelQuery<TSource>
  fullname.vb: System.Linq.ParallelQuery(Of TSource)
  name.vb: ParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery`1
  nameWithType: ParallelQuery<TSource>
  nameWithType.vb: ParallelQuery(Of TSource)
- uid: System.Func`3
  isExternal: false
  name: Func<T1, T2, TResult>
  fullName: System.Func<T1, T2, TResult>
  fullname.vb: System.Func(Of T1, T2, TResult)
  name.vb: Func(Of T1, T2, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T1
    fullName: T1
  - name: ', '
    fullName: ', '
  - name: T2
    fullName: T2
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func`3
  nameWithType: Func<T1, T2, TResult>
  nameWithType.vb: Func(Of T1, T2, TResult)
- uid: TSource
  isExternal: false
  name: TSource
  fullName: TSource
  nameWithType: TSource
- uid: '{TAccumulate}'
  definition: TAccumulate
  name: TAccumulate
  fullName: TAccumulate
  commentId: '!:TAccumulate'
  nameWithType: TAccumulate
- uid: System.Func{{TAccumulate},{TSource},{TAccumulate}}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, TSource, TAccumulate>
  fullName: System.Func<TAccumulate, TSource, TAccumulate>
  fullname.vb: System.Func(Of TAccumulate, TSource, TAccumulate)
  name.vb: Func(Of TAccumulate, TSource, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  commentId: T:System.Func{``1,``0,``1}
  nameWithType: Func<TAccumulate, TSource, TAccumulate>
  nameWithType.vb: Func(Of TAccumulate, TSource, TAccumulate)
- uid: TAccumulate
  isExternal: false
  name: TAccumulate
  fullName: TAccumulate
  nameWithType: TAccumulate
- uid: System.Func{{TAccumulate},{TAccumulate},{TAccumulate}}
  parent: System
  definition: System.Func`3
  name: Func<TAccumulate, TAccumulate, TAccumulate>
  fullName: System.Func<TAccumulate, TAccumulate, TAccumulate>
  fullname.vb: System.Func(Of TAccumulate, TAccumulate, TAccumulate)
  name.vb: Func(Of TAccumulate, TAccumulate, TAccumulate)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  commentId: T:System.Func{``1,``1,``1}
  nameWithType: Func<TAccumulate, TAccumulate, TAccumulate>
  nameWithType.vb: Func(Of TAccumulate, TAccumulate, TAccumulate)
- uid: System.Func{{TAccumulate},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TAccumulate, TResult>
  fullName: System.Func<TAccumulate, TResult>
  fullname.vb: System.Func(Of TAccumulate, TResult)
  name.vb: Func(Of TAccumulate, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``1,``2}
  nameWithType: Func<TAccumulate, TResult>
  nameWithType.vb: Func(Of TAccumulate, TResult)
- uid: '{TResult}'
  definition: TResult
  name: TResult
  fullName: TResult
  commentId: '!:TResult'
  nameWithType: TResult
- uid: System.Func`2
  isExternal: false
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func`2
  nameWithType: Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
- uid: TResult
  isExternal: false
  name: TResult
  fullName: TResult
  nameWithType: TResult
- uid: System.Func{{TAccumulate}}
  parent: System
  definition: System.Func`1
  name: Func<TAccumulate>
  fullName: System.Func<TAccumulate>
  fullname.vb: System.Func(Of TAccumulate)
  name.vb: Func(Of TAccumulate)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TAccumulate
    fullName: TAccumulate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TAccumulate
    fullName: TAccumulate
  - name: )
    fullName: )
  commentId: T:System.Func{``1}
  nameWithType: Func<TAccumulate>
  nameWithType.vb: Func(Of TAccumulate)
- uid: System.Func`1
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func`1
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
- uid: System.Func{{TSource},System.Boolean}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Boolean>
  fullName: System.Func<TSource, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Boolean)
  name.vb: Func(Of TSource, Boolean)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Boolean}
  nameWithType: Func<TSource, Boolean>
  nameWithType.vb: Func(Of TSource, Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Collections.Generic.IEnumerable{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSource)
  name.vb: IEnumerable(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{``0}
  nameWithType: IEnumerable<TSource>
  nameWithType.vb: IEnumerable(Of TSource)
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable`1
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
  nameWithType: System.Collections.Generic
- uid: System.Linq.ParallelQuery
  parent: System.Linq
  isExternal: false
  name: ParallelQuery
  fullName: System.Linq.ParallelQuery
  commentId: T:System.Linq.ParallelQuery
  nameWithType: ParallelQuery
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  fullName: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  nameWithType: IEnumerable
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
  commentId: N:System.Collections
  nameWithType: System.Collections
- uid: System.Collections.Concurrent.Partitioner{{TSource}}
  parent: System.Collections.Concurrent
  definition: System.Collections.Concurrent.Partitioner`1
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Collections.Concurrent.Partitioner{``0}
  nameWithType: Partitioner<TSource>
  nameWithType.vb: Partitioner(Of TSource)
- uid: System.Collections.Concurrent.Partitioner`1
  isExternal: false
  name: Partitioner<TSource>
  fullName: System.Collections.Concurrent.Partitioner<TSource>
  fullname.vb: System.Collections.Concurrent.Partitioner(Of TSource)
  name.vb: Partitioner(Of TSource)
  spec.csharp:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Concurrent.Partitioner`1
    name: Partitioner
    fullName: System.Collections.Concurrent.Partitioner
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Collections.Concurrent.Partitioner`1
  nameWithType: Partitioner<TSource>
  nameWithType.vb: Partitioner(Of TSource)
- uid: System.Collections.Concurrent
  isExternal: false
  name: System.Collections.Concurrent
  fullName: System.Collections.Concurrent
  commentId: N:System.Collections.Concurrent
  nameWithType: System.Collections.Concurrent
- uid: System.Linq.ParallelQuery{System.Decimal}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Decimal>
  fullName: System.Linq.ParallelQuery<System.Decimal>
  fullname.vb: System.Linq.ParallelQuery(Of System.Decimal)
  name.vb: ParallelQuery(Of Decimal)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Decimal}
  nameWithType: ParallelQuery<Decimal>
  nameWithType.vb: ParallelQuery(Of Decimal)
- uid: System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  fullName: System.Decimal
  commentId: T:System.Decimal
  nameWithType: Decimal
- uid: System.Linq.ParallelQuery{System.Double}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Double>
  fullName: System.Linq.ParallelQuery<System.Double>
  fullname.vb: System.Linq.ParallelQuery(Of System.Double)
  name.vb: ParallelQuery(Of Double)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Double}
  nameWithType: ParallelQuery<Double>
  nameWithType.vb: ParallelQuery(Of Double)
- uid: System.Double
  parent: System
  isExternal: false
  name: Double
  fullName: System.Double
  commentId: T:System.Double
  nameWithType: Double
- uid: System.Linq.ParallelQuery{System.Int32}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Int32>
  fullName: System.Linq.ParallelQuery<System.Int32>
  fullname.vb: System.Linq.ParallelQuery(Of System.Int32)
  name.vb: ParallelQuery(Of Int32)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Int32}
  nameWithType: ParallelQuery<Int32>
  nameWithType.vb: ParallelQuery(Of Int32)
- uid: System.Linq.ParallelQuery{System.Int64}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Int64>
  fullName: System.Linq.ParallelQuery<System.Int64>
  fullname.vb: System.Linq.ParallelQuery(Of System.Int64)
  name.vb: ParallelQuery(Of Int64)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Int64}
  nameWithType: ParallelQuery<Int64>
  nameWithType.vb: ParallelQuery(Of Int64)
- uid: System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Decimal>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Decimal>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Decimal))
  name.vb: ParallelQuery(Of Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Decimal}}
  nameWithType: ParallelQuery<Nullable<Decimal>>
  nameWithType.vb: ParallelQuery(Of Nullable(Of Decimal))
- uid: System.Nullable{System.Decimal}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Decimal>
  fullName: System.Nullable<System.Decimal>
  fullname.vb: System.Nullable(Of System.Decimal)
  name.vb: Nullable(Of Decimal)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Decimal}
  nameWithType: Nullable<Decimal>
  nameWithType.vb: Nullable(Of Decimal)
- uid: System.Nullable`1
  parent: System
  isExternal: false
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Nullable`1
  nameWithType: Nullable<T>
  nameWithType.vb: Nullable(Of T)
- uid: System.Linq.ParallelQuery{System.Nullable{System.Double}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Double>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Double>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Double))
  name.vb: ParallelQuery(Of Nullable(Of Double))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Double}}
  nameWithType: ParallelQuery<Nullable<Double>>
  nameWithType.vb: ParallelQuery(Of Nullable(Of Double))
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Double}
  nameWithType: Nullable<Double>
  nameWithType.vb: Nullable(Of Double)
- uid: System.Linq.ParallelQuery{System.Nullable{System.Int32}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Int32>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int32>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int32))
  name.vb: ParallelQuery(Of Nullable(Of Int32))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Int32}}
  nameWithType: ParallelQuery<Nullable<Int32>>
  nameWithType.vb: ParallelQuery(Of Nullable(Of Int32))
- uid: System.Linq.ParallelQuery{System.Nullable{System.Int64}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Int64>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Int64>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Int64))
  name.vb: ParallelQuery(Of Nullable(Of Int64))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Int64}}
  nameWithType: ParallelQuery<Nullable<Int64>>
  nameWithType.vb: ParallelQuery(Of Nullable(Of Int64))
- uid: System.Linq.ParallelQuery{System.Nullable{System.Single}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Nullable<Single>>
  fullName: System.Linq.ParallelQuery<System.Nullable<System.Single>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Nullable(Of System.Single))
  name.vb: ParallelQuery(Of Nullable(Of Single))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Nullable{System.Single}}
  nameWithType: ParallelQuery<Nullable<Single>>
  nameWithType.vb: ParallelQuery(Of Nullable(Of Single))
- uid: System.Nullable{System.Single}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Single>
  fullName: System.Nullable<System.Single>
  fullname.vb: System.Nullable(Of System.Single)
  name.vb: Nullable(Of Single)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Single}
  nameWithType: Nullable<Single>
  nameWithType.vb: Nullable(Of Single)
- uid: System.Linq.ParallelQuery{System.Single}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<Single>
  fullName: System.Linq.ParallelQuery<System.Single>
  fullname.vb: System.Linq.ParallelQuery(Of System.Single)
  name.vb: ParallelQuery(Of Single)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Single}
  nameWithType: ParallelQuery<Single>
  nameWithType.vb: ParallelQuery(Of Single)
- uid: System.Single
  parent: System
  isExternal: false
  name: Single
  fullName: System.Single
  commentId: T:System.Single
  nameWithType: Single
- uid: System.Func{{TSource},System.Decimal}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Decimal>
  fullName: System.Func<TSource, System.Decimal>
  fullname.vb: System.Func(Of TSource, System.Decimal)
  name.vb: Func(Of TSource, Decimal)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Decimal}
  nameWithType: Func<TSource, Decimal>
  nameWithType.vb: Func(Of TSource, Decimal)
- uid: System.Func{{TSource},System.Double}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Double>
  fullName: System.Func<TSource, System.Double>
  fullname.vb: System.Func(Of TSource, System.Double)
  name.vb: Func(Of TSource, Double)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Double}
  nameWithType: Func<TSource, Double>
  nameWithType.vb: Func(Of TSource, Double)
- uid: System.Func{{TSource},System.Int32}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int32>
  fullName: System.Func<TSource, System.Int32>
  fullname.vb: System.Func(Of TSource, System.Int32)
  name.vb: Func(Of TSource, Int32)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Int32}
  nameWithType: Func<TSource, Int32>
  nameWithType.vb: Func(Of TSource, Int32)
- uid: System.Func{{TSource},System.Int64}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Int64>
  fullName: System.Func<TSource, System.Int64>
  fullname.vb: System.Func(Of TSource, System.Int64)
  name.vb: Func(Of TSource, Int64)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Int64}
  nameWithType: Func<TSource, Int64>
  nameWithType.vb: Func(Of TSource, Int64)
- uid: System.Func{{TSource},System.Nullable{System.Decimal}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Decimal>>
  fullName: System.Func<TSource, System.Nullable<System.Decimal>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Decimal))
  name.vb: Func(Of TSource, Nullable(Of Decimal))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Decimal
    name: Decimal
    fullName: System.Decimal
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Nullable{System.Decimal}}
  nameWithType: Func<TSource, Nullable<Decimal>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Decimal))
- uid: System.Func{{TSource},System.Nullable{System.Double}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Double>>
  fullName: System.Func<TSource, System.Nullable<System.Double>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Double))
  name.vb: Func(Of TSource, Nullable(Of Double))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Nullable{System.Double}}
  nameWithType: Func<TSource, Nullable<Double>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Double))
- uid: System.Func{{TSource},System.Nullable{System.Int32}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int32>>
  fullName: System.Func<TSource, System.Nullable<System.Int32>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int32))
  name.vb: Func(Of TSource, Nullable(Of Int32))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Nullable{System.Int32}}
  nameWithType: Func<TSource, Nullable<Int32>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int32))
- uid: System.Func{{TSource},System.Nullable{System.Int64}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Int64>>
  fullName: System.Func<TSource, System.Nullable<System.Int64>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Int64))
  name.vb: Func(Of TSource, Nullable(Of Int64))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Nullable{System.Int64}}
  nameWithType: Func<TSource, Nullable<Int64>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Int64))
- uid: System.Func{{TSource},System.Nullable{System.Single}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Nullable<Single>>
  fullName: System.Func<TSource, System.Nullable<System.Single>>
  fullname.vb: System.Func(Of TSource, System.Nullable(Of System.Single))
  name.vb: Func(Of TSource, Nullable(Of Single))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Nullable{System.Single}}
  nameWithType: Func<TSource, Nullable<Single>>
  nameWithType.vb: Func(Of TSource, Nullable(Of Single))
- uid: System.Func{{TSource},System.Single}
  parent: System
  definition: System.Func`2
  name: Func<TSource, Single>
  fullName: System.Func<TSource, System.Single>
  fullname.vb: System.Func(Of TSource, System.Single)
  name.vb: Func(Of TSource, Single)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Single
    name: Single
    fullName: System.Single
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Single}
  nameWithType: Func<TSource, Single>
  nameWithType.vb: Func(Of TSource, Single)
- uid: System.Linq.ParallelQuery{{TResult}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TResult>
  fullName: System.Linq.ParallelQuery<TResult>
  fullname.vb: System.Linq.ParallelQuery(Of TResult)
  name.vb: ParallelQuery(Of TResult)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{``0}
  nameWithType: ParallelQuery<TResult>
  nameWithType.vb: ParallelQuery(Of TResult)
- uid: System.Collections.Generic.IEqualityComparer{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TSource>
  fullName: System.Collections.Generic.IEqualityComparer<TSource>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TSource)
  name.vb: IEqualityComparer(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEqualityComparer{``0}
  nameWithType: IEqualityComparer<TSource>
  nameWithType.vb: IEqualityComparer(Of TSource)
- uid: System.Collections.Generic.IEqualityComparer`1
  isExternal: false
  name: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of T)
  name.vb: IEqualityComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEqualityComparer`1
  nameWithType: IEqualityComparer<T>
  nameWithType.vb: IEqualityComparer(Of T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.Action{{TSource}}
  parent: System
  definition: System.Action`1
  name: Action<TSource>
  fullName: System.Action<TSource>
  fullname.vb: System.Action(Of TSource)
  name.vb: Action(Of TSource)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Action{``0}
  nameWithType: Action<TSource>
  nameWithType.vb: Action(Of TSource)
- uid: System.Action`1
  isExternal: false
  name: Action<T>
  fullName: System.Action<T>
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    fullName: System.Action
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Action`1
  nameWithType: Action<T>
  nameWithType.vb: Action(Of T)
- uid: System.Func{{TSource},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TKey>
  fullName: System.Func<TSource, TKey>
  fullname.vb: System.Func(Of TSource, TKey)
  name.vb: Func(Of TSource, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``1}
  nameWithType: Func<TSource, TKey>
  nameWithType.vb: Func(Of TSource, TKey)
- uid: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TSource}}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<IGrouping<TKey, TSource>>
  fullName: System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TSource>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Linq.IGrouping(Of TKey, TSource))
  name.vb: ParallelQuery(Of IGrouping(Of TKey, TSource))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Linq.IGrouping{``1,``0}}
  nameWithType: ParallelQuery<IGrouping<TKey, TSource>>
  nameWithType.vb: ParallelQuery(Of IGrouping(Of TKey, TSource))
- uid: System.Collections.Generic.IEqualityComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEqualityComparer`1
  name: IEqualityComparer<TKey>
  fullName: System.Collections.Generic.IEqualityComparer<TKey>
  fullname.vb: System.Collections.Generic.IEqualityComparer(Of TKey)
  name.vb: IEqualityComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEqualityComparer`1
    name: IEqualityComparer
    fullName: System.Collections.Generic.IEqualityComparer
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEqualityComparer{``1}
  nameWithType: IEqualityComparer<TKey>
  nameWithType.vb: IEqualityComparer(Of TKey)
- uid: System.Func{{TSource},{TElement}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TElement>
  fullName: System.Func<TSource, TElement>
  fullname.vb: System.Func(Of TSource, TElement)
  name.vb: Func(Of TSource, TElement)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``2}
  nameWithType: Func<TSource, TElement>
  nameWithType.vb: Func(Of TSource, TElement)
- uid: System.Linq.ParallelQuery{System.Linq.IGrouping{{TKey},{TElement}}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<IGrouping<TKey, TElement>>
  fullName: System.Linq.ParallelQuery<System.Linq.IGrouping<TKey, TElement>>
  fullname.vb: System.Linq.ParallelQuery(Of System.Linq.IGrouping(Of TKey, TElement))
  name.vb: ParallelQuery(Of IGrouping(Of TKey, TElement))
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Linq.IGrouping`2
    name: IGrouping
    fullName: System.Linq.IGrouping
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{System.Linq.IGrouping{``1,``2}}
  nameWithType: ParallelQuery<IGrouping<TKey, TElement>>
  nameWithType.vb: ParallelQuery(Of IGrouping(Of TKey, TElement))
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TSource}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TSource>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TSource>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TSource), TResult)
  name.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2}
  nameWithType: Func<TKey, IEnumerable<TSource>, TResult>
  nameWithType.vb: Func(Of TKey, IEnumerable(Of TSource), TResult)
- uid: System.Func{{TKey},System.Collections.Generic.IEnumerable{{TElement}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TKey, IEnumerable<TElement>, TResult>
  fullName: System.Func<TKey, System.Collections.Generic.IEnumerable<TElement>, TResult>
  fullname.vb: System.Func(Of TKey, System.Collections.Generic.IEnumerable(Of TElement), TResult)
  name.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3}
  nameWithType: Func<TKey, IEnumerable<TElement>, TResult>
  nameWithType.vb: Func(Of TKey, IEnumerable(Of TElement), TResult)
- uid: System.Linq.ParallelQuery{{TOuter}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TOuter>
  fullName: System.Linq.ParallelQuery<TOuter>
  fullname.vb: System.Linq.ParallelQuery(Of TOuter)
  name.vb: ParallelQuery(Of TOuter)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{``0}
  nameWithType: ParallelQuery<TOuter>
  nameWithType.vb: ParallelQuery(Of TOuter)
- uid: System.Collections.Generic.IEnumerable{{TInner}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TInner>
  fullName: System.Collections.Generic.IEnumerable<TInner>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TInner)
  name.vb: IEnumerable(Of TInner)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  nameWithType: IEnumerable<TInner>
  nameWithType.vb: IEnumerable(Of TInner)
- uid: System.Func{{TOuter},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TOuter, TKey>
  fullName: System.Func<TOuter, TKey>
  fullname.vb: System.Func(Of TOuter, TKey)
  name.vb: Func(Of TOuter, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``2}
  nameWithType: Func<TOuter, TKey>
  nameWithType.vb: Func(Of TOuter, TKey)
- uid: System.Func{{TInner},{TKey}}
  parent: System
  definition: System.Func`2
  name: Func<TInner, TKey>
  fullName: System.Func<TInner, TKey>
  fullname.vb: System.Func(Of TInner, TKey)
  name.vb: Func(Of TInner, TKey)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  commentId: T:System.Func{``1,``2}
  nameWithType: Func<TInner, TKey>
  nameWithType.vb: Func(Of TInner, TKey)
- uid: System.Func{{TOuter},System.Collections.Generic.IEnumerable{{TInner}},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TOuter, IEnumerable<TInner>, TResult>
  fullName: System.Func<TOuter, System.Collections.Generic.IEnumerable<TInner>, TResult>
  fullname.vb: System.Func(Of TOuter, System.Collections.Generic.IEnumerable(Of TInner), TResult)
  name.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3}
  nameWithType: Func<TOuter, IEnumerable<TInner>, TResult>
  nameWithType.vb: Func(Of TOuter, IEnumerable(Of TInner), TResult)
- uid: System.Linq.ParallelQuery{{TInner}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TInner>
  fullName: System.Linq.ParallelQuery<TInner>
  fullname.vb: System.Linq.ParallelQuery(Of TInner)
  name.vb: ParallelQuery(Of TInner)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TInner
    fullName: TInner
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TInner
    fullName: TInner
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{``1}
  nameWithType: ParallelQuery<TInner>
  nameWithType.vb: ParallelQuery(Of TInner)
- uid: System.Func{{TOuter},{TInner},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TOuter, TInner, TResult>
  fullName: System.Func<TOuter, TInner, TResult>
  fullname.vb: System.Func(Of TOuter, TInner, TResult)
  name.vb: Func(Of TOuter, TInner, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TOuter
    fullName: TOuter
  - name: ', '
    fullName: ', '
  - name: TInner
    fullName: TInner
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``1,``3}
  nameWithType: Func<TOuter, TInner, TResult>
  nameWithType.vb: Func(Of TOuter, TInner, TResult)
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  commentId: T:System.Int64
  nameWithType: Int64
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Int32}
  nameWithType: Nullable<Int32>
  nameWithType.vb: Nullable(Of Int32)
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Nullable{System.Int64}
  nameWithType: Nullable<Int64>
  nameWithType.vb: Nullable(Of Int64)
- uid: System.Func{{TSource},{TResult}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, TResult>
  fullName: System.Func<TSource, TResult>
  fullname.vb: System.Func(Of TSource, TResult)
  name.vb: Func(Of TSource, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``1}
  nameWithType: Func<TSource, TResult>
  nameWithType.vb: Func(Of TSource, TResult)
- uid: System.Linq.OrderedParallelQuery{{TSource}}
  parent: System.Linq
  definition: System.Linq.OrderedParallelQuery`1
  name: OrderedParallelQuery<TSource>
  fullName: System.Linq.OrderedParallelQuery<TSource>
  fullname.vb: System.Linq.OrderedParallelQuery(Of TSource)
  name.vb: OrderedParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Linq.OrderedParallelQuery{``0}
  nameWithType: OrderedParallelQuery<TSource>
  nameWithType.vb: OrderedParallelQuery(Of TSource)
- uid: System.Linq.OrderedParallelQuery`1
  isExternal: false
  name: OrderedParallelQuery<TSource>
  fullName: System.Linq.OrderedParallelQuery<TSource>
  fullname.vb: System.Linq.OrderedParallelQuery(Of TSource)
  name.vb: OrderedParallelQuery(Of TSource)
  spec.csharp:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.OrderedParallelQuery`1
    name: OrderedParallelQuery
    fullName: System.Linq.OrderedParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Linq.OrderedParallelQuery`1
  nameWithType: OrderedParallelQuery<TSource>
  nameWithType.vb: OrderedParallelQuery(Of TSource)
- uid: System.Collections.Generic.IComparer{{TKey}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IComparer`1
  name: IComparer<TKey>
  fullName: System.Collections.Generic.IComparer<TKey>
  fullname.vb: System.Collections.Generic.IComparer(Of TKey)
  name.vb: IComparer(Of TKey)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IComparer{``1}
  nameWithType: IComparer<TKey>
  nameWithType.vb: IComparer(Of TKey)
- uid: System.Collections.Generic.IComparer`1
  isExternal: false
  name: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
  fullname.vb: System.Collections.Generic.IComparer(Of T)
  name.vb: IComparer(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IComparer`1
  nameWithType: IComparer<T>
  nameWithType.vb: IComparer(Of T)
- uid: System.Func{{TSource},System.Int32,{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, TResult>
  fullName: System.Func<TSource, System.Int32, TResult>
  fullname.vb: System.Func(Of TSource, System.Int32, TResult)
  name.vb: Func(Of TSource, Int32, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Int32,``1}
  nameWithType: Func<TSource, Int32, TResult>
  nameWithType.vb: Func(Of TSource, Int32, TResult)
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TResult}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
  nameWithType: Func<TSource, IEnumerable<TResult>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of TResult))
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TResult}}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, IEnumerable<TResult>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TResult>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TResult))
  name.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}
  nameWithType: Func<TSource, Int32, IEnumerable<TResult>>
  nameWithType.vb: Func(Of TSource, Int32, IEnumerable(Of TResult))
- uid: System.Func{{TSource},System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`2
  name: Func<TSource, IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Collections.Generic.IEnumerable{``1}}
  nameWithType: Func<TSource, IEnumerable<TCollection>>
  nameWithType.vb: Func(Of TSource, IEnumerable(Of TCollection))
- uid: System.Func{{TSource},{TCollection},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, TCollection, TResult>
  fullName: System.Func<TSource, TCollection, TResult>
  fullname.vb: System.Func(Of TSource, TCollection, TResult)
  name.vb: Func(Of TSource, TCollection, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - name: TCollection
    fullName: TCollection
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``1,``2}
  nameWithType: Func<TSource, TCollection, TResult>
  nameWithType.vb: Func(Of TSource, TCollection, TResult)
- uid: System.Func{{TSource},System.Int32,System.Collections.Generic.IEnumerable{{TCollection}}}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, IEnumerable<TCollection>>
  fullName: System.Func<TSource, System.Int32, System.Collections.Generic.IEnumerable<TCollection>>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Collections.Generic.IEnumerable(Of TCollection))
  name.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TCollection
    fullName: TCollection
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TCollection
    fullName: TCollection
  - name: )
    fullName: )
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}}
  nameWithType: Func<TSource, Int32, IEnumerable<TCollection>>
  nameWithType.vb: Func(Of TSource, Int32, IEnumerable(Of TCollection))
- uid: System.Func{{TSource},System.Int32,System.Boolean}
  parent: System
  definition: System.Func`3
  name: Func<TSource, Int32, Boolean>
  fullName: System.Func<TSource, System.Int32, System.Boolean>
  fullname.vb: System.Func(Of TSource, System.Int32, System.Boolean)
  name.vb: Func(Of TSource, Int32, Boolean)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Func{``0,System.Int32,System.Boolean}
  nameWithType: Func<TSource, Int32, Boolean>
  nameWithType.vb: Func(Of TSource, Int32, Boolean)
- uid: '{TSource}[]'
  name: TSource[]
  fullName: TSource[]
  fullname.vb: TSource()
  name.vb: TSource()
  spec.csharp:
  - name: TSource
    fullName: TSource
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - name: TSource
    fullName: TSource
  - name: ()
    fullName: ()
  nameWithType: TSource[]
  nameWithType.vb: TSource()
- uid: System.Collections.Generic.Dictionary{{TKey},{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TSource>
  fullName: System.Collections.Generic.Dictionary<TKey, TSource>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TSource)
  name.vb: Dictionary(Of TKey, TSource)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.Dictionary{``1,``0}
  nameWithType: Dictionary<TKey, TSource>
  nameWithType.vb: Dictionary(Of TKey, TSource)
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.Dictionary`2
  nameWithType: Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
- uid: System.Collections.Generic.Dictionary{{TKey},{TElement}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TElement>
  fullName: System.Collections.Generic.Dictionary<TKey, TElement>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TElement)
  name.vb: Dictionary(Of TKey, TElement)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.Dictionary{``1,``2}
  nameWithType: Dictionary<TKey, TElement>
  nameWithType.vb: Dictionary(Of TKey, TElement)
- uid: System.Collections.Generic.List{{TSource}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<TSource>
  fullName: System.Collections.Generic.List<TSource>
  fullname.vb: System.Collections.Generic.List(Of TSource)
  name.vb: List(Of TSource)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    fullName: <
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.List{``0}
  nameWithType: List<TSource>
  nameWithType.vb: List(Of TSource)
- uid: System.Collections.Generic.List`1
  parent: System.Collections.Generic
  isExternal: false
  name: List<T>
  fullName: System.Collections.Generic.List<T>
  fullname.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    fullName: System.Collections.Generic.List
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.List`1
  nameWithType: List<T>
  nameWithType.vb: List(Of T)
- uid: System.Linq.ILookup{{TKey},{TSource}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TSource>
  fullName: System.Linq.ILookup<TKey, TSource>
  fullname.vb: System.Linq.ILookup(Of TKey, TSource)
  name.vb: ILookup(Of TKey, TSource)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TSource
    fullName: TSource
  - name: )
    fullName: )
  commentId: '!:System.Linq.ILookup{``1,``0}'
  nameWithType: ILookup<TKey, TSource>
  nameWithType.vb: ILookup(Of TKey, TSource)
- uid: System.Linq.ILookup`2
  isExternal: false
  name: ILookup<, >
  fullName: System.Linq.ILookup<, >
  fullname.vb: System.Linq.ILookup(Of , )
  name.vb: ILookup(Of , )
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - {}
  - name: ', '
    fullName: ', '
  - {}
  - name: )
    fullName: )
  commentId: T:System.Linq.ILookup`2
  nameWithType: ILookup<, >
  nameWithType.vb: ILookup(Of , )
- uid: System.Linq.ILookup{{TKey},{TElement}}
  parent: System.Linq
  definition: System.Linq.ILookup`2
  name: ILookup<TKey, TElement>
  fullName: System.Linq.ILookup<TKey, TElement>
  fullname.vb: System.Linq.ILookup(Of TKey, TElement)
  name.vb: ILookup(Of TKey, TElement)
  spec.csharp:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ILookup`2
    name: ILookup
    fullName: System.Linq.ILookup
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TElement
    fullName: TElement
  - name: )
    fullName: )
  commentId: '!:System.Linq.ILookup{``1,``2}'
  nameWithType: ILookup<TKey, TElement>
  nameWithType.vb: ILookup(Of TKey, TElement)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  fullName: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  nameWithType: CancellationToken
- uid: System.Threading
  isExternal: false
  name: System.Threading
  fullName: System.Threading
  commentId: N:System.Threading
  nameWithType: System.Threading
- uid: System.Linq.ParallelExecutionMode
  parent: System.Linq
  isExternal: false
  name: ParallelExecutionMode
  fullName: System.Linq.ParallelExecutionMode
  commentId: T:System.Linq.ParallelExecutionMode
  nameWithType: ParallelExecutionMode
- uid: System.Linq.ParallelMergeOptions
  parent: System.Linq
  isExternal: false
  name: ParallelMergeOptions
  fullName: System.Linq.ParallelMergeOptions
  commentId: T:System.Linq.ParallelMergeOptions
  nameWithType: ParallelMergeOptions
- uid: System.Linq.ParallelQuery{{TFirst}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TFirst>
  fullName: System.Linq.ParallelQuery<TFirst>
  fullname.vb: System.Linq.ParallelQuery(Of TFirst)
  name.vb: ParallelQuery(Of TFirst)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{``0}
  nameWithType: ParallelQuery<TFirst>
  nameWithType.vb: ParallelQuery(Of TFirst)
- uid: System.Collections.Generic.IEnumerable{{TSecond}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TSecond>
  fullName: System.Collections.Generic.IEnumerable<TSecond>
  fullname.vb: System.Collections.Generic.IEnumerable(Of TSecond)
  name.vb: IEnumerable(Of TSecond)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  nameWithType: IEnumerable<TSecond>
  nameWithType.vb: IEnumerable(Of TSecond)
- uid: System.Func{{TFirst},{TSecond},{TResult}}
  parent: System
  definition: System.Func`3
  name: Func<TFirst, TSecond, TResult>
  fullName: System.Func<TFirst, TSecond, TResult>
  fullname.vb: System.Func(Of TFirst, TSecond, TResult)
  name.vb: Func(Of TFirst, TSecond, TResult)
  spec.csharp:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`3
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TFirst
    fullName: TFirst
  - name: ', '
    fullName: ', '
  - name: TSecond
    fullName: TSecond
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  commentId: T:System.Func{``0,``1,``2}
  nameWithType: Func<TFirst, TSecond, TResult>
  nameWithType.vb: Func(Of TFirst, TSecond, TResult)
- uid: System.Linq.ParallelQuery{{TSecond}}
  parent: System.Linq
  definition: System.Linq.ParallelQuery`1
  name: ParallelQuery<TSecond>
  fullName: System.Linq.ParallelQuery<TSecond>
  fullname.vb: System.Linq.ParallelQuery(Of TSecond)
  name.vb: ParallelQuery(Of TSecond)
  spec.csharp:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: <
    fullName: <
  - name: TSecond
    fullName: TSecond
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.ParallelQuery`1
    name: ParallelQuery
    fullName: System.Linq.ParallelQuery
  - name: '(Of '
    fullName: '(Of '
  - name: TSecond
    fullName: TSecond
  - name: )
    fullName: )
  commentId: T:System.Linq.ParallelQuery{``1}
  nameWithType: ParallelQuery<TSecond>
  nameWithType.vb: ParallelQuery(Of TSecond)
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  fullName: System.OperationCanceledException
  nameWithType: OperationCanceledException
  commentId: T:System.OperationCanceledException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.AggregateException
  parent: System
  isExternal: false
  name: AggregateException
  fullName: System.AggregateException
  nameWithType: AggregateException
  commentId: T:System.AggregateException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
  nameWithType: OverflowException
  commentId: T:System.OverflowException
- uid: System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  fullName: System.InvalidCastException
  nameWithType: InvalidCastException
  commentId: T:System.InvalidCastException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
