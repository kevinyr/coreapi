items:
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  commentId: T:System.ServiceModel.Security.X509CertificateRecipientClientCredential
  id: X509CertificateRecipientClientCredential
  parent: System.ServiceModel.Security
  children:
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)
  - System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication
  langs:
  - csharp
  - vb
  name: X509CertificateRecipientClientCredential
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  type: Class
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: X509CertificateRecipientClientCredential
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1464
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Represents the settings used by the client to validate the certificate presented by the service using SSL authentication. It also contains any certificate for the service that is explicitly configured on the client to use for encrypting messages to the service using message security.</p>\n"
  syntax:
    content: public sealed class X509CertificateRecipientClientCredential
    content.vb: Public NotInheritable Class X509CertificateRecipientClientCredential
  seealso:
  - type: System.ServiceModel.Description.ClientCredentials.ServiceCertificate
    commentId: P:System.ServiceModel.Description.ClientCredentials.ServiceCertificate
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: X509CertificateRecipientClientCredential
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication
  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication
  id: Authentication
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: Authentication
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.Authentication
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Authentication
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1466
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Gets the settings used to validate the service certificate obtained using SSL authentication.</p>\n"
  syntax:
    content: public X509ServiceCertificateAuthentication Authentication { get; }
    content.vb: Public ReadOnly Property Authentication As X509ServiceCertificateAuthentication
    parameters: []
    return:
      type: System.ServiceModel.Security.X509ServiceCertificateAuthentication
      description: "\n<p>The settings used to validate the service certificate obtained using SSL authentication.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: X509CertificateRecipientClientCredential.Authentication
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate
  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate
  id: DefaultCertificate
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: DefaultCertificate
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: DefaultCertificate
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1467
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Gets or sets the default certificate to use for the service.</p>\n"
  syntax:
    content: public X509Certificate2 DefaultCertificate { get; set; }
    content.vb: Public Property DefaultCertificate As X509Certificate2
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate2
      description: "\n<p>The default certificate to use for the service.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Attempted to set when the credential is read-only.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: X509CertificateRecipientClientCredential.DefaultCertificate
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates
  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates
  id: ScopedCertificates
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: ScopedCertificates
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.ScopedCertificates
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ScopedCertificates
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1468
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Gets a scoped certificate to use to represent the service that the client is communicating with.</p>\n"
  syntax:
    content: public Dictionary<Uri, X509Certificate2> ScopedCertificates { get; }
    content.vb: Public ReadOnly Property ScopedCertificates As Dictionary(Of Uri, X509Certificate2)
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2}
      description: "\n<p>A scoped certificate to use to represent the service that the client is communicating with.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Attempted to set when the credential is read-only.</p>\n"
  seealso:
  - type: System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate
    commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.DefaultCertificate
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: X509CertificateRecipientClientCredential.ScopedCertificates
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication
  commentId: P:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication
  id: SslCertificateAuthentication
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: SslCertificateAuthentication
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SslCertificateAuthentication
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SslCertificateAuthentication
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1469
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Gets or sets the SSL certificate validator to use.</p>\n"
  syntax:
    content: public X509ServiceCertificateAuthentication SslCertificateAuthentication { get; set; }
    content.vb: Public Property SslCertificateAuthentication As X509ServiceCertificateAuthentication
    parameters: []
    return:
      type: System.ServiceModel.Security.X509ServiceCertificateAuthentication
      description: "\n<p>A <xref href=\"System.ServiceModel.Security.X509ServiceCertificateAuthentication\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: X509CertificateRecipientClientCredential.SslCertificateAuthentication
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  id: SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object)
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.Security.Cryptography.X509Certificates.StoreLocation, System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.X509FindType, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SetDefaultCertificate
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1470
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.</p>\n"
  syntax:
    content: public void SetDefaultCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue)
    content.vb: Public Sub SetDefaultCertificate(storeLocation As StoreLocation, storeName As StoreName, findType As X509FindType, findValue As Object)
    parameters:
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>The location of the certificate store the service uses to obtain the service certificate.</p>\n"
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "\n<p>The name of the X.509 certificate store to open.</p>\n"
    - id: findType
      type: System.Security.Cryptography.X509Certificates.X509FindType
      description: "\n<p>The type of X.509 search to be executed.</p>\n"
    - id: findValue
      type: System.Object
      description: "\n<p>The value to search for in the X.509 certificate store.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>findValue</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Attempted to set when the credential is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate(StoreLocation, StoreName, X509FindType, Object)
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  id: SetDefaultCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName)
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: SetDefaultCertificate(String, StoreLocation, StoreName)
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetDefaultCertificate(System.String, System.Security.Cryptography.X509Certificates.StoreLocation, System.Security.Cryptography.X509Certificates.StoreName)
  type: Method
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SetDefaultCertificate
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1471
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Specifies the default certificate to use for the service. For bindings that use certificate-based message security, this certificate is used to encrypt messages to the service and is expected to be used by the service for signing replies to the client.</p>\n"
  syntax:
    content: public void SetDefaultCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName)
    content.vb: Public Sub SetDefaultCertificate(subjectName As String, storeLocation As StoreLocation, storeName As StoreName)
    parameters:
    - id: subjectName
      type: System.String
      description: "\n<p>The subject distinguished name.</p>\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>The location of the certificate store that the service uses to obtain the service certificate.</p>\n"
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "\n<p>The name of the X.509 certificate store to open.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subjectName</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Attempted to set when the credential is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: X509CertificateRecipientClientCredential.SetDefaultCertificate(String, StoreLocation, StoreName)
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)
  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)
  id: SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Security.Cryptography.X509Certificates.X509FindType,System.Object,System.Uri)
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.Security.Cryptography.X509Certificates.StoreLocation, System.Security.Cryptography.X509Certificates.StoreName, System.Security.Cryptography.X509Certificates.X509FindType, System.Object, System.Uri)
  type: Method
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SetScopedCertificate
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1472
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Sets a certificate by certificate store location, certificate store name, type of X.509 search, and value to search for, and stores it in a collection to be used for the URL that sets the scope.</p>\n"
  syntax:
    content: public void SetScopedCertificate(StoreLocation storeLocation, StoreName storeName, X509FindType findType, object findValue, Uri targetService)
    content.vb: Public Sub SetScopedCertificate(storeLocation As StoreLocation, storeName As StoreName, findType As X509FindType, findValue As Object, targetService As Uri)
    parameters:
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>The location of the certificate store that the service uses to obtain the service certificate.</p>\n"
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "\n<p>The name of the X.509 certificate store to open.</p>\n"
    - id: findType
      type: System.Security.Cryptography.X509Certificates.X509FindType
      description: "\n<p>The type of X.509 search to be executed.</p>\n"
    - id: findValue
      type: System.Object
      description: "\n<p>The value to search for in the X.509 certificate store.</p>\n"
    - id: targetService
      type: System.Uri
      description: "\n<p>The URL that sets the scope.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>findValue</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>targetService</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Attempted to set when the credential is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate(StoreLocation, StoreName, X509FindType, Object, Uri)
- uid: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)
  commentId: M:System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)
  id: SetScopedCertificate(System.String,System.Security.Cryptography.X509Certificates.StoreLocation,System.Security.Cryptography.X509Certificates.StoreName,System.Uri)
  parent: System.ServiceModel.Security.X509CertificateRecipientClientCredential
  langs:
  - csharp
  - vb
  name: SetScopedCertificate(String, StoreLocation, StoreName, Uri)
  fullName: System.ServiceModel.Security.X509CertificateRecipientClientCredential.SetScopedCertificate(System.String, System.Security.Cryptography.X509Certificates.StoreLocation, System.Security.Cryptography.X509Certificates.StoreName, System.Uri)
  type: Method
  source:
    remote:
      path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SetScopedCertificate
    path: src/System.ServiceModel.Primitives/ref/System.ServiceModel.Primitives.cs
    startLine: 1473
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Security
  summary: "\n<p>Sets a certificate by subject name, certificate store location, and certificate store name, and stores it in a collection to be used for the URL that sets the scope.</p>\n"
  syntax:
    content: public void SetScopedCertificate(string subjectName, StoreLocation storeLocation, StoreName storeName, Uri targetService)
    content.vb: Public Sub SetScopedCertificate(subjectName As String, storeLocation As StoreLocation, storeName As StoreName, targetService As Uri)
    parameters:
    - id: subjectName
      type: System.String
      description: "\n<p>The fully qualified subject name.</p>\n"
    - id: storeLocation
      type: System.Security.Cryptography.X509Certificates.StoreLocation
      description: "\n<p>The location of the certificate store that the service uses to obtain the service certificate.</p>\n"
    - id: storeName
      type: System.Security.Cryptography.X509Certificates.StoreName
      description: "\n<p>The name of the X.509 certificate store to open.</p>\n"
    - id: targetService
      type: System.Uri
      description: "\n<p>The URL that sets the scope.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>subjectName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>targetService</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Attempted to set when the credential is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: X509CertificateRecipientClientCredential.SetScopedCertificate(String, StoreLocation, StoreName, Uri)
references:
- uid: System.ServiceModel.Security
  isExternal: false
  name: System.ServiceModel.Security
  fullName: System.ServiceModel.Security
  commentId: N:System.ServiceModel.Security
  nameWithType: System.ServiceModel.Security
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.ServiceModel.Security.X509ServiceCertificateAuthentication
  parent: System.ServiceModel.Security
  isExternal: false
  name: X509ServiceCertificateAuthentication
  fullName: System.ServiceModel.Security.X509ServiceCertificateAuthentication
  commentId: T:System.ServiceModel.Security.X509ServiceCertificateAuthentication
  nameWithType: X509ServiceCertificateAuthentication
- uid: System.Security.Cryptography.X509Certificates.X509Certificate2
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate2
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
  commentId: T:System.Security.Cryptography.X509Certificates.X509Certificate2
  nameWithType: X509Certificate2
- uid: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
- uid: System.Collections.Generic.Dictionary{System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<Uri, X509Certificate2>
  fullName: System.Collections.Generic.Dictionary<System.Uri, System.Security.Cryptography.X509Certificates.X509Certificate2>
  fullname.vb: System.Collections.Generic.Dictionary(Of System.Uri, System.Security.Cryptography.X509Certificates.X509Certificate2)
  name.vb: Dictionary(Of Uri, X509Certificate2)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Uri
    name: Uri
    fullName: System.Uri
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.Dictionary{System.Uri,System.Security.Cryptography.X509Certificates.X509Certificate2}
  nameWithType: Dictionary<Uri, X509Certificate2>
  nameWithType.vb: Dictionary(Of Uri, X509Certificate2)
- uid: System.Collections.Generic.Dictionary`2
  parent: System.Collections.Generic
  isExternal: false
  name: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    fullName: System.Collections.Generic.Dictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.Dictionary`2
  nameWithType: Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
  nameWithType: System.Collections.Generic
- uid: System.Security.Cryptography.X509Certificates.StoreLocation
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: StoreLocation
  fullName: System.Security.Cryptography.X509Certificates.StoreLocation
  commentId: T:System.Security.Cryptography.X509Certificates.StoreLocation
  nameWithType: StoreLocation
- uid: System.Security.Cryptography.X509Certificates.StoreName
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: StoreName
  fullName: System.Security.Cryptography.X509Certificates.StoreName
  commentId: T:System.Security.Cryptography.X509Certificates.StoreName
  nameWithType: StoreName
- uid: System.Security.Cryptography.X509Certificates.X509FindType
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509FindType
  fullName: System.Security.Cryptography.X509Certificates.X509FindType
  commentId: T:System.Security.Cryptography.X509Certificates.X509FindType
  nameWithType: X509FindType
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Uri
  parent: System
  isExternal: false
  name: Uri
  fullName: System.Uri
  commentId: T:System.Uri
  nameWithType: Uri
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
