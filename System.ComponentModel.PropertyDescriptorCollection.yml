### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.PropertyDescriptorCollection
  commentId: T:System.ComponentModel.PropertyDescriptorCollection
  id: PropertyDescriptorCollection
  parent: System.ComponentModel
  children:
  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
  - System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
  - System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.Clear
  - System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.Count
  - System.ComponentModel.PropertyDescriptorCollection.Empty
  - System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
  - System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
  - System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  - System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  - System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  - System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  - System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.Sort
  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  - System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)
  - System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)
  langs:
  - csharp
  - vb
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
  type: Class
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyDescriptorCollection
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 19
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Represents a collection of <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  syntax:
    content: 'public class PropertyDescriptorCollection : IList, IDictionary, ICollection, IEnumerable'
    content.vb: >-
      Public Class PropertyDescriptorCollection
          Implements IList, IDictionary, ICollection, IEnumerable
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.ComponentModel.PropertyDescriptorCollection.Empty
  commentId: F:System.ComponentModel.PropertyDescriptorCollection.Empty
  id: Empty
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Empty
  nameWithType: PropertyDescriptorCollection.Empty
  fullName: System.ComponentModel.PropertyDescriptorCollection.Empty
  type: Field
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Empty
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 25
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Specifies an empty collection that you can use instead of creating a new one with no items. This <strong>static</strong> field is read-only.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Security", "CA2112:SecuredTypesShouldNotExposeFields")]

      public static readonly PropertyDescriptorCollection Empty
    content.vb: >-
      <SuppressMessage("Microsoft.Security", "CA2112:SecuredTypesShouldNotExposeFields")>

      Public Shared ReadOnly Empty As PropertyDescriptorCollection
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])
  id: '#ctor(System.ComponentModel.PropertyDescriptor[])'
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: PropertyDescriptorCollection(PropertyDescriptor[])
  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[])
  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[])
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 45
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection(PropertyDescriptor[] properties)
    content.vb: Public Sub New(properties As PropertyDescriptor())
    parameters:
    - id: properties
      type: System.ComponentModel.PropertyDescriptor[]
      description: "\n<p>An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that provides the properties for this collection. </p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  nameWithType.vb: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor())
  name.vb: PropertyDescriptorCollection(PropertyDescriptor())
- uid: System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)
  id: '#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)'
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: PropertyDescriptorCollection(PropertyDescriptor[], Boolean)
  nameWithType: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor[], Boolean)
  fullName: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor[], System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 64
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> class, which is optionally read-only.</p>\n"
  syntax:
    content: public PropertyDescriptorCollection(PropertyDescriptor[] properties, bool readOnly)
    content.vb: Public Sub New(properties As PropertyDescriptor(), readOnly As Boolean)
    parameters:
    - id: properties
      type: System.ComponentModel.PropertyDescriptor[]
      description: "\n<p>An array of type <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that provides the properties for this collection.</p>\n"
    - id: readOnly
      type: System.Boolean
      description: "\n<p>If <strong>true</strong>, specifies that the collection cannot be modified.</p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  nameWithType.vb: PropertyDescriptorCollection.PropertyDescriptorCollection(PropertyDescriptor(), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.PropertyDescriptorCollection(System.ComponentModel.PropertyDescriptor(), System.Boolean)
  name.vb: PropertyDescriptorCollection(PropertyDescriptor(), Boolean)
- uid: System.ComponentModel.PropertyDescriptorCollection.Count
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Count
  id: Count
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: PropertyDescriptorCollection.Count
  fullName: System.ComponentModel.PropertyDescriptorCollection.Count
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Count
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 90
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets the number of property descriptors in the collection.</p>\n"
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of property descriptors in the collection.</p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: ICollection.IsSynchronized
  nameWithType: PropertyDescriptorCollection.ICollection.IsSynchronized
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.IsSynchronized
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 474
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether access to the collection is synchronized (thread safe).</p>\n"
  syntax:
    content: bool ICollection.IsSynchronized { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.IsSynchronized As Boolean Implements ICollection.IsSynchronized
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to the collection is synchronized (thread safe); otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.ICollection.IsSynchronized
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: ICollection.SyncRoot
  nameWithType: PropertyDescriptorCollection.ICollection.SyncRoot
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.ICollection.SyncRoot
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 483
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an object that can be used to synchronize access to the collection.</p>\n"
  syntax:
    content: object ICollection.SyncRoot { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.ICollection.SyncRoot As Object Implements ICollection.SyncRoot
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the collection.</p>\n"
  implements:
  - System.Collections.ICollection.SyncRoot
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.IsFixedSize
  nameWithType: PropertyDescriptorCollection.IDictionary.IsFixedSize
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsFixedSize
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 520
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  syntax:
    content: bool IDictionary.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsFixedSize As Boolean Implements IDictionary.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsFixedSize
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsFixedSize
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.Add(Object, Object)
  nameWithType: PropertyDescriptorCollection.IDictionary.Add(Object, Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Add(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Add
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 492
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds an element with the provided key and value to the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: void IDictionary.Add(object key, object value)
    content.vb: Sub System.Collections.IDictionary.Add(key As Object, value As Object) Implements IDictionary.Add
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to use as the key of the element to add.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to use as the value of the element to add.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.Add(System.Object,System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Add(Object, Object)
  name.vb: System.Collections.IDictionary.Add(Object, Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.Contains(Object)
  nameWithType: PropertyDescriptorCollection.IDictionary.Contains(Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Contains
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 504
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Determines whether the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the specified key.</p>\n"
  syntax:
    content: bool IDictionary.Contains(object key)
    content.vb: Function System.Collections.IDictionary.Contains(key As Object) As Boolean Implements IDictionary.Contains
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key to locate in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> contains an element with the key; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.Contains(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Contains(Object)
  name.vb: System.Collections.IDictionary.Contains(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.Item[Object]
  nameWithType: PropertyDescriptorCollection.IDictionary.Item[Object]
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Item[System.Object]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 538
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the element with the specified key. </p>\n"
  syntax:
    content: object IDictionary.this[object key] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Item(key As Object) As Object Implements IDictionary.this
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to get or set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The element with the specified key.</p>\n"
  implements:
  - System.Collections.IDictionary.Item(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Item(Object)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Item(System.Object)
  name.vb: System.Collections.IDictionary.Item(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.Remove(Object)
  nameWithType: PropertyDescriptorCollection.IDictionary.Remove(Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Remove
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 639
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the element with the specified key from the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: void IDictionary.Remove(object key)
    content.vb: Sub System.Collections.IDictionary.Remove(key As Object) Implements IDictionary.Remove
    parameters:
    - id: key
      type: System.Object
      description: "\n<p>The key of the element to remove.</p>\n"
  implements:
  - System.Collections.IDictionary.Remove(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Remove(Object)
  name.vb: System.Collections.IDictionary.Remove(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.IsReadOnly
  nameWithType: PropertyDescriptorCollection.IDictionary.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.IsReadOnly
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 529
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  syntax:
    content: bool IDictionary.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.IsReadOnly As Boolean Implements IDictionary.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref> is read-only; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IDictionary.IsReadOnly
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator
  id: System#Collections#IDictionary#GetEnumerator
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.GetEnumerator()
  nameWithType: PropertyDescriptorCollection.IDictionary.GetEnumerator()
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.GetEnumerator
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 514
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an enumerator for this class.</p>\n"
  syntax:
    content: IDictionaryEnumerator IDictionary.GetEnumerator()
    content.vb: Function System.Collections.IDictionary.GetEnumerator As IDictionaryEnumerator Implements IDictionary.GetEnumerator
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "\n<p>An enumerator of type <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IDictionary.GetEnumerator
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.GetEnumerator()
  name.vb: System.Collections.IDictionary.GetEnumerator()
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.Keys
  nameWithType: PropertyDescriptorCollection.IDictionary.Keys
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Keys
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Keys
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 605
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: ICollection IDictionary.Keys { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Keys As ICollection Implements IDictionary.Keys
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the keys of the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IDictionary.Keys
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Keys
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.Keys
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IDictionary.Values
  nameWithType: PropertyDescriptorCollection.IDictionary.Values
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IDictionary.Values
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IDictionary.Values
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 619
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: ICollection IDictionary.Values { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IDictionary.Values As ICollection Implements IDictionary.Values
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "\n<p>An <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> containing the values in the <xref href=\"System.Collections.IDictionary\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IDictionary.Values
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IDictionary.Values
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IDictionary.Values
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize
  id: System#Collections#IList#IsFixedSize
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.IsFixedSize
  nameWithType: PropertyDescriptorCollection.IList.IsFixedSize
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsFixedSize
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 685
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the collection has a fixed size.</p>\n"
  syntax:
    content: bool IList.IsFixedSize { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsFixedSize As Boolean Implements IList.IsFixedSize
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection has a fixed size; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.IsFixedSize
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsFixedSize
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly
  id: System#Collections#IList#IsReadOnly
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.IsReadOnly
  nameWithType: PropertyDescriptorCollection.IList.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IsReadOnly
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 676
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets a value indicating whether the collection is read-only.</p>\n"
  syntax:
    content: bool IList.IsReadOnly { get; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.IsReadOnly As Boolean Implements IList.IsReadOnly
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection is read-only; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.IsReadOnly
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
  name.vb: System.Collections.IList.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)
  id: System#Collections#IList#Add(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.Add(Object)
  nameWithType: PropertyDescriptorCollection.IList.Add(Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Add
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 652
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds an item to the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: int IList.Add(object value)
    content.vb: Function System.Collections.IList.Add(value As Object) As Integer Implements IList.Add
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The item to add to the collection.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The position into which the new element was inserted.</p>\n"
  implements:
  - System.Collections.IList.Add(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Add(Object)
  name.vb: System.Collections.IList.Add(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)
  id: System#Collections#IList#Remove(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.Remove(Object)
  nameWithType: PropertyDescriptorCollection.IList.Remove(Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Remove
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 694
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the first occurrence of a specified value from the collection.</p>\n"
  syntax:
    content: void IList.Remove(object value)
    content.vb: Sub System.Collections.IList.Remove(value As Object) Implements IList.Remove
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The item to remove from the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.Remove(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Remove(Object)
  name.vb: System.Collections.IList.Remove(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)
  id: System#Collections#IList#Contains(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.Contains(Object)
  nameWithType: PropertyDescriptorCollection.IList.Contains(Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Contains
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 658
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Determines whether the collection contains a specific value.</p>\n"
  syntax:
    content: bool IList.Contains(object value)
    content.vb: Function System.Collections.IList.Contains(value As Object) As Boolean Implements IList.Contains
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The item to locate in the collection.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the item is found in the collection; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.Contains(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Contains(Object)
  name.vb: System.Collections.IList.Contains(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)
  id: System#Collections#IList#IndexOf(System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.IndexOf(Object)
  nameWithType: PropertyDescriptorCollection.IList.IndexOf(Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.IndexOf
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 664
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Determines the index of a specified item in the collection.</p>\n"
  syntax:
    content: int IList.IndexOf(object value)
    content.vb: Function System.Collections.IList.IndexOf(value As Object) As Integer Implements IList.IndexOf
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The item to locate in the collection.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of <em>value</em> if found in the list, otherwise -1.</p>\n"
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.IndexOf(Object)
  name.vb: System.Collections.IList.IndexOf(Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)
  id: System#Collections#IList#Insert(System.Int32,System.Object)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.Insert(Int32, Object)
  nameWithType: PropertyDescriptorCollection.IList.Insert(Int32, Object)
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.Insert
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 670
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Inserts an item into the collection at a specified index.</p>\n"
  syntax:
    content: void IList.Insert(int index, object value)
    content.vb: Sub System.Collections.IList.Insert(index As Integer, value As Object) Implements IList.Insert
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> should be inserted.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The item to insert into the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Insert(Int32, Object)
  name.vb: System.Collections.IList.Insert(Int32, Object)
- uid: System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)
  id: System#Collections#IList#Item(System.Int32)
  isEii: true
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IList.Item[Int32]
  nameWithType: PropertyDescriptorCollection.IList.Item[Int32]
  fullName: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Collections.IList.this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 700
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets an item from the collection at a specified index.</p>\n"
  syntax:
    content: object IList.this[int index] { get; set; }
    content.vb: ReadOnly WriteOnly Property System.Collections.IList.Item(index As Integer) As Object Implements IList.this
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the item to get or set.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>value</em> is not a <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than 0. </p>\n<p>-or-</p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.ComponentModel.EventDescriptorCollection.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: PropertyDescriptorCollection.System.Collections.IList.Item(Int32)
  modifiers.csharp:
  - get
  - set
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.System.Collections.IList.Item(System.Int32)
  name.vb: System.Collections.IList.Item(Int32)
- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: PropertyDescriptorCollection.Item[Int32]
  fullName: System.ComponentModel.PropertyDescriptorCollection.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 102
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> at the specified index number.</p>\n"
  syntax:
    content: public virtual PropertyDescriptor this[int index] { get; }
    content.vb: Public Overridable ReadOnly Property Item(index As Integer) As PropertyDescriptor
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to get or set. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified index number.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The <em>index</em> parameter is not a valid index for <xref href=\"System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  nameWithType.vb: PropertyDescriptorCollection.Item(Int32)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  commentId: P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  id: Item(System.String)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: PropertyDescriptorCollection.Item[String]
  fullName: System.ComponentModel.PropertyDescriptorCollection.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 118
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Gets or sets the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name.</p>\n"
  syntax:
    content: public virtual PropertyDescriptor this[string name] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String) As PropertyDescriptor
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to get from the collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, or <strong>null</strong> if the property does not exist.</p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  nameWithType.vb: PropertyDescriptorCollection.Item(String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Item(System.String)
  name.vb: Item(String)
- uid: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  id: Add(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Add(PropertyDescriptor)
  nameWithType: PropertyDescriptorCollection.Add(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 129
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds the specified <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the collection.</p>\n"
  syntax:
    content: public int Add(PropertyDescriptor value)
    content.vb: Public Function Add(value As PropertyDescriptor) As Integer
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to add to the collection. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> that was added to the collection.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Clear
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Clear
  id: Clear
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: PropertyDescriptorCollection.Clear()
  fullName: System.ComponentModel.PropertyDescriptorCollection.Clear()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 144
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes all <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects from the collection.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IDictionary.Clear
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  id: Contains(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Contains(PropertyDescriptor)
  nameWithType: PropertyDescriptorCollection.Contains(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Contains
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 158
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns whether the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Contains(PropertyDescriptor value)
    content.vb: Public Function Contains(value As PropertyDescriptor) As Boolean
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to find in the collection. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the collection contains the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: PropertyDescriptorCollection.CopyTo(Array, Int32)
  fullName: System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CopyTo
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 166
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Copies the entire collection to an array, starting at the specified index number.</p>\n"
  syntax:
    content: public void CopyTo(Array array, int index)
    content.vb: Public Sub CopyTo(array As Array, index As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>An array of <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects to copy elements of the collection to. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the <em>array</em> parameter at which copying begins. </p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)
  id: Find(System.String,System.Boolean)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Find(String, Boolean)
  nameWithType: PropertyDescriptorCollection.Find(String, Boolean)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Find(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Find
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 217
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, using a Boolean to indicate whether to ignore case.</p>\n"
  syntax:
    content: public virtual PropertyDescriptor Find(string name, bool ignoreCase)
    content.vb: Public Overridable Function Find(name As String, ignoreCase As Boolean) As PropertyDescriptor
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to return from the collection. </p>\n"
    - id: ignoreCase
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if you want to ignore the case of the property name; otherwise, <strong>false</strong>. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>A <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> with the specified name, or <strong>null</strong> if the property does not exist.</p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: PropertyDescriptorCollection.GetEnumerator()
  fullName: System.ComponentModel.PropertyDescriptorCollection.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 460
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns an enumerator for this class.</p>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An enumerator of type <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.ComponentModel.PropertyDescriptor
    commentId: T:System.ComponentModel.PropertyDescriptor
  - linkId: System.ComponentModel.TypeDescriptor
    commentId: T:System.ComponentModel.TypeDescriptor
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  id: IndexOf(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: IndexOf(PropertyDescriptor)
  nameWithType: PropertyDescriptorCollection.IndexOf(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndexOf
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 277
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Returns the index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public int IndexOf(PropertyDescriptor value)
    content.vb: Public Function IndexOf(value As PropertyDescriptor) As Integer
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to return the index of. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The index of the given <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  id: Insert(System.Int32,System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Insert(Int32, PropertyDescriptor)
  nameWithType: PropertyDescriptorCollection.Insert(Int32, PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32, System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Insert
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 285
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Adds the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to the collection at the specified index number.</p>\n"
  syntax:
    content: public void Insert(int index, PropertyDescriptor value)
    content.vb: Public Sub Insert(index As Integer, value As PropertyDescriptor)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index at which to add the <em>value</em> parameter to the collection. </p>\n"
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to add to the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  id: InternalSort(System.Collections.IComparer)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: InternalSort(IComparer)
  nameWithType: PropertyDescriptorCollection.InternalSort(IComparer)
  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalSort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 443
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: protected void InternalSort(IComparer sorter)
    content.vb: Protected Sub InternalSort(sorter As IComparer)
    parameters:
    - id: sorter
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  id: InternalSort(System.String[])
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: InternalSort(String[])
  nameWithType: PropertyDescriptorCollection.InternalSort(String[])
  fullName: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InternalSort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 388
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\n"
  syntax:
    content: protected void InternalSort(string[] names)
    content.vb: Protected Sub InternalSort(names As String())
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  nameWithType.vb: PropertyDescriptorCollection.InternalSort(String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String())
  name.vb: InternalSort(String())
- uid: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  id: Remove(System.ComponentModel.PropertyDescriptor)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Remove(PropertyDescriptor)
  nameWithType: PropertyDescriptorCollection.Remove(PropertyDescriptor)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Remove
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 304
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the specified <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> from the collection.</p>\n"
  syntax:
    content: public void Remove(PropertyDescriptor value)
    content.vb: Public Sub Remove(value As PropertyDescriptor)
    parameters:
    - id: value
      type: System.ComponentModel.PropertyDescriptor
      description: "\n<p>The <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to remove from the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: PropertyDescriptorCollection.RemoveAt(Int32)
  fullName: System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 322
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Removes the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> at the specified index from the collection.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> to remove from the collection. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The collection is read-only.</p>\n"
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort
  id: Sort
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: PropertyDescriptorCollection.Sort()
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort()
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 343
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort()
    content.vb: Public Overridable Function Sort As PropertyDescriptorCollection
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort(IComparer)
  nameWithType: PropertyDescriptorCollection.Sort(IComparer)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 377
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection, using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort(IComparer comparer)
    content.vb: Public Overridable Function Sort(comparer As IComparer) As PropertyDescriptorCollection
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  id: Sort(System.String[])
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort(String[])
  nameWithType: PropertyDescriptorCollection.Sort(String[])
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 355
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort(string[] names)
    content.vb: Public Overridable Function Sort(names As String()) As PropertyDescriptorCollection
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  nameWithType.vb: PropertyDescriptorCollection.Sort(String())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String())
  name.vb: Sort(String())
- uid: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  commentId: M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)
  id: Sort(System.String[],System.Collections.IComparer)
  parent: System.ComponentModel.PropertyDescriptorCollection
  langs:
  - csharp
  - vb
  name: Sort(String[], IComparer)
  nameWithType: PropertyDescriptorCollection.Sort(String[], IComparer)
  fullName: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[], System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Sort
    path: src/System.ComponentModel.TypeConverter/src/System/ComponentModel/PropertyDescriptorCollection.cs
    startLine: 366
  assemblies:
  - System.ComponentModel.TypeConverter
  namespace: System.ComponentModel
  summary: "\n<p>Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual PropertyDescriptorCollection Sort(string[] names, IComparer comparer)
    content.vb: Public Overridable Function Sort(names As String(), comparer As IComparer) As PropertyDescriptorCollection
    parameters:
    - id: names
      type: System.String[]
      description: "\n<p>An array of strings describing the order in which to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>A comparer to use to sort the <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects in this collection. </p>\n"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "\n<p>A new <xref href=\"System.ComponentModel.PropertyDescriptorCollection\" data-throw-if-not-resolved=\"false\"></xref> that contains the sorted <xref href=\"System.ComponentModel.PropertyDescriptor\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  nameWithType.vb: PropertyDescriptorCollection.Sort(String(), IComparer)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.ComponentModel.PropertyDescriptorCollection.Sort(System.String(), System.Collections.IComparer)
  name.vb: Sort(String(), IComparer)
references:
- uid: System.ComponentModel
  commentId: N:System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  nameWithType: System.ComponentModel
  fullName: System.ComponentModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IDictionary
  commentId: T:System.Collections.IDictionary
  parent: System.Collections
  isExternal: false
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.ComponentModel.PropertyDescriptorCollection
  commentId: T:System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor[]
  name: PropertyDescriptor[]
  nameWithType: PropertyDescriptor[]
  fullName: System.ComponentModel.PropertyDescriptor[]
  nameWithType.vb: PropertyDescriptor()
  fullname.vb: System.ComponentModel.PropertyDescriptor()
  name.vb: PropertyDescriptor()
  spec.csharp:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.ComponentModel.PropertyDescriptor
    name: PropertyDescriptor
    nameWithType: PropertyDescriptor
    fullName: System.ComponentModel.PropertyDescriptor
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.IDictionary.IsFixedSize
  commentId: P:System.Collections.IDictionary.IsFixedSize
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsFixedSize
  nameWithType: IDictionary.IsFixedSize
  fullName: System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.IDictionary.Add(System.Object,System.Object)
  commentId: M:System.Collections.IDictionary.Add(System.Object,System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Add(Object, Object)
  nameWithType: IDictionary.Add(Object, Object)
  fullName: System.Collections.IDictionary.Add(System.Object, System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    nameWithType: IDictionary.Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Add(System.Object,System.Object)
    name: Add
    nameWithType: IDictionary.Add
    fullName: System.Collections.IDictionary.Add
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Contains(System.Object)
  commentId: M:System.Collections.IDictionary.Contains(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Contains(Object)
  nameWithType: IDictionary.Contains(Object)
  fullName: System.Collections.IDictionary.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    nameWithType: IDictionary.Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Contains(System.Object)
    name: Contains
    nameWithType: IDictionary.Contains
    fullName: System.Collections.IDictionary.Contains
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Item(System.Object)
  commentId: P:System.Collections.IDictionary.Item(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Item[Object]
  nameWithType: IDictionary.Item[Object]
  fullName: System.Collections.IDictionary.Item[System.Object]
  nameWithType.vb: IDictionary.Item(Object)
  fullname.vb: System.Collections.IDictionary.Item(System.Object)
  name.vb: Item(Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    nameWithType: IDictionary.Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IDictionary.Item(System.Object)
    name: Item
    nameWithType: IDictionary.Item
    fullName: System.Collections.IDictionary.Item
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.Remove(System.Object)
  commentId: M:System.Collections.IDictionary.Remove(System.Object)
  parent: System.Collections.IDictionary
  isExternal: true
  name: Remove(Object)
  nameWithType: IDictionary.Remove(Object)
  fullName: System.Collections.IDictionary.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    nameWithType: IDictionary.Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Remove(System.Object)
    name: Remove
    nameWithType: IDictionary.Remove
    fullName: System.Collections.IDictionary.Remove
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionary.IsReadOnly
  commentId: P:System.Collections.IDictionary.IsReadOnly
  parent: System.Collections.IDictionary
  isExternal: true
  name: IsReadOnly
  nameWithType: IDictionary.IsReadOnly
  fullName: System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.IDictionary.GetEnumerator
  commentId: M:System.Collections.IDictionary.GetEnumerator
  parent: System.Collections.IDictionary
  isExternal: true
  name: GetEnumerator()
  nameWithType: IDictionary.GetEnumerator()
  fullName: System.Collections.IDictionary.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    nameWithType: IDictionary.GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.GetEnumerator
    name: GetEnumerator
    nameWithType: IDictionary.GetEnumerator
    fullName: System.Collections.IDictionary.GetEnumerator
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IDictionaryEnumerator
  commentId: T:System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: false
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.IDictionary.Keys
  commentId: P:System.Collections.IDictionary.Keys
  parent: System.Collections.IDictionary
  isExternal: true
  name: Keys
  nameWithType: IDictionary.Keys
  fullName: System.Collections.IDictionary.Keys
- uid: System.Collections.IDictionary.Values
  commentId: P:System.Collections.IDictionary.Values
  parent: System.Collections.IDictionary
  isExternal: true
  name: Values
  nameWithType: IDictionary.Values
  fullName: System.Collections.IDictionary.Values
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ComponentModel.PropertyDescriptor
  commentId: T:System.ComponentModel.PropertyDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.IDictionary.Clear
  commentId: M:System.Collections.IDictionary.Clear
  parent: System.Collections.IDictionary
  isExternal: true
  name: Clear()
  nameWithType: IDictionary.Clear()
  fullName: System.Collections.IDictionary.Clear()
  spec.csharp:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    nameWithType: IDictionary.Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IDictionary.Clear
    name: Clear
    nameWithType: IDictionary.Clear
    fullName: System.Collections.IDictionary.Clear
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.IComparer
  commentId: T:System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
