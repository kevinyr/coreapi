### YamlMime:ManagedReference
items:
- uid: System.Threading.Mutex
  commentId: T:System.Threading.Mutex
  id: Mutex
  parent: System.Threading
  children:
  - System.Threading.Mutex.#ctor
  - System.Threading.Mutex.#ctor(System.Boolean)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String)
  - System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  - System.Threading.Mutex.OpenExisting(System.String)
  - System.Threading.Mutex.ReleaseMutex
  - System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  langs:
  - csharp
  - vb
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Mutex
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 32
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>A synchronization primitive that can also be used for interprocess synchronization. </p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [ComVisible(true)]

      public sealed class Mutex : WaitHandle, IDisposable
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <ComVisible(True)>

      Public NotInheritable Class Mutex
          Inherits WaitHandle
          Implements IDisposable
  seealso:
  - linkId: System.Threading.WaitHandle
    commentId: T:System.Threading.WaitHandle
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Threading.WaitHandle
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Threading.WaitHandle.WaitTimeout
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  - System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  - System.Threading.WaitHandle.Close
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Handle
  - System.Threading.WaitHandle.SafeWaitHandle
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.GetSafeWaitHandle
  - System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Threading.Mutex.#ctor
  commentId: M:System.Threading.Mutex.#ctor
  id: '#ctor'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex()
  nameWithType: Mutex.Mutex()
  fullName: System.Threading.Mutex.Mutex()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 251
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> class with default properties.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public Mutex()
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.#ctor(System.Boolean)
  commentId: M:System.Threading.Mutex.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex(Boolean)
  nameWithType: Mutex.Mutex(Boolean)
  fullName: System.Threading.Mutex.Mutex(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 245
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public Mutex(bool initiallyOwned)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub New(initiallyOwned As Boolean)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to give the calling thread initial ownership of the mutex; otherwise, <strong>false</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String)
  commentId: M:System.Threading.Mutex.#ctor(System.Boolean,System.String)
  id: '#ctor(System.Boolean,System.String)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex(Boolean, String)
  nameWithType: Mutex.Mutex(Boolean, String)
  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 240
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, and a string that is the name of the mutex.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public Mutex(bool initiallyOwned, string name)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub New(initiallyOwned As Boolean, name As String)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <strong>false</strong>. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref>. If the value is <strong>null</strong>, the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> is unnamed. </p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The named mutex exists and has access control security, but the user does not have <xref href=\"System.Security.AccessControl.MutexRights.FullControl\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A Win32 error occurred.</p>\n"
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: "\n<p>The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is longer than 260 characters.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  commentId: M:System.Threading.Mutex.#ctor(System.Boolean,System.String,System.Boolean@)
  id: '#ctor(System.Boolean,System.String,System.Boolean@)'
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: Mutex(Boolean, String, out Boolean)
  nameWithType: Mutex.Mutex(Boolean, String, out Boolean)
  fullName: System.Threading.Mutex.Mutex(System.Boolean, System.String, out System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 43
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> class with a Boolean value that indicates whether the calling thread should have initial ownership of the mutex, a string that is the name of the mutex, and a Boolean value that, when the method returns, indicates whether the calling thread was granted initial ownership of the mutex.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public Mutex(bool initiallyOwned, string name, out bool createdNew)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub New(initiallyOwned As Boolean, name As String, ByRef createdNew As Boolean)
    parameters:
    - id: initiallyOwned
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to give the calling thread initial ownership of the named system mutex if the named system mutex is created as a result of this call; otherwise, <strong>false</strong>. </p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref>. If the value is <strong>null</strong>, the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> is unnamed. </p>\n"
    - id: createdNew
      type: System.Boolean
      description: "\n<p>When this method returns, contains a Boolean that is <strong>true</strong> if a local mutex was created (that is, if <em>name</em> is <strong>null</strong> or an empty string) or if the specified named system mutex was created; <strong>false</strong> if the specified named system mutex already existed. This parameter is passed uninitialized. </p>\n"
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The named mutex exists and has access control security, but the user does not have <xref href=\"System.Security.AccessControl.MutexRights.FullControl\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A Win32 error occurred.</p>\n"
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: "\n<p>The named mutex cannot be created, perhaps because a wait handle of a different type has the same name.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is longer than 260 characters.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Mutex.Mutex(Boolean, String, ByRef Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.Mutex.Mutex(System.Boolean, System.String, ByRef System.Boolean)
  name.vb: Mutex(Boolean, String, ByRef Boolean)
- uid: System.Threading.Mutex.OpenExisting(System.String)
  commentId: M:System.Threading.Mutex.OpenExisting(System.String)
  id: OpenExisting(System.String)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: OpenExisting(String)
  nameWithType: Mutex.OpenExisting(String)
  fullName: System.Threading.Mutex.OpenExisting(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OpenExisting
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 265
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Opens the specified named mutex, if it already exists.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static Mutex OpenExisting(string name)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function OpenExisting(name As String) As Mutex
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the system mutex to open.</p>\n"
    return:
      type: System.Threading.Mutex
      description: "\n<p>An object that represents the named system mutex.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is an empty string.</p>\n<p>-or-</p>\n<p>\n<em>name</em> is longer than 260 characters.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.Threading.WaitHandleCannotBeOpenedException
    commentId: T:System.Threading.WaitHandleCannotBeOpenedException
    description: "\n<p>The named mutex does not exist.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A Win32 error occurred.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The named mutex exists, but the user does not have the security access required to use it.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Mutex.ReleaseMutex
  commentId: M:System.Threading.Mutex.ReleaseMutex
  id: ReleaseMutex
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: ReleaseMutex()
  nameWithType: Mutex.ReleaseMutex()
  fullName: System.Threading.Mutex.ReleaseMutex()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleaseMutex
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 381
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> once.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public void ReleaseMutex()
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Sub ReleaseMutex
  exceptions:
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: "\n<p>The calling thread does not own the mutex. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  commentId: M:System.Threading.Mutex.TryOpenExisting(System.String,System.Threading.Mutex@)
  id: TryOpenExisting(System.String,System.Threading.Mutex@)
  parent: System.Threading.Mutex
  langs:
  - csharp
  - vb
  name: TryOpenExisting(String, out Mutex)
  nameWithType: Mutex.TryOpenExisting(String, out Mutex)
  fullName: System.Threading.Mutex.TryOpenExisting(System.String, out System.Threading.Mutex)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Mutex.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryOpenExisting
    path: src/mscorlib/src/System/Threading/Mutex.cs
    startLine: 302
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Opens the specified named mutex, if it already exists, and returns a value that indicates whether the operation succeeded.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static bool TryOpenExisting(string name, out Mutex result)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function TryOpenExisting(name As String, ByRef result As Mutex) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the system mutex to open.</p>\n"
    - id: result
      type: System.Threading.Mutex
      description: "\n<p>When this method returns, contains a <xref href=\"System.Threading.Mutex\" data-throw-if-not-resolved=\"false\"></xref> object that represents the named mutex if the call succeeded, or <strong>null</strong> if the call failed. This parameter is treated as uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the named mutex was opened successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>name</em> is an empty string.</p>\n<p>-or-</p>\n<p>\n<em>name</em> is longer than 260 characters.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>A Win32 error occurred.</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The named mutex exists, but the user does not have the security access required to use it.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Mutex.TryOpenExisting(String, ByRef Mutex)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Mutex.TryOpenExisting(System.String, ByRef System.Threading.Mutex)
  name.vb: TryOpenExisting(String, ByRef Mutex)
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.MarshalByRefObject
  commentId: T:System.MarshalByRefObject
  parent: System
  isExternal: true
  name: MarshalByRefObject
  nameWithType: MarshalByRefObject
  fullName: System.MarshalByRefObject
- uid: System.Threading.WaitHandle
  commentId: T:System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Threading.WaitHandle.WaitTimeout
  commentId: F:System.Threading.WaitHandle.WaitTimeout
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitTimeout
  nameWithType: WaitHandle.WaitTimeout
  fullName: System.Threading.WaitHandle.WaitTimeout
- uid: System.Threading.WaitHandle.InvalidHandle
  commentId: F:System.Threading.WaitHandle.InvalidHandle
  parent: System.Threading.WaitHandle
  isExternal: true
  name: InvalidHandle
  nameWithType: WaitHandle.InvalidHandle
  fullName: System.Threading.WaitHandle.InvalidHandle
- uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitOne(Int32, Boolean)
  nameWithType: WaitHandle.WaitOne(Int32, Boolean)
  fullName: System.Threading.WaitHandle.WaitOne(System.Int32, System.Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitOne(TimeSpan, Boolean)
  nameWithType: WaitHandle.WaitOne(TimeSpan, Boolean)
  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan, System.Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan,System.Boolean)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitOne
  commentId: M:System.Threading.WaitHandle.WaitOne
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitOne()
  nameWithType: WaitHandle.WaitOne()
  fullName: System.Threading.WaitHandle.WaitOne()
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitOne
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitOne
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitOne(System.Int32)
  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitOne(Int32)
  nameWithType: WaitHandle.WaitOne(Int32)
  fullName: System.Threading.WaitHandle.WaitOne(System.Int32)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitOne(System.Int32)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitOne(System.Int32)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitOne(TimeSpan)
  nameWithType: WaitHandle.WaitOne(TimeSpan)
  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
    name: WaitOne
    nameWithType: WaitHandle.WaitOne
    fullName: System.Threading.WaitHandle.WaitOne
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAll(WaitHandle[], Int32, Boolean)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32, Boolean)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32, System.Boolean)
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32, Boolean)
  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32, System.Boolean)
  name.vb: WaitAll(WaitHandle(), Int32, Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32,System.Boolean)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAll(WaitHandle[], TimeSpan, Boolean)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan, Boolean)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan, Boolean)
  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan, System.Boolean)
  name.vb: WaitAll(WaitHandle(), TimeSpan, Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAll(WaitHandle[])
  nameWithType: WaitHandle.WaitAll(WaitHandle[])
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle())
  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle())
  name.vb: WaitAll(WaitHandle())
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAll(WaitHandle[], Int32)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32)
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32)
  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32)
  name.vb: WaitAll(WaitHandle(), Int32)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAll(WaitHandle[], TimeSpan)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan)
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan)
  fullname.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan)
  name.vb: WaitAll(WaitHandle(), TimeSpan)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
    name: WaitAll
    nameWithType: WaitHandle.WaitAll
    fullName: System.Threading.WaitHandle.WaitAll
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAny(WaitHandle[], Int32, Boolean)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32, Boolean)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32, System.Boolean)
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32, Boolean)
  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32, System.Boolean)
  name.vb: WaitAny(WaitHandle(), Int32, Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAny(WaitHandle[], TimeSpan, Boolean)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan, Boolean)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan, System.Boolean)
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan, Boolean)
  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan, System.Boolean)
  name.vb: WaitAny(WaitHandle(), TimeSpan, Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan,System.Boolean)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAny(WaitHandle[], TimeSpan)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan)
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan)
  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan)
  name.vb: WaitAny(WaitHandle(), TimeSpan)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAny(WaitHandle[])
  nameWithType: WaitHandle.WaitAny(WaitHandle[])
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle())
  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle())
  name.vb: WaitAny(WaitHandle())
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: WaitAny(WaitHandle[], Int32)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32)
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32)
  fullname.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32)
  name.vb: WaitAny(WaitHandle(), Int32)
  spec.csharp:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
    name: WaitAny
    nameWithType: WaitHandle.WaitAny
    fullName: System.Threading.WaitHandle.WaitAny
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: SignalAndWait(WaitHandle, WaitHandle)
  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle)
  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle)
  spec.csharp:
  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
    name: SignalAndWait
    nameWithType: WaitHandle.SignalAndWait
    fullName: System.Threading.WaitHandle.SignalAndWait
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle)
    name: SignalAndWait
    nameWithType: WaitHandle.SignalAndWait
    fullName: System.Threading.WaitHandle.SignalAndWait
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)
  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, TimeSpan, Boolean)
  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle, System.TimeSpan, System.Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
    name: SignalAndWait
    nameWithType: WaitHandle.SignalAndWait
    fullName: System.Threading.WaitHandle.SignalAndWait
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.TimeSpan,System.Boolean)
    name: SignalAndWait
    nameWithType: WaitHandle.SignalAndWait
    fullName: System.Threading.WaitHandle.SignalAndWait
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: System.TimeSpan
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  commentId: M:System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)
  nameWithType: WaitHandle.SignalAndWait(WaitHandle, WaitHandle, Int32, Boolean)
  fullName: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle, System.Threading.WaitHandle, System.Int32, System.Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
    name: SignalAndWait
    nameWithType: WaitHandle.SignalAndWait
    fullName: System.Threading.WaitHandle.SignalAndWait
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.SignalAndWait(System.Threading.WaitHandle,System.Threading.WaitHandle,System.Int32,System.Boolean)
    name: SignalAndWait
    nameWithType: WaitHandle.SignalAndWait
    fullName: System.Threading.WaitHandle.SignalAndWait
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.Close
  commentId: M:System.Threading.WaitHandle.Close
  parent: System.Threading.WaitHandle
  isExternal: true
  name: Close()
  nameWithType: WaitHandle.Close()
  fullName: System.Threading.WaitHandle.Close()
  spec.csharp:
  - uid: System.Threading.WaitHandle.Close
    name: Close
    nameWithType: WaitHandle.Close
    fullName: System.Threading.WaitHandle.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.Close
    name: Close
    nameWithType: WaitHandle.Close
    fullName: System.Threading.WaitHandle.Close
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.Dispose(System.Boolean)
  commentId: M:System.Threading.WaitHandle.Dispose(System.Boolean)
  parent: System.Threading.WaitHandle
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: WaitHandle.Dispose(Boolean)
  fullName: System.Threading.WaitHandle.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Threading.WaitHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: WaitHandle.Dispose
    fullName: System.Threading.WaitHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.Dispose(System.Boolean)
    name: Dispose
    nameWithType: WaitHandle.Dispose
    fullName: System.Threading.WaitHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.Dispose
  commentId: M:System.Threading.WaitHandle.Dispose
  parent: System.Threading.WaitHandle
  isExternal: true
  name: Dispose()
  nameWithType: WaitHandle.Dispose()
  fullName: System.Threading.WaitHandle.Dispose()
  spec.csharp:
  - uid: System.Threading.WaitHandle.Dispose
    name: Dispose
    nameWithType: WaitHandle.Dispose
    fullName: System.Threading.WaitHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandle.Dispose
    name: Dispose
    nameWithType: WaitHandle.Dispose
    fullName: System.Threading.WaitHandle.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.Handle
  commentId: P:System.Threading.WaitHandle.Handle
  parent: System.Threading.WaitHandle
  isExternal: true
  name: Handle
  nameWithType: WaitHandle.Handle
  fullName: System.Threading.WaitHandle.Handle
- uid: System.Threading.WaitHandle.SafeWaitHandle
  commentId: P:System.Threading.WaitHandle.SafeWaitHandle
  parent: System.Threading.WaitHandle
  isExternal: true
  name: SafeWaitHandle
  nameWithType: WaitHandle.SafeWaitHandle
  fullName: System.Threading.WaitHandle.SafeWaitHandle
- uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  commentId: M:System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  parent: System.MarshalByRefObject
  isExternal: true
  name: MemberwiseClone(Boolean)
  nameWithType: MarshalByRefObject.MemberwiseClone(Boolean)
  fullName: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  spec.csharp:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.MemberwiseClone(System.Boolean)
    name: MemberwiseClone
    nameWithType: MarshalByRefObject.MemberwiseClone
    fullName: System.MarshalByRefObject.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.GetLifetimeService
  commentId: M:System.MarshalByRefObject.GetLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: GetLifetimeService()
  nameWithType: MarshalByRefObject.GetLifetimeService()
  fullName: System.MarshalByRefObject.GetLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.GetLifetimeService
    name: GetLifetimeService
    nameWithType: MarshalByRefObject.GetLifetimeService
    fullName: System.MarshalByRefObject.GetLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.InitializeLifetimeService
  commentId: M:System.MarshalByRefObject.InitializeLifetimeService
  parent: System.MarshalByRefObject
  isExternal: true
  name: InitializeLifetimeService()
  nameWithType: MarshalByRefObject.InitializeLifetimeService()
  fullName: System.MarshalByRefObject.InitializeLifetimeService()
  spec.csharp:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.InitializeLifetimeService
    name: InitializeLifetimeService
    nameWithType: MarshalByRefObject.InitializeLifetimeService
    fullName: System.MarshalByRefObject.InitializeLifetimeService
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.MarshalByRefObject.CreateObjRef(System.Type)
  commentId: M:System.MarshalByRefObject.CreateObjRef(System.Type)
  parent: System.MarshalByRefObject
  isExternal: true
  name: CreateObjRef(Type)
  nameWithType: MarshalByRefObject.CreateObjRef(Type)
  fullName: System.MarshalByRefObject.CreateObjRef(System.Type)
  spec.csharp:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.MarshalByRefObject.CreateObjRef(System.Type)
    name: CreateObjRef
    nameWithType: MarshalByRefObject.CreateObjRef
    fullName: System.MarshalByRefObject.CreateObjRef
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.GetSafeWaitHandle
  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  parent: System.Threading.WaitHandleExtensions
  definition: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  name: GetSafeWaitHandle()
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle()
  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle()
  spec.csharp:
  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle
    name: GetSafeWaitHandle
    nameWithType: WaitHandleExtensions.GetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle
    name: GetSafeWaitHandle
    nameWithType: WaitHandleExtensions.GetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandle.System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  parent: System.Threading.WaitHandleExtensions
  definition: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  name: SetSafeWaitHandle(SafeWaitHandle)
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(SafeWaitHandle)
  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)
  spec.csharp:
  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)
    name: SetSafeWaitHandle
    nameWithType: WaitHandleExtensions.SetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
    name: SafeWaitHandle
    nameWithType: SafeWaitHandle
    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(Microsoft.Win32.SafeHandles.SafeWaitHandle)
    name: SetSafeWaitHandle
    nameWithType: WaitHandleExtensions.SetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
    name: SafeWaitHandle
    nameWithType: SafeWaitHandle
    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  isExternal: true
  name: GetSafeWaitHandle(WaitHandle)
  nameWithType: WaitHandleExtensions.GetSafeWaitHandle(WaitHandle)
  fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
  spec.csharp:
  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
    name: GetSafeWaitHandle
    nameWithType: WaitHandleExtensions.GetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandleExtensions.GetSafeWaitHandle(System.Threading.WaitHandle)
    name: GetSafeWaitHandle
    nameWithType: WaitHandleExtensions.GetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.GetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.WaitHandleExtensions
  commentId: T:System.Threading.WaitHandleExtensions
  parent: System.Threading
  isExternal: false
  name: WaitHandleExtensions
  nameWithType: WaitHandleExtensions
  fullName: System.Threading.WaitHandleExtensions
- uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  commentId: M:System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
  isExternal: true
  name: SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  nameWithType: WaitHandleExtensions.SetSafeWaitHandle(WaitHandle, SafeWaitHandle)
  fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle, Microsoft.Win32.SafeHandles.SafeWaitHandle)
  spec.csharp:
  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
    name: SetSafeWaitHandle
    nameWithType: WaitHandleExtensions.SetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
    name: SafeWaitHandle
    nameWithType: SafeWaitHandle
    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Threading.WaitHandleExtensions.SetSafeWaitHandle(System.Threading.WaitHandle,Microsoft.Win32.SafeHandles.SafeWaitHandle)
    name: SetSafeWaitHandle
    nameWithType: WaitHandleExtensions.SetSafeWaitHandle
    fullName: System.Threading.WaitHandleExtensions.SetSafeWaitHandle
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Win32.SafeHandles.SafeWaitHandle
    name: SafeWaitHandle
    nameWithType: SafeWaitHandle
    fullName: Microsoft.Win32.SafeHandles.SafeWaitHandle
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Mutex
  commentId: T:System.Threading.Mutex
  parent: System.Threading
  isExternal: false
  name: Mutex
  nameWithType: Mutex
  fullName: System.Threading.Mutex
- uid: System.UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
- uid: System.Threading.WaitHandleCannotBeOpenedException
  commentId: T:System.Threading.WaitHandleCannotBeOpenedException
  isExternal: false
  name: WaitHandleCannotBeOpenedException
  nameWithType: WaitHandleCannotBeOpenedException
  fullName: System.Threading.WaitHandleCannotBeOpenedException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ApplicationException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
