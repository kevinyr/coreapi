items:
- uid: System.IntPtr
  commentId: T:System.IntPtr
  id: IntPtr
  parent: System
  children:
  - System.IntPtr.#ctor(System.Int32)
  - System.IntPtr.#ctor(System.Int64)
  - System.IntPtr.#ctor(System.Void*)
  - System.IntPtr.Add(System.IntPtr,System.Int32)
  - System.IntPtr.Equals(System.Object)
  - System.IntPtr.GetHashCode
  - System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  - System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)
  - System.IntPtr.op_Explicit(System.Int32)~System.IntPtr
  - System.IntPtr.op_Explicit(System.Int64)~System.IntPtr
  - System.IntPtr.op_Explicit(System.IntPtr)~System.Int32
  - System.IntPtr.op_Explicit(System.IntPtr)~System.Int64
  - System.IntPtr.op_Explicit(System.IntPtr)~System.Void*
  - System.IntPtr.op_Explicit(System.Void*)~System.IntPtr
  - System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)
  - System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  - System.IntPtr.Size
  - System.IntPtr.Subtract(System.IntPtr,System.Int32)
  - System.IntPtr.ToInt32
  - System.IntPtr.ToInt64
  - System.IntPtr.ToPointer
  - System.IntPtr.ToString
  - System.IntPtr.ToString(System.String)
  - System.IntPtr.Zero
  langs:
  - csharp
  - vb
  name: IntPtr
  fullName: System.IntPtr
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IntPtr
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 27
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>A platform-specific type that is used to represent a pointer or a handle.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public struct IntPtr : ISerializable
    content.vb: >-
      <ComVisible(True)>

      Public Structure IntPtr
          Implements ISerializable
  seealso:
  - type: System.UIntPtr
    commentId: T:System.UIntPtr
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  nameWithType: IntPtr
- uid: System.IntPtr.Zero
  commentId: F:System.IntPtr.Zero
  id: Zero
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Zero
  fullName: System.IntPtr.Zero
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Zero
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 33
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>A read-only field that represents a pointer or handle that has been initialized to zero.</p>\n"
  syntax:
    content: public static readonly IntPtr Zero
    content.vb: Public Shared ReadOnly Zero As IntPtr
    return:
      type: System.IntPtr
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: IntPtr.Zero
- uid: System.IntPtr.#ctor(System.Int32)
  commentId: M:System.IntPtr.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: IntPtr(Int32)
  fullName: System.IntPtr.IntPtr(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 44
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> using the specified 32-bit pointer or handle.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public IntPtr(int value)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Sub New(value As Integer)
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>A pointer or handle contained in a 32-bit signed integer. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.IntPtr(Int32)
- uid: System.IntPtr.#ctor(System.Int64)
  commentId: M:System.IntPtr.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: IntPtr(Int64)
  fullName: System.IntPtr.IntPtr(System.Int64)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 56
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> using the specified 64-bit pointer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public IntPtr(long value)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Sub New(value As Long)
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>A pointer or handle contained in a 64-bit signed integer. </p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 32-bit platform, <em>value</em> is too large or too small to represent as an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.IntPtr(Int64)
- uid: System.IntPtr.#ctor(System.Void*)
  commentId: M:System.IntPtr.#ctor(System.Void*)
  id: '#ctor(System.Void*)'
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: IntPtr(Void*)
  fullName: System.IntPtr.IntPtr(System.Void*)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 68
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> using the specified pointer to an unspecified type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public IntPtr(void *value)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Sub New(value As  *)
    parameters:
    - id: value
      type: System.Void*
      description: "\n<p>A pointer to an unspecified type. </p>\n"
  seealso:
  - type: System.Void
    commentId: T:System.Void
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.IntPtr(Void*)
- uid: System.IntPtr.Size
  commentId: P:System.IntPtr.Size
  id: Size
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Size
  fullName: System.IntPtr.Size
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Size
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 273
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the size of this instance.</p>\n"
  syntax:
    content: >-
      public static int Size

      {
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          [NonVersionable]
          get;
      }
    content.vb: Public Shared ReadOnly Property Size As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The size of a pointer or handle in this process, measured in bytes. The value of this property is 4 in a 32-bit process, and 8 in a 64-bit process. You can define the process type by setting the <strong>/platform</strong> switch when you compile your code with the C# and Visual Basic compilers.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: IntPtr.Size
- uid: System.IntPtr.Add(System.IntPtr,System.Int32)
  commentId: M:System.IntPtr.Add(System.IntPtr,System.Int32)
  id: Add(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Add(IntPtr, Int32)
  fullName: System.IntPtr.Add(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 239
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds an offset to the value of a pointer.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static IntPtr Add(IntPtr pointer, int offset)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Function Add(pointer As IntPtr, offset As Integer) As IntPtr
    parameters:
    - id: pointer
      type: System.IntPtr
      description: "\n<p>The pointer to add the offset to.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset to add.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\n"
  seealso:
  - type: System.IntPtr.op_Addition(System.IntPtr,System.Int32)
    commentId: M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: IntPtr.Add(IntPtr, Int32)
- uid: System.IntPtr.Equals(System.Object)
  commentId: M:System.IntPtr.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: System.IntPtr.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 103
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override bool Equals(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with this instance or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is an instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> and equals the value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: IntPtr.Equals(Object)
- uid: System.IntPtr.GetHashCode
  commentId: M:System.IntPtr.GetHashCode
  id: GetHashCode
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: System.IntPtr.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 111
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: IntPtr.GetHashCode()
- uid: System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  commentId: M:System.IntPtr.op_Addition(System.IntPtr,System.Int32)
  id: op_Addition(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Addition(IntPtr, Int32)
  fullName: System.IntPtr.Addition(System.IntPtr, System.Int32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Addition
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 246
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Adds an offset to the value of a pointer.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static IntPtr operator +(IntPtr pointer, int offset)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Operator +(pointer As IntPtr, offset As Integer) As IntPtr
    parameters:
    - id: pointer
      type: System.IntPtr
      description: "\n<p>The pointer to add the offset to.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset to add.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new pointer that reflects the addition of <em>offset</em> to <em>pointer</em>.</p>\n"
  seealso:
  - type: System.IntPtr.Add(System.IntPtr,System.Int32)
    commentId: M:System.IntPtr.Add(System.IntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: IntPtr.Addition(IntPtr, Int32)
- uid: System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)
  commentId: M:System.IntPtr.op_Equality(System.IntPtr,System.IntPtr)
  id: op_Equality(System.IntPtr,System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Equality(IntPtr, IntPtr)
  fullName: System.IntPtr.Equality(System.IntPtr, System.IntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 223
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified instances of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> are equal.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static bool operator ==(IntPtr value1, IntPtr value2)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Operator =(value1 As IntPtr, value2 As IntPtr) As Boolean
    parameters:
    - id: value1
      type: System.IntPtr
      description: "\n<p>The first pointer or handle to compare.</p>\n"
    - id: value2
      type: System.IntPtr
      description: "\n<p>The second pointer or handle to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value1</em> equals <em>value2</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: IntPtr.Equality(IntPtr, IntPtr)
- uid: System.IntPtr.op_Explicit(System.Int32)~System.IntPtr
  commentId: M:System.IntPtr.op_Explicit(System.Int32)~System.IntPtr
  id: op_Explicit(System.Int32)~System.IntPtr
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Explicit(Int32 to IntPtr)
  fullName: System.IntPtr.Explicit(System.Int32 to System.IntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 170
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a 32-bit signed integer to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static explicit operator IntPtr(int value)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As Integer) As IntPtr
    parameters:
    - id: value
      type: System.Int32
      description: "\n<p>A 32-bit signed integer. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> initialized to <em>value</em>.</p>\n"
  seealso:
  - type: System.IntPtr.#ctor(System.Int32)
    commentId: M:System.IntPtr.#ctor(System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IntPtr.Narrowing(System.Int32 to System.IntPtr)
  name.vb: Narrowing(Int32 to IntPtr)
  nameWithType: IntPtr.Explicit(Int32 to IntPtr)
  nameWithType.vb: IntPtr.Narrowing(Int32 to IntPtr)
- uid: System.IntPtr.op_Explicit(System.Int64)~System.IntPtr
  commentId: M:System.IntPtr.op_Explicit(System.Int64)~System.IntPtr
  id: op_Explicit(System.Int64)~System.IntPtr
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Explicit(Int64 to IntPtr)
  fullName: System.IntPtr.Explicit(System.Int64 to System.IntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 177
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of a 64-bit signed integer to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static explicit operator IntPtr(long value)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As Long) As IntPtr
    parameters:
    - id: value
      type: System.Int64
      description: "\n<p>A 64-bit signed integer. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> initialized to <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 32-bit platform, <em>value</em> is too large to represent as an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - type: System.IntPtr.#ctor(System.Int32)
    commentId: M:System.IntPtr.#ctor(System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IntPtr.Narrowing(System.Int64 to System.IntPtr)
  name.vb: Narrowing(Int64 to IntPtr)
  nameWithType: IntPtr.Explicit(Int64 to IntPtr)
  nameWithType.vb: IntPtr.Narrowing(Int64 to IntPtr)
- uid: System.IntPtr.op_Explicit(System.IntPtr)~System.Int32
  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int32
  id: op_Explicit(System.IntPtr)~System.Int32
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Explicit(IntPtr to Int32)
  fullName: System.IntPtr.Explicit(System.IntPtr to System.Int32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 200
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> to a 32-bit signed integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public static explicit operator int (IntPtr value)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As IntPtr) As Integer
    parameters:
    - id: value
      type: System.IntPtr
      description: "\n<p>The pointer or handle to convert.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The contents of <em>value</em>.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 64-bit platform, the value of <em>value</em> is too large to represent as a 32-bit signed integer. </p>\n"
  seealso:
  - type: System.IntPtr.ToInt32
    commentId: M:System.IntPtr.ToInt32
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IntPtr.Narrowing(System.IntPtr to System.Int32)
  name.vb: Narrowing(IntPtr to Int32)
  nameWithType: IntPtr.Explicit(IntPtr to Int32)
  nameWithType.vb: IntPtr.Narrowing(IntPtr to Int32)
- uid: System.IntPtr.op_Explicit(System.IntPtr)~System.Int64
  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Int64
  id: op_Explicit(System.IntPtr)~System.Int64
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Explicit(IntPtr to Int64)
  fullName: System.IntPtr.Explicit(System.IntPtr to System.Int64)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 212
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> to a 64-bit signed integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [NonVersionable]

      public static explicit operator long (IntPtr value)
    content.vb: >-
      <SecuritySafeCritical>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As IntPtr) As Long
    parameters:
    - id: value
      type: System.IntPtr
      description: "\n<p>The pointer or handle to convert.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The contents of <em>value</em>.</p>\n"
  seealso:
  - type: System.IntPtr.ToInt64
    commentId: M:System.IntPtr.ToInt64
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IntPtr.Narrowing(System.IntPtr to System.Int64)
  name.vb: Narrowing(IntPtr to Int64)
  nameWithType: IntPtr.Explicit(IntPtr to Int64)
  nameWithType.vb: IntPtr.Narrowing(IntPtr to Int64)
- uid: System.IntPtr.op_Explicit(System.IntPtr)~System.Void*
  commentId: M:System.IntPtr.op_Explicit(System.IntPtr)~System.Void*
  id: op_Explicit(System.IntPtr)~System.Void*
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Explicit(IntPtr to Void*)
  fullName: System.IntPtr.Explicit(System.IntPtr to System.Void*)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 192
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the specified <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> to a pointer to an unspecified type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [CLSCompliant(false)]

      [NonVersionable]

      public static explicit operator void *(IntPtr value)
    content.vb: "<SecuritySafeCritical>\n<CLSCompliant(False)>\n<NonVersionable>\nPublic Shared Narrowing Operator CType(value As IntPtr) As "
    parameters:
    - id: value
      type: System.IntPtr
      description: "\n<p>The pointer or handle to convert. </p>\n"
    return:
      type: System.Void*
      description: "\n<p>The contents of <em>value</em>.</p>\n"
  seealso:
  - type: System.IntPtr.ToPointer
    commentId: M:System.IntPtr.ToPointer
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IntPtr.Narrowing(System.IntPtr to System.Void*)
  name.vb: Narrowing(IntPtr to Void*)
  nameWithType: IntPtr.Explicit(IntPtr to Void*)
  nameWithType.vb: IntPtr.Narrowing(IntPtr to Void*)
- uid: System.IntPtr.op_Explicit(System.Void*)~System.IntPtr
  commentId: M:System.IntPtr.op_Explicit(System.Void*)~System.IntPtr
  id: op_Explicit(System.Void*)~System.IntPtr
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Explicit(Void* to IntPtr)
  fullName: System.IntPtr.Explicit(System.Void* to System.IntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Explicit
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 184
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the specified pointer to an unspecified type to an <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static explicit operator IntPtr(void *value)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Narrowing Operator CType(value As  *) As IntPtr
    parameters:
    - id: value
      type: System.Void*
      description: "\n<p>A pointer to an unspecified type. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new instance of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> initialized to <em>value</em>.</p>\n"
  seealso:
  - type: System.IntPtr.#ctor(System.Int32)
    commentId: M:System.IntPtr.#ctor(System.Int32)
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IntPtr.Narrowing(System.Void* to System.IntPtr)
  name.vb: Narrowing(Void* to IntPtr)
  nameWithType: IntPtr.Explicit(Void* to IntPtr)
  nameWithType.vb: IntPtr.Narrowing(Void* to IntPtr)
- uid: System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)
  commentId: M:System.IntPtr.op_Inequality(System.IntPtr,System.IntPtr)
  id: op_Inequality(System.IntPtr,System.IntPtr)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Inequality(IntPtr, IntPtr)
  fullName: System.IntPtr.Inequality(System.IntPtr, System.IntPtr)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 231
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified instances of <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> are not equal.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public static bool operator !=(IntPtr value1, IntPtr value2)
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Shared Operator <>(value1 As IntPtr, value2 As IntPtr) As Boolean
    parameters:
    - id: value1
      type: System.IntPtr
      description: "\n<p>The first pointer or handle to compare. </p>\n"
    - id: value2
      type: System.IntPtr
      description: "\n<p>The second pointer or handle to compare. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>value1</em> does not equal <em>value2</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: IntPtr.Inequality(IntPtr, IntPtr)
- uid: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  commentId: M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  id: op_Subtraction(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Subtraction(IntPtr, Int32)
  fullName: System.IntPtr.Subtraction(System.IntPtr, System.Int32)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Subtraction
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 263
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Subtracts an offset from the value of a pointer.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static IntPtr operator -(IntPtr pointer, int offset)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Operator -(pointer As IntPtr, offset As Integer) As IntPtr
    parameters:
    - id: pointer
      type: System.IntPtr
      description: "\n<p>The pointer to subtract the offset from.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset to subtract.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\n"
  seealso:
  - type: System.IntPtr.Subtract(System.IntPtr,System.Int32)
    commentId: M:System.IntPtr.Subtract(System.IntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: IntPtr.Subtraction(IntPtr, Int32)
- uid: System.IntPtr.Subtract(System.IntPtr,System.Int32)
  commentId: M:System.IntPtr.Subtract(System.IntPtr,System.Int32)
  id: Subtract(System.IntPtr,System.Int32)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: Subtract(IntPtr, Int32)
  fullName: System.IntPtr.Subtract(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Subtract
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 257
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Subtracts an offset from the value of a pointer.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)]

      [NonVersionable]

      public static IntPtr Subtract(IntPtr pointer, int offset)
    content.vb: >-
      <ReliabilityContract(Consistency.MayCorruptInstance, Cer.MayFail)>

      <NonVersionable>

      Public Shared Function Subtract(pointer As IntPtr, offset As Integer) As IntPtr
    parameters:
    - id: pointer
      type: System.IntPtr
      description: "\n<p>The pointer to subtract the offset from.</p>\n"
    - id: offset
      type: System.Int32
      description: "\n<p>The offset to subtract.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A new pointer that reflects the subtraction of <em>offset</em> from <em>pointer</em>.</p>\n"
  seealso:
  - type: System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
    commentId: M:System.IntPtr.op_Subtraction(System.IntPtr,System.Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: IntPtr.Subtract(IntPtr, Int32)
- uid: System.IntPtr.ToInt32
  commentId: M:System.IntPtr.ToInt32
  id: ToInt32
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: ToInt32()
  fullName: System.IntPtr.ToInt32()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt32
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 125
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to a 32-bit signed integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public int ToInt32()
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Function ToInt32 As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer equal to the value of this instance.</p>\n"
  exceptions:
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>On a 64-bit platform, the value of this instance is too large or too small to represent as a 32-bit signed integer. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.ToInt32()
- uid: System.IntPtr.ToInt64
  commentId: M:System.IntPtr.ToInt64
  id: ToInt64
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: ToInt64()
  fullName: System.IntPtr.ToInt64()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToInt64
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 137
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to a 64-bit signed integer.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public long ToInt64()
    content.vb: >-
      <SecuritySafeCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <NonVersionable>

      Public Function ToInt64 As Long
    return:
      type: System.Int64
      description: "\n<p>A 64-bit signed integer equal to the value of this instance.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.ToInt64()
- uid: System.IntPtr.ToPointer
  commentId: M:System.IntPtr.ToPointer
  id: ToPointer
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: ToPointer()
  fullName: System.IntPtr.ToPointer()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToPointer
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 289
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of this instance to a pointer to an unspecified type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [CLSCompliant(false)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [NonVersionable]

      public void *ToPointer()
    content.vb: "<SecuritySafeCritical>\n<CLSCompliant(False)>\n<ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>\n<NonVersionable>\nPublic Function ToPointer As "
    return:
      type: System.Void*
      description: "\n<p>A pointer to <xref href=\"System.Void\" data-throw-if-not-resolved=\"false\"></xref>; that is, a pointer to memory containing data of an unspecified type.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.ToPointer()
- uid: System.IntPtr.ToString
  commentId: M:System.IntPtr.ToString
  id: ToString
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.IntPtr.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 148
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of the current <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override string ToString()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of the value of this instance.</p>\n"
  overridden: System.ValueType.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: IntPtr.ToString()
- uid: System.IntPtr.ToString(System.String)
  commentId: M:System.IntPtr.ToString(System.String)
  id: ToString(System.String)
  parent: System.IntPtr
  langs:
  - csharp
  - vb
  name: ToString(String)
  fullName: System.IntPtr.ToString(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/IntPtr.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/IntPtr.cs
    startLine: 157
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the numeric value of the current <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent string representation.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public string ToString(string format)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function ToString(format As String) As String
    parameters:
    - id: format
      type: System.String
      description: "\n<p>A format specification that governs how the current <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object is converted. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string representation of the value of the current <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  seealso:
  - type: System.Globalization.CultureInfo.InvariantCulture
    commentId: P:System.Globalization.CultureInfo.InvariantCulture
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: IntPtr.ToString(String)
references:
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  fullName: System.IntPtr
  nameWithType: IntPtr
  commentId: T:System.IntPtr
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Int64
  parent: System
  isExternal: false
  name: Int64
  fullName: System.Int64
  nameWithType: Int64
  commentId: T:System.Int64
- uid: System.Void*
  name: Void*
  fullName: System.Void*
  spec.csharp:
  - uid: System.Void
    name: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Void
    name: Void
    fullName: System.Void
    isExternal: true
  - name: '*'
    fullName: '*'
  nameWithType: Void*
- uid: System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    fullName: System.ValueType.Equals
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: ValueType.Equals(Object)
  commentId: M:System.ValueType.Equals(System.Object)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  fullName: System.ValueType
  nameWithType: ValueType
  commentId: T:System.ValueType
- uid: System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ValueType.GetHashCode()
  commentId: M:System.ValueType.GetHashCode
- uid: System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    fullName: System.ValueType.ToString
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: ValueType.ToString()
  commentId: M:System.ValueType.ToString
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.OverflowException
  isExternal: false
  name: OverflowException
  fullName: System.OverflowException
  nameWithType: OverflowException
  commentId: T:System.OverflowException
