### YamlMime:ManagedReference
items:
- uid: System.Net.Dns
  commentId: T:System.Net.Dns
  id: Dns
  parent: System.Net
  children:
  - System.Net.Dns.GetHostAddressesAsync(System.String)
  - System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  - System.Net.Dns.GetHostEntryAsync(System.String)
  - System.Net.Dns.GetHostName
  langs:
  - csharp
  - vb
  name: Dns
  nameWithType: Dns
  fullName: System.Net.Dns
  type: Class
  source:
    remote:
      path: src/System.Net.NameResolution/src/System/Net/DNS.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dns
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 17
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: "\n<p>Provides simple domain name resolution functionality.</p>\n"
  syntax:
    content: public static class Dns
    content.vb: Public Module Dns
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Net.Dns.GetHostAddressesAsync(System.String)
  commentId: M:System.Net.Dns.GetHostAddressesAsync(System.String)
  id: GetHostAddressesAsync(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  - vb
  name: GetHostAddressesAsync(String)
  nameWithType: Dns.GetHostAddressesAsync(String)
  fullName: System.Net.Dns.GetHostAddressesAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.NameResolution/src/System/Net/DNS.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHostAddressesAsync
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 406
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: "\n<p>Returns the Internet Protocol (IP) addresses for the specified host as an asynchronous operation.</p>\n"
  syntax:
    content: public static Task<IPAddress[]> GetHostAddressesAsync(string hostNameOrAddress)
    content.vb: Public Shared Function GetHostAddressesAsync(hostNameOrAddress As String) As Task(Of IPAddress())
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: "\n<p>The host name or IP address to resolve.</p>\n"
    return:
      type: System.Threading.Tasks.Task{IPAddress[]}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property on the task object returns an array of type <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> that holds the IP addresses for the host that is specified by the <em>hostNameOrAddress</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>hostNameOrAddress</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of <em>hostNameOrAddress</em> is greater than 255 characters. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error is encountered when resolving <em>hostNameOrAddress</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>hostNameOrAddress</em> is an invalid IP address.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  commentId: M:System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  id: GetHostEntryAsync(System.Net.IPAddress)
  parent: System.Net.Dns
  langs:
  - csharp
  - vb
  name: GetHostEntryAsync(IPAddress)
  nameWithType: Dns.GetHostEntryAsync(IPAddress)
  fullName: System.Net.Dns.GetHostEntryAsync(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHostEntryAsync
    path: src/System.Net.NameResolution/ref/System.Net.NameResolution.cs
    startLine: 13
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: "\n<p>Resolves an IP address to an <xref href=\"System.Net.IPHostEntry\" data-throw-if-not-resolved=\"false\"></xref> instance as an asynchronous operation.</p>\n"
  syntax:
    content: public static Task<IPHostEntry> GetHostEntryAsync(IPAddress address)
    content.vb: Public Shared Function GetHostEntryAsync(address As IPAddress) As Task(Of IPHostEntry)
    parameters:
    - id: address
      type: System.Net.IPAddress
      description: "\n<p>An IP address.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\" data-throw-if-not-resolved=\"false\"></xref> instance that contains address information about the host specified in <em>address</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>address</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error is encountered when resolving <em>address</em>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>address</em> is an invalid IP address.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Dns.GetHostEntryAsync(System.String)
  commentId: M:System.Net.Dns.GetHostEntryAsync(System.String)
  id: GetHostEntryAsync(System.String)
  parent: System.Net.Dns
  langs:
  - csharp
  - vb
  name: GetHostEntryAsync(String)
  nameWithType: Dns.GetHostEntryAsync(String)
  fullName: System.Net.Dns.GetHostEntryAsync(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.NameResolution/src/System/Net/DNS.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHostEntryAsync
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 426
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: "\n<p>Resolves a host name or IP address to an <xref href=\"System.Net.IPHostEntry\" data-throw-if-not-resolved=\"false\"></xref> instance as an asynchronous operation.</p>\n"
  syntax:
    content: public static Task<IPHostEntry> GetHostEntryAsync(string hostNameOrAddress)
    content.vb: Public Shared Function GetHostEntryAsync(hostNameOrAddress As String) As Task(Of IPHostEntry)
    parameters:
    - id: hostNameOrAddress
      type: System.String
      description: "\n<p>The host name or IP address to resolve.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.IPHostEntry}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation. The <xref href=\"System.Threading.Tasks.Task`1.Result\" data-throw-if-not-resolved=\"false\"></xref> property on the task object returns an <xref href=\"System.Net.IPHostEntry\" data-throw-if-not-resolved=\"false\"></xref> instance that contains address information about the host specified in <em>hostNameOrAddress</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>hostNameOrAddress</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length of <em>hostNameOrAddress</em> parameter is greater than 255 characters. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error was encountered when resolving the <em>hostNameOrAddress</em> parameter. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>hostNameOrAddress</em> parameter is an invalid IP address. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Dns.GetHostName
  commentId: M:System.Net.Dns.GetHostName
  id: GetHostName
  parent: System.Net.Dns
  langs:
  - csharp
  - vb
  name: GetHostName()
  nameWithType: Dns.GetHostName()
  fullName: System.Net.Dns.GetHostName()
  type: Method
  source:
    remote:
      path: src/System.Net.NameResolution/src/System/Net/DNS.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHostName
    path: src/System.Net.NameResolution/src/System/Net/DNS.cs
    startLine: 169
  assemblies:
  - System.Net.NameResolution
  namespace: System.Net
  summary: "\n<p>Gets the host name of the local computer.</p>\n"
  syntax:
    content: public static string GetHostName()
    content.vb: Public Shared Function GetHostName As String
    return:
      type: System.String
      description: "\n<p>A string that contains the DNS host name of the local computer.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error is encountered when resolving the local host name. </p>\n"
  see:
  - linkId: System.Net.DnsPermission
    commentId: T:System.Net.DnsPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Task{System.Net.IPAddress[]}
  commentId: T:System.Threading.Tasks.Task{System.Net.IPAddress[]}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPAddress[]>
  nameWithType: Task<IPAddress[]>
  fullName: System.Threading.Tasks.Task<System.Net.IPAddress[]>
  nameWithType.vb: Task(Of IPAddress())
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.IPAddress())
  name.vb: Task(Of IPAddress())
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPAddress
    name: IPAddress
    nameWithType: IPAddress
    fullName: System.Net.IPAddress
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Net.IPAddress
  commentId: T:System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Threading.Tasks.Task{System.Net.IPHostEntry}
  commentId: T:System.Threading.Tasks.Task{System.Net.IPHostEntry}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IPHostEntry>
  nameWithType: Task<IPHostEntry>
  fullName: System.Threading.Tasks.Task<System.Net.IPHostEntry>
  nameWithType.vb: Task(Of IPHostEntry)
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.IPHostEntry)
  name.vb: Task(Of IPHostEntry)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.IPHostEntry
    name: IPHostEntry
    nameWithType: IPHostEntry
    fullName: System.Net.IPHostEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.IPHostEntry
    name: IPHostEntry
    nameWithType: IPHostEntry
    fullName: System.Net.IPHostEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  commentId: T:System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  nameWithType: SocketException
  fullName: System.Net.Sockets.SocketException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
