### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.Marshal
  commentId: T:System.Runtime.InteropServices.Marshal
  id: Marshal
  parent: System.Runtime.InteropServices
  children:
  - System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  - System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  - System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  - System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  - System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  - System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  - System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  - System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetExceptionCode
  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  - System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  - System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  - System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  - System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  - System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  - System.Runtime.InteropServices.Marshal.GetLastWin32Error
  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  - System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  - System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  - System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  - System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  - System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  - System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  - System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  - System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  - System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  - System.Runtime.InteropServices.Marshal.SizeOf``1
  - System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  - System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  - System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  - System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  - System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  - System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  - System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  - System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  - System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  - System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  - System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  - System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  - System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  - System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  - System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  - System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  - System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  langs:
  - csharp
  - vb
  name: Marshal
  nameWithType: Marshal
  fullName: System.Runtime.InteropServices.Marshal
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Marshal
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 48
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static class Marshal
    content.vb: >-
      <SecurityCritical>

      Public Module Marshal
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  commentId: F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  id: SystemDefaultCharSize
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: SystemDefaultCharSize
  nameWithType: Marshal.SystemDefaultCharSize
  fullName: System.Runtime.InteropServices.Marshal.SystemDefaultCharSize
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SystemDefaultCharSize
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 95
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.</p>\n"
  syntax:
    content: public static readonly int SystemDefaultCharSize
    content.vb: Public Shared ReadOnly SystemDefaultCharSize As Integer
    return:
      type: System.Int32
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)
  - linkId: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  commentId: F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  id: SystemMaxDBCSCharSize
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: SystemMaxDBCSCharSize
  nameWithType: Marshal.SystemMaxDBCSCharSize
  fullName: System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SystemMaxDBCSCharSize
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 100
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.</p>\n"
  syntax:
    content: public static readonly int SystemMaxDBCSCharSize
    content.vb: Public Shared ReadOnly SystemMaxDBCSCharSize As Integer
    return:
      type: System.Int32
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  - linkId: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  id: AddRef(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: AddRef(IntPtr)
  nameWithType: Marshal.AddRef(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Increments the reference count on the specified interface.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static int AddRef(IntPtr pUnk)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function AddRef(pUnk As IntPtr) As Integer
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: "\n<p>The interface reference count to increment.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new value of the reference count on the <em>pUnk</em> parameter.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
    commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  - linkId: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  - linkId: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  - linkId: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  id: AllocCoTaskMem(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: AllocCoTaskMem(Int32)
  nameWithType: Marshal.AllocCoTaskMem(Int32)
  fullName: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AllocCoTaskMem
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1863
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a block of memory of specified size from the COM task memory allocator.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr AllocCoTaskMem(int cb)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function AllocCoTaskMem(cb As Integer) As IntPtr
    parameters:
    - id: cb
      type: System.Int32
      description: "\n<p>The size of the block of memory to be allocated.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>An integer representing the address of the block of memory allocated. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to satisfy the request.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  id: AllocHGlobal(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: AllocHGlobal(Int32)
  nameWithType: Marshal.AllocHGlobal(Int32)
  fullName: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AllocHGlobal
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1234
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates memory from the unmanaged memory of the process by using the specified number of bytes.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static IntPtr AllocHGlobal(int cb)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function AllocHGlobal(cb As Integer) As IntPtr
    parameters:
    - id: cb
      type: System.Int32
      description: "\n<p>The required number of bytes in memory.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to satisfy the request.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  id: AllocHGlobal(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: AllocHGlobal(IntPtr)
  nameWithType: Marshal.AllocHGlobal(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AllocHGlobal
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1209
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static IntPtr AllocHGlobal(IntPtr cb)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function AllocHGlobal(cb As IntPtr) As IntPtr
    parameters:
    - id: cb
      type: System.IntPtr
      description: "\n<p>The required number of bytes in memory.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A pointer to the newly allocated memory. This memory must be released using the <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to satisfy the request.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  commentId: M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup
  id: AreComObjectsAvailableForCleanup
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: AreComObjectsAvailableForCleanup()
  nameWithType: Marshal.AreComObjectsAvailableForCleanup()
  fullName: System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup()
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static bool AreComObjectsAvailableForCleanup()
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function AreComObjectsAvailableForCleanup As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are any RCWs available for cleanup; otherwise, <strong>false</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Byte[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Byte[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Byte[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 375
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(byte[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Byte(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Byte[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Byte(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Byte(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Byte(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Char[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Char[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Char[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 350
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(char[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Char(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Char[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Char(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Char(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Char(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Double[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Double[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Double[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 370
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(double[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Double(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Double[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Double(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Double(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Double(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Int16[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int16[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Int16[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 355
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(short[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Short(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Int16[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Int16(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Int16(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Int16(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Int32[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int32[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Int32[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 345
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(int[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Integer(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Int32[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>startIndex</em> or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Int32(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Int32(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Int32(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Int64[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Int64[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Int64[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 360
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(long[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Long(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Int64[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Int64(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Int64(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Int64(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Byte[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Byte[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 421
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, byte[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Byte(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from.</p>\n"
    - id: destination
      type: System.Byte[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Byte(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Byte(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Char[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Char[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 396
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed character array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, char[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Char(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from.</p>\n"
    - id: destination
      type: System.Char[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Char(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Char(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Double[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Double[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Double[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 416
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, double[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Double(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from.</p>\n"
    - id: destination
      type: System.Double[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Double(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Double(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Double(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Int16[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int16[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int16[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 401
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, short[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Short(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from.</p>\n"
    - id: destination
      type: System.Int16[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Int16(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int16(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Int16(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Int32[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int32[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int32[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 391
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, int[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Integer(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from.</p>\n"
    - id: destination
      type: System.Int32[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Int32(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int32(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Int32(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Int64[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Int64[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int64[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 406
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, long[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Long(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from.</p>\n"
    - id: destination
      type: System.Int64[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Int64(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Int64(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Int64(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, IntPtr[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, IntPtr[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.IntPtr[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 426
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, IntPtr[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As IntPtr(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from. </p>\n"
    - id: destination
      type: System.IntPtr[]
      description: "\n<p>The array to copy to.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, IntPtr(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.IntPtr(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, IntPtr(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  id: Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr, Single[], Int32, Int32)
  nameWithType: Marshal.Copy(IntPtr, Single[], Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Single[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 411
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr source, float[] destination, int startIndex, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr, destination As Single(), startIndex As Integer, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy from. </p>\n"
    - id: destination
      type: System.Single[]
      description: "\n<p>The array to copy to. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the destination array where copying should start. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr, Single(), Int32, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr, System.Single(), System.Int32, System.Int32)
  name.vb: Copy(IntPtr, Single(), Int32, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(IntPtr[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(IntPtr[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 380
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(IntPtr[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As IntPtr(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.IntPtr[]
      description: "\n<p>The one-dimensional array to copy from.</p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start.</p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>destination</em>, <em>startIndex</em>, or <em>length</em> is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(IntPtr(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.IntPtr(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(IntPtr(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  id: Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Copy(Single[], Int32, IntPtr, Int32)
  nameWithType: Marshal.Copy(Single[], Int32, IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.Copy(System.Single[], System.Int32, System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Copy
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 365
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void Copy(float[] source, int startIndex, IntPtr destination, int length)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub Copy(source As Single(), startIndex As Integer, destination As IntPtr, length As Integer)
    parameters:
    - id: source
      type: System.Single[]
      description: "\n<p>The one-dimensional array to copy from. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based index in the source array where copying should start. </p>\n"
    - id: destination
      type: System.IntPtr
      description: "\n<p>The memory pointer to copy to. </p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of array elements to copy. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> and <em>length</em> are not valid. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>source</em>, <em>startIndex</em>, <em>destination</em>, or <em>length</em> is <strong>null</strong>. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.Copy(Single(), Int32, IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.Copy(System.Single(), System.Int32, System.IntPtr, System.Int32)
  name.vb: Copy(Single(), Int32, IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)
  id: CreateAggregatedObject(System.IntPtr,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: CreateAggregatedObject(IntPtr, Object)
  nameWithType: Marshal.CreateAggregatedObject(IntPtr, Object)
  fullName: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr, System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Aggregates a managed object with the specified COM object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static IntPtr CreateAggregatedObject(IntPtr pOuter, object o)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function CreateAggregatedObject(pOuter As IntPtr, o As Object) As IntPtr
    parameters:
    - id: pOuter
      type: System.IntPtr
      description: "\n<p>The outer <strong>IUnknown</strong> pointer.</p>\n"
    - id: o
      type: System.Object
      description: "\n<p>An object to aggregate.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The inner <strong>IUnknown</strong> pointer of the managed object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>o</em> is a Windows Runtime object.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CreateAggregatedObject(IntPtr, Object) may be unavailable in future releases. Instead, use CreateAggregatedObject<T>(IntPtr, T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296518
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)
  id: CreateAggregatedObject``1(System.IntPtr,``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: CreateAggregatedObject<T>(IntPtr, T)
  nameWithType: Marshal.CreateAggregatedObject<T>(IntPtr, T)
  fullName: System.Runtime.InteropServices.Marshal.CreateAggregatedObject<T>(System.IntPtr, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateAggregatedObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1838
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Aggregates a managed object of the specified type with the specified COM object. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr CreateAggregatedObject<T>(IntPtr pOuter, T o)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateAggregatedObject(Of T)(pOuter As IntPtr, o As T) As IntPtr
    parameters:
    - id: pOuter
      type: System.IntPtr
      description: "\n<p>The outer <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> pointer. </p>\n"
    - id: o
      type: '{T}'
      description: "\n<p>The managed object to aggregate. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the managed object to aggregate. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The inner <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> pointer of the managed object. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>o</em> is a Windows Runtime object. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.CreateAggregatedObject(Of T)(IntPtr, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.CreateAggregatedObject(Of T)(System.IntPtr, T)
  name.vb: CreateAggregatedObject(Of T)(IntPtr, T)
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)
  id: CreateWrapperOfType(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: CreateWrapperOfType(Object, Type)
  nameWithType: Marshal.CreateWrapperOfType(Object, Type)
  fullName: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateWrapperOfType
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2161
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Wraps the specified COM object in an object of the specified type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static object CreateWrapperOfType(object o, Type t)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateWrapperOfType(o As Object, t As Type) As Object
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object to be wrapped. </p>\n"
    - id: t
      type: System.Type
      description: "\n<p>The type of wrapper to create. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The newly wrapped object that is an instance of the desired type.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>t</em> must derive from <strong>__ComObject</strong>.</p>\n<p>-or-</p>\n<p>\n<em>t</em> is a Windows Runtime type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>o</em> cannot be converted to the destination type because it does not support all required interfaces. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.ComImportAttribute
    commentId: T:System.Runtime.InteropServices.ComImportAttribute
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CreateWrapperOfType(Object, Type) may be unavailable in future releases. Instead, use CreateWrapperOfType<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296519
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)
  id: CreateWrapperOfType``2(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: CreateWrapperOfType<T, TWrapper>(T)
  nameWithType: Marshal.CreateWrapperOfType<T, TWrapper>(T)
  fullName: System.Runtime.InteropServices.Marshal.CreateWrapperOfType<T, TWrapper>(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CreateWrapperOfType
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2208
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Wraps the specified COM object in an object of the specified type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static TWrapper CreateWrapperOfType<T, TWrapper>(T o)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function CreateWrapperOfType(Of T, TWrapper)(o As T) As TWrapper
    parameters:
    - id: o
      type: '{T}'
      description: "\n<p>The object to be wrapped. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of object to wrap. </p>\n"
    - id: TWrapper
      description: "\n<p>The type of object to return. </p>\n"
    return:
      type: '{TWrapper}'
      description: "\n<p>The newly wrapped object. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>T</em> must derive from <strong>__ComObject</strong>. </p>\n<p>-or-</p>\n<p>\n<em>T</em> is a Windows Runtime type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>o</em> cannot be converted to the <em>TWrapper</em> because it does not support all required interfaces. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.CreateWrapperOfType(Of T, TWrapper)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.CreateWrapperOfType(Of T, TWrapper)(T)
  name.vb: CreateWrapperOfType(Of T, TWrapper)(T)
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  id: DestroyStructure(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: DestroyStructure(IntPtr, Type)
  nameWithType: Marshal.DestroyStructure(IntPtr, Type)
  fullName: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr, System.Type)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees all substructures that the specified unmanaged memory block points to.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ComVisible(true)]

      public static void DestroyStructure(IntPtr ptr, Type structuretype)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ComVisible(True)>

      Public Shared Sub DestroyStructure(ptr As IntPtr, structuretype As Type)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory. </p>\n"
    - id: structuretype
      type: System.Type
      description: "\n<p>Type of a formatted class. This provides the layout information necessary to delete the buffer in the <em>ptr</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>structureType</em> has an automatic layout. Use sequential or explicit instead.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DestroyStructure(IntPtr, Type) may be unavailable in future releases. Instead, use DestroyStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296520
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  id: DestroyStructure``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: DestroyStructure<T>(IntPtr)
  nameWithType: Marshal.DestroyStructure<T>(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.DestroyStructure<T>(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DestroyStructure
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1068
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Frees all substructures of a specified type that the specified unmanaged memory block points to. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void DestroyStructure<T>(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub DestroyStructure(Of T)(ptr As IntPtr)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the formatted structure. This provides the layout information necessary to delete the buffer in the <em>ptr</em> parameter. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>T</em> has an automatic layout. Use sequential or explicit instead. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.DestroyStructure(Of T)(IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.DestroyStructure(Of T)(System.IntPtr)
  name.vb: DestroyStructure(Of T)(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  id: FinalReleaseComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: FinalReleaseComObject(Object)
  nameWithType: Marshal.FinalReleaseComObject(Object)
  fullName: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FinalReleaseComObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2059
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static int FinalReleaseComObject(object o)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function FinalReleaseComObject(o As Object) As Integer
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The RCW to be released.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new value of the reference count of the RCW associated with the <em>o</em><em></em>parameter, which is 0 (zero) if the release is successful.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>o</em> is not a valid COM object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>o</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  - linkId: System.NullReferenceException
    commentId: T:System.NullReferenceException
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  id: FreeBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: FreeBSTR(IntPtr)
  nameWithType: Marshal.FreeBSTR(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FreeBSTR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1996
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees a <strong>BSTR</strong> using the COM <a href=\"http://go.microsoft.com/fwlink/?LinkID=148633\">SysFreeString</a> function.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void FreeBSTR(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub FreeBSTR(ptr As IntPtr)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the BSTR to be freed. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  id: FreeCoTaskMem(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: FreeCoTaskMem(IntPtr)
  nameWithType: Marshal.FreeCoTaskMem(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FreeCoTaskMem
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1974
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees a block of memory allocated by the unmanaged COM task memory allocator.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void FreeCoTaskMem(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub FreeCoTaskMem(ptr As IntPtr)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the memory to be freed. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  - linkId: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  id: FreeHGlobal(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: FreeHGlobal(IntPtr)
  nameWithType: Marshal.FreeHGlobal(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FreeHGlobal
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1241
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees memory previously allocated from the unmanaged memory of the process.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static void FreeHGlobal(IntPtr hglobal)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Sub FreeHGlobal(hglobal As IntPtr)
    parameters:
    - id: hglobal
      type: System.IntPtr
      description: "\n<p>The handle returned by the original matching call to <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  id: GetComInterfaceForObject(System.Object,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetComInterfaceForObject(Object, Type)
  nameWithType: Marshal.GetComInterfaceForObject(Object, Type)
  fullName: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetComInterfaceForObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1767
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr GetComInterfaceForObject(object o, Type T)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetComInterfaceForObject(o As Object, T As Type) As IntPtr
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object that provides the interface. </p>\n"
    - id: T
      type: System.Type
      description: "\n<p>The type of interface that is requested. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The interface pointer that represents the specified interface for the object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>T</em> parameter is not an interface.</p>\n<p>-or-</p>\n<p>The type is not visible to COM. </p>\n<p>-or-</p>\n<p>The <em>T</em> parameter is a generic type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The <em>o</em> parameter does not support the requested interface. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>The <em>T</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObjectInContext(System.Object,System.Type)
  - linkId: System.Runtime.InteropServices.ComImportAttribute
    commentId: T:System.Runtime.InteropServices.ComImportAttribute
  - linkId: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - linkId: System.Runtime.InteropServices.UCOMIConnectionPointContainer
    commentId: T:System.Runtime.InteropServices.UCOMIConnectionPointContainer
  - linkId: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetComInterfaceForObject(Object, Type) may be unavailable in future releases. Instead, use GetComInterfaceForObject<T,T2>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296509
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  id: GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  nameWithType: Marshal.GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode)
  fullName: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object, System.Type, System.Runtime.InteropServices.CustomQueryInterfaceMode)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetComInterfaceForObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1784
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr GetComInterfaceForObject(object o, Type T, CustomQueryInterfaceMode mode)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetComInterfaceForObject(o As Object, T As Type, mode As CustomQueryInterfaceMode) As IntPtr
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object that provides the interface.</p>\n"
    - id: T
      type: System.Type
      description: "\n<p>The type of interface that is requested.</p>\n"
    - id: mode
      type: System.Runtime.InteropServices.CustomQueryInterfaceMode
      description: "\n<p>One of the enumeration values that indicates whether to apply an <strong>IUnknown::QueryInterface</strong> customization that is supplied by an <xref href=\"System.Runtime.InteropServices.ICustomQueryInterface\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The interface pointer that represents the interface for the object.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>T</em> parameter is not an interface.</p>\n<p>-or- </p>\n<p>The type is not visible to COM.</p>\n<p>-or-</p>\n<p>The <em>T</em> parameter is a generic type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The object <em>o</em> does not support the requested interface.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>The <em>T</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetComInterfaceForObject(Object, Type, CustomQueryInterfaceMode) and support for ICustomQueryInterface may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)
  id: GetComInterfaceForObject``2(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetComInterfaceForObject<T, TInterface>(T)
  nameWithType: Marshal.GetComInterfaceForObject<T, TInterface>(T)
  fullName: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject<T, TInterface>(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetComInterfaceForObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1773
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Returns a pointer to an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr GetComInterfaceForObject<T, TInterface>(T o)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetComInterfaceForObject(Of T, TInterface)(o As T) As IntPtr
    parameters:
    - id: o
      type: '{T}'
      description: "\n<p>The object that provides the interface. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of <em>o</em>. </p>\n"
    - id: TInterface
      description: "\n<p>The type of interface to return. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The interface pointer that represents the <em>TInterface</em> interface.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>TInterface</em> parameter is not an interface.</p>\n<p>-or- </p>\n<p>The type is not visible to COM. </p>\n<p>-or-</p>\n<p>The <em>T</em> parameter is an open generic type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The <em>o</em> parameter does not support the <em>TInterface</em> interface. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>o</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.GetComInterfaceForObject(Of T, TInterface)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(Of T, TInterface)(T)
  name.vb: GetComInterfaceForObject(Of T, TInterface)(T)
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  id: GetDelegateForFunctionPointer(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetDelegateForFunctionPointer(IntPtr, Type)
  nameWithType: Marshal.GetDelegateForFunctionPointer(IntPtr, Type)
  fullName: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDelegateForFunctionPointer
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2612
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts an unmanaged function pointer to a delegate.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static Delegate GetDelegateForFunctionPointer(IntPtr ptr, Type t)
    content.vb: "<SecurityCritical>\nPublic Shared Function GetDelegateForFunctionPointer(ptr As IntPtr, t As Type) As "
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The unmanaged function pointer to be converted.</p>\n"
    - id: t
      type: System.Type
      description: "\n<p>The type of the delegate to be returned.</p>\n"
    return:
      type: System.Delegate
      description: "\n<p>A delegate instance that can be cast to the appropriate delegate type.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>t</em> parameter is not a delegate or is generic.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>ptr</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetDelegateForFunctionPointer(IntPtr, Type) may be unavailable in future releases. Instead, use GetDelegateForFunctionPointer<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296521
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)
  id: GetDelegateForFunctionPointer``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  nameWithType: Marshal.GetDelegateForFunctionPointer<TDelegate>(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer<TDelegate>(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDelegateForFunctionPointer
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2636
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Converts an unmanaged function pointer to a delegate of a specified type. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static TDelegate GetDelegateForFunctionPointer<TDelegate>(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetDelegateForFunctionPointer(Of TDelegate)(ptr As IntPtr) As TDelegate
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The unmanaged function pointer to convert. </p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>The type of the delegate to return. </p>\n"
    return:
      type: '{TDelegate}'
      description: "\n<p>A instance of the specified delegate type.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>TDelegate</em> generic parameter is not a delegate, or it is an open generic type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>ptr</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.GetDelegateForFunctionPointer(Of TDelegate)(IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(Of TDelegate)(System.IntPtr)
  name.vb: GetDelegateForFunctionPointer(Of TDelegate)(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetExceptionCode
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionCode
  id: GetExceptionCode
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetExceptionCode()
  nameWithType: Marshal.GetExceptionCode()
  fullName: System.Runtime.InteropServices.Marshal.GetExceptionCode()
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Retrieves a code that identifies the type of the exception that occurred.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static int GetExceptionCode()
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetExceptionCode As Integer
    return:
      type: System.Int32
      description: "\n<p>The type of the exception.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetExceptionCode() may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  id: GetExceptionForHR(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetExceptionForHR(Int32)
  nameWithType: Marshal.GetExceptionForHR(Int32)
  fullName: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetExceptionForHR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1128
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static Exception GetExceptionForHR(int errorCode)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetExceptionForHR(errorCode As Integer) As Exception
    parameters:
    - id: errorCode
      type: System.Int32
      description: "\n<p>The HRESULT to be converted.</p>\n"
    return:
      type: System.Exception
      description: "\n<p>An object that represents the converted HRESULT.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)
  id: GetExceptionForHR(System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetExceptionForHR(Int32, IntPtr)
  nameWithType: Marshal.GetExceptionForHR(Int32, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetExceptionForHR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1136
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts the specified HRESULT error code to a corresponding <xref href=\"System.Exception\" data-throw-if-not-resolved=\"false\"></xref> object, with additional error information passed in an IErrorInfo interface for the exception object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static Exception GetExceptionForHR(int errorCode, IntPtr errorInfo)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetExceptionForHR(errorCode As Integer, errorInfo As IntPtr) As Exception
    parameters:
    - id: errorCode
      type: System.Int32
      description: "\n<p>The HRESULT to be converted.</p>\n"
    - id: errorInfo
      type: System.IntPtr
      description: "\n<p>A pointer to the <strong>IErrorInfo</strong> interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current <strong>IErrorInfo</strong> interface, or <code>IntPtr(-1)</code> to ignore the current <strong>IErrorInfo</strong> interface and construct the exception just from the error code.</p>\n"
    return:
      type: System.Exception
      description: "\n<p>An object that represents the converted HRESULT and information obtained from <em>errorInfo</em>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  id: GetFunctionPointerForDelegate(System.Delegate)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetFunctionPointerForDelegate(Delegate)
  nameWithType: Marshal.GetFunctionPointerForDelegate(Delegate)
  fullName: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFunctionPointerForDelegate
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2645
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts a delegate into a function pointer that is callable from unmanaged code.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr GetFunctionPointerForDelegate(Delegate d)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetFunctionPointerForDelegate(d As  Delegate) As IntPtr
    parameters:
    - id: d
      type: System.Delegate
      description: "\n<p>The delegate to be passed to unmanaged code.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>d</em> parameter is a generic type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>d</em> parameter is <strong>null</strong>.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetFunctionPointerForDelegate(Delegate) may be unavailable in future releases. Instead, use GetFunctionPointerForDelegate<T>(T). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296522
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)
  id: GetFunctionPointerForDelegate``1(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  nameWithType: Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  fullName: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate<TDelegate>(TDelegate)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetFunctionPointerForDelegate
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2655
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Converts a delegate of a specified type to a function pointer that is callable from unmanaged code. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr GetFunctionPointerForDelegate<TDelegate>(TDelegate d)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetFunctionPointerForDelegate(Of TDelegate)(d As TDelegate) As IntPtr
    parameters:
    - id: d
      type: '{TDelegate}'
      description: "\n<p>The delegate to be passed to unmanaged code. </p>\n"
    typeParameters:
    - id: TDelegate
      description: "\n<p>The type of delegate to convert. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>d</em> parameter is <strong>null</strong>. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.GetFunctionPointerForDelegate(Of TDelegate)(TDelegate)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(Of TDelegate)(TDelegate)
  name.vb: GetFunctionPointerForDelegate(Of TDelegate)(TDelegate)
- uid: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  id: GetHRForException(System.Exception)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetHRForException(Exception)
  nameWithType: Marshal.GetHRForException(Exception)
  fullName: System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts the specified exception to an HRESULT.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static int GetHRForException(Exception e)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetHRForException(e As Exception) As Integer
    parameters:
    - id: e
      type: System.Exception
      description: "\n<p>The exception to convert to an HRESULT.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The HRESULT mapped to the supplied exception.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.PreserveSigAttribute
    commentId: T:System.Runtime.InteropServices.PreserveSigAttribute
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  commentId: M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error
  id: GetHRForLastWin32Error
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetHRForLastWin32Error()
  nameWithType: Marshal.GetHRForLastWin32Error()
  fullName: System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHRForLastWin32Error
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 898
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the HRESULT corresponding to the last error incurred by Win32 code executed using <xref href=\"System.Runtime.InteropServices.Marshal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int GetHRForLastWin32Error()
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function GetHRForLastWin32Error As Integer
    return:
      type: System.Int32
      description: "\n<p>The HRESULT corresponding to the last Win32 error code.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.DllImportAttribute
    commentId: T:System.Runtime.InteropServices.DllImportAttribute
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  id: GetIUnknownForObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetIUnknownForObject(Object)
  nameWithType: Marshal.GetIUnknownForObject(Object)
  fullName: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetIUnknownForObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1717
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns an <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> interface from a managed object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr GetIUnknownForObject(object o)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetIUnknownForObject(o As Object) As IntPtr
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object whose <strong>IUnknown</strong> interface is requested.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The <strong>IUnknown</strong> pointer for the <em>o</em> parameter.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetLastWin32Error
  commentId: M:System.Runtime.InteropServices.Marshal.GetLastWin32Error
  id: GetLastWin32Error
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetLastWin32Error()
  nameWithType: Marshal.GetLastWin32Error()
  fullName: System.Runtime.InteropServices.Marshal.GetLastWin32Error()
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the error code returned by the last unmanaged function that was called using platform invoke that has the <xref href=\"System.Runtime.InteropServices.DllImportAttribute.SetLastError\" data-throw-if-not-resolved=\"false\"></xref> flag set.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int GetLastWin32Error()
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function GetLastWin32Error As Integer
    return:
      type: System.Int32
      description: "\n<p>The last error code set by a call to the Win32 <a href=\"http://go.microsoft.com/fwlink/?LinkId=148656\">SetLastError</a> function.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.DllImportAttribute
    commentId: T:System.Runtime.InteropServices.DllImportAttribute
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  id: GetNativeVariantForObject(System.Object,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetNativeVariantForObject(Object, IntPtr)
  nameWithType: Marshal.GetNativeVariantForObject(Object, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object, System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts an object to a COM VARIANT.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static void GetNativeVariantForObject(object obj, IntPtr pDstNativeVariant)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Sub GetNativeVariantForObject(obj As Object, pDstNativeVariant As IntPtr)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object for which to get a COM VARIANT.</p>\n"
    - id: pDstNativeVariant
      type: System.IntPtr
      description: "\n<p>A pointer to receive the VARIANT that corresponds to the <em>obj</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>obj</em> parameter is a generic type.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetNativeVariantForObject(Object, IntPtr) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)
  id: GetNativeVariantForObject``1(``0,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetNativeVariantForObject<T>(T, IntPtr)
  nameWithType: Marshal.GetNativeVariantForObject<T>(T, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject<T>(T, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetNativeVariantForObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2257
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Converts an object of a specified type to a COM VARIANT. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void GetNativeVariantForObject<T>(T obj, IntPtr pDstNativeVariant)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub GetNativeVariantForObject(Of T)(obj As T, pDstNativeVariant As IntPtr)
    parameters:
    - id: obj
      type: '{T}'
      description: "\n<p>The object for which to get a COM VARIANT. </p>\n"
    - id: pDstNativeVariant
      type: System.IntPtr
      description: "\n<p>A pointer to receive the VARIANT that corresponds to the <em>obj</em> parameter. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the object to convert. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetNativeVariantForObject<T>(T, IntPtr) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.GetNativeVariantForObject(Of T)(T, IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(Of T)(T, System.IntPtr)
  name.vb: GetNativeVariantForObject(Of T)(T, IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  id: GetObjectForIUnknown(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetObjectForIUnknown(IntPtr)
  nameWithType: Marshal.GetObjectForIUnknown(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns an instance of a type that represents a COM object by a pointer to its <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> interface.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static object GetObjectForIUnknown(IntPtr pUnk)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetObjectForIUnknown(pUnk As IntPtr) As Object
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: "\n<p>A pointer to the <strong>IUnknown</strong> interface. </p>\n"
    return:
      type: System.Object
      description: "\n<p>An object that represents the specified unmanaged COM object.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  id: GetObjectForNativeVariant(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetObjectForNativeVariant(IntPtr)
  nameWithType: Marshal.GetObjectForNativeVariant(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts a COM VARIANT to an object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static object GetObjectForNativeVariant(IntPtr pSrcNativeVariant)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetObjectForNativeVariant(pSrcNativeVariant As IntPtr) As Object
    parameters:
    - id: pSrcNativeVariant
      type: System.IntPtr
      description: "\n<p>A pointer to a COM VARIANT.</p>\n"
    return:
      type: System.Object
      description: "\n<p>An object that corresponds to the <em>pSrcNativeVariant</em> parameter.</p>\n"
  exceptions:
  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException
    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException
    description: "\n<p>\n<em>pSrcNativeVariant</em> is not a valid VARIANT type.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>pSrcNativeVariant</em> has an unsupported type.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetObjectForNativeVariant(IntPtr) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)
  id: GetObjectForNativeVariant``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetObjectForNativeVariant<T>(IntPtr)
  nameWithType: Marshal.GetObjectForNativeVariant<T>(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant<T>(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetObjectForNativeVariant
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2267
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Converts a COM VARIANT to an object of a specified type. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static T GetObjectForNativeVariant<T>(IntPtr pSrcNativeVariant)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetObjectForNativeVariant(Of T)(pSrcNativeVariant As IntPtr) As T
    parameters:
    - id: pSrcNativeVariant
      type: System.IntPtr
      description: "\n<p>A pointer to a COM VARIANT. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type to which to convert the COM VARIANT. </p>\n"
    return:
      type: '{T}'
      description: "\n<p>An object of the specified type that corresponds to the <em>pSrcNativeVariant</em> parameter. </p>\n"
  exceptions:
  - type: System.Runtime.InteropServices.InvalidOleVariantTypeException
    commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException
    description: "\n<p>\n<em>pSrcNativeVariant</em> is not a valid VARIANT type. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>pSrcNativeVariant</em> has an unsupported type. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetObjectForNativeVariant<T>(IntPtr) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.GetObjectForNativeVariant(Of T)(IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(Of T)(System.IntPtr)
  name.vb: GetObjectForNativeVariant(Of T)(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  id: GetObjectsForNativeVariants(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetObjectsForNativeVariants(IntPtr, Int32)
  nameWithType: Marshal.GetObjectsForNativeVariants(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Converts an array of COM <a href=\"http://go.microsoft.com/fwlink/?LinkId=148670\">VARIANTs</a> to an array of objects. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static object[] GetObjectsForNativeVariants(IntPtr aSrcNativeVariant, int cVars)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetObjectsForNativeVariants(aSrcNativeVariant As IntPtr, cVars As Integer) As Object()
    parameters:
    - id: aSrcNativeVariant
      type: System.IntPtr
      description: "\n<p>A pointer to the first element of an array of COM VARIANTs.</p>\n"
    - id: cVars
      type: System.Int32
      description: "\n<p>The count of COM VARIANTs in <em>aSrcNativeVariant</em>.</p>\n"
    return:
      type: System.Object[]
      description: "\n<p>An object array that corresponds to <em>aSrcNativeVariant</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>cVars</em> is a negative number.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetObjectsForNativeVariants(IntPtr, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  id: GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetObjectsForNativeVariants<T>(IntPtr, Int32)
  nameWithType: Marshal.GetObjectsForNativeVariants<T>(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants<T>(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetObjectsForNativeVariants
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2277
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Converts an array of COM VARIANTs to an array of a specified type. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static T[] GetObjectsForNativeVariants<T>(IntPtr aSrcNativeVariant, int cVars)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetObjectsForNativeVariants(Of T)(aSrcNativeVariant As IntPtr, cVars As Integer) As T()
    parameters:
    - id: aSrcNativeVariant
      type: System.IntPtr
      description: "\n<p>A pointer to the first element of an array of COM VARIANTs. </p>\n"
    - id: cVars
      type: System.Int32
      description: "\n<p>The count of COM VARIANTs in <em>aSrcNativeVariant</em>. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the array to return. </p>\n"
    return:
      type: '{T}[]'
      description: "\n<p>An array of <em>T</em> objects that corresponds to <em>aSrcNativeVariant</em>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>cVars</em> is a negative number. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: GetObjectsForNativeVariants<T>(IntPtr, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.GetObjectsForNativeVariants(Of T)(IntPtr, Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(Of T)(System.IntPtr, System.Int32)
  name.vb: GetObjectsForNativeVariants(Of T)(IntPtr, Int32)
- uid: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  id: GetStartComSlot(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetStartComSlot(Type)
  nameWithType: Marshal.GetStartComSlot(Type)
  fullName: System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static int GetStartComSlot(Type t)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetStartComSlot(t As Type) As Integer
    parameters:
    - id: t
      type: System.Type
      description: "\n<p>A type that represents an interface.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a>, and 7 if the interface is based on IDispatch.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>t</em> is not visible from COM.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)
  - linkId: System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
    commentId: M:System.Runtime.InteropServices.Marshal.GetMethodInfoForComSlot(System.Type,System.Int32,System.Runtime.InteropServices.ComMemberType@)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  id: GetTypeFromCLSID(System.Guid)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetTypeFromCLSID(Guid)
  nameWithType: Marshal.GetTypeFromCLSID(Guid)
  fullName: System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTypeFromCLSID
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1700
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the type associated with the specified class identifier (CLSID). </p>\n"
  syntax:
    content: public static Type GetTypeFromCLSID(Guid clsid)
    content.vb: Public Shared Function GetTypeFromCLSID(clsid As Guid) As Type
    parameters:
    - id: clsid
      type: System.Guid
      description: "\n<p>The CLSID of the type to return. </p>\n"
    return:
      type: System.Type
      description: "\n<p>\n<strong>System.__ComObject</strong> regardless of whether the CLSID is valid. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  commentId: M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  id: GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetTypeInfoName(ITypeInfo)
  nameWithType: Marshal.GetTypeInfoName(ITypeInfo)
  fullName: System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTypeInfoName
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1533
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Retrieves the name of the type represented by an ITypeInfo object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static string GetTypeInfoName(ITypeInfo typeInfo)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function GetTypeInfoName(typeInfo As ITypeInfo) As String
    parameters:
    - id: typeInfo
      type: System.Runtime.InteropServices.ComTypes.ITypeInfo
      description: "\n<p>An object that represents an <strong>ITypeInfo</strong> pointer.</p>\n"
    return:
      type: System.String
      description: "\n<p>The name of the type that the <em>typeInfo</em> parameter points to.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>typeInfo</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)
    commentId: M:System.Runtime.InteropServices.UCOMITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  id: GetUniqueObjectForIUnknown(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: GetUniqueObjectForIUnknown(IntPtr)
  nameWithType: Marshal.GetUniqueObjectForIUnknown(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Creates a unique Runtime Callable Wrapper (RCW) object for a given <a href=\"http://go.microsoft.com/fwlink/?LinkId=148003\">IUnknown</a> interface.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static object GetUniqueObjectForIUnknown(IntPtr unknown)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function GetUniqueObjectForIUnknown(unknown As IntPtr) As Object
    parameters:
    - id: unknown
      type: System.IntPtr
      description: "\n<p>A managed pointer to an <strong>IUnknown</strong> interface.</p>\n"
    return:
      type: System.Object
      description: "\n<p>A unique RCW for the specified <strong>IUnknown</strong> interface.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  id: IsComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: IsComObject(Object)
  nameWithType: Marshal.IsComObject(Object)
  fullName: System.Runtime.InteropServices.Marshal.IsComObject(System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Indicates whether a specified object represents a COM object.</p>\n"
  syntax:
    content: >-
      [MethodImpl(MethodImplOptions.InternalCall)]

      public static bool IsComObject(object o)
    content.vb: >-
      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function IsComObject(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The object to check.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>o</em> parameter is a COM type; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>o</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.ComImportAttribute
    commentId: T:System.Runtime.InteropServices.ComImportAttribute
  - linkId: System.Type.IsImport
    commentId: P:System.Type.IsImport
  - linkId: System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)
    commentId: M:System.Runtime.InteropServices.RegistrationServices.TypeRepresentsComType(System.Type)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)
  id: OffsetOf(System.Type,System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: OffsetOf(Type, String)
  nameWithType: Marshal.OffsetOf(Type, String)
  fullName: System.Runtime.InteropServices.Marshal.OffsetOf(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OffsetOf
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 301
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the field offset of the unmanaged form of the managed class.</p>\n"
  syntax:
    content: public static IntPtr OffsetOf(Type t, string fieldName)
    content.vb: Public Shared Function OffsetOf(t As Type, fieldName As String) As IntPtr
    parameters:
    - id: t
      type: System.Type
      description: "\n<p>A value type or formatted reference type that specifies the managed class. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref> to the class.</p>\n"
    - id: fieldName
      type: System.String
      description: "\n<p>The field within the <em>t</em> parameter.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The offset, in bytes, for the <em>fieldName</em> parameter within the specified class that is declared by platform invoke.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: OffsetOf(Type, string) may be unavailable in future releases. Instead, use OffsetOf<T>(string). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296511
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)
  id: OffsetOf``1(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: OffsetOf<T>(String)
  nameWithType: Marshal.OffsetOf<T>(String)
  fullName: System.Runtime.InteropServices.Marshal.OffsetOf<T>(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OffsetOf
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 316
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Returns the field offset of the unmanaged form of a specified managed class.</p>\n"
  syntax:
    content: public static IntPtr OffsetOf<T>(string fieldName)
    content.vb: Public Shared Function OffsetOf(Of T)(fieldName As String) As IntPtr
    parameters:
    - id: fieldName
      type: System.String
      description: "\n<p>The name of the field in the <em>T</em> type. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>A managed value type or formatted reference type. You must apply the <xref href=\"System.Runtime.InteropServices.StructLayoutAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute to the class. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The offset, in bytes, for the <em>fieldName</em> parameter within the specified class that is declared by platform invoke. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
    commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  nameWithType.vb: Marshal.OffsetOf(Of T)(String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.OffsetOf(Of T)(System.String)
  name.vb: OffsetOf(Of T)(String)
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  id: PtrToStringAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringAnsi(IntPtr)
  nameWithType: Marshal.PtrToStringAnsi(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringAnsi
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 119
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies all characters up to the first null character from an unmanaged ANSI string to a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, and widens each ANSI character to Unicode.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringAnsi(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringAnsi(ptr As IntPtr) As String
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the first character of the unmanaged string.</p>\n"
    return:
      type: System.String
      description: "\n<p>A managed string that holds a copy of the unmanaged ANSI string. If <em>ptr</em> is <strong>null</strong>, the method returns a null string.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  - linkId: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)
  id: PtrToStringAnsi(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringAnsi(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringAnsi(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringAnsi
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 139
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>, copies a specified number of characters from an unmanaged ANSI string into it, and widens each ANSI character to Unicode.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringAnsi(IntPtr ptr, int len)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringAnsi(ptr As IntPtr, len As Integer) As String
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the first character of the unmanaged string.</p>\n"
    - id: len
      type: System.Int32
      description: "\n<p>The byte count of the input string to copy.</p>\n"
    return:
      type: System.String
      description: "\n<p>A managed string that holds a copy of the native ANSI string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>len</em> is less than zero.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  - linkId: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  id: PtrToStringBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringBSTR(IntPtr)
  nameWithType: Marshal.PtrToStringBSTR(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringBSTR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2022
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and copies a <a href=\"https://msdn.microsoft.com/library/ms221069(v=vs.85).aspx\">binary string (BSTR)</a> stored in unmanaged memory into it.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringBSTR(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringBSTR(ptr As IntPtr) As String
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the first character of the unmanaged string.</p>\n"
    return:
      type: System.String
      description: "\n<p>A managed string that holds a copy of the unmanaged string. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>ptr</em> equals <xref href=\"System.IntPtr.Zero\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  id: PtrToStringUni(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringUni(IntPtr)
  nameWithType: Marshal.PtrToStringUni(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringUni
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 168
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and copies all characters up to the first null character from an unmanaged Unicode string into it.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringUni(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringUni(ptr As IntPtr) As String
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the first character of the unmanaged string.</p>\n"
    return:
      type: System.String
      description: "\n<p>A managed string that holds a copy of the unmanaged string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  - linkId: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  id: PtrToStringUni(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringUni(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringUni(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringUni
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 150
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> and copies a specified number of characters from an unmanaged Unicode string into it.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringUni(IntPtr ptr, int len)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringUni(ptr As IntPtr, len As Integer) As String
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address of the first character of the unmanaged string.</p>\n"
    - id: len
      type: System.Int32
      description: "\n<p>The number of Unicode characters to copy.</p>\n"
    return:
      type: System.String
      description: "\n<p>A managed string that holds a copy of the unmanaged string if the value of the <em>ptr</em> parameter is not <strong>null</strong>; otherwise, this method returns <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  - linkId: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
    commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  id: PtrToStringUTF8(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringUTF8(IntPtr)
  nameWithType: Marshal.PtrToStringUTF8(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringUTF8
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 189
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringUTF8(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringUTF8(ptr As IntPtr) As String
    parameters:
    - id: ptr
      type: System.IntPtr
    return:
      type: System.String
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)
  id: PtrToStringUTF8(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStringUTF8(IntPtr, Int32)
  nameWithType: Marshal.PtrToStringUTF8(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStringUTF8
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 196
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: >-
      [SecurityCritical]

      public static string PtrToStringUTF8(IntPtr ptr, int byteLen)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStringUTF8(ptr As IntPtr, byteLen As Integer) As String
    parameters:
    - id: ptr
      type: System.IntPtr
    - id: byteLen
      type: System.Int32
    return:
      type: System.String
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)
  id: PtrToStructure(System.IntPtr,System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStructure(IntPtr, Object)
  nameWithType: Marshal.PtrToStructure(IntPtr, Object)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStructure
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1004
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Marshals data from an unmanaged block of memory to a managed object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ComVisible(true)]

      public static void PtrToStructure(IntPtr ptr, object structure)
    content.vb: >-
      <SecurityCritical>

      <ComVisible(True)>

      Public Shared Sub PtrToStructure(ptr As IntPtr, structure As Object)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory.</p>\n"
    - id: structure
      type: System.Object
      description: "\n<p>The object to which the data is to be copied. This must be an instance of a formatted class.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Structure layout is not sequential or explicit.</p>\n<p>-or- </p>\n<p>Structure is a boxed value type.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: PtrToStructure(IntPtr, Object) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296512
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)
  id: PtrToStructure(System.IntPtr,System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStructure(IntPtr, Type)
  nameWithType: Marshal.PtrToStructure(IntPtr, Type)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStructure
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1021
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ComVisible(true)]

      [MethodImpl(MethodImplOptions.NoInlining)]

      public static object PtrToStructure(IntPtr ptr, Type structureType)
    content.vb: >-
      <SecurityCritical>

      <ComVisible(True)>

      <MethodImpl(MethodImplOptions.NoInlining)>

      Public Shared Function PtrToStructure(ptr As IntPtr, structureType As Type) As Object
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory.</p>\n"
    - id: structureType
      type: System.Type
      description: "\n<p>The type of object to be created. This object must represent a formatted class or a structure.</p>\n"
    return:
      type: System.Object
      description: "\n<p>A managed object containing the data pointed to by the <em>ptr</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>structureType</em> parameter layout is not sequential or explicit.</p>\n<p>-or-</p>\n<p>The <em>structureType</em> parameter is a generic type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>structureType</em> is <strong>null</strong>.</p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>The class specified by <em>structureType</em> does not have an accessible default constructor. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)
    commentId: M:System.Runtime.InteropServices.UCOMITypeInfo.GetTypeAttr(System.IntPtr@)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: PtrToStructure(IntPtr, Type) may be unavailable in future releases. Instead, use PtrToStructure<T>(IntPtr). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296513
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)
  id: PtrToStructure``1(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStructure<T>(IntPtr)
  nameWithType: Marshal.PtrToStructure<T>(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure<T>(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStructure
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1046
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static T PtrToStructure<T>(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function PtrToStructure(Of T)(ptr As IntPtr) As T
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the object to which the data is to be copied. This must be a formatted class or a structure. </p>\n"
    return:
      type: '{T}'
      description: "\n<p>A managed object that contains the data that the <em>ptr</em> parameter points to. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The layout of <em>T</em> is not sequential or explicit.</p>\n"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "\n<p>The class specified by <em>T</em> does not have an accessible default constructor. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.PtrToStructure(Of T)(IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.PtrToStructure(Of T)(System.IntPtr)
  name.vb: PtrToStructure(Of T)(IntPtr)
- uid: System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  commentId: M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)
  id: PtrToStructure``1(System.IntPtr,``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: PtrToStructure<T>(IntPtr, T)
  nameWithType: Marshal.PtrToStructure<T>(IntPtr, T)
  fullName: System.Runtime.InteropServices.Marshal.PtrToStructure<T>(System.IntPtr, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PtrToStructure
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1011
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Marshals data from an unmanaged block of memory to a managed object of the specified type. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void PtrToStructure<T>(IntPtr ptr, T structure)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub PtrToStructure(Of T)(ptr As IntPtr, structure As T)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory. </p>\n"
    - id: structure
      type: '{T}'
      description: "\n<p>The object to which the data is to be copied. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of <em>structure</em>. This must be a formatted class. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Structure layout is not sequential or explicit. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.PtrToStructure(Of T)(IntPtr, T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.PtrToStructure(Of T)(System.IntPtr, T)
  name.vb: PtrToStructure(Of T)(IntPtr, T)
- uid: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  id: QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: QueryInterface(IntPtr, ref Guid, out IntPtr)
  nameWithType: Marshal.QueryInterface(IntPtr, ref Guid, out IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr, ref System.Guid, out System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Requests a pointer to a specified interface from a COM object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static int QueryInterface(IntPtr pUnk, ref Guid iid, out IntPtr ppv)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function QueryInterface(pUnk As IntPtr, ByRef iid As Guid, ByRef ppv As IntPtr) As Integer
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: "\n<p>The interface to be queried.</p>\n"
    - id: iid
      type: System.Guid
      description: "\n<p>The interface identifier (IID) of the requested interface.</p>\n"
    - id: ppv
      type: System.IntPtr
      description: "\n<p>When this method returns, contains a reference to the returned interface.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>An HRESULT that indicates the success or failure of the call.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  - linkId: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  - linkId: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  - linkId: System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.QueryInterface(IntPtr, ByRef Guid, ByRef IntPtr)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr, ByRef System.Guid, ByRef System.IntPtr)
  name.vb: QueryInterface(IntPtr, ByRef Guid, ByRef IntPtr)
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  id: ReadByte(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadByte(IntPtr)
  nameWithType: Marshal.ReadByte(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadByte
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 464
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a single byte from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static byte ReadByte(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadByte(ptr As IntPtr) As Byte
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory from which to read.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The byte read from unmanaged memory.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)
  id: ReadByte(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadByte(IntPtr, Int32)
  nameWithType: Marshal.ReadByte(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadByte
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 449
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static byte ReadByte(IntPtr ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadByte(ptr As IntPtr, ofs As Integer) As Byte
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory from which to read.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The byte read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  id: ReadByte(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadByte(Object, Int32)
  nameWithType: Marshal.ReadByte(Object, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadByte(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadByte
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 437
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a single byte at a given offset (or index) from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static byte ReadByte([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadByte(ptr As Object, ofs As Integer) As Byte
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the source object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The byte read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReadByte(Object, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  id: ReadInt16(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt16(IntPtr)
  nameWithType: Marshal.ReadInt16(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 510
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 16-bit signed integer from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static short ReadInt16(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadInt16(ptr As IntPtr) As Short
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory from which to read.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The 16-bit signed integer read from unmanaged memory.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)
  id: ReadInt16(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt16(IntPtr, Int32)
  nameWithType: Marshal.ReadInt16(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 482
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static short ReadInt16(IntPtr ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadInt16(ptr As IntPtr, ofs As Integer) As Short
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory from which to read.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)
  id: ReadInt16(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt16(Object, Int32)
  nameWithType: Marshal.ReadInt16(Object, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt16(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 470
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 16-bit signed integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static short ReadInt16([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadInt16(ptr As Object, ofs As Integer) As Short
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the source object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The 16-bit signed integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReadInt16(Object, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  id: ReadInt32(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt32(IntPtr)
  nameWithType: Marshal.ReadInt32(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt32
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 559
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 32-bit signed integer from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int ReadInt32(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ReadInt32(ptr As IntPtr) As Integer
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory from which to read.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 32-bit signed integer read from unmanaged memory.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)
  id: ReadInt32(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt32(IntPtr, Int32)
  nameWithType: Marshal.ReadInt32(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt32
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 528
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int ReadInt32(IntPtr ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ReadInt32(ptr As IntPtr, ofs As Integer) As Integer
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory from which to read.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 32-bit signed integer read from unmanaged memory.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)
  id: ReadInt32(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt32(Object, Int32)
  nameWithType: Marshal.ReadInt32(Object, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt32(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt32
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 516
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 32-bit signed integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static int ReadInt32([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadInt32(ptr As Object, ofs As Integer) As Integer
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the source object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 32-bit signed integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReadInt32(Object, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  id: ReadInt64(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt64(IntPtr)
  nameWithType: Marshal.ReadInt64(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt64
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 645
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 64-bit signed integer from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static long ReadInt64(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ReadInt64(ptr As IntPtr) As Long
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory from which to read.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The 64-bit signed integer read from unmanaged memory.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)
  id: ReadInt64(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt64(IntPtr, Int32)
  nameWithType: Marshal.ReadInt64(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt64
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 611
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static long ReadInt64(IntPtr ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadInt64(ptr As IntPtr, ofs As Integer) As Long
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory from which to read.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)
  id: ReadInt64(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadInt64(Object, Int32)
  nameWithType: Marshal.ReadInt64(Object, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadInt64(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadInt64
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 599
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a 64-bit signed integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static long ReadInt64([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReadInt64(ptr As Object, ofs As Integer) As Long
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the source object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The 64-bit signed integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReadInt64(Object, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  id: ReadIntPtr(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadIntPtr(IntPtr)
  nameWithType: Marshal.ReadIntPtr(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 588
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a processor native-sized integer from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static IntPtr ReadIntPtr(IntPtr ptr)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ReadIntPtr(ptr As IntPtr) As IntPtr
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory from which to read.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)
  id: ReadIntPtr(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadIntPtr(IntPtr, Int32)
  nameWithType: Marshal.ReadIntPtr(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 577
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a processor native sized integer at a given offset from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static IntPtr ReadIntPtr(IntPtr ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ReadIntPtr(ptr As IntPtr, ofs As Integer) As IntPtr
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory from which to read.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)
  id: ReadIntPtr(System.Object,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReadIntPtr(Object, Int32)
  nameWithType: Marshal.ReadIntPtr(Object, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 566
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Reads a processor native sized integer from unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static IntPtr ReadIntPtr([MarshalAs(UnmanagedType.AsAny), In] object ptr, int ofs)
    content.vb: >-
      <SecurityCritical>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ReadIntPtr(ptr As Object, ofs As Integer) As IntPtr
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the source object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before reading.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The integer read from unmanaged memory at the given offset.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: ReadIntPtr(Object, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  id: ReAllocCoTaskMem(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReAllocCoTaskMem(IntPtr, Int32)
  nameWithType: Marshal.ReAllocCoTaskMem(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReAllocCoTaskMem
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1982
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr ReAllocCoTaskMem(IntPtr pv, int cb)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReAllocCoTaskMem(pv As IntPtr, cb As Integer) As IntPtr
    parameters:
    - id: pv
      type: System.IntPtr
      description: "\n<p>A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cb
      type: System.Int32
      description: "\n<p>The new size of the allocated block.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>An integer representing the address of the reallocated block of memory. This memory must be released with <xref href=\"System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to satisfy the request.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)
  id: ReAllocHGlobal(System.IntPtr,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReAllocHGlobal(IntPtr, IntPtr)
  nameWithType: Marshal.ReAllocHGlobal(IntPtr, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReAllocHGlobal
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1252
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Resizes a block of memory previously allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr ReAllocHGlobal(IntPtr pv, IntPtr cb)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReAllocHGlobal(pv As IntPtr, cb As IntPtr) As IntPtr
    parameters:
    - id: pv
      type: System.IntPtr
      description: "\n<p>A pointer to memory allocated with <xref href=\"System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: cb
      type: System.IntPtr
      description: "\n<p>The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref>. If you pass a pointer, it is treated as a size.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>A pointer to the reallocated memory. This memory must be released using <xref href=\"System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory to satisfy the request.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  id: Release(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: Release(IntPtr)
  nameWithType: Marshal.Release(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.Release(System.IntPtr)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Decrements the reference count on the specified interface.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static int Release(IntPtr pUnk)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Release(pUnk As IntPtr) As Integer
    parameters:
    - id: pUnk
      type: System.IntPtr
      description: "\n<p>The interface to release.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new value of the reference count on the interface specified by the <em>pUnk</em> parameter.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
    commentId: M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)
  - linkId: System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)
  - linkId: System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)
  - linkId: System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  id: ReleaseComObject(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ReleaseComObject(Object)
  nameWithType: Marshal.ReleaseComObject(Object)
  fullName: System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReleaseComObject
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2033
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Decrements the reference count of the specified Runtime Callable Wrapper (RCW) associated with the specified COM object.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static int ReleaseComObject(object o)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function ReleaseComObject(o As Object) As Integer
    parameters:
    - id: o
      type: System.Object
      description: "\n<p>The COM object to release.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The new value of the reference count of the RCW associated with <em>o</em>. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>o</em> is not a valid COM object.</p>\n"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>\n<em>o</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
    commentId: M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)
  - linkId: System.NullReferenceException
    commentId: T:System.NullReferenceException
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  id: SizeOf(System.Object)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: SizeOf(Object)
  nameWithType: Marshal.SizeOf(Object)
  fullName: System.Runtime.InteropServices.Marshal.SizeOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SizeOf
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 225
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the unmanaged size of an object in bytes.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public static int SizeOf(object structure)
    content.vb: >-
      <ComVisible(True)>

      Public Shared Function SizeOf(structure As Object) As Integer
    parameters:
    - id: structure
      type: System.Object
      description: "\n<p>The object whose size is to be returned.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The size of the specified object in unmanaged code.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>structure</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.CharSet
    commentId: T:System.Runtime.InteropServices.CharSet
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SizeOf(Object) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296514
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  id: SizeOf(System.Type)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: SizeOf(Type)
  nameWithType: Marshal.SizeOf(Type)
  fullName: System.Runtime.InteropServices.Marshal.SizeOf(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SizeOf
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 241
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Returns the size of an unmanaged type in bytes.</p>\n"
  syntax:
    content: public static int SizeOf(Type t)
    content.vb: Public Shared Function SizeOf(t As Type) As Integer
    parameters:
    - id: t
      type: System.Type
      description: "\n<p>The type whose size is to be returned.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The size of the specified type in unmanaged code.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>t</em> parameter is a generic type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>t</em> parameter is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.CharSet
    commentId: T:System.Runtime.InteropServices.CharSet
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: SizeOf(Type) may be unavailable in future releases. Instead, use SizeOf<T>(). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296515
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1
  id: SizeOf``1
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: SizeOf<T>()
  nameWithType: Marshal.SizeOf<T>()
  fullName: System.Runtime.InteropServices.Marshal.SizeOf<T>()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SizeOf
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 255
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Returns the size of an unmanaged type in bytes. </p>\n"
  syntax:
    content: public static int SizeOf<T>()
    content.vb: Public Shared Function SizeOf(Of T) As Integer
    typeParameters:
    - id: T
      description: "\n<p>The type whose size is to be returned. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The size, in bytes, of the type that is specified by the <em>T</em> generic type parameter. </p>\n"
  nameWithType.vb: Marshal.SizeOf(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.SizeOf(Of T)()
  name.vb: SizeOf(Of T)()
- uid: System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  commentId: M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)
  id: SizeOf``1(``0)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: SizeOf<T>(T)
  nameWithType: Marshal.SizeOf<T>(T)
  fullName: System.Runtime.InteropServices.Marshal.SizeOf<T>(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SizeOf
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 236
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Returns the unmanaged size of an object of a specified type in bytes. </p>\n"
  syntax:
    content: public static int SizeOf<T>(T structure)
    content.vb: Public Shared Function SizeOf(Of T)(structure As T) As Integer
    parameters:
    - id: structure
      type: '{T}'
      description: "\n<p>The object whose size is to be returned. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the <em>structure</em> parameter. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The size, in bytes, of the specified object in unmanaged code. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>structure</em> parameter is <strong>null</strong>.</p>\n"
  nameWithType.vb: Marshal.SizeOf(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.SizeOf(Of T)(T)
  name.vb: SizeOf(Of T)(T)
- uid: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  id: StringToBSTR(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StringToBSTR(String)
  nameWithType: Marshal.StringToBSTR(String)
  fullName: System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringToBSTR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2005
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Allocates a <a href=\"https://msdn.microsoft.com/library/ms221069.aspx\">BSTR</a> and copies the contents of a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into it.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr StringToBSTR(string s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function StringToBSTR(s As String) As IntPtr
    parameters:
    - id: s
      type: System.String
      description: "\n<p>The managed string to be copied.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>An unmanaged pointer to the <strong>BSTR</strong>, or 0 if <em>s</em> is null.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The length for <em>s</em> is out of range.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  id: StringToCoTaskMemAnsi(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StringToCoTaskMemAnsi(String)
  nameWithType: Marshal.StringToCoTaskMemAnsi(String)
  fullName: System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringToCoTaskMemAnsi
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1945
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies the contents of a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to a block of memory allocated from the unmanaged COM task allocator.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr StringToCoTaskMemAnsi(string s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function StringToCoTaskMemAnsi(s As String) As IntPtr
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A managed string to be copied.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>An integer representing a pointer to the block of memory allocated for the string, or 0 if <em>s</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  id: StringToCoTaskMemUni(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StringToCoTaskMemUni(String)
  nameWithType: Marshal.StringToCoTaskMemUni(String)
  fullName: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringToCoTaskMemUni
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1874
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies the contents of a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> to a block of memory allocated from the unmanaged COM task allocator.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr StringToCoTaskMemUni(string s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function StringToCoTaskMemUni(s As String) As IntPtr
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A managed string to be copied.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>An integer representing a pointer to the block of memory allocated for the string, or 0 if s is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  id: StringToCoTaskMemUTF8(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StringToCoTaskMemUTF8(String)
  nameWithType: Marshal.StringToCoTaskMemUTF8(String)
  fullName: System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringToCoTaskMemUTF8
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1906
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr StringToCoTaskMemUTF8(string s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function StringToCoTaskMemUTF8(s As String) As IntPtr
    parameters:
    - id: s
      type: System.String
    return:
      type: System.IntPtr
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  id: StringToHGlobalAnsi(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StringToHGlobalAnsi(String)
  nameWithType: Marshal.StringToHGlobalAnsi(String)
  fullName: System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringToHGlobalAnsi
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1266
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies the contents of a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into unmanaged memory, converting into ANSI format as it copies.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr StringToHGlobalAnsi(string s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function StringToHGlobalAnsi(s As String) As IntPtr
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A managed string to be copied.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The address, in unmanaged memory, to where <em>s</em> was copied, or 0 if <em>s</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is insufficient memory available.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)
  - linkId: System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  commentId: M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  id: StringToHGlobalUni(System.String)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StringToHGlobalUni(String)
  nameWithType: Marshal.StringToHGlobalUni(String)
  fullName: System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StringToHGlobalUni
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1296
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Copies the contents of a managed <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> into unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr StringToHGlobalUni(string s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function StringToHGlobalUni(s As String) As IntPtr
    parameters:
    - id: s
      type: System.String
      description: "\n<p>A managed string to be copied.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The address, in unmanaged memory, to where the <em>s</em> was copied, or 0 if <em>s</em> is <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>The method could not allocate enough native heap memory.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>s</em> parameter exceeds the maximum length allowed by the operating system.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  id: StructureToPtr(System.Object,System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StructureToPtr(Object, IntPtr, Boolean)
  nameWithType: Marshal.StructureToPtr(Object, IntPtr, Boolean)
  fullName: System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object, System.IntPtr, System.Boolean)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Marshals data from a managed object to an unmanaged block of memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      [ComVisible(true)]

      public static void StructureToPtr(object structure, IntPtr ptr, bool fDeleteOld)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      <ComVisible(True)>

      Public Shared Sub StructureToPtr(structure As Object, ptr As IntPtr, fDeleteOld As Boolean)
    parameters:
    - id: structure
      type: System.Object
      description: "\n<p>A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.</p>\n"
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory, which must be allocated before this method is called.</p>\n"
    - id: fDeleteOld
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)\" data-throw-if-not-resolved=\"false\"></xref> method on the <em>ptr</em> parameter before this method copies the data. The block must contain valid data. Note that passing <strong>false</strong> when the memory block already contains data can lead to a memory leak.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>structure</em> is a reference type that is not a formatted class.</p>\n<p>-or-</p>\n<p>\n<em>structure</em> is a generic type. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
    commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)
  - linkId: System.Runtime.InteropServices.GCHandle
    commentId: T:System.Runtime.InteropServices.GCHandle
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: StructureToPtr(Object, IntPtr, Boolean) may be unavailable in future releases. Instead, use StructureToPtr<T>(T, IntPtr, Boolean). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296516
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  commentId: M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  id: StructureToPtr``1(``0,System.IntPtr,System.Boolean)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: StructureToPtr<T>(T, IntPtr, Boolean)
  nameWithType: Marshal.StructureToPtr<T>(T, IntPtr, Boolean)
  fullName: System.Runtime.InteropServices.Marshal.StructureToPtr<T>(T, System.IntPtr, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: StructureToPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 995
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Marshals data from a managed object of a specified type to an unmanaged block of memory. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void StructureToPtr<T>(T structure, IntPtr ptr, bool fDeleteOld)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub StructureToPtr(Of T)(structure As T, ptr As IntPtr, fDeleteOld As Boolean)
    parameters:
    - id: structure
      type: '{T}'
      description: "\n<p>A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class. </p>\n"
    - id: ptr
      type: System.IntPtr
      description: "\n<p>A pointer to an unmanaged block of memory, which must be allocated before this method is called. </p>\n"
    - id: fDeleteOld
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to call the <xref href=\"System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)\" data-throw-if-not-resolved=\"false\"></xref> method on the <em>ptr</em> parameter before this method copies the data. The block must contain valid data. Note that passing <strong>false</strong> when the memory block already contains data can lead to a memory leak.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the managed object. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>structure</em> is a reference type that is not a formatted class. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
    commentId: M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)
  - linkId: System.Runtime.InteropServices.GCHandle
    commentId: T:System.Runtime.InteropServices.GCHandle
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.StructureToPtr(Of T)(T, IntPtr, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.StructureToPtr(Of T)(T, System.IntPtr, System.Boolean)
  name.vb: StructureToPtr(Of T)(T, IntPtr, Boolean)
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  id: ThrowExceptionForHR(System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ThrowExceptionForHR(Int32)
  nameWithType: Marshal.ThrowExceptionForHR(Int32)
  fullName: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThrowExceptionForHR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1108
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Throws an exception with a specific failure HRESULT value.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ThrowExceptionForHR(int errorCode)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ThrowExceptionForHR(errorCode As Integer)
    parameters:
    - id: errorCode
      type: System.Int32
      description: "\n<p>The HRESULT corresponding to the desired exception.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)
  id: ThrowExceptionForHR(System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ThrowExceptionForHR(Int32, IntPtr)
  nameWithType: Marshal.ThrowExceptionForHR(Int32, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThrowExceptionForHR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 1114
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Throws an exception with a specific failure HRESULT, based on the specified <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\">IErrorInfo</a> interface.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ThrowExceptionForHR(int errorCode, IntPtr errorInfo)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ThrowExceptionForHR(errorCode As Integer, errorInfo As IntPtr)
    parameters:
    - id: errorCode
      type: System.Int32
      description: "\n<p>The HRESULT corresponding to the desired exception.</p>\n"
    - id: errorInfo
      type: System.IntPtr
      description: "\n<p>A pointer to the <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\">IErrorInfo</a> interface that provides more information about the error. You can specify <code>IntPtr(0)</code> to use the current <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\">IErrorInfo</a> interface, or <code>IntPtr(-1)</code> to ignore the current <a href=\"https://msdn.microsoft.com/library/ms221233(v=vs.85).aspx\">IErrorInfo</a> interface and construct the exception just from the error code.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  id: UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: UnsafeAddrOfPinnedArrayElement(Array, Int32)
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement(Array, Int32)
  fullName: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array, System.Int32)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Gets the address of the element at the specified index inside the specified array.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static IntPtr UnsafeAddrOfPinnedArrayElement(Array arr, int index)
    content.vb: >-
      <SecurityCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Function UnsafeAddrOfPinnedArrayElement(arr As Array, index As Integer) As IntPtr
    parameters:
    - id: arr
      type: System.Array
      description: "\n<p>The array that contains the desired element.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index in the <em>arr</em> parameter of the desired element.</p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The address of <em>index</em> inside <em>arr</em>.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.GCHandle
    commentId: T:System.Runtime.InteropServices.GCHandle
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: UnsafeAddrOfPinnedArrayElement(Array, Int32) may be unavailable in future releases. Instead, use UnsafeAddrOfPinnedArrayElement<T>(T[], Int32). For more info, go to http://go.microsoft.com/fwlink/?LinkID=296517
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  id: UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  nameWithType: Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], Int32)
  fullName: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement<T>(T[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: UnsafeAddrOfPinnedArrayElement
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 336
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets the address of the element at the specified index in an array of a specified type. </p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static IntPtr UnsafeAddrOfPinnedArrayElement<T>(T[] arr, int index)
    content.vb: >-
      <SecurityCritical>

      Public Shared Function UnsafeAddrOfPinnedArrayElement(Of T)(arr As T(), index As Integer) As IntPtr
    parameters:
    - id: arr
      type: '{T}[]'
      description: "\n<p>The array that contains the desired element. </p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The index of the desired element in the <em>arr</em> array. </p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the array. </p>\n"
    return:
      type: System.IntPtr
      description: "\n<p>The address of <em>index</em> in <em>arr</em>. </p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.GCHandle
    commentId: T:System.Runtime.InteropServices.GCHandle
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  nameWithType.vb: Marshal.UnsafeAddrOfPinnedArrayElement(Of T)(T(), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(Of T)(T(), System.Int32)
  name.vb: UnsafeAddrOfPinnedArrayElement(Of T)(T(), Int32)
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)
  id: WriteByte(System.IntPtr,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteByte(IntPtr, Byte)
  nameWithType: Marshal.WriteByte(IntPtr, Byte)
  fullName: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteByte
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 683
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a single byte value to unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteByte(IntPtr ptr, byte val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteByte(ptr As IntPtr, val As Byte)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory to write to.</p>\n"
    - id: val
      type: System.Byte
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  id: WriteByte(System.IntPtr,System.Int32,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteByte(IntPtr, Int32, Byte)
  nameWithType: Marshal.WriteByte(IntPtr, Int32, Byte)
  fullName: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr, System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteByte
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 656
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a single byte value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteByte(IntPtr ptr, int ofs, byte val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteByte(ptr As IntPtr, ofs As Integer, val As Byte)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory to write to.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Byte
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)
  id: WriteByte(System.Object,System.Int32,System.Byte)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteByte(Object, Int32, Byte)
  nameWithType: Marshal.WriteByte(Object, Int32, Byte)
  fullName: System.Runtime.InteropServices.Marshal.WriteByte(System.Object, System.Int32, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteByte
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 671
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a single byte value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteByte([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, byte val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteByte(ptr As Object, ofs As Integer, val As Byte)
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the target object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Byte
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WriteByte(Object, Int32, Byte) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)
  id: WriteInt16(System.IntPtr,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt16(IntPtr, Char)
  nameWithType: Marshal.WriteInt16(IntPtr, Char)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 745
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a character as a 16-bit integer value to unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt16(IntPtr ptr, char val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt16(ptr As IntPtr, val As Char)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory to write to.</p>\n"
    - id: val
      type: System.Char
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)
  id: WriteInt16(System.IntPtr,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt16(IntPtr, Int16)
  nameWithType: Marshal.WriteInt16(IntPtr, Int16)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 727
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 16-bit integer value to unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt16(IntPtr ptr, short val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt16(ptr As IntPtr, val As Short)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory to write to.</p>\n"
    - id: val
      type: System.Int16
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)
  id: WriteInt16(System.IntPtr,System.Int32,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt16(IntPtr, Int32, Char)
  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Char)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 733
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt16(IntPtr ptr, int ofs, char val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt16(ptr As IntPtr, ofs As Integer, val As Char)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in the native heap to write to.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Char
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)
  id: WriteInt16(System.IntPtr,System.Int32,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt16(IntPtr, Int32, Int16)
  nameWithType: Marshal.WriteInt16(IntPtr, Int32, Int16)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr, System.Int32, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 689
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 16-bit signed integer value into unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt16(IntPtr ptr, int ofs, short val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt16(ptr As IntPtr, ofs As Integer, val As Short)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory to write to.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Int16
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)
  id: WriteInt16(System.Object,System.Int32,System.Char)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt16(Object, Int32, Char)
  nameWithType: Marshal.WriteInt16(Object, Int32, Char)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object, System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 739
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt16([In, Out] object ptr, int ofs, char val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt16(ptr As Object, ofs As Integer, val As Char)
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the target object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Char
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WriteInt16(Object, Int32, Char) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)
  id: WriteInt16(System.Object,System.Int32,System.Int16)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt16(Object, Int32, Int16)
  nameWithType: Marshal.WriteInt16(Object, Int32, Int16)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt16(System.Object, System.Int32, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt16
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 715
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 16-bit signed integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt16([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, short val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt16(ptr As Object, ofs As Integer, val As Short)
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the target object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing. </p>\n"
    - id: val
      type: System.Int16
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WriteInt16(Object, Int32, Int16) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)
  id: WriteInt32(System.IntPtr,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt32(IntPtr, Int32)
  nameWithType: Marshal.WriteInt32(IntPtr, Int32)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt32
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 791
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 32-bit signed integer value to unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt32(IntPtr ptr, int val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt32(ptr As IntPtr, val As Integer)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory to write to.</p>\n"
    - id: val
      type: System.Int32
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)
  id: WriteInt32(System.IntPtr,System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt32(IntPtr, Int32, Int32)
  nameWithType: Marshal.WriteInt32(IntPtr, Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt32
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 751
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 32-bit signed integer value into unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt32(IntPtr ptr, int ofs, int val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt32(ptr As IntPtr, ofs As Integer, val As Integer)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory to write to.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Int32
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)
  id: WriteInt32(System.Object,System.Int32,System.Int32)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt32(Object, Int32, Int32)
  nameWithType: Marshal.WriteInt32(Object, Int32, Int32)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt32(System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt32
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 779
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 32-bit signed integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt32([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, int val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt32(ptr As Object, ofs As Integer, val As Integer)
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the target object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Int32
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WriteInt32(Object, Int32, Int32) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)
  id: WriteInt64(System.IntPtr,System.Int32,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt64(IntPtr, Int32, Int64)
  nameWithType: Marshal.WriteInt64(IntPtr, Int32, Int64)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr, System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt64
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 827
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt64(IntPtr ptr, int ofs, long val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt64(ptr As IntPtr, ofs As Integer, val As Long)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory to write.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Int64
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)
  id: WriteInt64(System.IntPtr,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt64(IntPtr, Int64)
  nameWithType: Marshal.WriteInt64(IntPtr, Int64)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt64
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 871
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 64-bit signed integer value to unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt64(IntPtr ptr, long val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt64(ptr As IntPtr, val As Long)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory to write to.</p>\n"
    - id: val
      type: System.Int64
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)
  id: WriteInt64(System.Object,System.Int32,System.Int64)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteInt64(Object, Int32, Int64)
  nameWithType: Marshal.WriteInt64(Object, Int32, Int64)
  fullName: System.Runtime.InteropServices.Marshal.WriteInt64(System.Object, System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteInt64
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 859
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a 64-bit signed integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteInt64([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, long val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteInt64(ptr As Object, ofs As Integer, val As Long)
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the target object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.Int64
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WriteInt64(Object, Int32, Int64) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  id: WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteIntPtr(IntPtr, Int32, IntPtr)
  nameWithType: Marshal.WriteIntPtr(IntPtr, Int32, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr, System.Int32, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 797
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a processor native-sized integer value to unmanaged memory at a specified offset.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteIntPtr(IntPtr ptr, int ofs, IntPtr val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteIntPtr(ptr As IntPtr, ofs As Integer, val As IntPtr)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The base address in unmanaged memory to write to.</p>\n"
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.IntPtr
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  - linkId: System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
    commentId: M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)
  id: WriteIntPtr(System.IntPtr,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteIntPtr(IntPtr, IntPtr)
  nameWithType: Marshal.WriteIntPtr(IntPtr, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 817
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a processor native sized integer value into unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteIntPtr(IntPtr ptr, IntPtr val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteIntPtr(ptr As IntPtr, val As IntPtr)
    parameters:
    - id: ptr
      type: System.IntPtr
      description: "\n<p>The address in unmanaged memory to write to.</p>\n"
    - id: val
      type: System.IntPtr
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>\n<em>ptr</em> is not a recognized format.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>ptr</em> is invalid.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  id: WriteIntPtr(System.Object,System.Int32,System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: WriteIntPtr(Object, Int32, IntPtr)
  nameWithType: Marshal.WriteIntPtr(Object, Int32, IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object, System.Int32, System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteIntPtr
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 807
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Writes a processor native sized integer value to unmanaged memory.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void WriteIntPtr([MarshalAs(UnmanagedType.AsAny), In, Out] object ptr, int ofs, IntPtr val)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub WriteIntPtr(ptr As Object, ofs As Integer, val As IntPtr)
    parameters:
    - id: ptr
      type: System.Object
      description: "\n<p>The base address in unmanaged memory of the target object.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 40
      - type: System.Runtime.InteropServices.InAttribute
        ctor: System.Runtime.InteropServices.InAttribute.#ctor
        arguments: []
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: ofs
      type: System.Int32
      description: "\n<p>An additional byte offset, which is added to the <em>ptr</em> parameter before writing.</p>\n"
    - id: val
      type: System.IntPtr
      description: "\n<p>The value to write.</p>\n"
  exceptions:
  - type: System.AccessViolationException
    commentId: T:System.AccessViolationException
    description: "\n<p>Base address (<em>ptr</em>) plus offset byte (<em>ofs</em>) produces a null or invalid address.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>ptr</em> is an <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> object. This method does not accept <xref href=\"System.Runtime.InteropServices.ArrayWithOffset\" data-throw-if-not-resolved=\"false\"></xref> parameters.</p>\n"
  seealso:
  - linkId: System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
    commentId: M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: WriteIntPtr(Object, Int32, IntPtr) may be unavailable in future releases.
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  id: ZeroFreeBSTR(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ZeroFreeBSTR(IntPtr)
  nameWithType: Marshal.ZeroFreeBSTR(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ZeroFreeBSTR
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2704
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees a <a href=\"https://msdn.microsoft.com/library/ms221069.aspx\">BSTR</a> pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ZeroFreeBSTR(IntPtr s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ZeroFreeBSTR(s As IntPtr)
    parameters:
    - id: s
      type: System.IntPtr
      description: "\n<p>The address of the <strong>BSTR</strong> to free.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  id: ZeroFreeCoTaskMemAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ZeroFreeCoTaskMemAnsi(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemAnsi(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ZeroFreeCoTaskMemAnsi
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2712
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ZeroFreeCoTaskMemAnsi(IntPtr s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ZeroFreeCoTaskMemAnsi(s As IntPtr)
    parameters:
    - id: s
      type: System.IntPtr
      description: "\n<p>The address of the unmanaged string to free.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  id: ZeroFreeCoTaskMemUnicode(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ZeroFreeCoTaskMemUnicode(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemUnicode(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ZeroFreeCoTaskMemUnicode
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2719
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ZeroFreeCoTaskMemUnicode(IntPtr s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ZeroFreeCoTaskMemUnicode(s As IntPtr)
    parameters:
    - id: s
      type: System.IntPtr
      description: "\n<p>The address of the unmanaged string to free.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  id: ZeroFreeGlobalAllocAnsi(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ZeroFreeGlobalAllocAnsi(IntPtr)
  nameWithType: Marshal.ZeroFreeGlobalAllocAnsi(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ZeroFreeGlobalAllocAnsi
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2755
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ZeroFreeGlobalAllocAnsi(IntPtr s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ZeroFreeGlobalAllocAnsi(s As IntPtr)
    parameters:
    - id: s
      type: System.IntPtr
      description: "\n<p>The address of the unmanaged string to free.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  id: ZeroFreeGlobalAllocUnicode(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ZeroFreeGlobalAllocUnicode(IntPtr)
  nameWithType: Marshal.ZeroFreeGlobalAllocUnicode(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ZeroFreeGlobalAllocUnicode
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2761
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  summary: "\n<p>Frees an unmanaged string pointer that was allocated using the <xref href=\"System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      public static void ZeroFreeGlobalAllocUnicode(IntPtr s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ZeroFreeGlobalAllocUnicode(s As IntPtr)
    parameters:
    - id: s
      type: System.IntPtr
      description: "\n<p>The address of the unmanaged string to free.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  commentId: M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  id: ZeroFreeCoTaskMemUTF8(System.IntPtr)
  parent: System.Runtime.InteropServices.Marshal
  langs:
  - csharp
  - vb
  name: ZeroFreeCoTaskMemUTF8(IntPtr)
  nameWithType: Marshal.ZeroFreeCoTaskMemUTF8(IntPtr)
  fullName: System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ZeroFreeCoTaskMemUTF8
    path: src/mscorlib/src/System/Runtime/InteropServices/Marshal.cs
    startLine: 2726
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices
  syntax:
    content: >-
      [SecurityCritical]

      public static void ZeroFreeCoTaskMemUTF8(IntPtr s)
    content.vb: >-
      <SecurityCritical>

      Public Shared Sub ZeroFreeCoTaskMemUTF8(s As IntPtr)
    parameters:
    - id: s
      type: System.IntPtr
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Double[]
  name: Double[]
  nameWithType: Double[]
  fullName: System.Double[]
  nameWithType.vb: Double()
  fullname.vb: System.Double()
  name.vb: Double()
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int16[]
  name: Int16[]
  nameWithType: Int16[]
  fullName: System.Int16[]
  nameWithType.vb: Int16()
  fullname.vb: System.Int16()
  name.vb: Int16()
  spec.csharp:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32[]
  name: Int32[]
  nameWithType: Int32[]
  fullName: System.Int32[]
  nameWithType.vb: Int32()
  fullname.vb: System.Int32()
  name.vb: Int32()
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64[]
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullname.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IntPtr[]
  name: IntPtr[]
  nameWithType: IntPtr[]
  fullName: System.IntPtr[]
  nameWithType.vb: IntPtr()
  fullname.vb: System.IntPtr()
  name.vb: IntPtr()
  spec.csharp:
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.IntPtr
    name: IntPtr
    nameWithType: IntPtr
    fullName: System.IntPtr
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Single[]
  name: Single[]
  nameWithType: Single[]
  fullName: System.Single[]
  nameWithType.vb: Single()
  fullname.vb: System.Single()
  name.vb: Single()
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: '{TWrapper}'
  commentId: '!:TWrapper'
  definition: TWrapper
  name: TWrapper
  nameWithType: TWrapper
  fullName: TWrapper
- uid: TWrapper
  commentId: '!:TWrapper'
  isExternal: false
  name: TWrapper
  nameWithType: TWrapper
  fullName: TWrapper
- uid: System.Runtime.InteropServices.CustomQueryInterfaceMode
  commentId: T:System.Runtime.InteropServices.CustomQueryInterfaceMode
  parent: System.Runtime.InteropServices
  isExternal: false
  name: CustomQueryInterfaceMode
  nameWithType: CustomQueryInterfaceMode
  fullName: System.Runtime.InteropServices.CustomQueryInterfaceMode
- uid: System.Delegate
  commentId: T:System.Delegate
  parent: System
  isExternal: false
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: '{TDelegate}'
  commentId: '!:TDelegate'
  definition: TDelegate
  name: TDelegate
  nameWithType: TDelegate
  fullName: TDelegate
- uid: TDelegate
  isExternal: false
  name: TDelegate
  nameWithType: TDelegate
  fullName: TDelegate
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: '{T}[]'
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullname.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: T
    nameWithType: T
    fullName: T
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Runtime.InteropServices.ComTypes.ITypeInfo
  commentId: T:System.Runtime.InteropServices.ComTypes.ITypeInfo
  parent: System.Runtime.InteropServices.ComTypes
  isExternal: false
  name: ITypeInfo
  nameWithType: ITypeInfo
  fullName: System.Runtime.InteropServices.ComTypes.ITypeInfo
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.InteropServices.ComTypes
  commentId: N:System.Runtime.InteropServices.ComTypes
  isExternal: false
  name: System.Runtime.InteropServices.ComTypes
  nameWithType: System.Runtime.InteropServices.ComTypes
  fullName: System.Runtime.InteropServices.ComTypes
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Runtime.InteropServices.InvalidOleVariantTypeException
  commentId: T:System.Runtime.InteropServices.InvalidOleVariantTypeException
  isExternal: false
  name: InvalidOleVariantTypeException
  nameWithType: InvalidOleVariantTypeException
  fullName: System.Runtime.InteropServices.InvalidOleVariantTypeException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.MissingMethodException
  commentId: T:System.MissingMethodException
  isExternal: false
  name: MissingMethodException
  nameWithType: MissingMethodException
  fullName: System.MissingMethodException
- uid: System.AccessViolationException
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
