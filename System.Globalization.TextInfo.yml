### YamlMime:ManagedReference
items:
- uid: System.Globalization.TextInfo
  commentId: T:System.Globalization.TextInfo
  id: TextInfo
  parent: System.Globalization
  children:
  - System.Globalization.TextInfo.CultureName
  - System.Globalization.TextInfo.Equals(System.Object)
  - System.Globalization.TextInfo.GetHashCode
  - System.Globalization.TextInfo.IsReadOnly
  - System.Globalization.TextInfo.IsRightToLeft
  - System.Globalization.TextInfo.ListSeparator
  - System.Globalization.TextInfo.ToLower(System.Char)
  - System.Globalization.TextInfo.ToLower(System.String)
  - System.Globalization.TextInfo.ToString
  - System.Globalization.TextInfo.ToUpper(System.Char)
  - System.Globalization.TextInfo.ToUpper(System.String)
  langs:
  - csharp
  - vb
  name: TextInfo
  nameWithType: TextInfo
  fullName: System.Globalization.TextInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TextInfo
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 32
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Defines text properties and behaviors, such as casing, that are specific to a writing system. </p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public class TextInfo : ICloneable
    content.vb: >-
      <ComVisible(True)>

      Public Class TextInfo
          Implements ICloneable
  seealso:
  - linkId: System.Globalization.StringInfo
    commentId: T:System.Globalization.StringInfo
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Globalization.TextInfo.CultureName
  commentId: P:System.Globalization.TextInfo.CultureName
  id: CultureName
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: CultureName
  nameWithType: TextInfo.CultureName
  fullName: System.Globalization.TextInfo.CultureName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CultureName
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 412
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets the name of the culture associated with the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public string CultureName { get; }
    content.vb: >-
      <ComVisible(False)>

      Public ReadOnly Property CultureName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of a culture. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextInfo.IsReadOnly
  commentId: P:System.Globalization.TextInfo.IsReadOnly
  id: IsReadOnly
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: TextInfo.IsReadOnly
  fullName: System.Globalization.TextInfo.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 428
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public bool IsReadOnly { get; }
    content.vb: >-
      <ComVisible(False)>

      Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextInfo.IsRightToLeft
  commentId: P:System.Globalization.TextInfo.IsRightToLeft
  id: IsRightToLeft
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: IsRightToLeft
  nameWithType: TextInfo.IsRightToLeft
  fullName: System.Globalization.TextInfo.IsRightToLeft
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsRightToLeft
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 892
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets a value indicating whether the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object represents a writing system where text flows from right to left.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      public bool IsRightToLeft { get; }
    content.vb: >-
      <ComVisible(False)>

      Public ReadOnly Property IsRightToLeft As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if text flows from right to left; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Globalization.TextInfo.ListSeparator
  commentId: P:System.Globalization.TextInfo.ListSeparator
  id: ListSeparator
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ListSeparator
  nameWithType: TextInfo.ListSeparator
  fullName: System.Globalization.TextInfo.ListSeparator
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ListSeparator
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 494
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Gets or sets the string that separates items in a list.</p>\n"
  syntax:
    content: >-
      public virtual string ListSeparator

      {
          [SecuritySafeCritical]
          get;
          [ComVisible(false)]
          set;
      }
    content.vb: Public Overridable Property ListSeparator As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The string that separates items in a list.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value in a set operation is null.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>In a set operation, the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object is read-only.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.Equals(System.Object)
  commentId: M:System.Globalization.TextInfo.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: TextInfo.Equals(Object)
  fullName: System.Globalization.TextInfo.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 623
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Determines whether the specified object represents the same writing system as the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> represents the same writing system as the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - linkId: System.Object.Equals(System.Object)
    commentId: M:System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.TextInfo.GetHashCode
  commentId: M:System.Globalization.TextInfo.GetHashCode
  id: GetHashCode
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TextInfo.GetHashCode()
  fullName: System.Globalization.TextInfo.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 647
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Serves as a hash function for the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>, suitable for hashing algorithms and data structures, such as a hash table.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.GetHashCode
  seealso:
  - linkId: System.Object.GetHashCode
    commentId: M:System.Object.GetHashCode
  - linkId: System.Collections.Hashtable
    commentId: T:System.Collections.Hashtable
  - linkId: System.Globalization.TextInfo.Equals(System.Object)
    commentId: M:System.Globalization.TextInfo.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.TextInfo.ToLower(System.Char)
  commentId: M:System.Globalization.TextInfo.ToLower(System.Char)
  id: ToLower(System.Char)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToLower(Char)
  nameWithType: TextInfo.ToLower(Char)
  fullName: System.Globalization.TextInfo.ToLower(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToLower
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 527
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified character to lowercase.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual char ToLower(char c)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ToLower(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The character to convert to lowercase. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The specified character converted to lowercase.</p>\n"
  seealso:
  - linkId: System.Globalization.TextInfo.ToUpper(System.Char)
    commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)
  - linkId: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.ToLower(System.String)
  commentId: M:System.Globalization.TextInfo.ToLower(System.String)
  id: ToLower(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToLower(String)
  nameWithType: TextInfo.ToLower(String)
  fullName: System.Globalization.TextInfo.ToLower(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToLower
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 537
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified string to lowercase.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual string ToLower(string str)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ToLower(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The string to convert to lowercase. </p>\n"
    return:
      type: System.String
      description: "\n<p>The specified string converted to lowercase.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is null. </p>\n"
  seealso:
  - linkId: System.Globalization.TextInfo.ToUpper(System.Char)
    commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)
  - linkId: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.ToString
  commentId: M:System.Globalization.TextInfo.ToString
  id: ToString
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TextInfo.ToString()
  fullName: System.Globalization.TextInfo.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 663
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A string that represents the current <xref href=\"System.Globalization.TextInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  seealso:
  - linkId: System.Object.ToString
    commentId: M:System.Object.ToString
  - linkId: System.String
    commentId: T:System.String
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Globalization.TextInfo.ToUpper(System.Char)
  commentId: M:System.Globalization.TextInfo.ToUpper(System.Char)
  id: ToUpper(System.Char)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToUpper(Char)
  nameWithType: TextInfo.ToUpper(Char)
  fullName: System.Globalization.TextInfo.ToUpper(System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUpper
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 565
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified character to uppercase.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual char ToUpper(char c)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ToUpper(c As Char) As Char
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>The character to convert to uppercase. </p>\n"
    return:
      type: System.Char
      description: "\n<p>The specified character converted to uppercase.</p>\n"
  seealso:
  - linkId: System.Globalization.TextInfo.ToLower(System.Char)
    commentId: M:System.Globalization.TextInfo.ToLower(System.Char)
  - linkId: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Globalization.TextInfo.ToUpper(System.String)
  commentId: M:System.Globalization.TextInfo.ToUpper(System.String)
  id: ToUpper(System.String)
  parent: System.Globalization.TextInfo
  langs:
  - csharp
  - vb
  name: ToUpper(String)
  nameWithType: TextInfo.ToUpper(String)
  fullName: System.Globalization.TextInfo.ToUpper(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Globalization/TextInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToUpper
    path: src/mscorlib/src/System/Globalization/TextInfo.cs
    startLine: 576
  assemblies:
  - System.Globalization
  namespace: System.Globalization
  summary: "\n<p>Converts the specified string to uppercase.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual string ToUpper(string str)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ToUpper(str As String) As String
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The string to convert to uppercase. </p>\n"
    return:
      type: System.String
      description: "\n<p>The specified string converted to uppercase.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>str</em> is null. </p>\n"
  seealso:
  - linkId: System.Globalization.TextInfo.ToLower(System.Char)
    commentId: M:System.Globalization.TextInfo.ToLower(System.Char)
  - linkId: System.Globalization.TextInfo.ToTitleCase(System.String)
    commentId: M:System.Globalization.TextInfo.ToTitleCase(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Globalization
  commentId: N:System.Globalization
  isExternal: false
  name: System.Globalization
  nameWithType: System.Globalization
  fullName: System.Globalization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
