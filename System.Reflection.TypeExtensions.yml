### YamlMime:ManagedReference
items:
- uid: System.Reflection.TypeExtensions
  commentId: T:System.Reflection.TypeExtensions
  id: TypeExtensions
  parent: System.Reflection
  children:
  - System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  - System.Reflection.TypeExtensions.GetConstructors(System.Type)
  - System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetEvents(System.Type)
  - System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetFields(System.Type)
  - System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  - System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMembers(System.Type)
  - System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  - System.Reflection.TypeExtensions.GetMethods(System.Type)
  - System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperties(System.Type)
  - System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  - System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  - System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  - System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  langs:
  - csharp
  - vb
  name: TypeExtensions
  nameWithType: TypeExtensions
  fullName: System.Reflection.TypeExtensions
  type: Class
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeExtensions
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 49
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static class TypeExtensions
    content.vb: Public Module TypeExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  commentId: M:System.Reflection.TypeExtensions.GetConstructor(System.Type,System.Type[])
  id: GetConstructor(System.Type,System.Type[])
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetConstructor(Type, Type[])
  nameWithType: TypeExtensions.GetConstructor(Type, Type[])
  fullName: System.Reflection.TypeExtensions.GetConstructor(System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConstructor
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 51
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static ConstructorInfo GetConstructor(this Type type, Type[] types)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetConstructor(type As Type, types As Type()) As ConstructorInfo
    parameters:
    - id: type
      type: System.Type
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.ConstructorInfo
  nameWithType.vb: TypeExtensions.GetConstructor(Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.TypeExtensions.GetConstructor(System.Type, System.Type())
  name.vb: GetConstructor(Type, Type())
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetConstructors(System.Type)
  id: GetConstructors(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetConstructors(Type)
  nameWithType: TypeExtensions.GetConstructors(Type)
  fullName: System.Reflection.TypeExtensions.GetConstructors(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConstructors
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 52
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static ConstructorInfo[] GetConstructors(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetConstructors(type As Type) As ConstructorInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.ConstructorInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetConstructors(System.Type,System.Reflection.BindingFlags)
  id: GetConstructors(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetConstructors(Type, BindingFlags)
  nameWithType: TypeExtensions.GetConstructors(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetConstructors(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConstructors
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 53
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static ConstructorInfo[] GetConstructors(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetConstructors(type As Type, bindingAttr As BindingFlags) As ConstructorInfo()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.ConstructorInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  id: GetDefaultMembers(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetDefaultMembers(Type)
  nameWithType: TypeExtensions.GetDefaultMembers(Type)
  fullName: System.Reflection.TypeExtensions.GetDefaultMembers(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultMembers
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 54
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MemberInfo[] GetDefaultMembers(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetDefaultMembers(type As Type) As MemberInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String)
  id: GetEvent(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetEvent(Type, String)
  nameWithType: TypeExtensions.GetEvent(Type, String)
  fullName: System.Reflection.TypeExtensions.GetEvent(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvent
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 55
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static EventInfo GetEvent(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEvent(type As Type, name As String) As EventInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.EventInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetEvent(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetEvent(Type, String, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetEvent(System.Type, System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvent
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 56
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static EventInfo GetEvent(this Type type, string name, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEvent(type As Type, name As String, bindingAttr As BindingFlags) As EventInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.EventInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetEvents(System.Type)
  id: GetEvents(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetEvents(Type)
  nameWithType: TypeExtensions.GetEvents(Type)
  fullName: System.Reflection.TypeExtensions.GetEvents(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 57
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static EventInfo[] GetEvents(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEvents(type As Type) As EventInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.EventInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetEvents(System.Type,System.Reflection.BindingFlags)
  id: GetEvents(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetEvents(Type, BindingFlags)
  nameWithType: TypeExtensions.GetEvents(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetEvents(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 58
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static EventInfo[] GetEvents(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetEvents(type As Type, bindingAttr As BindingFlags) As EventInfo()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.EventInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String)
  id: GetField(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetField(Type, String)
  nameWithType: TypeExtensions.GetField(Type, String)
  fullName: System.Reflection.TypeExtensions.GetField(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetField
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 59
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static FieldInfo GetField(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetField(type As Type, name As String) As FieldInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetField(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetField(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetField(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetField(Type, String, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetField(System.Type, System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetField
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 60
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static FieldInfo GetField(this Type type, string name, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetField(type As Type, name As String, bindingAttr As BindingFlags) As FieldInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetFields(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetFields(System.Type)
  id: GetFields(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetFields(Type)
  nameWithType: TypeExtensions.GetFields(Type)
  fullName: System.Reflection.TypeExtensions.GetFields(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFields
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 61
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static FieldInfo[] GetFields(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFields(type As Type) As FieldInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.FieldInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetFields(System.Type,System.Reflection.BindingFlags)
  id: GetFields(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetFields(Type, BindingFlags)
  nameWithType: TypeExtensions.GetFields(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetFields(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFields
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 62
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static FieldInfo[] GetFields(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetFields(type As Type, bindingAttr As BindingFlags) As FieldInfo()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.FieldInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  id: GetGenericArguments(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetGenericArguments(Type)
  nameWithType: TypeExtensions.GetGenericArguments(Type)
  fullName: System.Reflection.TypeExtensions.GetGenericArguments(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericArguments
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 63
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type[] GetGenericArguments(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetGenericArguments(type As Type) As Type()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  id: GetInterfaces(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetInterfaces(Type)
  nameWithType: TypeExtensions.GetInterfaces(Type)
  fullName: System.Reflection.TypeExtensions.GetInterfaces(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInterfaces
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 64
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type[] GetInterfaces(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetInterfaces(type As Type) As Type()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String)
  id: GetMember(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMember(Type, String)
  nameWithType: TypeExtensions.GetMember(Type, String)
  fullName: System.Reflection.TypeExtensions.GetMember(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMember
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 65
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MemberInfo[] GetMember(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMember(type As Type, name As String) As MemberInfo()
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetMember(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMember(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMember(Type, String, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetMember(System.Type, System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMember
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 66
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MemberInfo[] GetMember(this Type type, string name, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMember(type As Type, name As String, bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetMembers(System.Type)
  id: GetMembers(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMembers(Type)
  nameWithType: TypeExtensions.GetMembers(Type)
  fullName: System.Reflection.TypeExtensions.GetMembers(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMembers
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 67
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MemberInfo[] GetMembers(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMembers(type As Type) As MemberInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMembers(System.Type,System.Reflection.BindingFlags)
  id: GetMembers(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMembers(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMembers(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetMembers(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMembers
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 68
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MemberInfo[] GetMembers(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMembers(type As Type, bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String)
  id: GetMethod(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMethod(Type, String)
  nameWithType: TypeExtensions.GetMethod(Type, String)
  fullName: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 69
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo GetMethod(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethod(type As Type, name As String) As MethodInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMethod(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetMethod(Type, String, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 70
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo GetMethod(this Type type, string name, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethod(type As Type, name As String, bindingAttr As BindingFlags) As MethodInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  commentId: M:System.Reflection.TypeExtensions.GetMethod(System.Type,System.String,System.Type[])
  id: GetMethod(System.Type,System.String,System.Type[])
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMethod(Type, String, Type[])
  nameWithType: TypeExtensions.GetMethod(Type, String, Type[])
  fullName: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 71
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo GetMethod(this Type type, string name, Type[] types)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethod(type As Type, name As String, types As Type()) As MethodInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
  nameWithType.vb: TypeExtensions.GetMethod(Type, String, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.TypeExtensions.GetMethod(System.Type, System.String, System.Type())
  name.vb: GetMethod(Type, String, Type())
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetMethods(System.Type)
  id: GetMethods(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMethods(Type)
  nameWithType: TypeExtensions.GetMethods(Type)
  fullName: System.Reflection.TypeExtensions.GetMethods(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethods
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 72
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo[] GetMethods(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethods(type As Type) As MethodInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.MethodInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetMethods(System.Type,System.Reflection.BindingFlags)
  id: GetMethods(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetMethods(Type, BindingFlags)
  nameWithType: TypeExtensions.GetMethods(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetMethods(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethods
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 73
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static MethodInfo[] GetMethods(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetMethods(type As Type, bindingAttr As BindingFlags) As MethodInfo()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MethodInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetNestedType(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetNestedType(Type, String, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetNestedType(System.Type, System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNestedType
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 74
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type GetNestedType(this Type type, string name, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetNestedType(type As Type, name As String, bindingAttr As BindingFlags) As Type
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetNestedTypes(Type, BindingFlags)
  nameWithType: TypeExtensions.GetNestedTypes(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetNestedTypes(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNestedTypes
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 75
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static Type[] GetNestedTypes(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetNestedTypes(type As Type, bindingAttr As BindingFlags) As Type()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetProperties(System.Type)
  id: GetProperties(System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperties(Type)
  nameWithType: TypeExtensions.GetProperties(Type)
  fullName: System.Reflection.TypeExtensions.GetProperties(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 76
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo[] GetProperties(this Type type)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperties(type As Type) As PropertyInfo()
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Reflection.PropertyInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetProperties(System.Type,System.Reflection.BindingFlags)
  id: GetProperties(System.Type,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperties(Type, BindingFlags)
  nameWithType: TypeExtensions.GetProperties(Type, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetProperties(System.Type, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 77
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo[] GetProperties(this Type type, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperties(type As Type, bindingAttr As BindingFlags) As PropertyInfo()
    parameters:
    - id: type
      type: System.Type
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.PropertyInfo[]
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String)
  id: GetProperty(System.Type,System.String)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperty(Type, String)
  nameWithType: TypeExtensions.GetProperty(Type, String)
  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 78
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo GetProperty(this Type type, string name)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperty(type As Type, name As String) As PropertyInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.Type,System.String,System.Reflection.BindingFlags)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperty(Type, String, BindingFlags)
  nameWithType: TypeExtensions.GetProperty(Type, String, BindingFlags)
  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 79
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo GetProperty(this Type type, string name, BindingFlags bindingAttr)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperty(type As Type, name As String, bindingAttr As BindingFlags) As PropertyInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type)
  id: GetProperty(System.Type,System.String,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperty(Type, String, Type)
  nameWithType: TypeExtensions.GetProperty(Type, String, Type)
  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 80
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo GetProperty(this Type type, string name, Type returnType)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperty(type As Type, name As String, returnType As Type) As PropertyInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  commentId: M:System.Reflection.TypeExtensions.GetProperty(System.Type,System.String,System.Type,System.Type[])
  id: GetProperty(System.Type,System.String,System.Type,System.Type[])
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: GetProperty(Type, String, Type, Type[])
  nameWithType: TypeExtensions.GetProperty(Type, String, Type, Type[])
  fullName: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 81
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static PropertyInfo GetProperty(this Type type, string name, Type returnType, Type[] types)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetProperty(type As Type, name As String, returnType As Type, types As Type()) As PropertyInfo
    parameters:
    - id: type
      type: System.Type
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.PropertyInfo
  nameWithType.vb: TypeExtensions.GetProperty(Type, String, Type, Type())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Reflection.TypeExtensions.GetProperty(System.Type, System.String, System.Type, System.Type())
  name.vb: GetProperty(Type, String, Type, Type())
- uid: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  commentId: M:System.Reflection.TypeExtensions.IsAssignableFrom(System.Type,System.Type)
  id: IsAssignableFrom(System.Type,System.Type)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(Type, Type)
  nameWithType: TypeExtensions.IsAssignableFrom(Type, Type)
  fullName: System.Reflection.TypeExtensions.IsAssignableFrom(System.Type, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAssignableFrom
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 82
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static bool IsAssignableFrom(this Type type, Type c)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsAssignableFrom(type As Type, c As Type) As Boolean
    parameters:
    - id: type
      type: System.Type
    - id: c
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  commentId: M:System.Reflection.TypeExtensions.IsInstanceOfType(System.Type,System.Object)
  id: IsInstanceOfType(System.Type,System.Object)
  isExtensionMethod: true
  parent: System.Reflection.TypeExtensions
  langs:
  - csharp
  - vb
  name: IsInstanceOfType(Type, Object)
  nameWithType: TypeExtensions.IsInstanceOfType(Type, Object)
  fullName: System.Reflection.TypeExtensions.IsInstanceOfType(System.Type, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInstanceOfType
    path: src/System.Reflection.TypeExtensions/ref/System.Reflection.TypeExtensions.cs
    startLine: 83
  assemblies:
  - System.Reflection.TypeExtensions
  namespace: System.Reflection
  syntax:
    content: public static bool IsInstanceOfType(this Type type, object o)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function IsInstanceOfType(type As Type, o As Object) As Boolean
    parameters:
    - id: type
      type: System.Type
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.ConstructorInfo[]
  name: ConstructorInfo[]
  nameWithType: ConstructorInfo[]
  fullName: System.Reflection.ConstructorInfo[]
  nameWithType.vb: ConstructorInfo()
  fullname.vb: System.Reflection.ConstructorInfo()
  name.vb: ConstructorInfo()
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.MemberInfo[]
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  nameWithType.vb: MemberInfo()
  fullname.vb: System.Reflection.MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.EventInfo
  commentId: T:System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Reflection.EventInfo[]
  name: EventInfo[]
  nameWithType: EventInfo[]
  fullName: System.Reflection.EventInfo[]
  nameWithType.vb: EventInfo()
  fullname.vb: System.Reflection.EventInfo()
  name.vb: EventInfo()
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.FieldInfo[]
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: System.Reflection.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullname.vb: System.Reflection.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.MethodInfo[]
  name: MethodInfo[]
  nameWithType: MethodInfo[]
  fullName: System.Reflection.MethodInfo[]
  nameWithType.vb: MethodInfo()
  fullname.vb: System.Reflection.MethodInfo()
  name.vb: MethodInfo()
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.PropertyInfo[]
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  nameWithType.vb: PropertyInfo()
  fullname.vb: System.Reflection.PropertyInfo()
  name.vb: PropertyInfo()
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
