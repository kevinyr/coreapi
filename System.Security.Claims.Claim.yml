items:
- uid: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  id: Claim
  parent: System.Security.Claims
  children:
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.Clone
  - System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.CustomSerializationData
  - System.Security.Claims.Claim.Issuer
  - System.Security.Claims.Claim.OriginalIssuer
  - System.Security.Claims.Claim.Properties
  - System.Security.Claims.Claim.Subject
  - System.Security.Claims.Claim.ToString
  - System.Security.Claims.Claim.Type
  - System.Security.Claims.Claim.Value
  - System.Security.Claims.Claim.ValueType
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  - vb
  name: Claim
  fullName: System.Security.Claims.Claim
  type: Class
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claim
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 10
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Represents a claim.</p>\n"
  syntax:
    content: public class Claim
    content.vb: Public Class Claim
  seealso:
  - type: System.Security.Claims.ClaimsIdentity
    commentId: T:System.Security.Claims.ClaimsIdentity
  - type: System.Security.Claims.ClaimsPrincipal
    commentId: T:System.Security.Claims.ClaimsPrincipal
  - type: System.IdentityModel.Tokens.IssuerNameRegistry
    commentId: T:System.IdentityModel.Tokens.IssuerNameRegistry
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: Claim
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(System.IO.BinaryReader)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 12
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public Claim(BinaryReader reader)
    content.vb: Public Sub New(reader As BinaryReader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(BinaryReader)
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(BinaryReader, ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(System.IO.BinaryReader, System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 13
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified reader, and subject.</p>\n"
  syntax:
    content: public Claim(BinaryReader reader, ClaimsIdentity subject)
    content.vb: Public Sub New(reader As BinaryReader, subject As ClaimsIdentity)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p>The binary reader.</p>\n"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The subject that this claim describes.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(BinaryReader, ClaimsIdentity)
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  commentId: M:System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  id: '#ctor(System.Security.Claims.Claim)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(System.Security.Claims.Claim)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 14
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected Claim(Claim other)
    content.vb: Protected Sub New(other As Claim)
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "\n<p>The security claim.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: Claim.Claim(Claim)
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(Claim, ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(System.Security.Claims.Claim, System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 15
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified security claim, and subject.</p>\n"
  syntax:
    content: protected Claim(Claim other, ClaimsIdentity subject)
    content.vb: Protected Sub New(other As Claim, subject As ClaimsIdentity)
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "\n<p>The security claim.</p>\n"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The subject that this claim describes.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  nameWithType: Claim.Claim(Claim, ClaimsIdentity)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 16
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, and value.</p>\n"
  syntax:
    content: public Claim(string type, string value)
    content.vb: Public Sub New(type As String, value As String)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The claim value.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(String, String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 17
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, and value type.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType)
    content.vb: Public Sub New(type As String, value As String, valueType As String)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The claim value.</p>\n"
    - id: valueType
      type: System.String
      description: "\n<p>The claim value type. If this parameter is <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimValueTypes.String\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(String, String, String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 18
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, value type, and issuer.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType, string issuer)
    content.vb: Public Sub New(type As String, value As String, valueType As String, issuer As String)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The claim value.</p>\n"
    - id: valueType
      type: System.String
      description: "\n<p>The claim value type. If this parameter is <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimValueTypes.String\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
    - id: issuer
      type: System.String
      description: "\n<p>The claim issuer. If this parameter is empty or <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultIssuer\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(String, String, String, String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String, String, String)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 19
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, value type, issuer,  and original issuer.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType, string issuer, string originalIssuer)
    content.vb: Public Sub New(type As String, value As String, valueType As String, issuer As String, originalIssuer As String)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The claim value.</p>\n"
    - id: valueType
      type: System.String
      description: "\n<p>The claim value type. If this parameter is <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimValueTypes.String\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
    - id: issuer
      type: System.String
      description: "\n<p>The claim issuer. If this parameter is empty or <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultIssuer\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
    - id: originalIssuer
      type: System.String
      description: "\n<p>The original issuer of the claim. If this parameter is empty or <strong>null</strong>, then the <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property is set to the value of the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(String, String, String, String, String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Claim(String, String, String, String, String, ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(System.String, System.String, System.String, System.String, System.String, System.Security.Claims.ClaimsIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 20
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> class with the specified claim type, value, value type, issuer, original issuer and subject.</p>\n"
  syntax:
    content: public Claim(string type, string value, string valueType, string issuer, string originalIssuer, ClaimsIdentity subject)
    content.vb: Public Sub New(type As String, value As String, valueType As String, issuer As String, originalIssuer As String, subject As ClaimsIdentity)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The claim value.</p>\n"
    - id: valueType
      type: System.String
      description: "\n<p>The claim value type. If this parameter is <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimValueTypes.String\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
    - id: issuer
      type: System.String
      description: "\n<p>The claim issuer. If this parameter is empty or <strong>null</strong>, then <xref href=\"System.Security.Claims.ClaimsIdentity.DefaultIssuer\" data-throw-if-not-resolved=\"false\"></xref> is used.</p>\n"
    - id: originalIssuer
      type: System.String
      description: "\n<p>The original issuer of the claim. If this parameter is empty or <strong>null</strong>, then the <xref href=\"System.Security.Claims.Claim.OriginalIssuer\" data-throw-if-not-resolved=\"false\"></xref> property is set to the value of the <xref href=\"System.Security.Claims.Claim.Issuer\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The subject that this claim describes.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>value</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimTypes
    commentId: T:System.Security.Claims.ClaimTypes
  - type: System.Security.Claims.ClaimValueTypes
    commentId: T:System.Security.Claims.ClaimValueTypes
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: Claim.Claim(String, String, String, String, String, ClaimsIdentity)
- uid: System.Security.Claims.Claim.CustomSerializationData
  commentId: P:System.Security.Claims.Claim.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomSerializationData
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 21
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p>Returns <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  nameWithType: Claim.CustomSerializationData
- uid: System.Security.Claims.Claim.Issuer
  commentId: P:System.Security.Claims.Claim.Issuer
  id: Issuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Issuer
  fullName: System.Security.Claims.Claim.Issuer
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Issuer
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 22
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the issuer of the claim.</p>\n"
  syntax:
    content: public string Issuer { get; }
    content.vb: Public ReadOnly Property Issuer As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A name that refers to the issuer of the claim.</p>\n"
  seealso:
  - type: System.Security.Claims.Claim.OriginalIssuer
    commentId: P:System.Security.Claims.Claim.OriginalIssuer
  - type: System.IdentityModel.Tokens.IssuerNameRegistry
    commentId: T:System.IdentityModel.Tokens.IssuerNameRegistry
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer
  commentId: P:System.Security.Claims.Claim.OriginalIssuer
  id: OriginalIssuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OriginalIssuer
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 23
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the original issuer of the claim. </p>\n"
  syntax:
    content: public string OriginalIssuer { get; }
    content.vb: Public ReadOnly Property OriginalIssuer As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A name that refers to the original issuer of the claim.</p>\n"
  seealso:
  - type: System.Security.Claims.Claim.Issuer
    commentId: P:System.Security.Claims.Claim.Issuer
  - type: System.IdentityModel.Tokens.IssuerNameRegistry
    commentId: T:System.IdentityModel.Tokens.IssuerNameRegistry
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties
  commentId: P:System.Security.Claims.Claim.Properties
  id: Properties
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Properties
  fullName: System.Security.Claims.Claim.Properties
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Properties
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 24
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a dictionary that contains additional properties associated with this claim.</p>\n"
  syntax:
    content: public IDictionary<string, string> Properties { get; }
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>A dictionary that contains additional properties associated with the claim. The properties are represented as name-value pairs.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimProperties
    commentId: T:System.Security.Claims.ClaimProperties
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.Properties
- uid: System.Security.Claims.Claim.Subject
  commentId: P:System.Security.Claims.Claim.Subject
  id: Subject
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Subject
  fullName: System.Security.Claims.Claim.Subject
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Subject
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 25
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the subject of the claim.</p>\n"
  syntax:
    content: public ClaimsIdentity Subject { get; }
    content.vb: Public ReadOnly Property Subject As ClaimsIdentity
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The subject of the claim.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.Subject
- uid: System.Security.Claims.Claim.Type
  commentId: P:System.Security.Claims.Claim.Type
  id: Type
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Type
  fullName: System.Security.Claims.Claim.Type
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Type
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 26
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the claim type of the claim.</p>\n"
  syntax:
    content: public string Type { get; }
    content.vb: Public ReadOnly Property Type As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The claim type.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.Type
- uid: System.Security.Claims.Claim.Value
  commentId: P:System.Security.Claims.Claim.Value
  id: Value
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Value
  fullName: System.Security.Claims.Claim.Value
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 27
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the value of the claim.</p>\n"
  syntax:
    content: public string Value { get; }
    content.vb: Public ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The claim value.</p>\n"
  seealso:
  - type: System.Security.Claims.Claim.ValueType
    commentId: P:System.Security.Claims.Claim.ValueType
  - type: System.Security.Claims.Claim.Type
    commentId: P:System.Security.Claims.Claim.Type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.Value
- uid: System.Security.Claims.Claim.ValueType
  commentId: P:System.Security.Claims.Claim.ValueType
  id: ValueType
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: ValueType
  fullName: System.Security.Claims.Claim.ValueType
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueType
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 28
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the value type of the claim.</p>\n"
  syntax:
    content: public string ValueType { get; }
    content.vb: Public ReadOnly Property ValueType As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The claim value type.</p>\n"
  seealso:
  - type: System.Security.Claims.Claim.Value
    commentId: P:System.Security.Claims.Claim.Value
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: Claim.ValueType
- uid: System.Security.Claims.Claim.Clone
  commentId: M:System.Security.Claims.Claim.Clone
  id: Clone
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Claims.Claim.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 29
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a new <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object copied from this object. The new claim does not have a subject.</p>\n"
  syntax:
    content: public virtual Claim Clone()
    content.vb: Public Overridable Function Clone As Claim
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The new claim object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: Claim.Clone()
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  id: Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 30
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a new <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object copied from this object. The subject of the new claim is set to the specified ClaimsIdentity.</p>\n"
  syntax:
    content: public virtual Claim Clone(ClaimsIdentity identity)
    content.vb: Public Overridable Function Clone(identity As ClaimsIdentity) As Claim
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The intended subject of the new claim.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The new claim object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: Claim.Clone(ClaimsIdentity)
- uid: System.Security.Claims.Claim.ToString
  commentId: M:System.Security.Claims.Claim.ToString
  id: ToString
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: System.Security.Claims.Claim.ToString()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 31
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a string representation of this <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The string representation of this <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  nameWithType: Claim.ToString()
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 32
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public virtual void WriteTo(BinaryWriter writer)
    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: Claim.WriteTo(BinaryWriter)
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/ref/System.Security.Claims.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/ref/System.Security.Claims.cs
    startLine: 33
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Writes this <xref href=\"System.Security.Claims.Claim\" data-throw-if-not-resolved=\"false\"></xref> to the writer.</p>\n"
  syntax:
    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)
    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p>The writer to write this claim</p>\n"
    - id: userData
      type: System.Byte[]
      description: "\n<p>The user data to claim</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
  nameWithType: Claim.WriteTo(BinaryWriter, Byte[])
  nameWithType.vb: Claim.WriteTo(BinaryWriter, Byte())
references:
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
  commentId: N:System.Security.Claims
  nameWithType: System.Security.Claims
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: false
  name: BinaryReader
  fullName: System.IO.BinaryReader
  commentId: T:System.IO.BinaryReader
  nameWithType: BinaryReader
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  commentId: N:System.IO
  nameWithType: System.IO
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
  nameWithType: ClaimsIdentity
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  fullName: System.Security.Claims.Claim
  commentId: T:System.Security.Claims.Claim
  nameWithType: Claim
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  nameWithType: IDictionary<String, String>
  nameWithType.vb: IDictionary(Of String, String)
- uid: System.Collections.Generic.IDictionary`2
  isExternal: false
  name: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    fullName: <
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    fullName: '(Of '
  - name: TKey
    fullName: TKey
  - name: ', '
    fullName: ', '
  - name: TValue
    fullName: TValue
  - name: )
    fullName: )
  commentId: T:System.Collections.Generic.IDictionary`2
  nameWithType: IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  commentId: N:System.Collections.Generic
  nameWithType: System.Collections.Generic
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
  commentId: T:System.IO.BinaryWriter
  nameWithType: BinaryWriter
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
