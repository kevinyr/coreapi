### YamlMime:ManagedReference
items:
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  id: CancellationToken
  parent: System.Threading
  children:
  - System.Threading.CancellationToken.#ctor(System.Boolean)
  - System.Threading.CancellationToken.CanBeCanceled
  - System.Threading.CancellationToken.Equals(System.Object)
  - System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  - System.Threading.CancellationToken.GetHashCode
  - System.Threading.CancellationToken.IsCancellationRequested
  - System.Threading.CancellationToken.None
  - System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  - System.Threading.CancellationToken.Register(System.Action)
  - System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  - System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  - System.Threading.CancellationToken.ThrowIfCancellationRequested
  - System.Threading.CancellationToken.WaitHandle
  langs:
  - csharp
  - vb
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CancellationToken
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 40
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Propagates notification that operations should be canceled.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")]

      public struct CancellationToken
    content.vb: >-
      <ComVisible(False)>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <DebuggerDisplay("IsCancellationRequested = {IsCancellationRequested}")>

      Public Structure CancellationToken
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.Threading.CancellationToken.#ctor(System.Boolean)
  commentId: M:System.Threading.CancellationToken.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: CancellationToken(Boolean)
  nameWithType: CancellationToken.CancellationToken(Boolean)
  fullName: System.Threading.CancellationToken.CancellationToken(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 155
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Initializes the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public CancellationToken(bool canceled)
    content.vb: Public Sub New(canceled As Boolean)
    parameters:
    - id: canceled
      type: System.Boolean
      description: "\n<p>The canceled state for the token.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.CanBeCanceled
  commentId: P:System.Threading.CancellationToken.CanBeCanceled
  id: CanBeCanceled
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: CanBeCanceled
  nameWithType: CancellationToken.CanBeCanceled
  fullName: System.Threading.CancellationToken.CanBeCanceled
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CanBeCanceled
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 99
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Gets whether this token is capable of being in the canceled state. </p>\n"
  syntax:
    content: public bool CanBeCanceled { get; }
    content.vb: Public ReadOnly Property CanBeCanceled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this token is capable of being in the canceled state; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationToken.IsCancellationRequested
  commentId: P:System.Threading.CancellationToken.IsCancellationRequested
  id: IsCancellationRequested
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: IsCancellationRequested
  nameWithType: CancellationToken.IsCancellationRequested
  fullName: System.Threading.CancellationToken.IsCancellationRequested
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsCancellationRequested
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 83
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Gets whether cancellation has been requested for this token.</p>\n"
  syntax:
    content: public bool IsCancellationRequested { get; }
    content.vb: Public ReadOnly Property IsCancellationRequested As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if cancellation has been requested for this token; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationToken.None
  commentId: P:System.Threading.CancellationToken.None
  id: None
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: None
  nameWithType: CancellationToken.None
  fullName: System.Threading.CancellationToken.None
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: None
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 59
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Returns an empty <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> value.</p>\n"
  syntax:
    content: public static CancellationToken None { get; }
    content.vb: Public Shared ReadOnly Property None As CancellationToken
    parameters: []
    return:
      type: System.Threading.CancellationToken
      description: "\n<p>An empty cancellation token. </p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Threading.CancellationToken.WaitHandle
  commentId: P:System.Threading.CancellationToken.WaitHandle
  id: WaitHandle
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: WaitHandle
  nameWithType: CancellationToken.WaitHandle
  fullName: System.Threading.CancellationToken.WaitHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitHandle
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 117
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Gets a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that is signaled when the token is canceled.</p>\n"
  syntax:
    content: public WaitHandle WaitHandle { get; }
    content.vb: Public ReadOnly Property WaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that is signaled when the token is canceled.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.CancellationToken.Equals(System.Object)
  commentId: M:System.Threading.CancellationToken.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: CancellationToken.Equals(Object)
  fullName: System.Threading.CancellationToken.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 398
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Determines whether the current <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> instance is equal to the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object other)
    content.vb: Public Overrides Function Equals(other As Object) As Boolean
    parameters:
    - id: other
      type: System.Object
      description: "\n<p>The other object to which to compare this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>other</em> is a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> and if the two instances are equal; otherwise, <strong>false</strong>. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> values are equal.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  id: Equals(System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Equals(CancellationToken)
  nameWithType: CancellationToken.Equals(CancellationToken)
  fullName: System.Threading.CancellationToken.Equals(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 362
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Determines whether the current <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> instance is equal to the specified token.</p>\n"
  syntax:
    content: public bool Equals(CancellationToken other)
    content.vb: Public Function Equals(other As CancellationToken) As Boolean
    parameters:
    - id: other
      type: System.Threading.CancellationToken
      description: "\n<p>The other <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to which to compare this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the instances are equal; otherwise, <strong>false</strong>. Two tokens are equal if they are associated with the same <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> or if they were both constructed from public <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> constructors and their <xref href=\"System.Threading.CancellationToken.IsCancellationRequested\" data-throw-if-not-resolved=\"false\"></xref> values are equal.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.GetHashCode
  commentId: M:System.Threading.CancellationToken.GetHashCode
  id: GetHashCode
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: CancellationToken.GetHashCode()
  fullName: System.Threading.CancellationToken.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 412
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Serves as a hash function for a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A hash code for the current <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationToken.op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: op_Equality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Equality(CancellationToken, CancellationToken)
  nameWithType: CancellationToken.Equality(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationToken.Equality(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 431
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Determines whether two <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> instances are equal.</p>\n"
  syntax:
    content: public static bool operator ==(CancellationToken left, CancellationToken right)
    content.vb: Public Shared Operator =(left As CancellationToken, right As CancellationToken) As Boolean
    parameters:
    - id: left
      type: System.Threading.CancellationToken
      description: "\n<p>The first instance.</p>\n"
    - id: right
      type: System.Threading.CancellationToken
      description: "\n<p>The second instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the instances are equal; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  commentId: M:System.Threading.CancellationToken.op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  id: op_Inequality(System.Threading.CancellationToken,System.Threading.CancellationToken)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Inequality(CancellationToken, CancellationToken)
  nameWithType: CancellationToken.Inequality(CancellationToken, CancellationToken)
  fullName: System.Threading.CancellationToken.Inequality(System.Threading.CancellationToken, System.Threading.CancellationToken)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 444
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Determines whether two <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> instances are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(CancellationToken left, CancellationToken right)
    content.vb: Public Shared Operator <>(left As CancellationToken, right As CancellationToken) As Boolean
    parameters:
    - id: left
      type: System.Threading.CancellationToken
      description: "\n<p>The first instance.</p>\n"
    - id: right
      type: System.Threading.CancellationToken
      description: "\n<p>The second instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the instances are not equal; otherwise, <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>An associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.CancellationToken.Register(System.Action)
  commentId: M:System.Threading.CancellationToken.Register(System.Action)
  id: Register(System.Action)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action)
  nameWithType: CancellationToken.Register(Action)
  fullName: System.Threading.CancellationToken.Register(System.Action)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 191
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  syntax:
    content: public CancellationTokenRegistration Register(Action callback)
    content.vb: Public Function Register(callback As Action) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action
      description: "\n<p>The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
    return:
      type: System.Threading.CancellationTokenRegistration
      description: "\n<p>The <xref href=\"System.Threading.CancellationTokenRegistration\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used to deregister the callback.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>callback</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  commentId: M:System.Threading.CancellationToken.Register(System.Action,System.Boolean)
  id: Register(System.Action,System.Boolean)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action, Boolean)
  nameWithType: CancellationToken.Register(Action, Boolean)
  fullName: System.Threading.CancellationToken.Register(System.Action, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 226
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  syntax:
    content: public CancellationTokenRegistration Register(Action callback, bool useSynchronizationContext)
    content.vb: Public Function Register(callback As Action, useSynchronizationContext As Boolean) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action
      description: "\n<p>The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
    - id: useSynchronizationContext
      type: System.Boolean
      description: "\n<p>A value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> and use it when invoking the <em>callback</em>.</p>\n"
    return:
      type: System.Threading.CancellationTokenRegistration
      description: "\n<p>The <xref href=\"System.Threading.CancellationTokenRegistration\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used to deregister the callback.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>callback</em> is null.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object)
  id: Register(System.Action{System.Object},System.Object)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action<Object>, Object)
  nameWithType: CancellationToken.Register(Action<Object>, Object)
  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 259
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  syntax:
    content: public CancellationTokenRegistration Register(Action<object> callback, object state)
    content.vb: Public Function Register(callback As Action(Of Object), state As Object) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action{System.Object}
      description: "\n<p>The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>The state to pass to the <em>callback</em> when the delegate is invoked. This may be null.</p>\n"
    return:
      type: System.Threading.CancellationTokenRegistration
      description: "\n<p>The <xref href=\"System.Threading.CancellationTokenRegistration\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used to deregister the callback.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>callback</em> is null.</p>\n"
  nameWithType.vb: CancellationToken.Register(Action(Of Object), Object)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object)
  name.vb: Register(Action(Of Object), Object)
- uid: System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  commentId: M:System.Threading.CancellationToken.Register(System.Action{System.Object},System.Object,System.Boolean)
  id: Register(System.Action{System.Object},System.Object,System.Boolean)
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: Register(Action<Object>, Object, Boolean)
  nameWithType: CancellationToken.Register(Action<Object>, Object, Boolean)
  fullName: System.Threading.CancellationToken.Register(System.Action<System.Object>, System.Object, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Register
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 297
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Registers a delegate that will be called when this <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
  syntax:
    content: public CancellationTokenRegistration Register(Action<object> callback, object state, bool useSynchronizationContext)
    content.vb: Public Function Register(callback As Action(Of Object), state As Object, useSynchronizationContext As Boolean) As CancellationTokenRegistration
    parameters:
    - id: callback
      type: System.Action{System.Object}
      description: "\n<p>The delegate to be executed when the <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> is canceled.</p>\n"
    - id: state
      type: System.Object
      description: "\n<p>The state to pass to the <em>callback</em> when the delegate is invoked. This may be null.</p>\n"
    - id: useSynchronizationContext
      type: System.Boolean
      description: "\n<p>A Boolean value that indicates whether to capture the current <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> and use it when invoking the <em>callback</em>.</p>\n"
    return:
      type: System.Threading.CancellationTokenRegistration
      description: "\n<p>The <xref href=\"System.Threading.CancellationTokenRegistration\" data-throw-if-not-resolved=\"false\"></xref> instance that can be used to deregister the callback.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>callback</em> is null.</p>\n"
  nameWithType.vb: CancellationToken.Register(Action(Of Object), Object, Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.CancellationToken.Register(System.Action(Of System.Object), System.Object, System.Boolean)
  name.vb: Register(Action(Of Object), Object, Boolean)
- uid: System.Threading.CancellationToken.ThrowIfCancellationRequested
  commentId: M:System.Threading.CancellationToken.ThrowIfCancellationRequested
  id: ThrowIfCancellationRequested
  parent: System.Threading.CancellationToken
  langs:
  - csharp
  - vb
  name: ThrowIfCancellationRequested()
  nameWithType: CancellationToken.ThrowIfCancellationRequested()
  fullName: System.Threading.CancellationToken.ThrowIfCancellationRequested()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/CancellationToken.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThrowIfCancellationRequested
    path: src/mscorlib/src/System/Threading/CancellationToken.cs
    startLine: 463
  assemblies:
  - System.Threading.Tasks
  namespace: System.Threading
  summary: "\n<p>Throws a <xref href=\"System.OperationCanceledException\" data-throw-if-not-resolved=\"false\"></xref> if this token has had cancellation requested.</p>\n"
  syntax:
    content: public void ThrowIfCancellationRequested()
    content.vb: Public Sub ThrowIfCancellationRequested
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>The token has had cancellation requested.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The associated <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.WaitHandle
  commentId: T:System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: false
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Threading.CancellationTokenRegistration
  commentId: T:System.Threading.CancellationTokenRegistration
  parent: System.Threading
  isExternal: false
  name: CancellationTokenRegistration
  nameWithType: CancellationTokenRegistration
  fullName: System.Threading.CancellationTokenRegistration
- uid: System.Action{System.Object}
  commentId: T:System.Action{System.Object}
  parent: System
  definition: System.Action`1
  name: Action<Object>
  nameWithType: Action<Object>
  fullName: System.Action<System.Object>
  nameWithType.vb: Action(Of Object)
  fullname.vb: System.Action(Of System.Object)
  name.vb: Action(Of Object)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
