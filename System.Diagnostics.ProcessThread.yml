### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessThread
  commentId: T:System.Diagnostics.ProcessThread
  id: ProcessThread
  parent: System.Diagnostics
  children:
  - System.Diagnostics.ProcessThread.BasePriority
  - System.Diagnostics.ProcessThread.CurrentPriority
  - System.Diagnostics.ProcessThread.Id
  - System.Diagnostics.ProcessThread.IdealProcessor
  - System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - System.Diagnostics.ProcessThread.PriorityLevel
  - System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - System.Diagnostics.ProcessThread.ProcessorAffinity
  - System.Diagnostics.ProcessThread.ResetIdealProcessor
  - System.Diagnostics.ProcessThread.StartAddress
  - System.Diagnostics.ProcessThread.StartTime
  - System.Diagnostics.ProcessThread.ThreadState
  - System.Diagnostics.ProcessThread.TotalProcessorTime
  - System.Diagnostics.ProcessThread.UserProcessorTime
  - System.Diagnostics.ProcessThread.WaitReason
  langs:
  - csharp
  - vb
  name: ProcessThread
  nameWithType: ProcessThread
  fullName: System.Diagnostics.ProcessThread
  type: Class
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessThread
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 13
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Represents an operating system process thread.</p>\n"
  syntax:
    content: public class ProcessThread
    content.vb: Public Class ProcessThread
  seealso:
  - linkId: System.Diagnostics.Process
    commentId: T:System.Diagnostics.Process
  - linkId: System.Diagnostics.Process.Threads
    commentId: P:System.Diagnostics.Process.Threads
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.ProcessThread.BasePriority
  commentId: P:System.Diagnostics.ProcessThread.BasePriority
  id: BasePriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BasePriority
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 36
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the base priority of the thread.</p>\n"
  syntax:
    content: public int BasePriority { get; }
    content.vb: Public ReadOnly Property BasePriority As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The base priority of the thread, which the operating system computes by combining the process priority class with the priority level of the associated thread.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.PriorityBoostEnabled
    commentId: P:System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - linkId: System.Diagnostics.ProcessPriorityClass
    commentId: T:System.Diagnostics.ProcessPriorityClass
  - linkId: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  - linkId: System.Diagnostics.ProcessThread.CurrentPriority
    commentId: P:System.Diagnostics.ProcessThread.CurrentPriority
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  commentId: P:System.Diagnostics.ProcessThread.CurrentPriority
  id: CurrentPriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentPriority
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 46
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the current priority of the thread.</p>\n"
  syntax:
    content: public int CurrentPriority { get; }
    content.vb: Public ReadOnly Property CurrentPriority As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The current priority of the thread, which may deviate from the base priority based on how the operating system is scheduling the thread. The priority may be temporarily boosted for an active thread.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.BasePriority
    commentId: P:System.Diagnostics.ProcessThread.BasePriority
  - linkId: System.Diagnostics.ProcessThread.PriorityBoostEnabled
    commentId: P:System.Diagnostics.ProcessThread.PriorityBoostEnabled
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.Id
  commentId: P:System.Diagnostics.ProcessThread.Id
  id: Id
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Id
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 54
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the unique identifier of the thread.</p>\n"
  syntax:
    content: public int Id { get; }
    content.vb: Public ReadOnly Property Id As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The unique identifier associated with a specific thread.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  commentId: P:System.Diagnostics.ProcessThread.IdealProcessor
  id: IdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IdealProcessor
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 144
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Sets the preferred processor for this thread to run on.</p>\n"
  syntax:
    content: public int IdealProcessor { set; }
    content.vb: Public WriteOnly Property IdealProcessor As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The preferred processor for the thread, used when the system schedules threads, to determine which processor to run the thread on.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The system could not set the thread to start on the specified processor. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  commentId: P:System.Diagnostics.ProcessThread.PriorityBoostEnabled
  id: PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PriorityBoostEnabled
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 63
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets a value indicating whether the operating system should temporarily boost the priority of the associated thread whenever the main window of the thread's process receives the focus.</p>\n"
  syntax:
    content: public bool PriorityBoostEnabled { get; set; }
    content.vb: Public Property PriorityBoostEnabled As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to boost the thread's priority when the user interacts with the process's interface; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The priority boost information could not be retrieved.</p>\n<p>-or-</p>\n<p>The priority boost information could not be set. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessPriorityClass
    commentId: T:System.Diagnostics.ProcessPriorityClass
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  commentId: P:System.Diagnostics.ProcessThread.PriorityLevel
  id: PriorityLevel
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PriorityLevel
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 85
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets or sets the priority level of the thread.</p>\n"
  syntax:
    content: public ThreadPriorityLevel PriorityLevel { get; set; }
    content.vb: Public Property PriorityLevel As ThreadPriorityLevel
    parameters: []
    return:
      type: System.Diagnostics.ThreadPriorityLevel
      description: "\n<p>One of the <xref href=\"System.Diagnostics.ThreadPriorityLevel\" data-throw-if-not-resolved=\"false\"></xref> values, specifying a range that bounds the thread's priority.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread priority level information could not be retrieved. </p>\n<p>-or-</p>\n<p>The thread priority level could not be set.</p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ThreadPriorityLevel
    commentId: T:System.Diagnostics.ThreadPriorityLevel
  - linkId: System.Diagnostics.Process.PriorityClass
    commentId: P:System.Diagnostics.Process.PriorityClass
  - linkId: System.Diagnostics.ProcessThread.BasePriority
    commentId: P:System.Diagnostics.ProcessThread.BasePriority
  - linkId: System.Diagnostics.ProcessThread.CurrentPriority
    commentId: P:System.Diagnostics.ProcessThread.CurrentPriority
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  commentId: P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  id: PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrivilegedProcessorTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 147
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of time that the thread has spent running code inside the operating system core.</p>\n"
  syntax:
    content: public TimeSpan PrivilegedProcessorTime { get; }
    content.vb: Public ReadOnly Property PrivilegedProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> indicating the amount of time that the thread has spent running code inside the operating system core.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.UserProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.UserProcessorTime
  - linkId: System.Diagnostics.ProcessThread.TotalProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.TotalProcessorTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  commentId: P:System.Diagnostics.ProcessThread.ProcessorAffinity
  id: ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ProcessorAffinity
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 148
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Sets the processors on which the associated thread can run.</p>\n"
  syntax:
    content: public IntPtr ProcessorAffinity { set; }
    content.vb: Public WriteOnly Property ProcessorAffinity As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>An <xref href=\"System.IntPtr\" data-throw-if-not-resolved=\"false\"></xref> that points to a set of bits, each of which represents a processor that the thread can run on.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The processor affinity could not be set. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.IdealProcessor
    commentId: P:System.Diagnostics.ProcessThread.IdealProcessor
  modifiers.csharp:
  - public
  - set
  modifiers.vb:
  - Public
  - WriteOnly
- uid: System.Diagnostics.ProcessThread.StartAddress
  commentId: P:System.Diagnostics.ProcessThread.StartAddress
  id: StartAddress
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartAddress
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 106
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the memory address of the function that the operating system called that started this thread.</p>\n"
  syntax:
    content: public IntPtr StartAddress { get; }
    content.vb: Public ReadOnly Property StartAddress As IntPtr
    parameters: []
    return:
      type: System.IntPtr
      description: "\n<p>The thread's starting address, which points to the application-defined function that the thread executes.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.StartTime
  commentId: P:System.Diagnostics.ProcessThread.StartTime
  id: StartTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StartTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 150
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the time that the operating system started the thread.</p>\n"
  syntax:
    content: public DateTime StartTime { get; }
    content.vb: Public ReadOnly Property StartTime As Date
    parameters: []
    return:
      type: System.DateTime
      description: "\n<p>A <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> representing the time that was on the system when the operating system started the thread.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.ThreadState
  commentId: P:System.Diagnostics.ProcessThread.ThreadState
  id: ThreadState
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ThreadState
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 114
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the current state of this thread.</p>\n"
  syntax:
    content: public ThreadState ThreadState { get; }
    content.vb: Public ReadOnly Property ThreadState As ThreadState
    parameters: []
    return:
      type: System.Diagnostics.ThreadState
      description: "\n<p>A <xref href=\"System.Diagnostics.ThreadState\" data-throw-if-not-resolved=\"false\"></xref> that indicates the thread's execution, for example, running, waiting, or terminated.</p>\n"
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  commentId: P:System.Diagnostics.ProcessThread.TotalProcessorTime
  id: TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TotalProcessorTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 152
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the total amount of time that this thread has spent using the processor.</p>\n"
  syntax:
    content: public TimeSpan TotalProcessorTime { get; }
    content.vb: Public ReadOnly Property TotalProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that indicates the amount of time that the thread has had control of the processor.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - linkId: System.Diagnostics.ProcessThread.UserProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.UserProcessorTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  commentId: P:System.Diagnostics.ProcessThread.UserProcessorTime
  id: UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UserProcessorTime
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 153
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the amount of time that the associated thread has spent running code inside the application.</p>\n"
  syntax:
    content: public TimeSpan UserProcessorTime { get; }
    content.vb: Public ReadOnly Property UserProcessorTime As TimeSpan
    parameters: []
    return:
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> indicating the amount of time that the thread has spent running code inside the application, as opposed to inside the operating system core.</p>\n"
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The thread time could not be retrieved. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - linkId: System.Diagnostics.ProcessThread.TotalProcessorTime
    commentId: P:System.Diagnostics.ProcessThread.TotalProcessorTime
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.WaitReason
  commentId: P:System.Diagnostics.ProcessThread.WaitReason
  id: WaitReason
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
  type: Property
  source:
    remote:
      path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WaitReason
    path: src/System.Diagnostics.Process/src/System/Diagnostics/ProcessThread.cs
    startLine: 122
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Gets the reason that the thread is waiting.</p>\n"
  syntax:
    content: public ThreadWaitReason WaitReason { get; }
    content.vb: Public ReadOnly Property WaitReason As ThreadWaitReason
    parameters: []
    return:
      type: System.Diagnostics.ThreadWaitReason
      description: "\n<p>A <xref href=\"System.Diagnostics.ThreadWaitReason\" data-throw-if-not-resolved=\"false\"></xref> representing the reason that the thread is in the wait state.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The thread is not in the wait state. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ThreadWaitReason
    commentId: T:System.Diagnostics.ThreadWaitReason
  - linkId: System.Diagnostics.ProcessThread.ThreadState
    commentId: P:System.Diagnostics.ProcessThread.ThreadState
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  commentId: M:System.Diagnostics.ProcessThread.ResetIdealProcessor
  id: ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  - vb
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
  type: Method
  source:
    remote:
      path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResetIdealProcessor
    path: src/System.Diagnostics.Process/ref/System.Diagnostics.Process.cs
    startLine: 155
  assemblies:
  - System.Diagnostics.Process
  namespace: System.Diagnostics
  summary: "\n<p>Resets the ideal processor for this thread to indicate that there is no single ideal processor. In other words, so that any processor is ideal.</p>\n"
  syntax:
    content: public void ResetIdealProcessor()
    content.vb: Public Sub ResetIdealProcessor
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "\n<p>The ideal processor could not be reset. </p>\n"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "\n<p>The platform is Windows 98 or Windows Millennium Edition. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The process is on a remote computer.</p>\n"
  seealso:
  - linkId: System.Diagnostics.ProcessThread.IdealProcessor
    commentId: P:System.Diagnostics.ProcessThread.IdealProcessor
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ThreadPriorityLevel
  commentId: T:System.Diagnostics.ThreadPriorityLevel
  parent: System.Diagnostics
  isExternal: false
  name: ThreadPriorityLevel
  nameWithType: ThreadPriorityLevel
  fullName: System.Diagnostics.ThreadPriorityLevel
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.ThreadState
  commentId: T:System.Diagnostics.ThreadState
  parent: System.Diagnostics
  isExternal: false
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Diagnostics.ThreadState
- uid: System.Diagnostics.ThreadWaitReason
  commentId: T:System.Diagnostics.ThreadWaitReason
  parent: System.Diagnostics
  isExternal: false
  name: ThreadWaitReason
  nameWithType: ThreadWaitReason
  fullName: System.Diagnostics.ThreadWaitReason
- uid: System.ComponentModel.Win32Exception
  commentId: T:System.ComponentModel.Win32Exception
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.PlatformNotSupportedException
  commentId: T:System.PlatformNotSupportedException
  isExternal: false
  name: PlatformNotSupportedException
  nameWithType: PlatformNotSupportedException
  fullName: System.PlatformNotSupportedException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
