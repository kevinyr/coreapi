### YamlMime:ManagedReference
items:
- uid: System.Threading.Monitor
  commentId: T:System.Threading.Monitor
  id: Monitor
  parent: System.Threading
  children:
  - System.Threading.Monitor.Enter(System.Object)
  - System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  - System.Threading.Monitor.Exit(System.Object)
  - System.Threading.Monitor.IsEntered(System.Object)
  - System.Threading.Monitor.Pulse(System.Object)
  - System.Threading.Monitor.PulseAll(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object)
  - System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  - System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  - System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  - System.Threading.Monitor.Wait(System.Object)
  - System.Threading.Monitor.Wait(System.Object,System.Int32)
  - System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  langs:
  - csharp
  - vb
  name: Monitor
  nameWithType: Monitor
  fullName: System.Threading.Monitor
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Monitor
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 28
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides a mechanism that synchronizes access to objects.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [ComVisible(true)]

      public static class Monitor
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <ComVisible(True)>

      Public Module Monitor
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Threading.Monitor.Enter(System.Object)
  commentId: M:System.Threading.Monitor.Enter(System.Object)
  id: Enter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Enter(Object)
  nameWithType: Monitor.Enter(Object)
  fullName: System.Threading.Monitor.Enter(System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Acquires an exclusive lock on the specified object.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      public static void Enter(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      Public Shared Sub Enter(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the monitor lock. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  commentId: M:System.Threading.Monitor.Enter(System.Object,System.Boolean@)
  id: Enter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Enter(Object, ref Boolean)
  nameWithType: Monitor.Enter(Object, ref Boolean)
  fullName: System.Threading.Monitor.Enter(System.Object, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Enter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 50
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Acquires an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  syntax:
    content: public static void Enter(object obj, ref bool lockTaken)
    content.vb: Public Shared Sub Enter(obj As Object, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock. </p>\n<p>Note   If no exception occurs, the output of this method is always <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  nameWithType.vb: Monitor.Enter(Object, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.Enter(System.Object, ByRef System.Boolean)
  name.vb: Enter(Object, ByRef Boolean)
- uid: System.Threading.Monitor.Exit(System.Object)
  commentId: M:System.Threading.Monitor.Exit(System.Object)
  id: Exit(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Exit(Object)
  nameWithType: Monitor.Exit(Object)
  fullName: System.Threading.Monitor.Exit(System.Object)
  type: Method
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases an exclusive lock on the specified object.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [MethodImpl(MethodImplOptions.InternalCall)]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static void Exit(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      <MethodImpl(MethodImplOptions.InternalCall)>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Sub Exit(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to release the lock. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The current thread does not own the lock for the specified object. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.IsEntered(System.Object)
  commentId: M:System.Threading.Monitor.IsEntered(System.Object)
  id: IsEntered(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: IsEntered(Object)
  nameWithType: Monitor.IsEntered(Object)
  fullName: System.Threading.Monitor.IsEntered(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsEntered
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 160
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Determines whether the current thread holds the lock on the specified object. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool IsEntered(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function IsEntered(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to test. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread holds the lock on <em>obj</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>obj</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Pulse(System.Object)
  commentId: M:System.Threading.Monitor.Pulse(System.Object)
  id: Pulse(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Pulse(Object)
  nameWithType: Monitor.Pulse(Object)
  fullName: System.Threading.Monitor.Pulse(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Pulse
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 225
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies a thread in the waiting queue of a change in the locked object's state.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void Pulse(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub Pulse(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object a thread is waiting for. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.PulseAll(System.Object)
  commentId: M:System.Threading.Monitor.PulseAll(System.Object)
  id: PulseAll(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: PulseAll(Object)
  nameWithType: Monitor.PulseAll(Object)
  fullName: System.Threading.Monitor.PulseAll(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: PulseAll
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 243
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Notifies all waiting threads of a change in the object's state.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void PulseAll(object obj)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub PulseAll(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object that sends the pulse. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object)
  id: TryEnter(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object)
  nameWithType: Monitor.TryEnter(Object)
  fullName: System.Threading.Monitor.TryEnter(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 91
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire an exclusive lock on the specified object.</p>\n"
  syntax:
    content: public static bool TryEnter(object obj)
    content.vb: Public Shared Function TryEnter(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Boolean@)
  id: TryEnter(System.Object,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, ref Boolean)
  nameWithType: Monitor.TryEnter(Object, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 100
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  syntax:
    content: public static void TryEnter(object obj, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  nameWithType.vb: Monitor.TryEnter(Object, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, ByRef System.Boolean)
  name.vb: TryEnter(Object, ByRef Boolean)
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32)
  id: TryEnter(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, Int32)
  nameWithType: Monitor.TryEnter(Object, Int32)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 118
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object.</p>\n"
  syntax:
    content: public static bool TryEnter(object obj, int millisecondsTimeout)
    content.vb: Public Shared Function TryEnter(obj As Object, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait for the lock. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.Int32,System.Boolean@)
  id: TryEnter(System.Object,System.Int32,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, Int32, ref Boolean)
  nameWithType: Monitor.TryEnter(Object, Int32, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 140
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified number of milliseconds, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  syntax:
    content: public static void TryEnter(object obj, int millisecondsTimeout, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, millisecondsTimeout As Integer, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait for the lock. </p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is negative, and not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  nameWithType.vb: Monitor.TryEnter(Object, Int32, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.Int32, ByRef System.Boolean)
  name.vb: TryEnter(Object, Int32, ByRef Boolean)
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan)
  id: TryEnter(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, TimeSpan)
  nameWithType: Monitor.TryEnter(Object, TimeSpan)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 133
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object.</p>\n"
  syntax:
    content: public static bool TryEnter(object obj, TimeSpan timeout)
    content.vb: Public Shared Function TryEnter(obj As Object, timeout As TimeSpan) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread acquires the lock; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  commentId: M:System.Threading.Monitor.TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  id: TryEnter(System.Object,System.TimeSpan,System.Boolean@)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: TryEnter(Object, TimeSpan, ref Boolean)
  nameWithType: Monitor.TryEnter(Object, TimeSpan, ref Boolean)
  fullName: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ref System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryEnter
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 148
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Attempts, for the specified amount of time, to acquire an exclusive lock on the specified object, and atomically sets a value that indicates whether the lock was taken.</p>\n"
  syntax:
    content: public static void TryEnter(object obj, TimeSpan timeout, ref bool lockTaken)
    content.vb: Public Shared Sub TryEnter(obj As Object, timeout As TimeSpan, ByRef lockTaken As Boolean)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to acquire the lock. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>The amount of time to wait for the lock. A value of –1 millisecond specifies an infinite wait.</p>\n"
    - id: lockTaken
      type: System.Boolean
      description: "\n<p>The result of the attempt to acquire the lock, passed by reference. The input must be <strong>false</strong>. The output is <strong>true</strong> if the lock is acquired; otherwise, the output is <strong>false</strong>. The output is set even if an exception occurs during the attempt to acquire the lock.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The input to <em>lockTaken</em> is <strong>true</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of <em>timeout</em> in milliseconds is negative and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  nameWithType.vb: Monitor.TryEnter(Object, TimeSpan, ByRef Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.Monitor.TryEnter(System.Object, System.TimeSpan, ByRef System.Boolean)
  name.vb: TryEnter(Object, TimeSpan, ByRef Boolean)
- uid: System.Threading.Monitor.Wait(System.Object)
  commentId: M:System.Threading.Monitor.Wait(System.Object)
  id: Wait(System.Object)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object)
  nameWithType: Monitor.Wait(Object)
  fullName: System.Threading.Monitor.Wait(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 211
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock.</p>\n"
  syntax:
    content: public static bool Wait(object obj)
    content.vb: Public Shared Function Wait(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the call returned because the caller reacquired the lock for the specified object. This method does not return if the lock is not reacquired.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: "\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Wait(System.Object,System.Int32)
  commentId: M:System.Threading.Monitor.Wait(System.Object,System.Int32)
  id: Wait(System.Object,System.Int32)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object, Int32)
  nameWithType: Monitor.Wait(Object, Int32)
  fullName: System.Threading.Monitor.Wait(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 201
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n"
  syntax:
    content: public static bool Wait(object obj, int millisecondsTimeout)
    content.vb: Public Shared Function Wait(obj As Object, millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait before the thread enters the ready queue. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: "\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>millisecondsTimeout</em> parameter is negative, and is not equal to <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  commentId: M:System.Threading.Monitor.Wait(System.Object,System.TimeSpan)
  id: Wait(System.Object,System.TimeSpan)
  parent: System.Threading.Monitor
  langs:
  - csharp
  - vb
  name: Wait(Object, TimeSpan)
  nameWithType: Monitor.Wait(Object, TimeSpan)
  fullName: System.Threading.Monitor.Wait(System.Object, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/Monitor.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/Monitor.cs
    startLine: 206
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the lock on an object and blocks the current thread until it reacquires the lock. If the specified time-out interval elapses, the thread enters the ready queue.</p>\n"
  syntax:
    content: public static bool Wait(object obj, TimeSpan timeout)
    content.vb: Public Shared Function Wait(obj As Object, timeout As TimeSpan) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object on which to wait. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> representing the amount of time to wait before the thread enters the ready queue. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the lock was reacquired before the specified time elapsed; <strong>false</strong> if the lock was reacquired after the specified time elapsed. The method does not return until the lock is reacquired.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>obj</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Threading.SynchronizationLockException
    commentId: T:System.Threading.SynchronizationLockException
    description: "\n<p>The calling thread does not own the lock for the specified object. </p>\n"
  - type: System.Threading.ThreadInterruptedException
    commentId: T:System.Threading.ThreadInterruptedException
    description: "\n<p>The thread that invokes <strong>Wait</strong> is later interrupted from the waiting state. This happens when another thread calls this thread's <xref href=\"System.Threading.Thread.Interrupt\" data-throw-if-not-resolved=\"false\"></xref> method. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value of the <em>timeout</em> parameter in milliseconds is negative and does not represent <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (–1 millisecond), or is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Threading.Thread
    commentId: T:System.Threading.Thread
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.SynchronizationLockException
  commentId: T:System.Threading.SynchronizationLockException
  isExternal: false
  name: SynchronizationLockException
  nameWithType: SynchronizationLockException
  fullName: System.Threading.SynchronizationLockException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Threading.ThreadInterruptedException
