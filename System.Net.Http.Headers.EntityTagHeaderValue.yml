### YamlMime:ManagedReference
items:
- uid: System.Net.Http.Headers.EntityTagHeaderValue
  commentId: T:System.Net.Http.Headers.EntityTagHeaderValue
  id: EntityTagHeaderValue
  parent: System.Net.Http.Headers
  children:
  - System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)
  - System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)
  - System.Net.Http.Headers.EntityTagHeaderValue.Any
  - System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)
  - System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode
  - System.Net.Http.Headers.EntityTagHeaderValue.IsWeak
  - System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)
  - System.Net.Http.Headers.EntityTagHeaderValue.Tag
  - System.Net.Http.Headers.EntityTagHeaderValue.ToString
  - System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)
  langs:
  - csharp
  - vb
  name: EntityTagHeaderValue
  nameWithType: EntityTagHeaderValue
  fullName: System.Net.Http.Headers.EntityTagHeaderValue
  type: Class
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EntityTagHeaderValue
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 9
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Represents an entity-tag header value.</p>\n"
  syntax:
    content: 'public class EntityTagHeaderValue : ICloneable'
    content.vb: >-
      Public Class EntityTagHeaderValue
          Implements ICloneable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: EntityTagHeaderValue(String)
  nameWithType: EntityTagHeaderValue.EntityTagHeaderValue(String)
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.EntityTagHeaderValue(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 40
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public EntityTagHeaderValue(string tag)
    content.vb: Public Sub New(tag As String)
    parameters:
    - id: tag
      type: System.String
      description: "\n<p>A string that contains an <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: EntityTagHeaderValue(String, Boolean)
  nameWithType: EntityTagHeaderValue.EntityTagHeaderValue(String, Boolean)
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.EntityTagHeaderValue(System.String, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 45
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public EntityTagHeaderValue(string tag, bool isWeak)
    content.vb: Public Sub New(tag As String, isWeak As Boolean)
    parameters:
    - id: tag
      type: System.String
      description: "\n<p>A string that contains an  <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: isWeak
      type: System.Boolean
      description: "\n<p>A value that indicates if this entity-tag header is a weak validator. If the entity-tag header is weak validator, then <em>isWeak</em> should be set to <strong>true</strong>. If the entity-tag header is a strong validator, then <em>isWeak</em> should be set to <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.Headers.EntityTagHeaderValue.Any
  commentId: P:System.Net.Http.Headers.EntityTagHeaderValue.Any
  id: Any
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: Any
  nameWithType: EntityTagHeaderValue.Any
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Any
  type: Property
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Any
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 26
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Gets the entity-tag header value.</p>\n"
  syntax:
    content: public static EntityTagHeaderValue Any { get; }
    content.vb: Public Shared ReadOnly Property Any As EntityTagHeaderValue
    parameters: []
    return:
      type: System.Net.Http.Headers.EntityTagHeaderValue
      description: "\n<p>Returns <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Net.Http.Headers.EntityTagHeaderValue.IsWeak
  commentId: P:System.Net.Http.Headers.EntityTagHeaderValue.IsWeak
  id: IsWeak
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: IsWeak
  nameWithType: EntityTagHeaderValue.IsWeak
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.IsWeak
  type: Property
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsWeak
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 21
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Gets whether the entity-tag is prefaced by a weakness indicator.</p>\n"
  syntax:
    content: public bool IsWeak { get; }
    content.vb: Public ReadOnly Property IsWeak As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the entity-tag is prefaced by a weakness indicator; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.EntityTagHeaderValue.Tag
  commentId: P:System.Net.Http.Headers.EntityTagHeaderValue.Tag
  id: Tag
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: Tag
  nameWithType: EntityTagHeaderValue.Tag
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Tag
  type: Property
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Tag
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 16
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Gets the opaque quoted string. </p>\n"
  syntax:
    content: public string Tag { get; }
    content.vb: Public ReadOnly Property Tag As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An opaque quoted string.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: EntityTagHeaderValue.Equals(Object)
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 85
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Determines whether the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare with the current object.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current object; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode
  id: GetHashCode
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: EntityTagHeaderValue.GetHashCode()
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 98
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Serves as a hash function for an <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A hash code for the current object.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)
  id: Parse(System.String)
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: EntityTagHeaderValue.Parse(String)
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Parse
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 104
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Converts a string to an <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public static EntityTagHeaderValue Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As EntityTagHeaderValue
    parameters:
    - id: input
      type: System.String
      description: "\n<p>A string that represents entity tag header value information.</p>\n"
    return:
      type: System.Net.Http.Headers.EntityTagHeaderValue
      description: "\n<p>Returns <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>An <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is a <strong>null</strong> reference.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>\n<em>input</em> is not valid entity tag header value information.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Net.Http.Headers.EntityTagHeaderValue.ToString
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.ToString
  id: ToString
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: EntityTagHeaderValue.ToString()
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.ToString()
  type: Method
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 76
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Returns a string that represents the current <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>Returns <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>A string that represents the current object.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)
  commentId: M:System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)
  id: TryParse(System.String,System.Net.Http.Headers.EntityTagHeaderValue@)
  parent: System.Net.Http.Headers.EntityTagHeaderValue
  langs:
  - csharp
  - vb
  name: TryParse(String, out EntityTagHeaderValue)
  nameWithType: EntityTagHeaderValue.TryParse(String, out EntityTagHeaderValue)
  fullName: System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String, out System.Net.Http.Headers.EntityTagHeaderValue)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryParse
    path: src/System.Net.Http/src/System/Net/Http/Headers/EntityTagHeaderValue.cs
    startLine: 111
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http.Headers
  summary: "\n<p>Determines whether a string is valid <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> information.</p>\n"
  syntax:
    content: public static bool TryParse(string input, out EntityTagHeaderValue parsedValue)
    content.vb: Public Shared Function TryParse(input As String, ByRef parsedValue As EntityTagHeaderValue) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>The string to validate.</p>\n"
    - id: parsedValue
      type: System.Net.Http.Headers.EntityTagHeaderValue
      description: "\n<p>The <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> version of the string.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if <em>input</em> is valid <xref href=\"System.Net.Http.Headers.EntityTagHeaderValue\" data-throw-if-not-resolved=\"false\"></xref> information; otherwise, <strong>false</strong>.</p>\n"
  nameWithType.vb: EntityTagHeaderValue.TryParse(String, ByRef EntityTagHeaderValue)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Net.Http.Headers.EntityTagHeaderValue.TryParse(System.String, ByRef System.Net.Http.Headers.EntityTagHeaderValue)
  name.vb: TryParse(String, ByRef EntityTagHeaderValue)
references:
- uid: System.Net.Http.Headers
  commentId: N:System.Net.Http.Headers
  isExternal: false
  name: System.Net.Http.Headers
  nameWithType: System.Net.Http.Headers
  fullName: System.Net.Http.Headers
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.Headers.EntityTagHeaderValue
  commentId: T:System.Net.Http.Headers.EntityTagHeaderValue
  parent: System.Net.Http.Headers
  isExternal: false
  name: EntityTagHeaderValue
  nameWithType: EntityTagHeaderValue
  fullName: System.Net.Http.Headers.EntityTagHeaderValue
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
