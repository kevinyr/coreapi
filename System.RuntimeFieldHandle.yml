### YamlMime:ManagedReference
items:
- uid: System.RuntimeFieldHandle
  commentId: T:System.RuntimeFieldHandle
  id: RuntimeFieldHandle
  parent: System
  children:
  - System.RuntimeFieldHandle.Equals(System.Object)
  - System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)
  - System.RuntimeFieldHandle.GetHashCode
  - System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  - System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  langs:
  - csharp
  - vb
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RuntimeFieldHandle
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1468
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a field using an internal metadata token.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public struct RuntimeFieldHandle : ISerializable
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public Structure RuntimeFieldHandle
          Implements ISerializable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.RuntimeFieldHandle.Equals(System.Object)
  commentId: M:System.RuntimeFieldHandle.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.RuntimeFieldHandle
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: RuntimeFieldHandle.Equals(Object)
  fullName: System.RuntimeFieldHandle.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1514
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the current instance is equal to the specified object.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public override bool Equals(object obj)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The object to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is a <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> and equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)
  commentId: M:System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)
  id: Equals(System.RuntimeFieldHandle)
  parent: System.RuntimeFieldHandle
  langs:
  - csharp
  - vb
  name: Equals(RuntimeFieldHandle)
  nameWithType: RuntimeFieldHandle.Equals(RuntimeFieldHandle)
  fullName: System.RuntimeFieldHandle.Equals(System.RuntimeFieldHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1526
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether the current instance is equal to the specified <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public bool Equals(RuntimeFieldHandle handle)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Function Equals(handle As RuntimeFieldHandle) As Boolean
    parameters:
    - id: handle
      type: System.RuntimeFieldHandle
      description: "\n<p>The <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to the current instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>handle</em> is equal to the value of the current instance; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.RuntimeFieldHandle.GetHashCode
  commentId: M:System.RuntimeFieldHandle.GetHashCode
  id: GetHashCode
  parent: System.RuntimeFieldHandle
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: RuntimeFieldHandle.GetHashCode()
  fullName: System.RuntimeFieldHandle.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1508
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer that is the hash code for this instance.</p>\n"
  overridden: System.ValueType.GetHashCode
  seealso:
  - linkId: System.ValueType.GetHashCode
    commentId: M:System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  commentId: M:System.RuntimeFieldHandle.op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  id: op_Equality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  parent: System.RuntimeFieldHandle
  langs:
  - csharp
  - vb
  name: Equality(RuntimeFieldHandle, RuntimeFieldHandle)
  nameWithType: RuntimeFieldHandle.Equality(RuntimeFieldHandle, RuntimeFieldHandle)
  fullName: System.RuntimeFieldHandle.Equality(System.RuntimeFieldHandle, System.RuntimeFieldHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1533
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structures are equal.</p>\n"
  syntax:
    content: public static bool operator ==(RuntimeFieldHandle left, RuntimeFieldHandle right)
    content.vb: Public Shared Operator =(left As RuntimeFieldHandle, right As RuntimeFieldHandle) As Boolean
    parameters:
    - id: left
      type: System.RuntimeFieldHandle
      description: "\n<p>The <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>right</em>.</p>\n"
    - id: right
      type: System.RuntimeFieldHandle
      description: "\n<p>The <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>left</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  commentId: M:System.RuntimeFieldHandle.op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  id: op_Inequality(System.RuntimeFieldHandle,System.RuntimeFieldHandle)
  parent: System.RuntimeFieldHandle
  langs:
  - csharp
  - vb
  name: Inequality(RuntimeFieldHandle, RuntimeFieldHandle)
  nameWithType: RuntimeFieldHandle.Inequality(RuntimeFieldHandle, RuntimeFieldHandle)
  fullName: System.RuntimeFieldHandle.Inequality(System.RuntimeFieldHandle, System.RuntimeFieldHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1538
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> structures are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(RuntimeFieldHandle left, RuntimeFieldHandle right)
    content.vb: Public Shared Operator <>(left As RuntimeFieldHandle, right As RuntimeFieldHandle) As Boolean
    parameters:
    - id: left
      type: System.RuntimeFieldHandle
      description: "\n<p>The <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>right</em>.</p>\n"
    - id: right
      type: System.RuntimeFieldHandle
      description: "\n<p>The <xref href=\"System.RuntimeFieldHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>left</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> is not equal to <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.RuntimeFieldHandle
  commentId: T:System.RuntimeFieldHandle
  parent: System
  isExternal: false
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
