### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  commentId: T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  id: IEnumVARIANT
  parent: System.Runtime.InteropServices.ComTypes
  children:
  - System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone
  - System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)
  - System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset
  - System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)
  langs:
  - csharp
  - vb
  name: IEnumVARIANT
  nameWithType: IEnumVARIANT
  fullName: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  type: Interface
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IEnumVARIANT
    path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
    startLine: 17
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices.ComTypes
  summary: "\n<p>Manages the definition of the <strong>IEnumVARIANT</strong> interface.</p>\n"
  syntax:
    content: >-
      [Guid("00020404-0000-0000-C000-000000000046")]

      [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]

      [ComImport]

      public interface IEnumVARIANT
    content.vb: >-
      <Guid("00020404-0000-0000-C000-000000000046")>

      <InterfaceType(ComInterfaceType.InterfaceIsIUnknown)>

      <ComImport>

      Public Interface IEnumVARIANT
  attributes:
  - type: System.Runtime.InteropServices.InterfaceTypeAttribute
    ctor: System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)
    arguments:
    - type: System.Runtime.InteropServices.ComInterfaceType
      value: 1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone
  commentId: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone
  id: Clone
  parent: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: IEnumVARIANT.Clone()
  fullName: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
    startLine: 31
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices.ComTypes
  summary: "\n<p>Creates a new enumerator that contains the same enumeration state as the current one.</p>\n"
  syntax:
    content: IEnumVARIANT Clone()
    content.vb: Function Clone As IEnumVARIANT
    return:
      type: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
      description: "\n<p>An <xref href=\"System.Runtime.InteropServices.ComTypes.IEnumVARIANT\" data-throw-if-not-resolved=\"false\"></xref>  reference to the newly created enumerator.</p>\n"
- uid: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)
  commentId: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)
  id: Next(System.Int32,System.Object[],System.IntPtr)
  parent: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  langs:
  - csharp
  - vb
  name: Next(Int32, Object[], IntPtr)
  nameWithType: IEnumVARIANT.Next(Int32, Object[], IntPtr)
  fullName: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32, System.Object[], System.IntPtr)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Next
    path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
    startLine: 22
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices.ComTypes
  summary: "\n<p>Retrieves a specified number of items in the enumeration sequence.</p>\n"
  syntax:
    content: >-
      [PreserveSig]

      int Next(int celt, [MarshalAs(UnmanagedType.LPArray, SizeParamIndex = (short)0), Out] object[] rgVar, IntPtr pceltFetched)
    content.vb: >-
      <PreserveSig>

      Function Next(celt As Integer, rgVar As Object(), pceltFetched As IntPtr) As Integer
    parameters:
    - id: celt
      type: System.Int32
      description: "\n<p>The number of elements to return in <em>rgelt</em>. </p>\n"
    - id: rgVar
      type: System.Object[]
      description: "\n<p>When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.</p>\n"
      attributes:
      - type: System.Runtime.InteropServices.MarshalAsAttribute
        ctor: System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)
        arguments:
        - type: System.Runtime.InteropServices.UnmanagedType
          value: 42
        namedArguments:
        - name: SizeParamIndex
          type: System.Int16
          value: 0
      - type: System.Runtime.InteropServices.OutAttribute
        ctor: System.Runtime.InteropServices.OutAttribute.#ctor
        arguments: []
    - id: pceltFetched
      type: System.IntPtr
      description: "\n<p>When this method returns, contains a reference to the actual number of elements enumerated in <em>rgelt</em>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>\n<strong>S_OK</strong> if the <em>pceltFetched</em> parameter equals the <em>celt</em> parameter; otherwise, <strong>S_FALSE</strong>.</p>\n"
  nameWithType.vb: IEnumVARIANT.Next(Int32, Object(), IntPtr)
  fullName.vb: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32, System.Object(), System.IntPtr)
  name.vb: Next(Int32, Object(), IntPtr)
- uid: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset
  commentId: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset
  id: Reset
  parent: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: IEnumVARIANT.Reset()
  fullName: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reset
    path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
    startLine: 28
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices.ComTypes
  summary: "\n<p>Resets the enumeration sequence to the beginning.</p>\n"
  syntax:
    content: >-
      [PreserveSig]

      int Reset()
    content.vb: >-
      <PreserveSig>

      Function Reset As Integer
    return:
      type: System.Int32
      description: "\n<p>An HRESULT with the value <strong>S_OK</strong>.</p>\n"
- uid: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)
  commentId: M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)
  id: Skip(System.Int32)
  parent: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  langs:
  - csharp
  - vb
  name: Skip(Int32)
  nameWithType: IEnumVARIANT.Skip(Int32)
  fullName: System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Skip
    path: src/mscorlib/src/System/Runtime/InteropServices/ComTypes/IEnumVARIANT.cs
    startLine: 25
  assemblies:
  - System.Runtime.InteropServices
  namespace: System.Runtime.InteropServices.ComTypes
  summary: "\n<p>Skips a specified number of items in the enumeration sequence.</p>\n"
  syntax:
    content: >-
      [PreserveSig]

      int Skip(int celt)
    content.vb: >-
      <PreserveSig>

      Function Skip(celt As Integer) As Integer
    parameters:
    - id: celt
      type: System.Int32
      description: "\n<p>The number of elements to skip in the enumeration. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>\n<strong>S_OK</strong> if the number of elements skipped equals <em>celt</em> parameter; otherwise, <strong>S_FALSE</strong>.</p>\n"
references:
- uid: System.Runtime.InteropServices.ComTypes
  commentId: N:System.Runtime.InteropServices.ComTypes
  isExternal: false
  name: System.Runtime.InteropServices.ComTypes
  nameWithType: System.Runtime.InteropServices.ComTypes
  fullName: System.Runtime.InteropServices.ComTypes
- uid: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  commentId: T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT
  parent: System.Runtime.InteropServices.ComTypes
  isExternal: false
  name: IEnumVARIANT
  nameWithType: IEnumVARIANT
  fullName: System.Runtime.InteropServices.ComTypes.IEnumVARIANT
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
