### YamlMime:ManagedReference
items:
- uid: System.Progress`1
  commentId: T:System.Progress`1
  id: Progress`1
  parent: System
  children:
  - System.Progress`1.#ctor
  - System.Progress`1.#ctor(System.Action{`0})
  - System.Progress`1.OnReport(`0)
  - System.Progress`1.ProgressChanged
  - System.Progress`1.System#IProgress{T}#Report(`0)
  langs:
  - csharp
  - vb
  name: Progress<T>
  nameWithType: Progress<T>
  fullName: System.Progress<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Progress.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Progress
    path: src/mscorlib/src/System/Progress.cs
    startLine: 33
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Provides an <xref href=\"System.IProgress`1\" data-throw-if-not-resolved=\"false\"></xref> that invokes callbacks for each reported progress value.</p>\n"
  syntax:
    content: 'public class Progress<T> : IProgress<T>'
    content.vb: >-
      Public Class Progress(Of T)
          Implements IProgress(Of T)
    typeParameters:
    - id: T
      description: "\n<p>Specifies the type of the progress report value.</p>\n"
  inheritance:
  - System.Object
  implements:
  - System.IProgress{{T}}
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: Progress(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Progress(Of T)
  name.vb: Progress(Of T)
- uid: System.Progress`1.#ctor
  commentId: M:System.Progress`1.#ctor
  id: '#ctor'
  parent: System.Progress`1
  langs:
  - csharp
  - vb
  name: Progress()
  nameWithType: Progress<T>.Progress()
  fullName: System.Progress<T>.Progress()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Progress.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Progress.cs
    startLine: 43
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes the <xref href=\"System.Progress`1\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public Progress()
    content.vb: Public Sub New
  nameWithType.vb: Progress(Of T).Progress()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Progress(Of T).Progress()
- uid: System.Progress`1.#ctor(System.Action{`0})
  commentId: M:System.Progress`1.#ctor(System.Action{`0})
  id: '#ctor(System.Action{`0})'
  parent: System.Progress`1
  langs:
  - csharp
  - vb
  name: Progress(Action<T>)
  nameWithType: Progress<T>.Progress(Action<T>)
  fullName: System.Progress<T>.Progress(System.Action<T>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Progress.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Progress.cs
    startLine: 63
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Initializes the <xref href=\"System.Progress`1\" data-throw-if-not-resolved=\"false\"></xref> object with the specified callback.</p>\n"
  syntax:
    content: public Progress(Action<T> handler)
    content.vb: Public Sub New(handler As Action(Of T))
    parameters:
    - id: handler
      type: System.Action{{T}}
      description: "\n<p>A handler to invoke for each reported progress value. This handler will be invoked in addition to any delegates registered with the <xref href=\"System.Progress`1.ProgressChanged\" data-throw-if-not-resolved=\"false\"></xref> event. Depending on the <xref href=\"System.Threading.SynchronizationContext\" data-throw-if-not-resolved=\"false\"></xref> instance captured by the <xref href=\"System.Progress`1\" data-throw-if-not-resolved=\"false\"></xref> at construction, it is possible that this handler instance could be invoked concurrently with itself.</p>\n"
  nameWithType.vb: Progress(Of T).Progress(Action(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Progress(Of T).Progress(System.Action(Of T))
  name.vb: Progress(Action(Of T))
- uid: System.Progress`1.ProgressChanged
  commentId: E:System.Progress`1.ProgressChanged
  id: ProgressChanged
  parent: System.Progress`1
  langs:
  - csharp
  - vb
  name: ProgressChanged
  nameWithType: Progress<T>.ProgressChanged
  fullName: System.Progress<T>.ProgressChanged
  type: Event
  source:
    remote:
      path: src/mscorlib/src/System/Progress.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ProgressChanged
    path: src/mscorlib/src/System/Progress.cs
    startLine: 74
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Raised for each reported progress value.</p>\n"
  syntax:
    content: public event EventHandler<T> ProgressChanged
    content.vb: Public Event ProgressChanged As EventHandler(Of T)
    return:
      type: System.EventHandler{{T}}
  nameWithType.vb: Progress(Of T).ProgressChanged
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Progress(Of T).ProgressChanged
- uid: System.Progress`1.OnReport(`0)
  commentId: M:System.Progress`1.OnReport(`0)
  id: OnReport(`0)
  parent: System.Progress`1
  langs:
  - csharp
  - vb
  name: OnReport(T)
  nameWithType: Progress<T>.OnReport(T)
  fullName: System.Progress<T>.OnReport(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Progress.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnReport
    path: src/mscorlib/src/System/Progress.cs
    startLine: 78
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Reports a progress change.</p>\n"
  syntax:
    content: protected virtual void OnReport(T value)
    content.vb: Protected Overridable Sub OnReport(value As T)
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value of the updated progress.</p>\n"
  nameWithType.vb: Progress(Of T).OnReport(T)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Progress(Of T).OnReport(T)
- uid: System.Progress`1.System#IProgress{T}#Report(`0)
  commentId: M:System.Progress`1.System#IProgress{T}#Report(`0)
  id: System#IProgress{T}#Report(`0)
  isEii: true
  parent: System.Progress`1
  langs:
  - csharp
  - vb
  name: IProgress<T>.Report(T)
  nameWithType: Progress<T>.IProgress<T>.Report(T)
  fullName: System.Progress<T>.System.IProgress<T>.Report(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Progress.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IProgress<T>.Report
    path: src/mscorlib/src/System/Progress.cs
    startLine: 95
  assemblies:
  - System.Runtime.Extensions
  namespace: System
  summary: "\n<p>Reports a progress change.</p>\n"
  syntax:
    content: void IProgress<T>.Report(T value)
    content.vb: Sub System.IProgress<T>.Report(value As T) Implements IProgress(Of T).Report
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value of the updated progress.</p>\n"
  implements:
  - System.IProgress{{T}}.Report({T})
  nameWithType.vb: Progress(Of T).System.IProgress<T>.Report(T)
  fullName.vb: System.Progress(Of T).System.IProgress<T>.Report(T)
  name.vb: System.IProgress<T>.Report(T)
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IProgress{{T}}
  commentId: T:System.IProgress{`0}
  parent: System
  definition: System.IProgress`1
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullname.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IProgress`1
  commentId: T:System.IProgress`1
  isExternal: false
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullname.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: false
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullname.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{{T}}
  commentId: T:System.EventHandler{`0}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<T>
  nameWithType: EventHandler<T>
  fullName: System.EventHandler<T>
  nameWithType.vb: EventHandler(Of T)
  fullname.vb: System.EventHandler(Of T)
  name.vb: EventHandler(Of T)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: false
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.IProgress{{T}}.Report({T})
  commentId: M:System.IProgress{`0}.Report(`0)
  parent: System.IProgress{{T}}
  definition: System.IProgress`1.Report(`0)
  name: Report(T)
  nameWithType: IProgress<T>.Report(T)
  fullName: System.IProgress<T>.Report(T)
  nameWithType.vb: IProgress(Of T).Report(T)
  fullname.vb: System.IProgress(Of T).Report(T)
  spec.csharp:
  - uid: System.IProgress`1.Report(`0)
    name: Report
    nameWithType: IProgress<T>.Report
    fullName: System.IProgress<T>.Report
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IProgress`1.Report(`0)
    name: Report
    nameWithType: IProgress(Of T).Report
    fullName: System.IProgress(Of T).Report
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IProgress`1.Report(`0)
  commentId: M:System.IProgress`1.Report(`0)
  isExternal: true
  name: Report(T)
  nameWithType: IProgress<T>.Report(T)
  fullName: System.IProgress<T>.Report(T)
  nameWithType.vb: IProgress(Of T).Report(T)
  fullname.vb: System.IProgress(Of T).Report(T)
  spec.csharp:
  - uid: System.IProgress`1.Report(`0)
    name: Report
    nameWithType: IProgress<T>.Report
    fullName: System.IProgress<T>.Report
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IProgress`1.Report(`0)
    name: Report
    nameWithType: IProgress(Of T).Report
    fullName: System.IProgress(Of T).Report
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
