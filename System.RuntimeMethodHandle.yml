### YamlMime:ManagedReference
items:
- uid: System.RuntimeMethodHandle
  commentId: T:System.RuntimeMethodHandle
  id: RuntimeMethodHandle
  parent: System
  children:
  - System.RuntimeMethodHandle.Equals(System.Object)
  - System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)
  - System.RuntimeMethodHandle.GetHashCode
  - System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  - System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  langs:
  - csharp
  - vb
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RuntimeMethodHandle
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 925
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>\n<xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> is a handle to the internal metadata representation of a method.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public struct RuntimeMethodHandle : ISerializable
    content.vb: >-
      <ComVisible(True)>

      Public Structure RuntimeMethodHandle
          Implements ISerializable
  inheritedMembers:
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
- uid: System.RuntimeMethodHandle.Equals(System.Object)
  commentId: M:System.RuntimeMethodHandle.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.RuntimeMethodHandle
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: RuntimeMethodHandle.Equals(Object)
  fullName: System.RuntimeMethodHandle.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1007
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether this instance is equal to a specified object.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public override bool Equals(object obj)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>A <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to compare to this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>obj</em> is a <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> and equal to the value of this instance; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.ValueType.Equals(System.Object)
  seealso:
  - linkId: System.RuntimeMethodHandle.Value
    commentId: P:System.RuntimeMethodHandle.Value
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)
  commentId: M:System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)
  id: Equals(System.RuntimeMethodHandle)
  parent: System.RuntimeMethodHandle
  langs:
  - csharp
  - vb
  name: Equals(RuntimeMethodHandle)
  nameWithType: RuntimeMethodHandle.Equals(RuntimeMethodHandle)
  fullName: System.RuntimeMethodHandle.Equals(System.RuntimeMethodHandle)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1029
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether this instance is equal to a specified <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      [SecuritySafeCritical]

      public bool Equals(RuntimeMethodHandle handle)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      <SecuritySafeCritical>

      Public Function Equals(handle As RuntimeMethodHandle) As Boolean
    parameters:
    - id: handle
      type: System.RuntimeMethodHandle
      description: "\n<p>A <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to this instance.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>handle</em> is equal to the value of this instance; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.RuntimeMethodHandle.Value
    commentId: P:System.RuntimeMethodHandle.Value
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.RuntimeMethodHandle.GetHashCode
  commentId: M:System.RuntimeMethodHandle.GetHashCode
  id: GetHashCode
  parent: System.RuntimeMethodHandle
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: RuntimeMethodHandle.GetHashCode()
  fullName: System.RuntimeMethodHandle.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1001
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the hash code for this instance.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public override int GetHashCode()
    content.vb: >-
      <SecuritySafeCritical>

      Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.ValueType.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  commentId: M:System.RuntimeMethodHandle.op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  id: op_Equality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  parent: System.RuntimeMethodHandle
  langs:
  - csharp
  - vb
  name: Equality(RuntimeMethodHandle, RuntimeMethodHandle)
  nameWithType: RuntimeMethodHandle.Equality(RuntimeMethodHandle, RuntimeMethodHandle)
  fullName: System.RuntimeMethodHandle.Equality(System.RuntimeMethodHandle, System.RuntimeMethodHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1019
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two instances of <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> are equal.</p>\n"
  syntax:
    content: public static bool operator ==(RuntimeMethodHandle left, RuntimeMethodHandle right)
    content.vb: Public Shared Operator =(left As RuntimeMethodHandle, right As RuntimeMethodHandle) As Boolean
    parameters:
    - id: left
      type: System.RuntimeMethodHandle
      description: "\n<p>A <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>right</em>.</p>\n"
    - id: right
      type: System.RuntimeMethodHandle
      description: "\n<p>A <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>left</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is equal to the value of <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  commentId: M:System.RuntimeMethodHandle.op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  id: op_Inequality(System.RuntimeMethodHandle,System.RuntimeMethodHandle)
  parent: System.RuntimeMethodHandle
  langs:
  - csharp
  - vb
  name: Inequality(RuntimeMethodHandle, RuntimeMethodHandle)
  nameWithType: RuntimeMethodHandle.Inequality(RuntimeMethodHandle, RuntimeMethodHandle)
  fullName: System.RuntimeMethodHandle.Inequality(System.RuntimeMethodHandle, System.RuntimeMethodHandle)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/RuntimeHandles.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/RuntimeHandles.cs
    startLine: 1024
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Indicates whether two instances of <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(RuntimeMethodHandle left, RuntimeMethodHandle right)
    content.vb: Public Shared Operator <>(left As RuntimeMethodHandle, right As RuntimeMethodHandle) As Boolean
    parameters:
    - id: left
      type: System.RuntimeMethodHandle
      description: "\n<p>A <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>right</em>.</p>\n"
    - id: right
      type: System.RuntimeMethodHandle
      description: "\n<p>A <xref href=\"System.RuntimeMethodHandle\" data-throw-if-not-resolved=\"false\"></xref> to compare to <em>left</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the value of <em>left</em> is unequal to the value of <em>right</em>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.RuntimeMethodHandle
  commentId: T:System.RuntimeMethodHandle
  parent: System
  isExternal: false
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
