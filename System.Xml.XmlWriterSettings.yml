### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlWriterSettings
  commentId: T:System.Xml.XmlWriterSettings
  id: XmlWriterSettings
  parent: System.Xml
  children:
  - System.Xml.XmlWriterSettings.#ctor
  - System.Xml.XmlWriterSettings.Async
  - System.Xml.XmlWriterSettings.CheckCharacters
  - System.Xml.XmlWriterSettings.Clone
  - System.Xml.XmlWriterSettings.CloseOutput
  - System.Xml.XmlWriterSettings.ConformanceLevel
  - System.Xml.XmlWriterSettings.Encoding
  - System.Xml.XmlWriterSettings.Indent
  - System.Xml.XmlWriterSettings.IndentChars
  - System.Xml.XmlWriterSettings.NamespaceHandling
  - System.Xml.XmlWriterSettings.NewLineChars
  - System.Xml.XmlWriterSettings.NewLineHandling
  - System.Xml.XmlWriterSettings.NewLineOnAttributes
  - System.Xml.XmlWriterSettings.OmitXmlDeclaration
  - System.Xml.XmlWriterSettings.Reset
  - System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  langs:
  - csharp
  - vb
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlWriterSettings
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 475
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Specifies a set of features to support on the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> object created by the <xref href=\"System.Xml.XmlWriter.Create(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public sealed class XmlWriterSettings
    content.vb: Public NotInheritable Class XmlWriterSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.XmlWriterSettings.#ctor
  commentId: M:System.Xml.XmlWriterSettings.#ctor
  id: '#ctor'
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: XmlWriterSettings()
  nameWithType: XmlWriterSettings.XmlWriterSettings()
  fullName: System.Xml.XmlWriterSettings.XmlWriterSettings()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 477
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public XmlWriterSettings()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Async
  commentId: P:System.Xml.XmlWriterSettings.Async
  id: Async
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Async
  nameWithType: XmlWriterSettings.Async
  fullName: System.Xml.XmlWriterSettings.Async
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 478
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether asynchronous <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> methods can be used on a particular <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public bool Async { get; set; }
    content.vb: Public Property Async As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if asynchronous methods can be used; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.CheckCharacters
  commentId: P:System.Xml.XmlWriterSettings.CheckCharacters
  id: CheckCharacters
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: CheckCharacters
  nameWithType: XmlWriterSettings.CheckCharacters
  fullName: System.Xml.XmlWriterSettings.CheckCharacters
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CheckCharacters
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 479
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether the XML writer should check to ensure that all characters in the document conform to the \"2.2 Characters\" section of the W3C <a href=\"http://www.w3.org/TR/REC-xml/#charsets\">XML 1.0 Recommendation</a>.</p>\n"
  syntax:
    content: public bool CheckCharacters { get; set; }
    content.vb: Public Property CheckCharacters As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to do character checking; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.CloseOutput
  commentId: P:System.Xml.XmlWriterSettings.CloseOutput
  id: CloseOutput
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: CloseOutput
  nameWithType: XmlWriterSettings.CloseOutput
  fullName: System.Xml.XmlWriterSettings.CloseOutput
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CloseOutput
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 480
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> should also close the underlying stream or <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref> when the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  syntax:
    content: public bool CloseOutput { get; set; }
    content.vb: Public Property CloseOutput As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to also close the underlying stream or <xref href=\"System.IO.TextWriter\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.ConformanceLevel
  commentId: P:System.Xml.XmlWriterSettings.ConformanceLevel
  id: ConformanceLevel
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: ConformanceLevel
  nameWithType: XmlWriterSettings.ConformanceLevel
  fullName: System.Xml.XmlWriterSettings.ConformanceLevel
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ConformanceLevel
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 481
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the level of conformance that the XML writer checks the XML output for.</p>\n"
  syntax:
    content: public ConformanceLevel ConformanceLevel { get; set; }
    content.vb: Public Property ConformanceLevel As ConformanceLevel
    parameters: []
    return:
      type: System.Xml.ConformanceLevel
      description: "\n<p>One of the enumeration values that specifies the level of conformance (document, fragment, or automatic detection). The default is <xref href=\"System.Xml.ConformanceLevel.Document\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Encoding
  commentId: P:System.Xml.XmlWriterSettings.Encoding
  id: Encoding
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: XmlWriterSettings.Encoding
  fullName: System.Xml.XmlWriterSettings.Encoding
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Encoding
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 482
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the type of text encoding to use.</p>\n"
  syntax:
    content: public Encoding Encoding { get; set; }
    content.vb: Public Property Encoding As Encoding
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\n<p>The text encoding to use. The default is <strong>Encoding.UTF8</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Indent
  commentId: P:System.Xml.XmlWriterSettings.Indent
  id: Indent
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Indent
  nameWithType: XmlWriterSettings.Indent
  fullName: System.Xml.XmlWriterSettings.Indent
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Indent
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 483
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to indent elements.</p>\n"
  syntax:
    content: public bool Indent { get; set; }
    content.vb: Public Property Indent As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to write individual elements on new lines and indent; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.IndentChars
  commentId: P:System.Xml.XmlWriterSettings.IndentChars
  id: IndentChars
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: IndentChars
  nameWithType: XmlWriterSettings.IndentChars
  fullName: System.Xml.XmlWriterSettings.IndentChars
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IndentChars
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 484
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the character string to use when indenting. This setting is used when the <xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref> property is set to <strong>true</strong>.</p>\n"
  syntax:
    content: public string IndentChars { get; set; }
    content.vb: Public Property IndentChars As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The character string to use when indenting. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is two spaces.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value assigned to the <xref href=\"System.Xml.XmlWriterSettings.IndentChars\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NamespaceHandling
  commentId: P:System.Xml.XmlWriterSettings.NamespaceHandling
  id: NamespaceHandling
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NamespaceHandling
  nameWithType: XmlWriterSettings.NamespaceHandling
  fullName: System.Xml.XmlWriterSettings.NamespaceHandling
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceHandling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 485
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.</p>\n"
  syntax:
    content: public NamespaceHandling NamespaceHandling { get; set; }
    content.vb: Public Property NamespaceHandling As NamespaceHandling
    parameters: []
    return:
      type: System.Xml.NamespaceHandling
      description: "\n<p>The <xref href=\"System.Xml.NamespaceHandling\" data-throw-if-not-resolved=\"false\"></xref> enumeration used to specify whether to remove duplicate namespace declarations in the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NewLineChars
  commentId: P:System.Xml.XmlWriterSettings.NewLineChars
  id: NewLineChars
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NewLineChars
  nameWithType: XmlWriterSettings.NewLineChars
  fullName: System.Xml.XmlWriterSettings.NewLineChars
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLineChars
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 486
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets the character string to use for line breaks.</p>\n"
  syntax:
    content: public string NewLineChars { get; set; }
    content.vb: Public Property NewLineChars As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The character string to use for line breaks. This can be set to any string value. However, to ensure valid XML, you should specify only valid white space characters, such as space characters, tabs, carriage returns, or line feeds. The default is <code>\\r\\n</code> (carriage return, new line).</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value assigned to the <xref href=\"System.Xml.XmlWriterSettings.NewLineChars\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NewLineHandling
  commentId: P:System.Xml.XmlWriterSettings.NewLineHandling
  id: NewLineHandling
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NewLineHandling
  nameWithType: XmlWriterSettings.NewLineHandling
  fullName: System.Xml.XmlWriterSettings.NewLineHandling
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLineHandling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 487
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to normalize line breaks in the output.</p>\n"
  syntax:
    content: public NewLineHandling NewLineHandling { get; set; }
    content.vb: Public Property NewLineHandling As NewLineHandling
    parameters: []
    return:
      type: System.Xml.NewLineHandling
      description: "\n<p>One of the <xref href=\"System.Xml.NewLineHandling\" data-throw-if-not-resolved=\"false\"></xref> values. The default is <xref href=\"System.Xml.NewLineHandling.Replace\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.NewLineOnAttributes
  commentId: P:System.Xml.XmlWriterSettings.NewLineOnAttributes
  id: NewLineOnAttributes
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: NewLineOnAttributes
  nameWithType: XmlWriterSettings.NewLineOnAttributes
  fullName: System.Xml.XmlWriterSettings.NewLineOnAttributes
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NewLineOnAttributes
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 488
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to write attributes on a new line.</p>\n"
  syntax:
    content: public bool NewLineOnAttributes { get; set; }
    content.vb: Public Property NewLineOnAttributes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to write attributes on individual lines; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n<p>This setting has no effect when the <xref href=\"System.Xml.XmlWriterSettings.Indent\" data-throw-if-not-resolved=\"false\"></xref> property value is <strong>false</strong>.</p>\n<p>When <xref href=\"System.Xml.XmlWriterSettings.NewLineOnAttributes\" data-throw-if-not-resolved=\"false\"></xref> is set to <strong>true</strong>, each attribute is pre-pended with a new line and one extra level of indentation.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.OmitXmlDeclaration
  commentId: P:System.Xml.XmlWriterSettings.OmitXmlDeclaration
  id: OmitXmlDeclaration
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: OmitXmlDeclaration
  nameWithType: XmlWriterSettings.OmitXmlDeclaration
  fullName: System.Xml.XmlWriterSettings.OmitXmlDeclaration
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: OmitXmlDeclaration
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 489
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value indicating whether to omit an XML declaration.</p>\n"
  syntax:
    content: public bool OmitXmlDeclaration { get; set; }
    content.vb: Public Property OmitXmlDeclaration As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to omit the XML declaration; otherwise, <strong>false</strong>. The default is <strong>false</strong>, an XML declaration is written.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  commentId: P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  id: WriteEndDocumentOnClose
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: WriteEndDocumentOnClose
  nameWithType: XmlWriterSettings.WriteEndDocumentOnClose
  fullName: System.Xml.XmlWriterSettings.WriteEndDocumentOnClose
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteEndDocumentOnClose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 490
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.Xml.XmlWriter\" data-throw-if-not-resolved=\"false\"></xref> will add closing tags to all unclosed element tags when the <xref href=\"System.Xml.XmlWriter.Close\" data-throw-if-not-resolved=\"false\"></xref> method is called.</p>\n"
  syntax:
    content: public bool WriteEndDocumentOnClose { get; set; }
    content.vb: Public Property WriteEndDocumentOnClose As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if all unclosed element tags will be closed out; otherwise, <strong>false</strong>. The default value is <strong>true</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Clone
  commentId: M:System.Xml.XmlWriterSettings.Clone
  id: Clone
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: XmlWriterSettings.Clone()
  fullName: System.Xml.XmlWriterSettings.Clone()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 491
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a copy of the <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public XmlWriterSettings Clone()
    content.vb: Public Function Clone As XmlWriterSettings
    return:
      type: System.Xml.XmlWriterSettings
      description: "\n<p>The cloned <xref href=\"System.Xml.XmlWriterSettings\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlWriterSettings.Reset
  commentId: M:System.Xml.XmlWriterSettings.Reset
  id: Reset
  parent: System.Xml.XmlWriterSettings
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: XmlWriterSettings.Reset()
  fullName: System.Xml.XmlWriterSettings.Reset()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Reset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 492
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Resets the members of the settings class to their default values.</p>\n"
  syntax:
    content: public void Reset()
    content.vb: Public Sub Reset
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.ConformanceLevel
  commentId: T:System.Xml.ConformanceLevel
  parent: System.Xml
  isExternal: false
  name: ConformanceLevel
  nameWithType: ConformanceLevel
  fullName: System.Xml.ConformanceLevel
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: false
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.NamespaceHandling
  commentId: T:System.Xml.NamespaceHandling
  parent: System.Xml
  isExternal: false
  name: NamespaceHandling
  nameWithType: NamespaceHandling
  fullName: System.Xml.NamespaceHandling
- uid: System.Xml.NewLineHandling
  commentId: T:System.Xml.NewLineHandling
  parent: System.Xml
  isExternal: false
  name: NewLineHandling
  nameWithType: NewLineHandling
  fullName: System.Xml.NewLineHandling
- uid: System.Xml.XmlWriterSettings
  commentId: T:System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: false
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
