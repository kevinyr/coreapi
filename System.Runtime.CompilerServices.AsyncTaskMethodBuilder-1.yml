### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  commentId: T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  id: AsyncTaskMethodBuilder`1
  parent: System.Runtime.CompilerServices
  children:
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)
  - System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task
  langs:
  - csharp
  - vb
  name: AsyncTaskMethodBuilder<TResult>
  nameWithType: AsyncTaskMethodBuilder<TResult>
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>
  type: Struct
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AsyncTaskMethodBuilder
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 423
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Represents a builder for asynchronous methods that returns a task and provides a parameter for the result.</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public struct AsyncTaskMethodBuilder<TResult>
    content.vb: >-
      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Structure AsyncTaskMethodBuilder(Of TResult)
    typeParameters:
    - id: TResult
      description: "\n<p>The result to use to complete the task.</p>\n"
  inheritedMembers:
  - System.ValueType.Equals(System.Object)
  - System.ValueType.GetHashCode
  - System.ValueType.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  attributes:
  - type: System.Runtime.InteropServices.StructLayoutAttribute
    ctor: System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)
    arguments:
    - type: System.Runtime.InteropServices.LayoutKind
      value: 0
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult)
  modifiers.csharp:
  - public
  - struct
  modifiers.vb:
  - Public
  - Structure
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult)
  name.vb: AsyncTaskMethodBuilder(Of TResult)
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task
  commentId: P:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Task
  id: Task
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: Task
  nameWithType: AsyncTaskMethodBuilder<TResult>.Task
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Task
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Task
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 572
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Gets the task for this builder.</p>\n"
  syntax:
    content: public Task<TResult> Task { get; }
    content.vb: Public ReadOnly Property Task As Task(Of TResult)
    parameters: []
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\n<p>The task for this builder.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).Task
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).Task
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitOnCompleted``2(``0@,``1@)
  id: AwaitOnCompleted``2(``0@,``1@)
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)
  nameWithType: AsyncTaskMethodBuilder<TResult>.AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AwaitOnCompleted
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 496
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Schedules the state machine to proceed to the next action when the specified awaiter completes.</p>\n"
  syntax:
    content: 'public void AwaitOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)where TAwaiter : INotifyCompletion where TStateMachine : IAsyncStateMachine'
    content.vb: Public Sub AwaitOnCompleted(Of TAwaiter As INotifyCompletion, TStateMachine As IAsyncStateMachine)(ByRef awaiter As TAwaiter, ByRef stateMachine As TStateMachine)
    parameters:
    - id: awaiter
      type: '{TAwaiter}'
      description: "\n<p>The awaiter.</p>\n"
    - id: stateMachine
      type: '{TStateMachine}'
      description: "\n<p>The state machine.</p>\n"
    typeParameters:
    - id: TAwaiter
      description: "\n<p>The type of the awaiter.</p>\n"
    - id: TStateMachine
      description: "\n<p>The type of the state machine.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).AwaitOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).AwaitOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)
  name.vb: AwaitOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.AwaitUnsafeOnCompleted``2(``0@,``1@)
  id: AwaitUnsafeOnCompleted``2(``0@,``1@)
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)
  nameWithType: AsyncTaskMethodBuilder<TResult>.AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter, ref TStateMachine)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AwaitUnsafeOnCompleted
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 536
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Schedules the state machine to proceed to the next action when the specified awaiter completes. This method can be called from partially trusted code.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void AwaitUnsafeOnCompleted<TAwaiter, TStateMachine>(ref TAwaiter awaiter, ref TStateMachine stateMachine)where TAwaiter : ICriticalNotifyCompletion where TStateMachine : IAsyncStateMachine
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub AwaitUnsafeOnCompleted(Of TAwaiter As ICriticalNotifyCompletion, TStateMachine As IAsyncStateMachine)(ByRef awaiter As TAwaiter, ByRef stateMachine As TStateMachine)
    parameters:
    - id: awaiter
      type: '{TAwaiter}'
      description: "\n<p>The awaiter.</p>\n"
    - id: stateMachine
      type: '{TStateMachine}'
      description: "\n<p>The state machine.</p>\n"
    typeParameters:
    - id: TAwaiter
      description: "\n<p>The type of the awaiter.</p>\n"
    - id: TStateMachine
      description: "\n<p>The type of the state machine.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).AwaitUnsafeOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).AwaitUnsafeOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)
  name.vb: AwaitUnsafeOnCompleted(Of TAwaiter, TStateMachine)(ByRef TAwaiter, ByRef TStateMachine)
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Create
  id: Create
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: Create()
  nameWithType: AsyncTaskMethodBuilder<TResult>.Create()
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Create()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Create
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 442
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Creates an instance of the <xref href=\"System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public static AsyncTaskMethodBuilder<TResult> Create()
    content.vb: Public Shared Function Create As AsyncTaskMethodBuilder(Of TResult)
    return:
      type: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
      description: "\n<p>A new instance of the builder.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).Create()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).Create()
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetException(System.Exception)
  id: SetException(System.Exception)
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: SetException(Exception)
  nameWithType: AsyncTaskMethodBuilder<TResult>.SetException(Exception)
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.SetException(System.Exception)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetException
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 650
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Marks the task as failed and binds the specified exception to the task.</p>\n"
  syntax:
    content: public void SetException(Exception exception)
    content.vb: Public Sub SetException(exception As Exception)
    parameters:
    - id: exception
      type: System.Exception
      description: "\n<p>The exception to bind to the task.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>exception</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The task has already completed.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).SetException(Exception)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).SetException(System.Exception)
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetResult(`0)
  id: SetResult(`0)
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: SetResult(TResult)
  nameWithType: AsyncTaskMethodBuilder<TResult>.SetResult(TResult)
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.SetResult(TResult)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetResult
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 589
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Marks the task as successfully completed.</p>\n"
  syntax:
    content: public void SetResult(TResult result)
    content.vb: Public Sub SetResult(result As TResult)
    parameters:
    - id: result
      type: '{TResult}'
      description: "\n<p>The result to use to complete the task.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The task has already completed.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).SetResult(TResult)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).SetResult(TResult)
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)
  id: SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: SetStateMachine(IAsyncStateMachine)
  nameWithType: AsyncTaskMethodBuilder<TResult>.SetStateMachine(IAsyncStateMachine)
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetStateMachine
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 484
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Associates the builder with the specified state machine.</p>\n"
  syntax:
    content: public void SetStateMachine(IAsyncStateMachine stateMachine)
    content.vb: Public Sub SetStateMachine(stateMachine As IAsyncStateMachine)
    parameters:
    - id: stateMachine
      type: System.Runtime.CompilerServices.IAsyncStateMachine
      description: "\n<p>The state machine instance to associate with the builder.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stateMachine</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The state machine was previously set.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).SetStateMachine(IAsyncStateMachine)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).SetStateMachine(System.Runtime.CompilerServices.IAsyncStateMachine)
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)
  commentId: M:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1.Start``1(``0@)
  id: Start``1(``0@)
  parent: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  langs:
  - csharp
  - vb
  name: Start<TStateMachine>(ref TStateMachine)
  nameWithType: AsyncTaskMethodBuilder<TResult>.Start<TStateMachine>(ref TStateMachine)
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>.Start<TStateMachine>(ref TStateMachine)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Start
    path: src/mscorlib/src/System/Runtime/CompilerServices/AsyncMethodBuilder.cs
    startLine: 452
  assemblies:
  - System.Threading.Tasks
  namespace: System.Runtime.CompilerServices
  summary: "\n<p>Begins running the builder with the associated state machine.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [DebuggerStepThrough]

      public void Start<TStateMachine>(ref TStateMachine stateMachine)where TStateMachine : IAsyncStateMachine
    content.vb: >-
      <SecuritySafeCritical>

      <DebuggerStepThrough>

      Public Sub Start(Of TStateMachine As IAsyncStateMachine)(ByRef stateMachine As TStateMachine)
    parameters:
    - id: stateMachine
      type: '{TStateMachine}'
      description: "\n<p>The state machine instance, passed by reference.</p>\n"
    typeParameters:
    - id: TStateMachine
      description: "\n<p>The type of the state machine.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>stateMachine</em> is <strong>null</strong>.</p>\n"
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult).Start(Of TStateMachine)(ByRef TStateMachine)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult).Start(Of TStateMachine)(ByRef TStateMachine)
  name.vb: Start(Of TStateMachine)(ByRef TStateMachine)
references:
- uid: System.Runtime.CompilerServices
  commentId: N:System.Runtime.CompilerServices
  isExternal: false
  name: System.Runtime.CompilerServices
  nameWithType: System.Runtime.CompilerServices
  fullName: System.Runtime.CompilerServices
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(Object)
  nameWithType: ValueType.Equals(Object)
  fullName: System.ValueType.Equals(System.Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    nameWithType: ValueType.Equals
    fullName: System.ValueType.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: false
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    nameWithType: ValueType.GetHashCode
    fullName: System.ValueType.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: false
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    nameWithType: ValueType.ToString
    fullName: System.ValueType.ToString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{`0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: '{TAwaiter}'
  commentId: '!:TAwaiter'
  definition: TAwaiter
  name: TAwaiter
  nameWithType: TAwaiter
  fullName: TAwaiter
- uid: '{TStateMachine}'
  commentId: '!:TStateMachine'
  definition: TStateMachine
  name: TStateMachine
  nameWithType: TStateMachine
  fullName: TStateMachine
- uid: TAwaiter
  isExternal: false
  name: TAwaiter
  nameWithType: TAwaiter
  fullName: TAwaiter
- uid: TStateMachine
  isExternal: false
  name: TStateMachine
  nameWithType: TStateMachine
  fullName: TStateMachine
- uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  commentId: T:System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: AsyncTaskMethodBuilder<TResult>
  nameWithType: AsyncTaskMethodBuilder<TResult>
  fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder<TResult>
  nameWithType.vb: AsyncTaskMethodBuilder(Of TResult)
  fullname.vb: System.Runtime.CompilerServices.AsyncTaskMethodBuilder(Of TResult)
  name.vb: AsyncTaskMethodBuilder(Of TResult)
  spec.csharp:
  - uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
    name: AsyncTaskMethodBuilder
    nameWithType: AsyncTaskMethodBuilder
    fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Runtime.CompilerServices.AsyncTaskMethodBuilder`1
    name: AsyncTaskMethodBuilder
    nameWithType: AsyncTaskMethodBuilder
    fullName: System.Runtime.CompilerServices.AsyncTaskMethodBuilder
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: TResult
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Runtime.CompilerServices.IAsyncStateMachine
  commentId: T:System.Runtime.CompilerServices.IAsyncStateMachine
  parent: System.Runtime.CompilerServices
  isExternal: false
  name: IAsyncStateMachine
  nameWithType: IAsyncStateMachine
  fullName: System.Runtime.CompilerServices.IAsyncStateMachine
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
