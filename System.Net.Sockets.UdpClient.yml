items:
- uid: System.Net.Sockets.UdpClient
  commentId: T:System.Net.Sockets.UdpClient
  id: UdpClient
  parent: System.Net.Sockets
  children:
  - System.Net.Sockets.UdpClient.#ctor
  - System.Net.Sockets.UdpClient.#ctor(System.Int32)
  - System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  - System.Net.Sockets.UdpClient.Active
  - System.Net.Sockets.UdpClient.Available
  - System.Net.Sockets.UdpClient.Client
  - System.Net.Sockets.UdpClient.Dispose
  - System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  - System.Net.Sockets.UdpClient.DontFragment
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.EnableBroadcast
  - System.Net.Sockets.UdpClient.ExclusiveAddressUse
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  - System.Net.Sockets.UdpClient.MulticastLoopback
  - System.Net.Sockets.UdpClient.ReceiveAsync
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  - System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  - System.Net.Sockets.UdpClient.Ttl
  langs:
  - csharp
  - vb
  name: UdpClient
  fullName: System.Net.Sockets.UdpClient
  type: Class
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UdpClient
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 12
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Provides User Datagram Protocol (UDP) network services.</p>\n"
  syntax:
    content: 'public class UdpClient : IDisposable'
    content.vb: >-
      Public Class UdpClient
          Implements IDisposable
  seealso:
  - type: System.Net.Sockets.TcpClient
    commentId: T:System.Net.Sockets.TcpClient
  see:
  - type: System.Net.SocketPermission
    commentId: T:System.Net.SocketPermission
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: UdpClient
- uid: System.Net.Sockets.UdpClient.#ctor
  commentId: M:System.Net.Sockets.UdpClient.#ctor
  id: '#ctor'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient()
  fullName: System.Net.Sockets.UdpClient.UdpClient()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 22
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public UdpClient()
    content.vb: Public Sub New
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.UdpClient()
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(Int32)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 46
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and binds it to the local port number provided.</p>\n"
  syntax:
    content: public UdpClient(int port)
    content.vb: Public Sub New(port As Integer)
    parameters:
    - id: port
      type: System.Int32
      description: "\n<p>The local port number from which you intend to communicate. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <em>port</em> parameter is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.UdpClient(Int32)
- uid: System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Int32,System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Int32,System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(Int32, AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Int32, System.Net.Sockets.AddressFamily)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 458
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and binds it to the local port number provided.</p>\n"
  syntax:
    content: public UdpClient(int port, AddressFamily family)
    content.vb: Public Sub New(port As Integer, family As AddressFamily)
    parameters:
    - id: port
      type: System.Int32
      description: "\n<p>The port on which to listen for incoming connection attempts. </p>\n"
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the addressing scheme of the socket. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>family</em> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>port</em> is greater than <xref href=\"System.Net.IPEndPoint.MaxPort\" data-throw-if-not-resolved=\"false\"></xref> or less than <xref href=\"System.Net.IPEndPoint.MinPort\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.UdpClient(Int32, AddressFamily)
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.IPEndPoint)
  id: '#ctor(System.Net.IPEndPoint)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Net.IPEndPoint)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 459
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class and binds it to the specified local endpoint.</p>\n"
  syntax:
    content: public UdpClient(IPEndPoint localEP)
    content.vb: Public Sub New(localEP As IPEndPoint)
    parameters:
    - id: localEP
      type: System.Net.IPEndPoint
      description: "\n<p>An <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> that respresents the local endpoint to which you bind the UDP connection. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>localEP</em> is <strong>null</strong>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  seealso:
  - type: System.Net.IPEndPoint
    commentId: T:System.Net.IPEndPoint
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.UdpClient(IPEndPoint)
- uid: System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  commentId: M:System.Net.Sockets.UdpClient.#ctor(System.Net.Sockets.AddressFamily)
  id: '#ctor(System.Net.Sockets.AddressFamily)'
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: UdpClient(AddressFamily)
  fullName: System.Net.Sockets.UdpClient.UdpClient(System.Net.Sockets.AddressFamily)
  type: Constructor
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 460
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public UdpClient(AddressFamily family)
    content.vb: Public Sub New(family As AddressFamily)
    parameters:
    - id: family
      type: System.Net.Sockets.AddressFamily
      description: "\n<p>One of the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> values that specifies the addressing scheme of the socket. </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>family</em> is not <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.UdpClient(AddressFamily)
- uid: System.Net.Sockets.UdpClient.Active
  commentId: P:System.Net.Sockets.UdpClient.Active
  id: Active
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Active
  fullName: System.Net.Sockets.UdpClient.Active
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Active
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 103
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value indicating whether a default remote host has been established.</p>\n"
  syntax:
    content: protected bool Active { get; set; }
    content.vb: Protected Property Active As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a connection is active; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient
    commentId: T:System.Net.Sockets.UdpClient
  - type: System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
    commentId: M:System.Net.Sockets.UdpClient.Connect(System.String,System.Int32)
  - type: System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
    commentId: M:System.Net.Sockets.UdpClient.Send(System.Byte[],System.Int32,System.Net.IPEndPoint)
  modifiers.csharp:
  - protected
  - get
  - set
  modifiers.vb:
  - Protected
  nameWithType: UdpClient.Active
- uid: System.Net.Sockets.UdpClient.Available
  commentId: P:System.Net.Sockets.UdpClient.Available
  id: Available
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Available
  fullName: System.Net.Sockets.UdpClient.Available
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Available
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 115
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets the amount of data received from the network that is available to read.</p>\n"
  syntax:
    content: public int Available { get; }
    content.vb: Public ReadOnly Property Available As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of bytes of data received from the network.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred while attempting to access the socket. See the Remarks section for more information. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: UdpClient.Available
- uid: System.Net.Sockets.UdpClient.Client
  commentId: P:System.Net.Sockets.UdpClient.Client
  id: Client
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Client
  fullName: System.Net.Sockets.UdpClient.Client
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Client
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 123
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets the underlying network <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public Socket Client { get; set; }
    content.vb: Public Property Client As Socket
    parameters: []
    return:
      type: System.Net.Sockets.Socket
      description: "\n<p>The underlying Network <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - type: System.Net.Sockets.Socket
    commentId: T:System.Net.Sockets.Socket
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: UdpClient.Client
- uid: System.Net.Sockets.UdpClient.DontFragment
  commentId: P:System.Net.Sockets.UdpClient.DontFragment
  id: DontFragment
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: DontFragment
  fullName: System.Net.Sockets.UdpClient.DontFragment
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DontFragment
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 148
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows Internet Protocol (IP) datagrams to be fragmented.</p>\n"
  syntax:
    content: public bool DontFragment { get; set; }
    content.vb: Public Property DontFragment As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows datagram fragmentation; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This property can be set only for sockets that use the <xref href=\"System.Net.Sockets.AddressFamily.InterNetwork\" data-throw-if-not-resolved=\"false\"></xref> flag or the <xref href=\"System.Net.Sockets.AddressFamily.InterNetworkV6\" data-throw-if-not-resolved=\"false\"></xref> flag. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: UdpClient.DontFragment
- uid: System.Net.Sockets.UdpClient.EnableBroadcast
  commentId: P:System.Net.Sockets.UdpClient.EnableBroadcast
  id: EnableBroadcast
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: EnableBroadcast
  fullName: System.Net.Sockets.UdpClient.EnableBroadcast
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EnableBroadcast
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 172
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> may send or receive broadcast packets.</p>\n"
  syntax:
    content: public bool EnableBroadcast { get; set; }
    content.vb: Public Property EnableBroadcast As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows broadcast packets; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: UdpClient.EnableBroadcast
- uid: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  commentId: P:System.Net.Sockets.UdpClient.ExclusiveAddressUse
  id: ExclusiveAddressUse
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: ExclusiveAddressUse
  fullName: System.Net.Sockets.UdpClient.ExclusiveAddressUse
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ExclusiveAddressUse
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 184
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows only one client to use a port.</p>\n"
  syntax:
    content: public bool ExclusiveAddressUse { get; set; }
    content.vb: Public Property ExclusiveAddressUse As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> allows only one client to use a specific port; otherwise, <strong>false</strong>. The default is <strong>true</strong> for Windows Server 2003 and Windows XP Service Pack 2 and later, and <strong>false</strong> for all other versions.</p>\n"
  exceptions:
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when attempting to access the underlying socket.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: UdpClient.ExclusiveAddressUse
- uid: System.Net.Sockets.UdpClient.MulticastLoopback
  commentId: P:System.Net.Sockets.UdpClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: MulticastLoopback
  fullName: System.Net.Sockets.UdpClient.MulticastLoopback
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MulticastLoopback
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 160
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> value that specifies whether outgoing multicast packets are delivered to the sending application.</p>\n"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    content.vb: Public Property MulticastLoopback As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> receives outgoing multicast packets; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: UdpClient.MulticastLoopback
- uid: System.Net.Sockets.UdpClient.Ttl
  commentId: P:System.Net.Sockets.UdpClient.Ttl
  id: Ttl
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Ttl
  fullName: System.Net.Sockets.UdpClient.Ttl
  type: Property
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Ttl
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 136
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Gets or sets a value that specifies the Time to Live (TTL) value of Internet Protocol (IP) packets sent by the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public short Ttl { get; set; }
    content.vb: Public Property Ttl As Short
    parameters: []
    return:
      type: System.Int16
      description: "\n<p>The TTL value.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: UdpClient.Ttl
- uid: System.Net.Sockets.UdpClient.Dispose
  commentId: M:System.Net.Sockets.UdpClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: System.Net.Sockets.UdpClient.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 221
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the managed and unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.Dispose()
- uid: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  commentId: M:System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: System.Net.Sockets.UdpClient.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 226
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources. </p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: UdpClient.Dispose(Boolean)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  id: DropMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: DropMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DropMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 471
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Leaves a multicast group.</p>\n"
  syntax:
    content: public void DropMulticastGroup(IPAddress multicastAddr)
    content.vb: Public Sub DropMulticastGroup(multicastAddr As IPAddress)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the multicast group to leave. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>multicastAddr</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.DropMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress,System.Int32)
  id: DropMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: DropMulticastGroup(IPAddress, Int32)
  fullName: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DropMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 472
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Leaves a multicast group.</p>\n"
  syntax:
    content: public void DropMulticastGroup(IPAddress multicastAddr, int ifindex)
    content.vb: Public Sub DropMulticastGroup(multicastAddr As IPAddress, ifindex As Integer)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the multicast group to leave. </p>\n"
    - id: ifindex
      type: System.Int32
      description: "\n<p>The local address of the multicast group to leave.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>multicastAddr</em> is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.DropMulticastGroup(IPAddress, Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Int32,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(Int32, IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Int32, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 473
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group.</p>\n"
  syntax:
    content: public void JoinMulticastGroup(int ifindex, IPAddress multicastAddr)
    content.vb: Public Sub JoinMulticastGroup(ifindex As Integer, multicastAddr As IPAddress)
    parameters:
    - id: ifindex
      type: System.Int32
      description: "\n<p>The interface index associated with the local IP address on which to join the multicast group.</p>\n"
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The multicast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group you want to join. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.JoinMulticastGroup(Int32, IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 474
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group.</p>\n"
  syntax:
    content: public void JoinMulticastGroup(IPAddress multicastAddr)
    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The multicast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group you want to join. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(IPAddress, Int32)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 475
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group with the specified Time to Live (TTL).</p>\n"
  syntax:
    content: public void JoinMulticastGroup(IPAddress multicastAddr, int timeToLive)
    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress, timeToLive As Integer)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the multicast group to join. </p>\n"
    - id: timeToLive
      type: System.Int32
      description: "\n<p>The Time to Live (TTL), measured in router hops. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The TTL provided is not between 0 and 255 </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>multicastAddr</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The IP address is not compatible with the <xref href=\"System.Net.Sockets.AddressFamily\" data-throw-if-not-resolved=\"false\"></xref> value that defines the addressing scheme of the socket. </p>\n"
  seealso:
  - type: System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
    commentId: M:System.Net.Sockets.UdpClient.DropMulticastGroup(System.Net.IPAddress)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, Int32)
- uid: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  commentId: M:System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  id: JoinMulticastGroup(System.Net.IPAddress,System.Net.IPAddress)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: JoinMulticastGroup(IPAddress, IPAddress)
  fullName: System.Net.Sockets.UdpClient.JoinMulticastGroup(System.Net.IPAddress, System.Net.IPAddress)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: JoinMulticastGroup
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 476
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Adds a <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> to a multicast group.</p>\n"
  syntax:
    content: public void JoinMulticastGroup(IPAddress multicastAddr, IPAddress localAddress)
    content.vb: Public Sub JoinMulticastGroup(multicastAddr As IPAddress, localAddress As IPAddress)
    parameters:
    - id: multicastAddr
      type: System.Net.IPAddress
      description: "\n<p>The multicast <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref> of the group you want to join.</p>\n"
    - id: localAddress
      type: System.Net.IPAddress
      description: "\n<p>The local <xref href=\"System.Net.IPAddress\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref> has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.JoinMulticastGroup(IPAddress, IPAddress)
- uid: System.Net.Sockets.UdpClient.ReceiveAsync
  commentId: M:System.Net.Sockets.UdpClient.ReceiveAsync
  id: ReceiveAsync
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: ReceiveAsync()
  fullName: System.Net.Sockets.UdpClient.ReceiveAsync()
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReceiveAsync
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 649
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Returns a UDP datagram asynchronously that was sent by a remote host.</p>\n"
  syntax:
    content: public Task<UdpReceiveResult> ReceiveAsync()
    content.vb: Public Function ReceiveAsync As Task(Of UdpReceiveResult)
    return:
      type: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The underlying <xref href=\"System.Net.Sockets.Socket\" data-throw-if-not-resolved=\"false\"></xref>  has been closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: UdpClient.ReceiveAsync()
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  id: SendAsync(System.Byte[],System.Int32,System.Net.IPEndPoint)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: SendAsync(Byte[], Int32, IPEndPoint)
  fullName: System.Net.Sockets.UdpClient.SendAsync(System.Byte[], System.Int32, System.Net.IPEndPoint)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Sockets/ref/System.Net.Sockets.cs
    startLine: 478
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends a UDP datagram asynchronously to a remote host.</p>\n"
  syntax:
    content: public Task<int> SendAsync(byte[] datagram, int bytes, IPEndPoint endPoint)
    content.vb: Public Function SendAsync(datagram As Byte(), bytes As Integer, endPoint As IPEndPoint) As Task(Of Integer)
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n"
    - id: bytes
      type: System.Int32
      description: "\n<p>The number of bytes in the datagram.</p>\n"
    - id: endPoint
      type: System.Net.IPEndPoint
      description: "\n<p>An <xref href=\"System.Net.IPEndPoint\" data-throw-if-not-resolved=\"false\"></xref> that represents the host and port to which to send the datagram.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dgram</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> has already established a default remote host. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>\n<xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.UdpClient.SendAsync(System.Byte(), System.Int32, System.Net.IPEndPoint)
  name.vb: SendAsync(Byte(), Int32, IPEndPoint)
  nameWithType: UdpClient.SendAsync(Byte[], Int32, IPEndPoint)
  nameWithType.vb: UdpClient.SendAsync(Byte(), Int32, IPEndPoint)
- uid: System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  commentId: M:System.Net.Sockets.UdpClient.SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  id: SendAsync(System.Byte[],System.Int32,System.String,System.Int32)
  parent: System.Net.Sockets.UdpClient
  langs:
  - csharp
  - vb
  name: SendAsync(Byte[], Int32, String, Int32)
  fullName: System.Net.Sockets.UdpClient.SendAsync(System.Byte[], System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Sockets/src/System/Net/Sockets/UDPClient.cs
    startLine: 629
  assemblies:
  - System.Net.Sockets
  namespace: System.Net.Sockets
  summary: "\n<p>Sends a UDP datagram asynchronously to a remote host.</p>\n"
  syntax:
    content: public Task<int> SendAsync(byte[] datagram, int bytes, string hostname, int port)
    content.vb: Public Function SendAsync(datagram As Byte(), bytes As Integer, hostname As String, port As Integer) As Task(Of Integer)
    parameters:
    - id: datagram
      type: System.Byte[]
      description: "\n<p>An array of type <xref href=\"System.Byte\" data-throw-if-not-resolved=\"false\"></xref> that specifies the UDP datagram that you intend to send represented as an array of bytes.</p>\n"
    - id: bytes
      type: System.Int32
      description: "\n<p>The number of bytes in the datagram.</p>\n"
    - id: hostname
      type: System.String
      description: "\n<p>The name of the remote host to which you intend to send the datagram.</p>\n"
    - id: port
      type: System.Int32
      description: "\n<p>The remote port number with which you intend to communicate.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>dgram</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> has already established a default remote host. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Net.Sockets.UdpClient\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "\n<p>An error occurred when accessing the socket. See the Remarks section for more information. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Net.Sockets.UdpClient.SendAsync(System.Byte(), System.Int32, System.String, System.Int32)
  name.vb: SendAsync(Byte(), Int32, String, Int32)
  nameWithType: UdpClient.SendAsync(Byte[], Int32, String, Int32)
  nameWithType.vb: UdpClient.SendAsync(Byte(), Int32, String, Int32)
references:
- uid: System.Net.Sockets
  isExternal: false
  name: System.Net.Sockets
  fullName: System.Net.Sockets
  nameWithType: System.Net.Sockets
  commentId: N:System.Net.Sockets
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  fullName: System.IDisposable
  nameWithType: IDisposable
  commentId: T:System.IDisposable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  nameWithType: Int32
  commentId: T:System.Int32
- uid: System.Net.Sockets.AddressFamily
  parent: System.Net.Sockets
  isExternal: false
  name: AddressFamily
  fullName: System.Net.Sockets.AddressFamily
  nameWithType: AddressFamily
  commentId: T:System.Net.Sockets.AddressFamily
- uid: System.Net.IPEndPoint
  isExternal: false
  name: IPEndPoint
  fullName: System.Net.IPEndPoint
  nameWithType: IPEndPoint
  commentId: T:System.Net.IPEndPoint
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Net.Sockets.Socket
  parent: System.Net.Sockets
  isExternal: false
  name: Socket
  fullName: System.Net.Sockets.Socket
  nameWithType: Socket
  commentId: T:System.Net.Sockets.Socket
- uid: System.Int16
  parent: System
  isExternal: false
  name: Int16
  fullName: System.Int16
  nameWithType: Int16
  commentId: T:System.Int16
- uid: System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: IDisposable.Dispose()
  commentId: M:System.IDisposable.Dispose
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: false
  name: IPAddress
  fullName: System.Net.IPAddress
  nameWithType: IPAddress
  commentId: T:System.Net.IPAddress
- uid: System.Net
  isExternal: false
  name: System.Net
  fullName: System.Net
  nameWithType: System.Net
  commentId: N:System.Net
- uid: System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UdpReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.Sockets.UdpReceiveResult>
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Sockets.UdpReceiveResult)
  name.vb: Task(Of UdpReceiveResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Net.Sockets.UdpReceiveResult
    name: UdpReceiveResult
    fullName: System.Net.Sockets.UdpReceiveResult
  - name: )
    fullName: )
  nameWithType: Task<UdpReceiveResult>
  nameWithType.vb: Task(Of UdpReceiveResult)
  commentId: T:System.Threading.Tasks.Task{System.Net.Sockets.UdpReceiveResult}
- uid: System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  nameWithType: Task<TResult>
  nameWithType.vb: Task(Of TResult)
  commentId: T:System.Threading.Tasks.Task`1
- uid: System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  fullName: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Task<Int32>
  nameWithType.vb: Task(Of Int32)
  commentId: T:System.Threading.Tasks.Task{System.Int32}
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Net.Sockets.SocketException
  isExternal: false
  name: SocketException
  fullName: System.Net.Sockets.SocketException
  nameWithType: SocketException
  commentId: T:System.Net.Sockets.SocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  fullName: System.ObjectDisposedException
  nameWithType: ObjectDisposedException
  commentId: T:System.ObjectDisposedException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  fullName: System.NotSupportedException
  nameWithType: NotSupportedException
  commentId: T:System.NotSupportedException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
