### YamlMime:ManagedReference
items:
- uid: System.IO.Path
  commentId: T:System.IO.Path
  id: Path
  parent: System.IO
  children:
  - System.IO.Path.AltDirectorySeparatorChar
  - System.IO.Path.ChangeExtension(System.String,System.String)
  - System.IO.Path.Combine(System.String,System.String)
  - System.IO.Path.Combine(System.String,System.String,System.String)
  - System.IO.Path.Combine(System.String[])
  - System.IO.Path.DirectorySeparatorChar
  - System.IO.Path.GetDirectoryName(System.String)
  - System.IO.Path.GetExtension(System.String)
  - System.IO.Path.GetFileName(System.String)
  - System.IO.Path.GetFileNameWithoutExtension(System.String)
  - System.IO.Path.GetFullPath(System.String)
  - System.IO.Path.GetInvalidFileNameChars
  - System.IO.Path.GetInvalidPathChars
  - System.IO.Path.GetPathRoot(System.String)
  - System.IO.Path.GetRandomFileName
  - System.IO.Path.GetTempFileName
  - System.IO.Path.GetTempPath
  - System.IO.Path.HasExtension(System.String)
  - System.IO.Path.IsPathRooted(System.String)
  - System.IO.Path.PathSeparator
  - System.IO.Path.VolumeSeparatorChar
  langs:
  - csharp
  - vb
  name: Path
  nameWithType: Path
  fullName: System.IO.Path
  type: Class
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Path
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 13
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Performs operations on <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> instances that contain file or directory path information. These operations are performed in a cross-platform manner.</p>\n"
  syntax:
    content: public static class Path
    content.vb: Public Module Path
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.IO.Path.AltDirectorySeparatorChar
  commentId: F:System.IO.Path.AltDirectorySeparatorChar
  id: AltDirectorySeparatorChar
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: AltDirectorySeparatorChar
  nameWithType: Path.AltDirectorySeparatorChar
  fullName: System.IO.Path.AltDirectorySeparatorChar
  type: Field
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AltDirectorySeparatorChar
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 18
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Provides a platform-specific alternate character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\n"
  syntax:
    content: public static readonly char AltDirectorySeparatorChar
    content.vb: Public Shared ReadOnly AltDirectorySeparatorChar As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.Path.DirectorySeparatorChar
  commentId: F:System.IO.Path.DirectorySeparatorChar
  id: DirectorySeparatorChar
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: DirectorySeparatorChar
  nameWithType: Path.DirectorySeparatorChar
  fullName: System.IO.Path.DirectorySeparatorChar
  type: Field
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DirectorySeparatorChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 616
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Provides a platform-specific character used to separate directory levels in a path string that reflects a hierarchical file system organization.</p>\n"
  syntax:
    content: public static readonly char DirectorySeparatorChar
    content.vb: Public Shared ReadOnly DirectorySeparatorChar As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.Path.PathSeparator
  commentId: F:System.IO.Path.PathSeparator
  id: PathSeparator
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: PathSeparator
  nameWithType: Path.PathSeparator
  fullName: System.IO.Path.PathSeparator
  type: Field
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PathSeparator
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 617
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>A platform-specific separator character used to separate path strings in environment variables.</p>\n"
  syntax:
    content: public static readonly char PathSeparator
    content.vb: Public Shared ReadOnly PathSeparator As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.Path.VolumeSeparatorChar
  commentId: F:System.IO.Path.VolumeSeparatorChar
  id: VolumeSeparatorChar
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: VolumeSeparatorChar
  nameWithType: Path.VolumeSeparatorChar
  fullName: System.IO.Path.VolumeSeparatorChar
  type: Field
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VolumeSeparatorChar
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 618
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Provides a platform-specific volume separator character.</p>\n"
  syntax:
    content: public static readonly char VolumeSeparatorChar
    content.vb: Public Shared ReadOnly VolumeSeparatorChar As Char
    return:
      type: System.Char
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.IO.Path.ChangeExtension(System.String,System.String)
  commentId: M:System.IO.Path.ChangeExtension(System.String,System.String)
  id: ChangeExtension(System.String,System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: ChangeExtension(String, String)
  nameWithType: Path.ChangeExtension(String, String)
  fullName: System.IO.Path.ChangeExtension(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ChangeExtension
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 31
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Changes the extension of a path string.</p>\n"
  syntax:
    content: public static string ChangeExtension(string path, string extension)
    content.vb: Public Shared Function ChangeExtension(path As String, extension As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path information to modify. The path cannot contain any of the characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: extension
      type: System.String
      description: "\n<p>The new extension (with or without a leading period). Specify <strong>null</strong> to remove an existing extension from <em>path</em>. </p>\n"
    return:
      type: System.String
      description: "\n<p>The modified path information.</p>\n<p>On Windows-based desktop platforms, if <em>path</em> is <strong>null</strong> or an empty string (\"\"), the path information is returned unmodified. If <em>extension</em> is <strong>null</strong>, the returned string contains the specified path with its extension removed. If <em>path</em> has no extension, and <em>extension</em> is not <strong>null</strong>, the returned path string contains <em>extension</em> appended to the end of <em>path</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.Combine(System.String,System.String)
  commentId: M:System.IO.Path.Combine(System.String,System.String)
  id: Combine(System.String,System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: Combine(String, String)
  nameWithType: Path.Combine(String, String)
  fullName: System.IO.Path.Combine(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Combine
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 191
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Combines two strings into a path.</p>\n"
  syntax:
    content: public static string Combine(string path1, string path2)
    content.vb: Public Shared Function Combine(path1 As String, path2 As String) As String
    parameters:
    - id: path1
      type: System.String
      description: "\n<p>The first path to combine. </p>\n"
    - id: path2
      type: System.String
      description: "\n<p>The second path to combine. </p>\n"
    return:
      type: System.String
      description: "\n<p>The combined paths. If one of the specified paths is a zero-length string, this method returns the other path. If <em>path2</em> contains an absolute path, this method returns <em>path2</em>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path1</em> or <em>path2</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path1</em> or <em>path2</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.Combine(System.String,System.String,System.String)
  commentId: M:System.IO.Path.Combine(System.String,System.String,System.String)
  id: Combine(System.String,System.String,System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: Combine(String, String, String)
  nameWithType: Path.Combine(String, String, String)
  fullName: System.IO.Path.Combine(System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Combine
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 203
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Combines three strings into a path.</p>\n"
  syntax:
    content: public static string Combine(string path1, string path2, string path3)
    content.vb: Public Shared Function Combine(path1 As String, path2 As String, path3 As String) As String
    parameters:
    - id: path1
      type: System.String
      description: "\n<p>The first path to combine. </p>\n"
    - id: path2
      type: System.String
      description: "\n<p>The second path to combine. </p>\n"
    - id: path3
      type: System.String
      description: "\n<p>The third path to combine.</p>\n"
    return:
      type: System.String
      description: "\n<p>The combined paths.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path1</em>, <em>path2</em>, or <em>path3</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path1</em>, <em>path2</em>, or <em>path3</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.Combine(System.String[])
  commentId: M:System.IO.Path.Combine(System.String[])
  id: Combine(System.String[])
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: Combine(String[])
  nameWithType: Path.Combine(String[])
  fullName: System.IO.Path.Combine(System.String[])
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Combine
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 216
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Combines an array of strings into a path.</p>\n"
  syntax:
    content: public static string Combine(params string[] paths)
    content.vb: Public Shared Function Combine(ParamArray paths As String()) As String
    parameters:
    - id: paths
      type: System.String[]
      description: "\n<p>An array of parts of the path.</p>\n"
    return:
      type: System.String
      description: "\n<p>The combined paths.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>One of the strings in the array contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>One of the strings in the array is <strong>null</strong>. </p>\n"
  nameWithType.vb: Path.Combine(String())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.IO.Path.Combine(System.String())
  name.vb: Combine(String())
- uid: System.IO.Path.GetDirectoryName(System.String)
  commentId: M:System.IO.Path.GetDirectoryName(System.String)
  id: GetDirectoryName(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetDirectoryName(String)
  nameWithType: Path.GetDirectoryName(String)
  fullName: System.IO.Path.GetDirectoryName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDirectoryName
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 67
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns the directory information for the specified path string.</p>\n"
  syntax:
    content: public static string GetDirectoryName(string path)
    content.vb: Public Shared Function GetDirectoryName(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path of a file or directory. </p>\n"
    return:
      type: System.String
      description: "\n<p>Directory information for <em>path</em>, or <strong>null</strong> if <em>path</em> denotes a root directory or is null. Returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> if <em>path</em> does not contain directory information.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <em>path</em> parameter contains invalid characters, is empty, or contains only white spaces. </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.IO.IOException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The <em>path</em> parameter is longer than the system-defined maximum length.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetExtension(System.String)
  commentId: M:System.IO.Path.GetExtension(System.String)
  id: GetExtension(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetExtension(String)
  nameWithType: Path.GetExtension(String)
  fullName: System.IO.Path.GetExtension(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetExtension
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 99
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns the extension of the specified path string.</p>\n"
  syntax:
    content: >-
      [Pure]

      public static string GetExtension(string path)
    content.vb: >-
      <Pure>

      Public Shared Function GetExtension(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path string from which to get the extension. </p>\n"
    return:
      type: System.String
      description: "\n<p>The extension of the specified path (including the period \".\"), or <strong>null</strong>, or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>path</em> is <strong>null</strong>, <xref href=\"System.IO.Path.GetExtension(System.String)\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>null</strong>. If <em>path</em> does not have extension information, <xref href=\"System.IO.Path.GetExtension(System.String)\" data-throw-if-not-resolved=\"false\"></xref> returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.  </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetFileName(System.String)
  commentId: M:System.IO.Path.GetFileName(System.String)
  id: GetFileName(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetFileName(String)
  nameWithType: Path.GetFileName(String)
  fullName: System.IO.Path.GetFileName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFileName
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 126
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns the file name and extension of the specified path string.</p>\n"
  syntax:
    content: >-
      [Pure]

      public static string GetFileName(string path)
    content.vb: >-
      <Pure>

      Public Shared Function GetFileName(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path string from which to obtain the file name and extension. </p>\n"
    return:
      type: System.String
      description: "\n<p>The characters after the last directory character in <em>path</em>. If the last character of <em>path</em> is a directory or volume separator character, this method returns <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>. If <em>path</em> is <strong>null</strong>, this method returns <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetFileNameWithoutExtension(System.String)
  commentId: M:System.IO.Path.GetFileNameWithoutExtension(System.String)
  id: GetFileNameWithoutExtension(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetFileNameWithoutExtension(String)
  nameWithType: Path.GetFileNameWithoutExtension(String)
  fullName: System.IO.Path.GetFileNameWithoutExtension(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFileNameWithoutExtension
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 137
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns the file name of the specified path string without the extension.</p>\n"
  syntax:
    content: >-
      [Pure]

      public static string GetFileNameWithoutExtension(string path)
    content.vb: >-
      <Pure>

      Public Shared Function GetFileNameWithoutExtension(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path of the file. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string returned by <xref href=\"System.IO.Path.GetFileName(System.String)\" data-throw-if-not-resolved=\"false\"></xref>, minus the last period (.) and all characters following it.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetFullPath(System.String)
  commentId: M:System.IO.Path.GetFullPath(System.String)
  id: GetFullPath(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetFullPath(String)
  nameWithType: Path.GetFullPath(String)
  fullName: System.IO.Path.GetFullPath(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFullPath
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 627
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns the absolute path for the specified path string.</p>\n"
  syntax:
    content: public static string GetFullPath(string path)
    content.vb: Public Shared Function GetFullPath(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The file or directory for which to obtain absolute path information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The fully qualified location of <em>path</em>, such as \"C:\\MyFile.txt\".</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> is a zero-length string, contains only white space, or contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The system could not retrieve the absolute path. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permissions. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>path</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>\n<em>path</em> contains a colon (\":\") that is not part of a volume identifier (for example, \"c:\\\"). </p>\n"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "\n<p>The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters. </p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetInvalidFileNameChars
  commentId: M:System.IO.Path.GetInvalidFileNameChars
  id: GetInvalidFileNameChars
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetInvalidFileNameChars()
  nameWithType: Path.GetInvalidFileNameChars()
  fullName: System.IO.Path.GetInvalidFileNameChars()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInvalidFileNameChars
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 90
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Gets an array containing the characters that are not allowed in file names.</p>\n"
  syntax:
    content: public static char[] GetInvalidFileNameChars()
    content.vb: Public Shared Function GetInvalidFileNameChars As Char()
    return:
      type: System.Char[]
      description: "\n<p>An array containing the characters that are not allowed in file names.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetInvalidPathChars
  commentId: M:System.IO.Path.GetInvalidPathChars
  id: GetInvalidPathChars
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetInvalidPathChars()
  nameWithType: Path.GetInvalidPathChars()
  fullName: System.IO.Path.GetInvalidPathChars()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInvalidPathChars
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 85
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Gets an array containing the characters that are not allowed in path names.</p>\n"
  syntax:
    content: public static char[] GetInvalidPathChars()
    content.vb: Public Shared Function GetInvalidPathChars As Char()
    return:
      type: System.Char[]
      description: "\n<p>An array containing the characters that are not allowed in path names.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetPathRoot(System.String)
  commentId: M:System.IO.Path.GetPathRoot(System.String)
  id: GetPathRoot(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetPathRoot(String)
  nameWithType: Path.GetPathRoot(String)
  fullName: System.IO.Path.GetPathRoot(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetPathRoot
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 630
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Gets the root directory information of the specified path.</p>\n"
  syntax:
    content: public static string GetPathRoot(string path)
    content.vb: Public Shared Function GetPathRoot(path As String) As String
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path from which to obtain root directory information. </p>\n"
    return:
      type: System.String
      description: "\n<p>The root directory of <em>path</em>, such as \"C:\\\", or <strong>null</strong> if <em>path</em> is <strong>null</strong>, or an empty string if <em>path</em> does not contain root directory information.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref> was passed to <em>path</em>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetRandomFileName
  commentId: M:System.IO.Path.GetRandomFileName
  id: GetRandomFileName
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetRandomFileName()
  nameWithType: Path.GetRandomFileName()
  fullName: System.IO.Path.GetRandomFileName()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetRandomFileName
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 154
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns a random folder name or file name.</p>\n"
  syntax:
    content: public static string GetRandomFileName()
    content.vb: Public Shared Function GetRandomFileName As String
    return:
      type: System.String
      description: "\n<p>A random folder name or file name.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetTempFileName
  commentId: M:System.IO.Path.GetTempFileName
  id: GetTempFileName
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetTempFileName()
  nameWithType: Path.GetTempFileName()
  fullName: System.IO.Path.GetTempFileName()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTempFileName
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 632
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Creates a uniquely named, zero-byte temporary file on disk and returns the full path of that file.</p>\n"
  syntax:
    content: public static string GetTempFileName()
    content.vb: Public Shared Function GetTempFileName As String
    return:
      type: System.String
      description: "\n<p>The full path of the temporary file.</p>\n"
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>An I/O error occurs, such as no unique temporary file name is available.</p>\n<p>- or -</p>\n<p>This method was unable to create a temporary file.</p>\n"
  see:
  - linkId: System.Security.Permissions.FileIOPermission
    commentId: T:System.Security.Permissions.FileIOPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.GetTempPath
  commentId: M:System.IO.Path.GetTempPath
  id: GetTempPath
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: GetTempPath()
  nameWithType: Path.GetTempPath()
  fullName: System.IO.Path.GetTempPath()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTempPath
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 633
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Returns the path of the current user's temporary folder.</p>\n"
  syntax:
    content: public static string GetTempPath()
    content.vb: Public Shared Function GetTempPath As String
    return:
      type: System.String
      description: "\n<p>The path to the temporary folder, ending with a backslash.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The caller does not have the required permissions. </p>\n"
  see:
  - linkId: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.HasExtension(System.String)
  commentId: M:System.IO.Path.HasExtension(System.String)
  id: HasExtension(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: HasExtension(String)
  nameWithType: Path.HasExtension(String)
  fullName: System.IO.Path.HasExtension(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/src/System/IO/Path.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasExtension
    path: src/System.Runtime.Extensions/src/System/IO/Path.cs
    startLine: 171
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Determines whether a path includes a file name extension.</p>\n"
  syntax:
    content: >-
      [Pure]

      public static bool HasExtension(string path)
    content.vb: >-
      <Pure>

      Public Shared Function HasExtension(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path to search for an extension. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the characters that follow the last directory separator (\\\\ or /) or volume separator (:) in the path include a period (.) followed by one or more characters; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.IO.Path.IsPathRooted(System.String)
  commentId: M:System.IO.Path.IsPathRooted(System.String)
  id: IsPathRooted(System.String)
  parent: System.IO.Path
  langs:
  - csharp
  - vb
  name: IsPathRooted(String)
  nameWithType: Path.IsPathRooted(String)
  fullName: System.IO.Path.IsPathRooted(System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPathRooted
    path: src/System.Runtime.Extensions/ref/System.Runtime.Extensions.cs
    startLine: 635
  assemblies:
  - System.Runtime.Extensions
  namespace: System.IO
  summary: "\n<p>Gets a value indicating whether the specified path string contains a root.</p>\n"
  syntax:
    content: public static bool IsPathRooted(string path)
    content.vb: Public Shared Function IsPathRooted(path As String) As Boolean
    parameters:
    - id: path
      type: System.String
      description: "\n<p>The path to test. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>path</em> contains a root; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>path</em> contains one or more of the invalid characters defined in <xref href=\"System.IO.Path.GetInvalidPathChars\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IO.PathTooLongException
  commentId: T:System.IO.PathTooLongException
  isExternal: false
  name: PathTooLongException
  nameWithType: PathTooLongException
  fullName: System.IO.PathTooLongException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.IO.IOException
  commentId: T:System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  nameWithType: IOException
  fullName: System.IO.IOException
