### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitHandle
  commentId: T:System.Threading.WaitHandle
  id: WaitHandle
  parent: System.Threading
  children:
  - System.Threading.WaitHandle.#ctor
  - System.Threading.WaitHandle.Dispose
  - System.Threading.WaitHandle.Dispose(System.Boolean)
  - System.Threading.WaitHandle.InvalidHandle
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  - System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  - System.Threading.WaitHandle.WaitOne
  - System.Threading.WaitHandle.WaitOne(System.Int32)
  - System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  - System.Threading.WaitHandle.WaitTimeout
  langs:
  - csharp
  - vb
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitHandle
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 29
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Encapsulates operating systemâ€“specific objects that wait for exclusive access to shared resources.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public abstract class WaitHandle : IDisposable
    content.vb: >-
      <ComVisible(True)>

      Public MustInherit Class WaitHandle
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Threading.WaitHandle.InvalidHandle
  commentId: F:System.Threading.WaitHandle.InvalidHandle
  id: InvalidHandle
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: InvalidHandle
  nameWithType: WaitHandle.InvalidHandle
  fullName: System.Threading.WaitHandle.InvalidHandle
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InvalidHandle
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 53
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Represents an invalid native operating system handle. This field is read-only.</p>\n"
  syntax:
    content: protected static readonly IntPtr InvalidHandle
    content.vb: Protected Shared ReadOnly InvalidHandle As IntPtr
    return:
      type: System.IntPtr
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
- uid: System.Threading.WaitHandle.WaitTimeout
  commentId: F:System.Threading.WaitHandle.WaitTimeout
  id: WaitTimeout
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitTimeout
  nameWithType: WaitHandle.WaitTimeout
  fullName: System.Threading.WaitHandle.WaitTimeout
  type: Field
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitTimeout
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Indicates that a <xref href=\"System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> operation timed out before any of the wait handles were signaled. This field is constant.</p>\n"
  syntax:
    content: public const int WaitTimeout = 258
    content.vb: Public Const WaitTimeout As Integer = 258
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: System.Threading.WaitHandle.#ctor
  commentId: M:System.Threading.WaitHandle.#ctor
  id: '#ctor'
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitHandle()
  nameWithType: WaitHandle.WaitHandle()
  fullName: System.Threading.WaitHandle.WaitHandle()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 67
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected WaitHandle()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Threading.WaitHandle.Dispose
  commentId: M:System.Threading.WaitHandle.Dispose
  id: Dispose
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: WaitHandle.Dispose()
  fullName: System.Threading.WaitHandle.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 598
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.WaitHandle.Dispose(System.Boolean)
  commentId: M:System.Threading.WaitHandle.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: WaitHandle.Dispose(Boolean)
  fullName: System.Threading.WaitHandle.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 589
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>When overridden in a derived class, releases the unmanaged resources used by the <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref>, and optionally releases the managed resources.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      protected virtual void Dispose(bool explicitDisposing)
    content.vb: >-
      <SecuritySafeCritical>

      Protected Overridable Sub Dispose(explicitDisposing As Boolean)
    parameters:
    - id: explicitDisposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  id: WaitAll(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitAll(WaitHandle[])
  nameWithType: WaitHandle.WaitAll(WaitHandle[])
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 365
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Waits for all the elements in the specified array to receive a signal.</p>\n"
  syntax:
    content: public static bool WaitAll(WaitHandle[] waitHandles)
    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle()) As Boolean
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: "\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise the method never returns.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>. -or- </p>\n<p>One or more of the objects in the <em>waitHandles</em> array are <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>waitHandles</em> is an array with no elements and the .NET Framework version is 2.0 or later.</p>\n"
  - type: System.DuplicateWaitObjectException
    commentId: T:System.DuplicateWaitObjectException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The <em>waitHandles</em> array contains elements that are duplicates. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.STAThreadAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is applied to the thread procedure for the current thread, and <em>waitHandles</em> contains more than one element. </p>\n"
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: "\n<p>\n<em>waitHandles</em> is an array with no elements and the .NET Framework version is 1.0 or 1.1. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle())
  name.vb: WaitAll(WaitHandle())
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.Int32)
  id: WaitAll(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitAll(WaitHandle[], Int32)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], Int32)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 370
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Waits for all the elements in the specified array to receive a signal, using an <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> value to specify the time interval.</p>\n"
  syntax:
    content: public static bool WaitAll(WaitHandle[] waitHandles, int millisecondsTimeout)
    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: "\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object (duplicates). </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\n<p>-or- </p>\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>waitHandles</em> is an array with no elements. </p>\n"
  - type: System.DuplicateWaitObjectException
    commentId: T:System.DuplicateWaitObjectException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The <em>waitHandles</em> array contains elements that are duplicates. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.STAThreadAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is applied to the thread procedure for the current thread, and <em>waitHandles</em> contains more than one element. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.Int32)
  name.vb: WaitAll(WaitHandle(), Int32)
- uid: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  commentId: M:System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  id: WaitAll(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitAll(WaitHandle[], TimeSpan)
  nameWithType: WaitHandle.WaitAll(WaitHandle[], TimeSpan)
  fullName: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAll
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 375
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Waits for all the elements in the specified array to receive a signal, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> value to specify the time interval.</p>\n"
  syntax:
    content: public static bool WaitAll(WaitHandle[] waitHandles, TimeSpan timeout)
    content.vb: Public Shared Function WaitAll(waitHandles As WaitHandle(), timeout As TimeSpan) As Boolean
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: "\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. This array cannot contain multiple references to the same object. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds, to wait indefinitely. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> when every element in <em>waitHandles</em> has received a signal; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>. </p>\n<p>-or- </p>\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\n<p>-or-</p>\n<p>\n<em>waitHandles</em> is an array with no elements. </p>\n"
  - type: System.DuplicateWaitObjectException
    commentId: T:System.DuplicateWaitObjectException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.ArgumentException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The <em>waitHandles</em> array contains elements that are duplicates. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.STAThreadAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute is applied to the thread procedure for the current thread, and <em>waitHandles</em> contains more than one element. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait terminated because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  nameWithType.vb: WaitHandle.WaitAll(WaitHandle(), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.WaitHandle.WaitAll(System.Threading.WaitHandle(), System.TimeSpan)
  name.vb: WaitAll(WaitHandle(), TimeSpan)
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  id: WaitAny(System.Threading.WaitHandle[])
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitAny(WaitHandle[])
  nameWithType: WaitHandle.WaitAny(WaitHandle[])
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 475
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Waits for any of the elements in the specified array to receive a signal.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int WaitAny(WaitHandle[] waitHandles)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function WaitAny(waitHandles As WaitHandle()) As Integer
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: "\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The array index of the object that satisfied the wait.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits. </p>\n"
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: "\n<p>\n<em>waitHandles</em> is an array with no elements, and the .NET Framework version is 1.0 or 1.1. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>waitHandles</em> is an array with no elements, and the .NET Framework version is 2.0 or later. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle())
  name.vb: WaitAny(WaitHandle())
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.Int32)
  id: WaitAny(System.Threading.WaitHandle[],System.Int32)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitAny(WaitHandle[], Int32)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], Int32)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 481
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Waits for any of the elements in the specified array to receive a signal, using a 32-bit signed integer to specify the time interval.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int WaitAny(WaitHandle[] waitHandles, int millisecondsTimeout)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function WaitAny(waitHandles As WaitHandle(), millisecondsTimeout As Integer) As Integer
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: "\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. </p>\n"
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The array index of the object that satisfied the wait, or <xref href=\"System.Threading.WaitHandle.WaitTimeout\" data-throw-if-not-resolved=\"false\"></xref> if no object satisfied the wait and a time interval equivalent to <em>millisecondsTimeout</em> has passed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>waitHandles</em> is an array with no elements. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), Int32)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.Int32)
  name.vb: WaitAny(WaitHandle(), Int32)
- uid: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  commentId: M:System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  id: WaitAny(System.Threading.WaitHandle[],System.TimeSpan)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitAny(WaitHandle[], TimeSpan)
  nameWithType: WaitHandle.WaitAny(WaitHandle[], TimeSpan)
  fullName: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle[], System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAny
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 465
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Waits for any of the elements in the specified array to receive a signal, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to specify the time interval.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static int WaitAny(WaitHandle[] waitHandles, TimeSpan timeout)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function WaitAny(waitHandles As WaitHandle(), timeout As TimeSpan) As Integer
    parameters:
    - id: waitHandles
      type: System.Threading.WaitHandle[]
      description: "\n<p>A <strong>WaitHandle</strong> array containing the objects for which the current instance will wait. </p>\n"
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The array index of the object that satisfied the wait, or <xref href=\"System.Threading.WaitHandle.WaitTimeout\" data-throw-if-not-resolved=\"false\"></xref> if no object satisfied the wait and a time interval equivalent to <em>timeout</em> has passed.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>waitHandles</em> parameter is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>One or more of the objects in the <em>waitHandles</em> array is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The number of objects in <em>waitHandles</em> is greater than the system permits. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out. </p>\n<p>-or-</p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>waitHandles</em> is an array with no elements. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <em>waitHandles</em> array contains a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  nameWithType.vb: WaitHandle.WaitAny(WaitHandle(), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Threading.WaitHandle.WaitAny(System.Threading.WaitHandle(), System.TimeSpan)
  name.vb: WaitAny(WaitHandle(), TimeSpan)
- uid: System.Threading.WaitHandle.WaitOne
  commentId: M:System.Threading.WaitHandle.WaitOne
  id: WaitOne
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitOne()
  nameWithType: WaitHandle.WaitOne()
  fullName: System.Threading.WaitHandle.WaitOne()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitOne
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 197
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> receives a signal.</p>\n"
  syntax:
    content: public virtual bool WaitOne()
    content.vb: Public Overridable Function WaitOne As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance receives a signal. If the current instance is never signaled, <xref href=\"System.Threading.WaitHandle.WaitOne(System.Int32,System.Boolean)\" data-throw-if-not-resolved=\"false\"></xref> never returns.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current instance is a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.WaitHandle.WaitOne(System.Int32)
  commentId: M:System.Threading.WaitHandle.WaitOne(System.Int32)
  id: WaitOne(System.Int32)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitOne(Int32)
  nameWithType: WaitHandle.WaitOne(Int32)
  fullName: System.Threading.WaitHandle.WaitOne(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitOne
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 203
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> receives a signal, using a 32-bit signed integer to specify the time interval in milliseconds.</p>\n"
  syntax:
    content: public virtual bool WaitOne(int millisecondsTimeout)
    content.vb: Public Overridable Function WaitOne(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance receives a signal; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current instance is a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  commentId: M:System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  id: WaitOne(System.TimeSpan)
  parent: System.Threading.WaitHandle
  langs:
  - csharp
  - vb
  name: WaitOne(TimeSpan)
  nameWithType: WaitHandle.WaitOne(TimeSpan)
  fullName: System.Threading.WaitHandle.WaitOne(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/WaitHandle.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitOne
    path: src/mscorlib/src/System/Threading/WaitHandle.cs
    startLine: 208
  assemblies:
  - System.Runtime
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until the current instance receives a signal, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to specify the time interval.</p>\n"
  syntax:
    content: public virtual bool WaitOne(TimeSpan timeout)
    content.vb: Public Overridable Function WaitOne(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current instance receives a signal; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out.</p>\n<p>-or-</p>\n<p>\n<em>timeout</em> is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Threading.AbandonedMutexException
    commentId: T:System.Threading.AbandonedMutexException
    description: "\n<p>The wait completed because a thread exited without releasing a mutex. This exception is not thrown on Windows 98 or Windows Millennium Edition.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current instance is a transparent proxy for a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> in another application domain.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IntPtr
  commentId: T:System.IntPtr
  parent: System
  isExternal: false
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.WaitHandle[]
  name: WaitHandle[]
  nameWithType: WaitHandle[]
  fullName: System.Threading.WaitHandle[]
  nameWithType.vb: WaitHandle()
  fullname.vb: System.Threading.WaitHandle()
  name.vb: WaitHandle()
  spec.csharp:
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Threading.WaitHandle
    name: WaitHandle
    nameWithType: WaitHandle
    fullName: System.Threading.WaitHandle
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.DuplicateWaitObjectException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ApplicationException
- uid: System.Threading.AbandonedMutexException
  commentId: T:System.Threading.AbandonedMutexException
  isExternal: false
  name: AbandonedMutexException
  nameWithType: AbandonedMutexException
  fullName: System.Threading.AbandonedMutexException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
