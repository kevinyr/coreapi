### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Tracing.EventSource
  commentId: T:System.Diagnostics.Tracing.EventSource
  id: EventSource
  parent: System.Diagnostics.Tracing
  children:
  - System.Diagnostics.Tracing.EventSource.#ctor
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  - System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  - System.Diagnostics.Tracing.EventSource.ConstructionException
  - System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  - System.Diagnostics.Tracing.EventSource.Dispose
  - System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  - System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  - System.Diagnostics.Tracing.EventSource.Finalize
  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  - System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  - System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  - System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  - System.Diagnostics.Tracing.EventSource.GetSources
  - System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  - System.Diagnostics.Tracing.EventSource.Guid
  - System.Diagnostics.Tracing.EventSource.IsEnabled
  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  - System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  - System.Diagnostics.Tracing.EventSource.Name
  - System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  - System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  - System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  - System.Diagnostics.Tracing.EventSource.Settings
  - System.Diagnostics.Tracing.EventSource.ToString
  - System.Diagnostics.Tracing.EventSource.Write(System.String)
  - System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  - System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  - System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  - System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  langs:
  - csharp
  - vb
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EventSource
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 46
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Provides the ability to create events for event tracing for Windows (ETW).</p>\n"
  syntax:
    content: 'public class EventSource : IDisposable'
    content.vb: >-
      Public Class EventSource
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Diagnostics.Tracing.EventSource.#ctor
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor
  id: '#ctor'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource()
  nameWithType: EventSource.EventSource()
  fullName: System.Diagnostics.Tracing.EventSource.EventSource()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 635
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected EventSource()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(Boolean)
  nameWithType: EventSource.EventSource(Boolean)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 651
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class and specifies whether to throw an exception when an error occurs in the underlying Windows code.</p>\n"
  syntax:
    content: protected EventSource(bool throwOnEventWriteErrors)
    content.vb: Protected Sub New(throwOnEventWriteErrors As Boolean)
    parameters:
    - id: throwOnEventWriteErrors
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to throw an exception when an error occurs in the underlying Windows code; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings)
  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(EventSourceSettings)
  nameWithType: EventSource.EventSource(EventSourceSettings)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 658
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified configuration settings.</p>\n"
  syntax:
    content: protected EventSource(EventSourceSettings settings)
    content.vb: Protected Sub New(settings As EventSourceSettings)
    parameters:
    - id: settings
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  id: '#ctor(System.Diagnostics.Tracing.EventSourceSettings,System.String[])'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(EventSourceSettings, String[])
  nameWithType: EventSource.EventSource(EventSourceSettings, String[])
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 669
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> to be used with non-contract events that contains the specified settings and traits.</p>\n"
  syntax:
    content: protected EventSource(EventSourceSettings settings, params string[] traits)
    content.vb: Protected Sub New(settings As EventSourceSettings, ParamArray traits As String())
    parameters:
    - id: settings
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
    - id: traits
      type: System.String[]
      description: "\n<p>The key-value pairs that specify traits for the event source.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>traits</em> is not specified in key-value pairs.</p>\n"
  seealso:
  - linkId: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
    commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  nameWithType.vb: EventSource.EventSource(EventSourceSettings, String())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.Diagnostics.Tracing.EventSourceSettings, System.String())
  name.vb: EventSource(EventSourceSettings, String())
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(String)
  nameWithType: EventSource.EventSource(String)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 58
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified name.</p>\n"
  syntax:
    content: public EventSource(string eventSourceName)
    content.vb: Public Sub New(eventSourceName As String)
    parameters:
    - id: eventSourceName
      type: System.String
      description: "\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)
  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings)'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(String, EventSourceSettings)
  nameWithType: EventSource.EventSource(String, EventSourceSettings)
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 72
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified name and settings.</p>\n"
  syntax:
    content: public EventSource(string eventSourceName, EventSourceSettings config)
    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings)
    parameters:
    - id: eventSourceName
      type: System.String
      description: "\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\n"
    - id: config
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  commentId: M:System.Diagnostics.Tracing.EventSource.#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])
  id: '#ctor(System.String,System.Diagnostics.Tracing.EventSourceSettings,System.String[])'
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventSource(String, EventSourceSettings, String[])
  nameWithType: EventSource.EventSource(String, EventSourceSettings, String[])
  fullName: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String[])
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 91
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class with the specified configuration settings.</p>\n"
  syntax:
    content: public EventSource(string eventSourceName, EventSourceSettings config, params string[] traits)
    content.vb: Public Sub New(eventSourceName As String, config As EventSourceSettings, ParamArray traits As String())
    parameters:
    - id: eventSourceName
      type: System.String
      description: "\n<p>The name to apply to the event source. Must not be <strong>null</strong>.</p>\n"
    - id: config
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>A bitwise combination of the enumeration values that specify the configuration settings to apply to the event source.</p>\n"
    - id: traits
      type: System.String[]
      description: "\n<p>The key-value pairs that specify traits for the event source.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventSourceName</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>traits</em> is not specified in key-value pairs.</p>\n"
  seealso:
  - linkId: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
    commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  nameWithType.vb: EventSource.EventSource(String, EventSourceSettings, String())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.EventSource(System.String, System.Diagnostics.Tracing.EventSourceSettings, System.String())
  name.vb: EventSource(String, EventSourceSettings, String())
- uid: System.Diagnostics.Tracing.EventSource.ConstructionException
  commentId: P:System.Diagnostics.Tracing.EventSource.ConstructionException
  id: ConstructionException
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: ConstructionException
  nameWithType: EventSource.ConstructionException
  fullName: System.Diagnostics.Tracing.EventSource.ConstructionException
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ConstructionException
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 571
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets any exception that was thrown during the construction of the event source.</p>\n"
  syntax:
    content: public Exception ConstructionException { get; }
    content.vb: Public ReadOnly Property ConstructionException As Exception
    parameters: []
    return:
      type: System.Exception
      description: "\n<p>The exception that was thrown during the construction of the event source, or <strong>null</strong> if no exception was thrown. </p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  commentId: P:System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  id: CurrentThreadActivityId
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: CurrentThreadActivityId
  nameWithType: EventSource.CurrentThreadActivityId
  fullName: System.Diagnostics.Tracing.EventSource.CurrentThreadActivityId
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentThreadActivityId
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs
    startLine: 104
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets the activity ID of the current thread. </p>\n"
  syntax:
    content: >-
      public static Guid CurrentThreadActivityId

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Shared ReadOnly Property CurrentThreadActivityId As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>The activity ID of the current thread. </p>\n"
  seealso:
  - linkId: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
    commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.Guid
  commentId: P:System.Diagnostics.Tracing.EventSource.Guid
  id: Guid
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Guid
  nameWithType: EventSource.Guid
  fullName: System.Diagnostics.Tracing.EventSource.Guid
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Guid
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 264
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>The unique identifier for the event source.</p>\n"
  syntax:
    content: public Guid Guid { get; }
    content.vb: Public ReadOnly Property Guid As Guid
    parameters: []
    return:
      type: System.Guid
      description: "\n<p>A unique identifier for the event source.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.Name
  commentId: P:System.Diagnostics.Tracing.EventSource.Name
  id: Name
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: EventSource.Name
  fullName: System.Diagnostics.Tracing.EventSource.Name
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Name
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 260
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>The friendly name of the class that is derived from the event source.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The friendly name of the derived class.  The default is the simple name of the class.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.Settings
  commentId: P:System.Diagnostics.Tracing.EventSource.Settings
  id: Settings
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: EventSource.Settings
  fullName: System.Diagnostics.Tracing.EventSource.Settings
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Settings
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 392
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the settings applied to this event source.</p>\n"
  syntax:
    content: public EventSourceSettings Settings { get; }
    content.vb: Public ReadOnly Property Settings As EventSourceSettings
    parameters: []
    return:
      type: System.Diagnostics.Tracing.EventSourceSettings
      description: "\n<p>The settings applied to this event source.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  commentId: E:System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  id: EventCommandExecuted
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: EventCommandExecuted
  nameWithType: EventSource.EventCommandExecuted
  fullName: System.Diagnostics.Tracing.EventSource.EventCommandExecuted
  type: Event
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EventCommandExecuted
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 605
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Occurs when a command comes from an event listener.</p>\n"
  syntax:
    content: public event EventHandler<EventCommandEventArgs> EventCommandExecuted
    content.vb: Public Event EventCommandExecuted As EventHandler(Of EventCommandEventArgs)
    return:
      type: System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Dispose
  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose
  id: Dispose
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: EventSource.Dispose()
  fullName: System.Diagnostics.Tracing.EventSource.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1327
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  commentId: M:System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: EventSource.Dispose(Boolean)
  fullName: System.Diagnostics.Tracing.EventSource.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1342
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> class and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources. </p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.Tracing.EventSource.Finalize
  commentId: M:System.Diagnostics.Tracing.EventSource.Finalize
  id: Finalize
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: EventSource.Finalize()
  fullName: System.Diagnostics.Tracing.EventSource.Finalize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Finalize
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1372
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Allows the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref> object to attempt to free resources and perform other cleanup operations before the  object is reclaimed by garbage collection.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String)
  id: GenerateManifest(System.Type,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GenerateManifest(Type, String)
  nameWithType: EventSource.GenerateManifest(Type, String)
  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenerateManifest
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 455
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Returns a string of the XML manifest that is associated with the current event source.</p>\n"
  syntax:
    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest)
    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    - id: assemblyPathToIncludeInManifest
      type: System.String
      description: "\n<p>The path to the assembly file (.dll) to include in the <a href=\"http://msdn.microsoft.com/library/windows/desktop/aa384022(v=vs.85).aspx\">provider</a> element of the manifest. </p>\n"
    return:
      type: System.String
      description: "\n<p>The XML data string.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  commentId: M:System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  id: GenerateManifest(System.Type,System.String,System.Diagnostics.Tracing.EventManifestOptions)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GenerateManifest(Type, String, EventManifestOptions)
  nameWithType: EventSource.GenerateManifest(Type, String, EventManifestOptions)
  fullName: System.Diagnostics.Tracing.EventSource.GenerateManifest(System.Type, System.String, System.Diagnostics.Tracing.EventManifestOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenerateManifest
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 471
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Returns a string of the XML manifest that is associated with the current event source.</p>\n"
  syntax:
    content: public static string GenerateManifest(Type eventSourceType, string assemblyPathToIncludeInManifest, EventManifestOptions flags)
    content.vb: Public Shared Function GenerateManifest(eventSourceType As Type, assemblyPathToIncludeInManifest As String, flags As EventManifestOptions) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    - id: assemblyPathToIncludeInManifest
      type: System.String
      description: "\n<p>The path to the assembly file (.dll) file to include in the <a href=\"http://msdn.microsoft.com/library/windows/desktop/aa384022(v=vs.85).aspx\">provider</a> element of the manifest. </p>\n"
    - id: flags
      type: System.Diagnostics.Tracing.EventManifestOptions
      description: "\n<p>A bitwise combination of the enumeration values that specify how the manifest is generated.</p>\n"
    return:
      type: System.String
      description: "\n<p>The XML data string or <strong>null</strong> (see remarks).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  commentId: M:System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  id: GetGuid(System.Type)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetGuid(Type)
  nameWithType: EventSource.GetGuid(Type)
  fullName: System.Diagnostics.Tracing.EventSource.GetGuid(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetGuid
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 403
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the unique identifier for this implementation of the event source.</p>\n"
  syntax:
    content: public static Guid GetGuid(Type eventSourceType)
    content.vb: Public Shared Function GetGuid(eventSourceType As Type) As Guid
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    return:
      type: System.Guid
      description: "\n<p>A unique identifier for this event source type.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  commentId: M:System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  id: GetName(System.Type)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetName(Type)
  nameWithType: EventSource.GetName(Type)
  fullName: System.Diagnostics.Tracing.EventSource.GetName(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetName
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 440
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the friendly name of the event source.</p>\n"
  syntax:
    content: public static string GetName(Type eventSourceType)
    content.vb: Public Shared Function GetName(eventSourceType As Type) As String
    parameters:
    - id: eventSourceType
      type: System.Type
      description: "\n<p>The type of the event source.</p>\n"
    return:
      type: System.String
      description: "\n<p>The friendly name of the event source. The default is the simple name of the class.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetSources
  commentId: M:System.Diagnostics.Tracing.EventSource.GetSources
  id: GetSources
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetSources()
  nameWithType: EventSource.GetSources()
  fullName: System.Diagnostics.Tracing.EventSource.GetSources()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSources
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 486
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets a snapshot of all the event sources for the application domain.</p>\n"
  syntax:
    content: public static IEnumerable<EventSource> GetSources()
    content.vb: Public Shared Function GetSources As IEnumerable(Of EventSource)
    return:
      type: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
      description: "\n<p>An enumeration of all the event sources in the application domain.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  id: GetTrait(System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: GetTrait(String)
  nameWithType: EventSource.GetTrait(String)
  fullName: System.Diagnostics.Tracing.EventSource.GetTrait(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetTrait
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 581
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Gets the trait value associated with the specified key.</p>\n"
  syntax:
    content: public string GetTrait(string key)
    content.vb: Public Function GetTrait(key As String) As String
    parameters:
    - id: key
      type: System.String
      description: "\n<p>The key of the trait to get.</p>\n"
    return:
      type: System.String
      description: "\n<p>The trait value associated with the specified key. If the key is not found, returns <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled
  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled
  id: IsEnabled
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: IsEnabled()
  nameWithType: EventSource.IsEnabled()
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsEnabled
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 270
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Determines whether the current event source is enabled.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      public bool IsEnabled()
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Public Function IsEnabled As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current event source is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: IsEnabled(EventLevel, EventKeywords)
  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords)
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsEnabled
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 285
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Determines whether the current event source that has the specified level and keyword is enabled.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      public bool IsEnabled(EventLevel level, EventKeywords keywords)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Public Function IsEnabled(level As EventLevel, keywords As EventKeywords) As Boolean
    parameters:
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The level of the event source.</p>\n"
    - id: keywords
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The keyword of the event source.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the event source is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  commentId: M:System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  id: IsEnabled(System.Diagnostics.Tracing.EventLevel,System.Diagnostics.Tracing.EventKeywords,System.Diagnostics.Tracing.EventChannel)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: IsEnabled(EventLevel, EventKeywords, EventChannel)
  nameWithType: EventSource.IsEnabled(EventLevel, EventKeywords, EventChannel)
  fullName: System.Diagnostics.Tracing.EventSource.IsEnabled(System.Diagnostics.Tracing.EventLevel, System.Diagnostics.Tracing.EventKeywords, System.Diagnostics.Tracing.EventChannel)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsEnabled
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 301
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Determines whether the current event source is enabled for events with the specified level, keywords and channel.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      public bool IsEnabled(EventLevel level, EventKeywords keywords, EventChannel channel)
    content.vb: >-
      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Public Function IsEnabled(level As EventLevel, keywords As EventKeywords, channel As EventChannel) As Boolean
    parameters:
    - id: level
      type: System.Diagnostics.Tracing.EventLevel
      description: "\n<p>The event level to check. An event source will be considered enabled when its level is greater than or equal to <em>level</em>.</p>\n"
    - id: keywords
      type: System.Diagnostics.Tracing.EventKeywords
      description: "\n<p>The event keywords to check.</p>\n"
    - id: channel
      type: System.Diagnostics.Tracing.EventChannel
      description: "\n<p>The event channel to check.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the event source is enabled for the specified event level, keywords and channel; otherwise, <strong>false</strong>.</p>\n<p>The result of this method is only an approximation of whether a particular event is active.  Use it to avoid expensive computation for logging when logging is disabled.   Event sources may have additional filtering that determines their activity..</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  commentId: M:System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  id: OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: OnEventCommand(EventCommandEventArgs)
  nameWithType: EventSource.OnEventCommand(EventCommandEventArgs)
  fullName: System.Diagnostics.Tracing.EventSource.OnEventCommand(System.Diagnostics.Tracing.EventCommandEventArgs)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OnEventCommand
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 712
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Called when the current event source is updated by the controller.</p>\n"
  syntax:
    content: protected virtual void OnEventCommand(EventCommandEventArgs command)
    content.vb: Protected Overridable Sub OnEventCommand(command As EventCommandEventArgs)
    parameters:
    - id: command
      type: System.Diagnostics.Tracing.EventCommandEventArgs
      description: "\n<p>The arguments for the event.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  commentId: M:System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  id: SendCommand(System.Diagnostics.Tracing.EventSource,System.Diagnostics.Tracing.EventCommand,System.Collections.Generic.IDictionary{System.String,System.String})
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: SendCommand(EventSource, EventCommand, IDictionary<String, String>)
  nameWithType: EventSource.SendCommand(EventSource, EventCommand, IDictionary<String, String>)
  fullName: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary<System.String, System.String>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SendCommand
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 510
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Sends a command to a specified event source.</p>\n"
  syntax:
    content: public static void SendCommand(EventSource eventSource, EventCommand command, IDictionary<string, string> commandArguments)
    content.vb: Public Shared Sub SendCommand(eventSource As EventSource, command As EventCommand, commandArguments As IDictionary(Of String, String))
    parameters:
    - id: eventSource
      type: System.Diagnostics.Tracing.EventSource
      description: "\n<p>The event source to send the command to.</p>\n"
    - id: command
      type: System.Diagnostics.Tracing.EventCommand
      description: "\n<p>The event command to send.</p>\n"
    - id: commandArguments
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "\n<p>The arguments for the event command.</p>\n"
  nameWithType.vb: EventSource.SendCommand(EventSource, EventCommand, IDictionary(Of String, String))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Tracing.EventSource.SendCommand(System.Diagnostics.Tracing.EventSource, System.Diagnostics.Tracing.EventCommand, System.Collections.Generic.IDictionary(Of System.String, System.String))
  name.vb: SendCommand(EventSource, EventCommand, IDictionary(Of String, String))
- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  id: SetCurrentThreadActivityId(System.Guid)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: SetCurrentThreadActivityId(Guid)
  nameWithType: EventSource.SetCurrentThreadActivityId(Guid)
  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCurrentThreadActivityId
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs
    startLine: 31
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Sets the activity ID on the current thread.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void SetCurrentThreadActivityId(Guid activityId)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub SetCurrentThreadActivityId(activityId As Guid)
    parameters:
    - id: activityId
      type: System.Guid
      description: "\n<p>The current thread's new activity ID, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> to indicate that work on the current thread is not associated with any activity. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  commentId: M:System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid,System.Guid@)
  id: SetCurrentThreadActivityId(System.Guid,System.Guid@)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: SetCurrentThreadActivityId(Guid, out Guid)
  nameWithType: EventSource.SetCurrentThreadActivityId(Guid, out Guid)
  fullName: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, out System.Guid)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetCurrentThreadActivityId
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource_CoreCLR.cs
    startLine: 82
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Sets the activity ID on the current thread, and returns the previous activity ID.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void SetCurrentThreadActivityId(Guid activityId, out Guid oldActivityThatWillContinue)
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub SetCurrentThreadActivityId(activityId As Guid, ByRef oldActivityThatWillContinue As Guid)
    parameters:
    - id: activityId
      type: System.Guid
      description: "\n<p>The current thread's new activity ID, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> to indicate that work on the current thread is not associated with any activity.</p>\n"
    - id: oldActivityThatWillContinue
      type: System.Guid
      description: "\n<p>When this method returns, contains the previous activity ID on the current thread. </p>\n"
  nameWithType.vb: EventSource.SetCurrentThreadActivityId(Guid, ByRef Guid)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Tracing.EventSource.SetCurrentThreadActivityId(System.Guid, ByRef System.Guid)
  name.vb: SetCurrentThreadActivityId(Guid, ByRef Guid)
- uid: System.Diagnostics.Tracing.EventSource.ToString
  commentId: M:System.Diagnostics.Tracing.EventSource.ToString
  id: ToString
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: EventSource.ToString()
  fullName: System.Diagnostics.Tracing.EventSource.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 597
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Obtains a string representation of the current event source instance.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The name and unique identifier that identify the current event source.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Diagnostics.Tracing.EventSource.Write(System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String)
  id: Write(System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write(String)
  nameWithType: EventSource.Write(String)
  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 112
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event without fields, but with the specified name and default options.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Write(string eventName)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Write(eventName As String)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event to write.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  id: Write(System.String,System.Diagnostics.Tracing.EventSourceOptions)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write(String, EventSourceOptions)
  nameWithType: EventSource.Write(String, EventSourceOptions)
  fullName: System.Diagnostics.Tracing.EventSource.Write(System.String, System.Diagnostics.Tracing.EventSourceOptions)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 140
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event without fields, but with the specified name and options.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Write(string eventName, EventSourceOptions options)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Write(eventName As String, options As EventSourceOptions)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event to write.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The options such as level, keywords and operation code for the event.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>eventName</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,``0)
  id: Write``1(System.String,``0)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, T)
  nameWithType: EventSource.Write<T>(String, T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 177
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name and data.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Write<T>(string eventName, T data)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Write(Of T)(eventName As String, data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  nameWithType.vb: EventSource.Write(Of T)(String, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, T)
  name.vb: Write(Of T)(String, T)
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions,``0)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, EventSourceOptions, T)
  nameWithType: EventSource.Write<T>(String, EventSourceOptions, T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 214
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name, event data and options.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Write<T>(string eventName, EventSourceOptions options, T data)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Write(Of T)(eventName As String, options As EventSourceOptions, data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The event options.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  nameWithType.vb: EventSource.Write(Of T)(String, EventSourceOptions, T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, System.Diagnostics.Tracing.EventSourceOptions, T)
  name.vb: Write(Of T)(String, EventSourceOptions, T)
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,``0@)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, ref EventSourceOptions, ref T)
  nameWithType: EventSource.Write<T>(String, ref EventSourceOptions, ref T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 253
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name, options and event data.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Write<T>(string eventName, ref EventSourceOptions options, ref T data)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The event options.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  nameWithType.vb: EventSource.Write(Of T)(String, ByRef EventSourceOptions, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef T)
  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef T)
- uid: System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  commentId: M:System.Diagnostics.Tracing.EventSource.Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  id: Write``1(System.String,System.Diagnostics.Tracing.EventSourceOptions@,System.Guid@,System.Guid@,``0@)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)
  nameWithType: EventSource.Write<T>(String, ref EventSourceOptions, ref Guid, ref Guid, ref T)
  fullName: System.Diagnostics.Tracing.EventSource.Write<T>(System.String, ref System.Diagnostics.Tracing.EventSourceOptions, ref System.Guid, ref System.Guid, ref T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Write
    path: src/mscorlib/src/System/Diagnostics/Eventing/TraceLogging/TraceLoggingEventSource.cs
    startLine: 299
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event with the specified name, options, related activity and event data.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void Write<T>(string eventName, ref EventSourceOptions options, ref Guid activityId, ref Guid relatedActivityId, ref T data)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub Write(Of T)(eventName As String, ByRef options As EventSourceOptions, ByRef activityId As Guid, ByRef relatedActivityId As Guid, ByRef data As T)
    parameters:
    - id: eventName
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    - id: options
      type: System.Diagnostics.Tracing.EventSourceOptions
      description: "\n<p>The event options.</p>\n"
    - id: activityId
      type: System.Guid
      description: "\n<p>The ID of the activity associated with the event.</p>\n"
    - id: relatedActivityId
      type: System.Guid
      description: "\n<p>The ID of an associated activity, or <xref href=\"System.Guid.Empty\" data-throw-if-not-resolved=\"false\"></xref> if there is no associated activity.</p>\n"
    - id: data
      type: '{T}'
      description: "\n<p>The event data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventDataAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that defines the event and its associated data. This type must be an anonymous type or marked with the <xref href=\"System.Diagnostics.Tracing.EventSourceAttribute\" data-throw-if-not-resolved=\"false\"></xref> attribute.</p>\n"
  nameWithType.vb: EventSource.Write(Of T)(String, ByRef EventSourceOptions, ByRef Guid, ByRef Guid, ByRef T)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Diagnostics.Tracing.EventSource.Write(Of T)(System.String, ByRef System.Diagnostics.Tracing.EventSourceOptions, ByRef System.Guid, ByRef System.Guid, ByRef T)
  name.vb: Write(Of T)(String, ByRef EventSourceOptions, ByRef Guid, ByRef Guid, ByRef T)
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  id: WriteEvent(System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32)
  nameWithType: EventSource.WriteEvent(Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 716
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier. This value should be between 0 and 65535.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Byte[])
  id: WriteEvent(System.Int32,System.Byte[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Byte[])
  nameWithType: EventSource.WriteEvent(Int32, Byte[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 980
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and byte array argument.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, byte[] arg1)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Byte())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Byte[]
      description: "\n<p>A byte array argument.</p>\n"
  nameWithType.vb: EventSource.WriteEvent(Int32, Byte())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Byte())
  name.vb: WriteEvent(Int32, Byte())
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32)
  nameWithType: EventSource.WriteEvent(Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 724
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer argument.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, int arg1)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32, Int32)
  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 737
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, int arg1, int arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32, Int32, Int32)
  nameWithType: EventSource.WriteEvent(Int32, Int32, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 752
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, int arg1, int arg2, int arg3)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As Integer, arg3 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
    - id: arg3
      type: System.Int32
      description: "\n<p>An integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int32,System.String)
  id: WriteEvent(System.Int32,System.Int32,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int32, String)
  nameWithType: EventSource.WriteEvent(Int32, Int32, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 961
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 32-bit integer and string arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, int arg1, string arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Integer, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier. This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int32
      description: "\n<p>A 32-bit integer argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64)
  id: WriteEvent(System.Int32,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64)
  nameWithType: EventSource.WriteEvent(Int32, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 770
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit integer argument.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, long arg1)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Byte[])
  id: WriteEvent(System.Int32,System.Int64,System.Byte[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, Byte[])
  nameWithType: EventSource.WriteEvent(Int32, Int64, Byte[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1011
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes the event data using the specified indentifier and 64-bit integer and byte array arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, long arg1, byte[] arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Byte())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64-bit integer argument.</p>\n"
    - id: arg2
      type: System.Byte[]
      description: "\n<p>A byte array argument.</p>\n"
  nameWithType.vb: EventSource.WriteEvent(Int32, Int64, Byte())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Byte())
  name.vb: WriteEvent(Int32, Int64, Byte())
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64)
  id: WriteEvent(System.Int32,System.Int64,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, Int64)
  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 783
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, long arg1, long arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
    - id: arg2
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  id: WriteEvent(System.Int32,System.Int64,System.Int64,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, Int64, Int64)
  nameWithType: EventSource.WriteEvent(Int32, Int64, Int64, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.Int64, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 798
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, long arg1, long arg2, long arg3)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As Long, arg3 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
    - id: arg2
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
    - id: arg3
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Int64,System.String)
  id: WriteEvent(System.Int32,System.Int64,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Int64, String)
  nameWithType: EventSource.WriteEvent(Int32, Int64, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Int64, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 941
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and 64-bit integer, and string arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, long arg1, string arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As Long, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.Int64
      description: "\n<p>A 64-bit integer argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.Object[])
  id: WriteEvent(System.Int32,System.Object[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, Object[])
  nameWithType: EventSource.WriteEvent(Int32, Object[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1300
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and array of arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, params object[] args)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, ParamArray args As Object())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects.</p>\n"
  nameWithType.vb: EventSource.WriteEvent(Int32, Object())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.Object())
  name.vb: WriteEvent(Int32, Object())
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String)
  id: WriteEvent(System.Int32,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String)
  nameWithType: EventSource.WriteEvent(Int32, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 816
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and string argument.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, string arg1)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32)
  id: WriteEvent(System.Int32,System.String,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, Int32)
  nameWithType: EventSource.WriteEvent(Int32, String, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 880
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, string arg1, int arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>A 32 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  id: WriteEvent(System.Int32,System.String,System.Int32,System.Int32)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, Int32, Int32)
  nameWithType: EventSource.WriteEvent(Int32, String, Int32, Int32)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 899
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, string arg1, int arg2, int arg3)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Integer, arg3 As Integer)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.Int32
      description: "\n<p>A 32 bit integer argument.</p>\n"
    - id: arg3
      type: System.Int32
      description: "\n<p>A 32 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.Int64)
  id: WriteEvent(System.Int32,System.String,System.Int64)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, Int64)
  nameWithType: EventSource.WriteEvent(Int32, String, Int64)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 921
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, string arg1, long arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As Long)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.Int64
      description: "\n<p>A 64 bit integer argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String)
  id: WriteEvent(System.Int32,System.String,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, String)
  nameWithType: EventSource.WriteEvent(Int32, String, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 833
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and string arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, string arg1, string arg2)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32,System.String,System.String,System.String)
  id: WriteEvent(System.Int32,System.String,System.String,System.String)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEvent(Int32, String, String, String)
  nameWithType: EventSource.WriteEvent(Int32, String, String, String)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32, System.String, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEvent
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 854
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>Writes an event by using the provided event identifier and string arguments.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      [SuppressMessage("Microsoft.Concurrency", "CA8001", Justification = "This does not need to be correct when racing with other threads")]

      protected void WriteEvent(int eventId, string arg1, string arg2, string arg3)
    content.vb: >-
      <SecuritySafeCritical>

      <SuppressMessage("Microsoft.Concurrency", "CA8001", Justification:="This does not need to be correct when racing with other threads")>

      Protected Sub WriteEvent(eventId As Integer, arg1 As String, arg2 As String, arg3 As String)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.  This value should be between 0 and 65535.</p>\n"
    - id: arg1
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg2
      type: System.String
      description: "\n<p>A string argument.</p>\n"
    - id: arg3
      type: System.String
      description: "\n<p>A string argument.</p>\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  id: WriteEventCore(System.Int32,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEventCore(Int32, Int32, EventSource.EventData*)
  nameWithType: EventSource.WriteEventCore(Int32, Int32, EventSource.EventData*)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventCore(System.Int32, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEventCore
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1111
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p></p>\n<p>Creates a new <xref href=\"System.Diagnostics.Tracing.EventSource.WriteEvent(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> overload by using the provided event identifier and event data.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      protected void WriteEventCore(int eventId, int eventDataCount, EventSource.EventData*data)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Protected Sub WriteEventCore(eventId As Integer, eventDataCount As Integer, data As EventSource.EventData *)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>The event identifier.</p>\n"
    - id: eventDataCount
      type: System.Int32
      description: "\n<p>The number of event data items.</p>\n"
    - id: data
      type: System.Diagnostics.Tracing.EventSource.EventData*
      description: "\n<p>The structure that contains the event data.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  id: WriteEventWithRelatedActivityId(System.Int32,System.Guid,System.Object[])
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEventWithRelatedActivityId(Int32, Guid, Object[])
  nameWithType: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object[])
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object[])
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEventWithRelatedActivityId
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1315
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Writes an event that indicates that the current activity is related to another activity. </p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      protected void WriteEventWithRelatedActivityId(int eventId, Guid relatedActivityId, params object[] args)
    content.vb: >-
      <SecuritySafeCritical>

      Protected Sub WriteEventWithRelatedActivityId(eventId As Integer, relatedActivityId As Guid, ParamArray args As Object())
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    - id: relatedActivityId
      type: System.Guid
      description: "\n<p>The related activity identifier. </p>\n"
    - id: args
      type: System.Object[]
      description: "\n<p>An array of objects that contain data about the event. </p>\n"
  nameWithType.vb: EventSource.WriteEventWithRelatedActivityId(Int32, Guid, Object())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityId(System.Int32, System.Guid, System.Object())
  name.vb: WriteEventWithRelatedActivityId(Int32, Guid, Object())
- uid: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  commentId: M:System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  id: WriteEventWithRelatedActivityIdCore(System.Int32,System.Guid*,System.Int32,System.Diagnostics.Tracing.EventSource.EventData*)
  parent: System.Diagnostics.Tracing.EventSource
  langs:
  - csharp
  - vb
  name: WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)
  nameWithType: EventSource.WriteEventWithRelatedActivityIdCore(Int32, Guid*, Int32, EventSource.EventData*)
  fullName: System.Diagnostics.Tracing.EventSource.WriteEventWithRelatedActivityIdCore(System.Int32, System.Guid*, System.Int32, System.Diagnostics.Tracing.EventSource.EventData*)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WriteEventWithRelatedActivityIdCore
    path: src/mscorlib/src/System/Diagnostics/Eventing/EventSource.cs
    startLine: 1143
  assemblies:
  - System.Diagnostics.Tracing
  namespace: System.Diagnostics.Tracing
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Writes an event that indicates that the current activity is related to another activity.</p>\n"
  syntax:
    content: >-
      [SecurityCritical]

      [CLSCompliant(false)]

      protected void WriteEventWithRelatedActivityIdCore(int eventId, Guid*relatedActivityId, int eventDataCount, EventSource.EventData*data)
    content.vb: >-
      <SecurityCritical>

      <CLSCompliant(False)>

      Protected Sub WriteEventWithRelatedActivityIdCore(eventId As Integer, relatedActivityId As Guid *, eventDataCount As Integer, data As EventSource.EventData *)
    parameters:
    - id: eventId
      type: System.Int32
      description: "\n<p>An identifier that uniquely identifies this event within the <xref href=\"System.Diagnostics.Tracing.EventSource\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    - id: relatedActivityId
      type: System.Guid*
      description: "\n<p>A pointer to the GUID of the related activity ID. </p>\n"
    - id: eventDataCount
      type: System.Int32
      description: "\n<p>The number of items in the <em>data</em> field. </p>\n"
    - id: data
      type: System.Diagnostics.Tracing.EventSource.EventData*
      description: "\n<p>A pointer to the first item in the event data field. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: System.Diagnostics.Tracing
  commentId: N:System.Diagnostics.Tracing
  isExternal: false
  name: System.Diagnostics.Tracing
  nameWithType: System.Diagnostics.Tracing
  fullName: System.Diagnostics.Tracing
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Tracing.EventSourceSettings
  commentId: T:System.Diagnostics.Tracing.EventSourceSettings
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSourceSettings
  nameWithType: EventSourceSettings
  fullName: System.Diagnostics.Tracing.EventSourceSettings
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}
  commentId: T:System.EventHandler{System.Diagnostics.Tracing.EventCommandEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<EventCommandEventArgs>
  nameWithType: EventHandler<EventCommandEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Tracing.EventCommandEventArgs>
  nameWithType.vb: EventHandler(Of EventCommandEventArgs)
  fullname.vb: System.EventHandler(Of System.Diagnostics.Tracing.EventCommandEventArgs)
  name.vb: EventHandler(Of EventCommandEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Tracing.EventCommandEventArgs
    name: EventCommandEventArgs
    nameWithType: EventCommandEventArgs
    fullName: System.Diagnostics.Tracing.EventCommandEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Tracing.EventCommandEventArgs
    name: EventCommandEventArgs
    nameWithType: EventCommandEventArgs
    fullName: System.Diagnostics.Tracing.EventCommandEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: false
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Diagnostics.Tracing.EventManifestOptions
  commentId: T:System.Diagnostics.Tracing.EventManifestOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventManifestOptions
  nameWithType: EventManifestOptions
  fullName: System.Diagnostics.Tracing.EventManifestOptions
- uid: System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
  commentId: T:System.Collections.Generic.IEnumerable{System.Diagnostics.Tracing.EventSource}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventSource>
  nameWithType: IEnumerable<EventSource>
  fullName: System.Collections.Generic.IEnumerable<System.Diagnostics.Tracing.EventSource>
  nameWithType.vb: IEnumerable(Of EventSource)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Diagnostics.Tracing.EventSource)
  name.vb: IEnumerable(Of EventSource)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Tracing.EventSource
    name: EventSource
    nameWithType: EventSource
    fullName: System.Diagnostics.Tracing.EventSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Tracing.EventSource
    name: EventSource
    nameWithType: EventSource
    fullName: System.Diagnostics.Tracing.EventSource
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Diagnostics.Tracing.EventLevel
  commentId: T:System.Diagnostics.Tracing.EventLevel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventLevel
  nameWithType: EventLevel
  fullName: System.Diagnostics.Tracing.EventLevel
- uid: System.Diagnostics.Tracing.EventKeywords
  commentId: T:System.Diagnostics.Tracing.EventKeywords
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventKeywords
  nameWithType: EventKeywords
  fullName: System.Diagnostics.Tracing.EventKeywords
- uid: System.Diagnostics.Tracing.EventChannel
  commentId: T:System.Diagnostics.Tracing.EventChannel
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventChannel
  nameWithType: EventChannel
  fullName: System.Diagnostics.Tracing.EventChannel
- uid: System.Diagnostics.Tracing.EventCommandEventArgs
  commentId: T:System.Diagnostics.Tracing.EventCommandEventArgs
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventCommandEventArgs
  nameWithType: EventCommandEventArgs
  fullName: System.Diagnostics.Tracing.EventCommandEventArgs
- uid: System.Diagnostics.Tracing.EventSource
  commentId: T:System.Diagnostics.Tracing.EventSource
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSource
  nameWithType: EventSource
  fullName: System.Diagnostics.Tracing.EventSource
- uid: System.Diagnostics.Tracing.EventCommand
  commentId: T:System.Diagnostics.Tracing.EventCommand
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventCommand
  nameWithType: EventCommand
  fullName: System.Diagnostics.Tracing.EventCommand
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: false
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Diagnostics.Tracing.EventSourceOptions
  commentId: T:System.Diagnostics.Tracing.EventSourceOptions
  parent: System.Diagnostics.Tracing
  isExternal: false
  name: EventSourceOptions
  nameWithType: EventSourceOptions
  fullName: System.Diagnostics.Tracing.EventSourceOptions
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Diagnostics.Tracing.EventSource.EventData*
  name: EventSource.EventData*
  nameWithType: EventSource.EventData*
  fullName: System.Diagnostics.Tracing.EventSource.EventData*
  spec.csharp:
  - uid: System.Diagnostics.Tracing.EventSource.EventData
    name: EventSource.EventData
    nameWithType: EventSource.EventData
    fullName: System.Diagnostics.Tracing.EventSource.EventData
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Diagnostics.Tracing.EventSource.EventData
    name: EventSource.EventData
    nameWithType: EventSource.EventData
    fullName: System.Diagnostics.Tracing.EventSource.EventData
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Guid*
  name: Guid*
  nameWithType: Guid*
  fullName: System.Guid*
  spec.csharp:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Guid
    name: Guid
    nameWithType: Guid
    fullName: System.Guid
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
