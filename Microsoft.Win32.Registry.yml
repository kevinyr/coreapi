items:
- uid: Microsoft.Win32.Registry
  commentId: T:Microsoft.Win32.Registry
  id: Registry
  parent: Microsoft.Win32
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  - vb
  name: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Registry
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 10
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Provides <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> objects that represent the root keys in the Windows registry, and <strong>static</strong> methods to access key/value pairs.</p>\n"
  syntax:
    content: public class Registry
    content.vb: Public Class Registry
  seealso:
  - type: Microsoft.Win32.RegistryHive
    commentId: T:Microsoft.Win32.RegistryHive
  - type: Microsoft.Win32.RegistryKey
    commentId: T:Microsoft.Win32.RegistryKey
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: Registry
- uid: Microsoft.Win32.Registry.ClassesRoot
  commentId: F:Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
  type: Field
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClassesRoot
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 19
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Defines the types (or classes) of documents and the properties associated with those types. This field reads the Windows registry base key HKEY_CLASSES_ROOT.</p>\n"
  syntax:
    content: public static readonly RegistryKey ClassesRoot
    content.vb: Public Shared ReadOnly ClassesRoot As RegistryKey
    return:
      type: Microsoft.Win32.RegistryKey
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Registry.ClassesRoot
- uid: Microsoft.Win32.Registry.CurrentConfig
  commentId: F:Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
  type: Field
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentConfig
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 28
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Contains configuration information pertaining to the hardware that is not specific to the user. This field reads the Windows registry base key HKEY_CURRENT_CONFIG.</p>\n"
  syntax:
    content: public static readonly RegistryKey CurrentConfig
    content.vb: Public Shared ReadOnly CurrentConfig As RegistryKey
    return:
      type: Microsoft.Win32.RegistryKey
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  commentId: F:Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
  type: Field
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CurrentUser
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 13
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Contains information about the current user preferences. This field reads the Windows registry base key HKEY_CURRENT_USER </p>\n"
  syntax:
    content: public static readonly RegistryKey CurrentUser
    content.vb: Public Shared ReadOnly CurrentUser As RegistryKey
    return:
      type: Microsoft.Win32.RegistryKey
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Registry.CurrentUser
- uid: Microsoft.Win32.Registry.LocalMachine
  commentId: F:Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
  type: Field
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalMachine
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 16
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Contains the configuration data for the local machine. This field reads the Windows registry base key HKEY_LOCAL_MACHINE.</p>\n"
  syntax:
    content: public static readonly RegistryKey LocalMachine
    content.vb: Public Shared ReadOnly LocalMachine As RegistryKey
    return:
      type: Microsoft.Win32.RegistryKey
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  commentId: F:Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
  type: Field
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PerformanceData
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 25
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Contains performance information for software components. This field reads the Windows registry base key HKEY_PERFORMANCE_DATA.</p>\n"
  syntax:
    content: public static readonly RegistryKey PerformanceData
    content.vb: Public Shared ReadOnly PerformanceData As RegistryKey
    return:
      type: Microsoft.Win32.RegistryKey
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Registry.PerformanceData
- uid: Microsoft.Win32.Registry.Users
  commentId: F:Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: Users
  fullName: Microsoft.Win32.Registry.Users
  type: Field
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Users
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 22
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Contains information about the default user configuration. This field reads the Windows registry base key HKEY_USERS.</p>\n"
  syntax:
    content: public static readonly RegistryKey Users
    content.vb: Public Shared ReadOnly Users As RegistryKey
    return:
      type: Microsoft.Win32.RegistryKey
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: Registry.Users
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  commentId: M:Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: GetValue(String, String, Object)
  fullName: Microsoft.Win32.Registry.GetValue(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 30
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Retrieves the value associated with the specified name, in the specified registry key. If the name is not found in the specified key, returns a default value that you provide, or <strong>null</strong> if the specified key does not exist. </p>\n"
  syntax:
    content: public static object GetValue(string keyName, string valueName, object defaultValue)
    content.vb: Public Shared Function GetValue(keyName As String, valueName As String, defaultValue As Object) As Object
    parameters:
    - id: keyName
      type: System.String
      description: "\n<p>The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".</p>\n"
    - id: valueName
      type: System.String
      description: "\n<p>The name of the name/value pair.</p>\n"
    - id: defaultValue
      type: System.Object
      description: "\n<p>The value to return if <em>valueName</em> does not exist.</p>\n"
    return:
      type: System.Object
      description: "\n<p>\n<strong>null</strong> if the subkey specified by <em>keyName</em> does not exist; otherwise, the value associated with <em>valueName</em>, or <em>defaultValue</em> if <em>valueName</em> is not found.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to read from the registry key. </p>\n"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified value has been marked for deletion. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keyName</em> does not begin with a valid registry root. </p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  - type: System.Security.Permissions.EnvironmentPermission
    commentId: T:System.Security.Permissions.EnvironmentPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Registry.GetValue(String, String, Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: SetValue(String, String, Object)
  fullName: Microsoft.Win32.Registry.SetValue(System.String, System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 41
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Sets the specified name/value pair on the specified registry key. If the specified key does not exist, it is created.</p>\n"
  syntax:
    content: public static void SetValue(string keyName, string valueName, object value)
    content.vb: Public Shared Sub SetValue(keyName As String, valueName As String, value As Object)
    parameters:
    - id: keyName
      type: System.String
      description: "\n<p>The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".</p>\n"
    - id: valueName
      type: System.String
      description: "\n<p>The name of the name/value pair.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to be stored.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keyName</em> does not begin with a valid registry root. </p>\n<p>-or-</p>\n<p>\n<em>keyName</em> is longer than the maximum length allowed (255 characters).</p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or modify registry keys. </p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Registry.SetValue(String, String, Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  commentId: M:Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  - vb
  name: SetValue(String, String, Object, RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(System.String, System.String, System.Object, Microsoft.Win32.RegistryValueKind)
  type: Method
  source:
    remote:
      path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetValue
    path: src/Microsoft.Win32.Registry/src/Microsoft/Win32/Registry.cs
    startLine: 46
  assemblies:
  - Microsoft.Win32.Registry
  namespace: Microsoft.Win32
  summary: "\n<p>Sets the name/value pair on the specified registry key, using the specified registry data type. If the specified key does not exist, it is created.</p>\n"
  syntax:
    content: public static void SetValue(string keyName, string valueName, object value, RegistryValueKind valueKind)
    content.vb: Public Shared Sub SetValue(keyName As String, valueName As String, value As Object, valueKind As RegistryValueKind)
    parameters:
    - id: keyName
      type: System.String
      description: "\n<p>The full registry path of the key, beginning with a valid registry root, such as \"HKEY_CURRENT_USER\".</p>\n"
    - id: valueName
      type: System.String
      description: "\n<p>The name of the name/value pair.</p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to be stored.</p>\n"
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "\n<p>The registry data type to use when storing the data.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>keyName</em> does not begin with a valid registry root.</p>\n<p>-or-</p>\n<p>\n<em>keyName</em> is longer than the maximum length allowed (255 characters).</p>\n<p>-or- </p>\n<p>The type of <em>value</em> did not match the registry data type specified by <em>valueKind</em>, therefore the data could not be converted properly. </p>\n"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "\n<p>The <xref href=\"Microsoft.Win32.RegistryKey\" data-throw-if-not-resolved=\"false\"></xref> is read-only, and thus cannot be written to; for example, it is a root-level node, or the key has not been opened with write access. </p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The user does not have the permissions required to create or modify registry keys. </p>\n"
  see:
  - type: System.Security.Permissions.RegistryPermission
    commentId: T:System.Security.Permissions.RegistryPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  nameWithType: Registry.SetValue(String, String, Object, RegistryValueKind)
references:
- uid: Microsoft.Win32
  isExternal: false
  name: Microsoft.Win32
  fullName: Microsoft.Win32
  nameWithType: Microsoft.Win32
  commentId: N:Microsoft.Win32
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
  nameWithType: RegistryKey
  commentId: T:Microsoft.Win32.RegistryKey
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
  nameWithType: RegistryValueKind
  commentId: T:Microsoft.Win32.RegistryValueKind
- uid: System.Security.SecurityException
  isExternal: false
  name: SecurityException
  fullName: System.Security.SecurityException
  nameWithType: SecurityException
  commentId: T:System.Security.SecurityException
- uid: System.IO.IOException
  parent: System.IO
  isExternal: false
  name: IOException
  fullName: System.IO.IOException
  nameWithType: IOException
  commentId: T:System.IO.IOException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  fullName: System.ArgumentException
  nameWithType: ArgumentException
  commentId: T:System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  parent: System
  isExternal: false
  name: UnauthorizedAccessException
  fullName: System.UnauthorizedAccessException
  nameWithType: UnauthorizedAccessException
  commentId: T:System.UnauthorizedAccessException
