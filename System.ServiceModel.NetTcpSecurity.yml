### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.NetTcpSecurity
  commentId: T:System.ServiceModel.NetTcpSecurity
  id: NetTcpSecurity
  parent: System.ServiceModel
  children:
  - System.ServiceModel.NetTcpSecurity.#ctor
  - System.ServiceModel.NetTcpSecurity.Message
  - System.ServiceModel.NetTcpSecurity.Mode
  - System.ServiceModel.NetTcpSecurity.Transport
  langs:
  - csharp
  - vb
  name: NetTcpSecurity
  nameWithType: NetTcpSecurity
  fullName: System.ServiceModel.NetTcpSecurity
  type: Class
  source:
    remote:
      path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: NetTcpSecurity
    path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
    startLine: 34
  assemblies:
  - System.ServiceModel.NetTcp
  namespace: System.ServiceModel
  summary: "\n<p>Specifies the types of transport-level and message-level security used by an endpoint configured with a <xref href=\"System.ServiceModel.NetTcpBinding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public sealed class NetTcpSecurity
    content.vb: Public NotInheritable Class NetTcpSecurity
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.ServiceModel.NetTcpSecurity.#ctor
  commentId: M:System.ServiceModel.NetTcpSecurity.#ctor
  id: '#ctor'
  parent: System.ServiceModel.NetTcpSecurity
  langs:
  - csharp
  - vb
  name: NetTcpSecurity()
  nameWithType: NetTcpSecurity.NetTcpSecurity()
  fullName: System.ServiceModel.NetTcpSecurity.NetTcpSecurity()
  type: Constructor
  source:
    remote:
      path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
    startLine: 36
  assemblies:
  - System.ServiceModel.NetTcp
  namespace: System.ServiceModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.NetTcpSecurity\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public NetTcpSecurity()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.ServiceModel.NetTcpSecurity.Message
  commentId: P:System.ServiceModel.NetTcpSecurity.Message
  id: Message
  parent: System.ServiceModel.NetTcpSecurity
  langs:
  - csharp
  - vb
  name: Message
  nameWithType: NetTcpSecurity.Message
  fullName: System.ServiceModel.NetTcpSecurity.Message
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Message
    path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
    startLine: 37
  assemblies:
  - System.ServiceModel.NetTcp
  namespace: System.ServiceModel
  summary: "\n<p>Gets the type of message-level security requirements for a service configured with a <xref href=\"System.ServiceModel.NetTcpBinding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public MessageSecurityOverTcp Message { get; set; }
    content.vb: Public Property Message As MessageSecurityOverTcp
    parameters: []
    return:
      type: System.ServiceModel.MessageSecurityOverTcp
      description: "\n<p>The <xref href=\"System.ServiceModel.MessageSecurityOverTcp\" data-throw-if-not-resolved=\"false\"></xref> that indicates the type of message-level security requirements for an endpoint.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.NetTcpSecurity.Mode
  commentId: P:System.ServiceModel.NetTcpSecurity.Mode
  id: Mode
  parent: System.ServiceModel.NetTcpSecurity
  langs:
  - csharp
  - vb
  name: Mode
  nameWithType: NetTcpSecurity.Mode
  fullName: System.ServiceModel.NetTcpSecurity.Mode
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Mode
    path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
    startLine: 38
  assemblies:
  - System.ServiceModel.NetTcp
  namespace: System.ServiceModel
  summary: "\n<p>Gets or sets whether message-level security and transport-level security are used by an endpoint configured with a <xref href=\"System.ServiceModel.NetTcpBinding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public SecurityMode Mode { get; set; }
    content.vb: Public Property Mode As SecurityMode
    parameters: []
    return:
      type: System.ServiceModel.SecurityMode
      description: "\n<p>A value of the <xref href=\"System.ServiceModel.SecurityMode\" data-throw-if-not-resolved=\"false\"></xref> that indicates whether message-level security or transport-level security is used by an endpoint. The default value is <xref href=\"System.ServiceModel.SecurityMode.Transport\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The value is not defined.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.ServiceModel.NetTcpSecurity.Transport
  commentId: P:System.ServiceModel.NetTcpSecurity.Transport
  id: Transport
  parent: System.ServiceModel.NetTcpSecurity
  langs:
  - csharp
  - vb
  name: Transport
  nameWithType: NetTcpSecurity.Transport
  fullName: System.ServiceModel.NetTcpSecurity.Transport
  type: Property
  source:
    remote:
      path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Transport
    path: src/System.ServiceModel.NetTcp/ref/System.ServiceModel.NetTcp.cs
    startLine: 40
  assemblies:
  - System.ServiceModel.NetTcp
  namespace: System.ServiceModel
  summary: "\n<p>Gets the type of message-level security requirements for an endpoint configured with a <xref href=\"System.ServiceModel.NetTcpBinding\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public TcpTransportSecurity Transport { get; set; }
    content.vb: Public Property Transport As TcpTransportSecurity
    parameters: []
    return:
      type: System.ServiceModel.TcpTransportSecurity
      description: "\n<p>The <xref href=\"System.ServiceModel.TcpTransportSecurity\" data-throw-if-not-resolved=\"false\"></xref> that indicates the type of transport-level security requirements for an endpoint.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: System.ServiceModel
  commentId: N:System.ServiceModel
  isExternal: false
  name: System.ServiceModel
  nameWithType: System.ServiceModel
  fullName: System.ServiceModel
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.ServiceModel.MessageSecurityOverTcp
  commentId: T:System.ServiceModel.MessageSecurityOverTcp
  parent: System.ServiceModel
  isExternal: false
  name: MessageSecurityOverTcp
  nameWithType: MessageSecurityOverTcp
  fullName: System.ServiceModel.MessageSecurityOverTcp
- uid: System.ServiceModel.SecurityMode
  commentId: T:System.ServiceModel.SecurityMode
  parent: System.ServiceModel
  isExternal: false
  name: SecurityMode
  nameWithType: SecurityMode
  fullName: System.ServiceModel.SecurityMode
- uid: System.ServiceModel.TcpTransportSecurity
  commentId: T:System.ServiceModel.TcpTransportSecurity
  parent: System.ServiceModel
  isExternal: false
  name: TcpTransportSecurity
  nameWithType: TcpTransportSecurity
  fullName: System.ServiceModel.TcpTransportSecurity
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
