items:
- uid: System.Security.Claims.ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
  id: ClaimsPrincipal
  parent: System.Security.Claims
  children:
  - System.Security.Claims.ClaimsPrincipal.#ctor
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  - System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  - System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsPrincipal.Claims
  - System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  - System.Security.Claims.ClaimsPrincipal.Clone
  - System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsPrincipal.Current
  - System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsPrincipal.Identities
  - System.Security.Claims.ClaimsPrincipal.Identity
  - System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  - System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  type: Class
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClaimsPrincipal
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 15
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>An <xref href=\"System.Security.Principal.IPrincipal\" data-throw-if-not-resolved=\"false\"></xref> implementation that supports multiple claims-based identities.</p>\n"
  syntax:
    content: 'public class ClaimsPrincipal : IPrincipal'
    content.vb: >-
      Public Class ClaimsPrincipal
          Implements IPrincipal
  seealso:
  - type: System.Security.Claims.Claim
    commentId: T:System.Security.Claims.Claim
  - type: System.Security.Claims.ClaimsIdentity
    commentId: T:System.Security.Claims.ClaimsIdentity
  - type: System.Security.Claims.ClaimsAuthenticationManager
    commentId: T:System.Security.Claims.ClaimsAuthenticationManager
  - type: System.Security.Claims.ClaimsAuthorizationManager
    commentId: T:System.Security.Claims.ClaimsAuthorizationManager
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IPrincipal
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: ClaimsPrincipal
- uid: System.Security.Claims.ClaimsPrincipal.#ctor
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal()
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal()
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 78
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public ClaimsPrincipal()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ClaimsPrincipal.ClaimsPrincipal()
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 87
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class using the specified claims identities.</p>\n"
  syntax:
    content: public ClaimsPrincipal(IEnumerable<ClaimsIdentity> identities)
    content.vb: Public Sub New(identities As IEnumerable(Of ClaimsIdentity))
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The identities from which to initialize the new claims principal.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identities</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))
  name.vb: ClaimsPrincipal(IEnumerable(Of ClaimsIdentity))
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IEnumerable<ClaimsIdentity>)
  nameWithType.vb: ClaimsPrincipal.ClaimsPrincipal(IEnumerable(Of ClaimsIdentity))
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.IO.BinaryReader)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 162
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public ClaimsPrincipal(BinaryReader reader)
    content.vb: Public Sub New(reader As BinaryReader)
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(IIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Security.Principal.IIdentity)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 104
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class from the specified identity.</p>\n"
  syntax:
    content: public ClaimsPrincipal(IIdentity identity)
    content.vb: Public Sub New(identity As IIdentity)
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "\n<p>The identity from which to initialize the new claims principal.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IIdentity)
- uid: System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  commentId: M:System.Security.Claims.ClaimsPrincipal.#ctor(System.Security.Principal.IPrincipal)
  id: '#ctor(System.Security.Principal.IPrincipal)'
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipal(IPrincipal)
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipal(System.Security.Principal.IPrincipal)
  type: Constructor
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 129
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> class from the specified principal.</p>\n"
  syntax:
    content: public ClaimsPrincipal(IPrincipal principal)
    content.vb: Public Sub New(principal As IPrincipal)
    parameters:
    - id: principal
      type: System.Security.Principal.IPrincipal
      description: "\n<p>The principal from which to initialize the new claims principal.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>principal</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ClaimsPrincipal.ClaimsPrincipal(IPrincipal)
- uid: System.Security.Claims.ClaimsPrincipal.Claims
  commentId: P:System.Security.Claims.ClaimsPrincipal.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Claims
  fullName: System.Security.Claims.ClaimsPrincipal.Claims
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Claims
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 207
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a collection that contains all of the claims from all of the claims identities associated with this claims principal.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> Claims { get; }
    content.vb: Public Overridable ReadOnly Property Claims As IEnumerable(Of Claim)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The claims associated with this principal.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: ClaimsPrincipal.Claims
- uid: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  id: ClaimsPrincipalSelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: ClaimsPrincipalSelector
  fullName: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClaimsPrincipalSelector
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 63
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets and sets the delegate used to select the claims principal returned by the <xref href=\"System.Security.Claims.ClaimsPrincipal.Current\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public static Func<ClaimsPrincipal> ClaimsPrincipalSelector { get; set; }
    content.vb: Public Shared Property ClaimsPrincipalSelector As Func(Of ClaimsPrincipal)
    parameters: []
    return:
      type: System.Func{System.Security.Claims.ClaimsPrincipal}
      description: "\n<p>The delegate. The default is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.Current
    commentId: P:System.Security.Claims.ClaimsPrincipal.Current
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ClaimsPrincipal.ClaimsPrincipalSelector
- uid: System.Security.Claims.ClaimsPrincipal.Current
  commentId: P:System.Security.Claims.ClaimsPrincipal.Current
  id: Current
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Current
  fullName: System.Security.Claims.ClaimsPrincipal.Current
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Current
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 259
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the current claims principal.</p>\n"
  syntax:
    content: public static ClaimsPrincipal Current { get; }
    content.vb: Public Shared ReadOnly Property Current As ClaimsPrincipal
    parameters: []
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "\n<p>The current claims principal.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
    commentId: P:System.Security.Claims.ClaimsPrincipal.ClaimsPrincipalSelector
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
  nameWithType: ClaimsPrincipal.Current
- uid: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  commentId: P:System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: CustomSerializationData
  fullName: System.Security.Claims.ClaimsPrincipal.CustomSerializationData
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CustomSerializationData
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 224
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    content.vb: Protected Overridable ReadOnly Property CustomSerializationData As Byte()
    parameters: []
    return:
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  - get
  modifiers.vb:
  - Protected
  - Overridable
  - ReadOnly
  nameWithType: ClaimsPrincipal.CustomSerializationData
- uid: System.Security.Claims.ClaimsPrincipal.Identities
  commentId: P:System.Security.Claims.ClaimsPrincipal.Identities
  id: Identities
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Identities
  fullName: System.Security.Claims.ClaimsPrincipal.Identities
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Identities
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 464
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets a collection that contains all of the claims identities associated with this claims principal.</p>\n"
  syntax:
    content: public virtual IEnumerable<ClaimsIdentity> Identities { get; }
    content.vb: Public Overridable ReadOnly Property Identities As IEnumerable(Of ClaimsIdentity)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The collection of claims identities.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: ClaimsPrincipal.Identities
- uid: System.Security.Claims.ClaimsPrincipal.Identity
  commentId: P:System.Security.Claims.ClaimsPrincipal.Identity
  id: Identity
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Identity
  fullName: System.Security.Claims.ClaimsPrincipal.Identity
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Identity
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 475
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets the primary claims identity associated with this claims principal.</p>\n"
  syntax:
    content: public virtual IIdentity Identity { get; }
    content.vb: Public Overridable ReadOnly Property Identity As IIdentity
    parameters: []
    return:
      type: System.Security.Principal.IIdentity
      description: "\n<p>The primary claims identity associated with this claims principal.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
    commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  implements:
  - System.Security.Principal.IPrincipal.Identity
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: ClaimsPrincipal.Identity
- uid: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  commentId: P:System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  id: PrimaryIdentitySelector
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: PrimaryIdentitySelector
  fullName: System.Security.Claims.ClaimsPrincipal.PrimaryIdentitySelector
  type: Property
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PrimaryIdentitySelector
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 51
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Gets and sets the delegate used to select the claims identity returned by the <xref href=\"System.Security.Claims.ClaimsPrincipal.Identity\" data-throw-if-not-resolved=\"false\"></xref> property.</p>\n"
  syntax:
    content: public static Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity> PrimaryIdentitySelector { get; set; }
    content.vb: Public Shared Property PrimaryIdentitySelector As Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)
    parameters: []
    return:
      type: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The delegate. The default is <strong>null</strong>.</p>\n"
  seealso:
  - type: System.Security.Claims.ClaimsPrincipal.Identity
    commentId: P:System.Security.Claims.ClaimsPrincipal.Identity
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
  nameWithType: ClaimsPrincipal.PrimaryIdentitySelector
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  id: AddIdentities(System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: AddIdentities(IEnumerable<ClaimsIdentity>)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddIdentities
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 192
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds the specified claims identities to this claims principal.</p>\n"
  syntax:
    content: public virtual void AddIdentities(IEnumerable<ClaimsIdentity> identities)
    content.vb: Public Overridable Sub AddIdentities(identities As IEnumerable(Of ClaimsIdentity))
    parameters:
    - id: identities
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
      description: "\n<p>The claims identities to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identities</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.AddIdentities(System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity))
  name.vb: AddIdentities(IEnumerable(Of ClaimsIdentity))
  nameWithType: ClaimsPrincipal.AddIdentities(IEnumerable<ClaimsIdentity>)
  nameWithType.vb: ClaimsPrincipal.AddIdentities(IEnumerable(Of ClaimsIdentity))
- uid: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  commentId: M:System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  id: AddIdentity(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: AddIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsPrincipal.AddIdentity(System.Security.Claims.ClaimsIdentity)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AddIdentity
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 175
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Adds the specified claims identity to this claims principal.</p>\n"
  syntax:
    content: public virtual void AddIdentity(ClaimsIdentity identity)
    content.vb: Public Overridable Sub AddIdentity(identity As ClaimsIdentity)
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The claims identity to add.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>identity</em> is <strong>null</strong>.</p>\n"
  see:
  - type: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.Security.SecurityCriticalAttribute
    ctor: System.Security.SecurityCriticalAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.AddIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsPrincipal.Clone
  commentId: M:System.Security.Claims.ClaimsPrincipal.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: System.Security.Claims.ClaimsPrincipal.Clone()
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clone
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 235
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a copy of this instance.</p>\n"
  syntax:
    content: public virtual ClaimsPrincipal Clone()
    content.vb: Public Overridable Function Clone As ClaimsPrincipal
    return:
      type: System.Security.Claims.ClaimsPrincipal
      description: "\n<p>A new copy of the <xref href=\"System.Security.Claims.ClaimsPrincipal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.Clone()
- uid: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  commentId: M:System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  id: CreateClaimsIdentity(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: CreateClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsPrincipal.CreateClaimsIdentity(System.IO.BinaryReader)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CreateClaimsIdentity
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 246
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Creates a new claims identity.</p>\n"
  syntax:
    content: protected virtual ClaimsIdentity CreateClaimsIdentity(BinaryReader reader)
    content.vb: Protected Overridable Function CreateClaimsIdentity(reader As BinaryReader) As ClaimsIdentity
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "\n<p>The binary reader.</p>\n"
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "\n<p>The created claims identity.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  nameWithType: ClaimsPrincipal.CreateClaimsIdentity(BinaryReader)
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 280
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all of the claims that are matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(Predicate<Claim> match)
    content.vb: Public Overridable Function FindAll(match As Predicate(Of Claim)) As IEnumerable(Of Claim)
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.FindAll(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindAll(Predicate(Of Claim))
  nameWithType: ClaimsPrincipal.FindAll(Predicate<Claim>)
  nameWithType.vb: ClaimsPrincipal.FindAll(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindAll(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindAll(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindAll
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 308
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves all or the claims that have the specified claim type.</p>\n"
  syntax:
    content: public virtual IEnumerable<Claim> FindAll(string type)
    content.vb: Public Overridable Function FindAll(type As String) As IEnumerable(Of Claim)
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type against which to match claims.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "\n<p>The matching claims.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.FindAll(String)
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 335
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(Predicate<Claim> match)
    content.vb: Public Overridable Function FindFirst(match As Predicate(Of Claim)) As Claim
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.FindFirst(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: FindFirst(Predicate(Of Claim))
  nameWithType: ClaimsPrincipal.FindFirst(Predicate<Claim>)
  nameWithType.vb: ClaimsPrincipal.FindFirst(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: FindFirst(String)
  fullName: System.Security.Claims.ClaimsPrincipal.FindFirst(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindFirst
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 368
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Retrieves the first claim with the specified claim type.</p>\n"
  syntax:
    content: public virtual Claim FindFirst(string type)
    content.vb: Public Overridable Function FindFirst(type As String) As Claim
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The claim type to match.</p>\n"
    return:
      type: System.Security.Claims.Claim
      description: "\n<p>The first matching claim or <strong>null</strong> if no match is found.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.FindFirst(String)
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate<System.Security.Claims.Claim>)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 401
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether any of the claims identities associated with this claims principal contains a claim that is matched by the specified predicate.</p>\n"
  syntax:
    content: public virtual bool HasClaim(Predicate<Claim> match)
    content.vb: Public Overridable Function HasClaim(match As Predicate(Of Claim)) As Boolean
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "\n<p>The function that performs the matching logic.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>match</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.HasClaim(System.Predicate(Of System.Security.Claims.Claim))
  name.vb: HasClaim(Predicate(Of Claim))
  nameWithType: ClaimsPrincipal.HasClaim(Predicate<Claim>)
  nameWithType.vb: ClaimsPrincipal.HasClaim(Predicate(Of Claim))
- uid: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: HasClaim(String, String)
  fullName: System.Security.Claims.ClaimsPrincipal.HasClaim(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasClaim
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 433
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Determines whether any of the claims identities associated with this claims principal contains a claim with the specified claim type and value.</p>\n"
  syntax:
    content: public virtual bool HasClaim(string type, string value)
    content.vb: Public Overridable Function HasClaim(type As String, value As String) As Boolean
    parameters:
    - id: type
      type: System.String
      description: "\n<p>The type of the claim to match.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value of the claim to match.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching claim exists; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>.</p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.HasClaim(String, String)
- uid: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  commentId: M:System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: IsInRole(String)
  fullName: System.Security.Claims.ClaimsPrincipal.IsInRole(System.String)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInRole
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 497
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p>Returns a value that indicates whether the entity (user) represented by this claims principal is in the specified role.</p>\n"
  syntax:
    content: public virtual bool IsInRole(string role)
    content.vb: Public Overridable Function IsInRole(role As String) As Boolean
    parameters:
    - id: role
      type: System.String
      description: "\n<p>The role for which to check.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if claims principal is in the specified role; otherwise, <strong>false</strong>.</p>\n"
  implements:
  - System.Security.Principal.IPrincipal.IsInRole(System.String)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.IsInRole(String)
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter)
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 558
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: public virtual void WriteTo(BinaryWriter writer)
    content.vb: Public Overridable Sub WriteTo(writer As BinaryWriter)
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter)
- uid: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  commentId: M:System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsPrincipal
  langs:
  - csharp
  - vb
  name: WriteTo(BinaryWriter, Byte[])
  fullName: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte[])
  type: Method
  source:
    remote:
      path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: WriteTo
    path: src/System.Security.Claims/src/System/Security/Claims/ClaimsPrincipal.cs
    startLine: 568
  assemblies:
  - System.Security.Claims
  namespace: System.Security.Claims
  summary: "\n<p></p>\n"
  syntax:
    content: protected virtual void WriteTo(BinaryWriter writer, byte[] userData)
    content.vb: Protected Overridable Sub WriteTo(writer As BinaryWriter, userData As Byte())
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "\n<p></p>\n"
    - id: userData
      type: System.Byte[]
      description: "\n<p></p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Security.Claims.ClaimsPrincipal.WriteTo(System.IO.BinaryWriter, System.Byte())
  name.vb: WriteTo(BinaryWriter, Byte())
  nameWithType: ClaimsPrincipal.WriteTo(BinaryWriter, Byte[])
  nameWithType.vb: ClaimsPrincipal.WriteTo(BinaryWriter, Byte())
references:
- uid: System.Security.Claims
  isExternal: false
  name: System.Security.Claims
  fullName: System.Security.Claims
  nameWithType: System.Security.Claims
  commentId: N:System.Security.Claims
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: false
  name: IPrincipal
  fullName: System.Security.Principal.IPrincipal
  nameWithType: IPrincipal
  commentId: T:System.Security.Principal.IPrincipal
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.Security.Principal
  isExternal: false
  name: System.Security.Principal
  fullName: System.Security.Principal
  nameWithType: System.Security.Principal
  commentId: N:System.Security.Principal
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ClaimsIdentity>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity)
  name.vb: IEnumerable(Of ClaimsIdentity)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: )
    fullName: )
  nameWithType: IEnumerable<ClaimsIdentity>
  nameWithType.vb: IEnumerable(Of ClaimsIdentity)
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity}
- uid: System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  commentId: T:System.Collections.Generic.IEnumerable`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: false
  name: BinaryReader
  fullName: System.IO.BinaryReader
  nameWithType: BinaryReader
  commentId: T:System.IO.BinaryReader
- uid: System.IO
  isExternal: false
  name: System.IO
  fullName: System.IO
  nameWithType: System.IO
  commentId: N:System.IO
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: false
  name: IIdentity
  fullName: System.Security.Principal.IIdentity
  nameWithType: IIdentity
  commentId: T:System.Security.Principal.IIdentity
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Security.Claims.Claim)
  name.vb: IEnumerable(Of Claim)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  nameWithType: IEnumerable<Claim>
  nameWithType.vb: IEnumerable(Of Claim)
  commentId: T:System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
- uid: System.Func{System.Security.Claims.ClaimsPrincipal}
  parent: System
  definition: System.Func`1
  name: Func<ClaimsPrincipal>
  fullName: System.Func<System.Security.Claims.ClaimsPrincipal>
  fullname.vb: System.Func(Of System.Security.Claims.ClaimsPrincipal)
  name.vb: Func(Of ClaimsPrincipal)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsPrincipal
    name: ClaimsPrincipal
    fullName: System.Security.Claims.ClaimsPrincipal
  - name: )
    fullName: )
  nameWithType: Func<ClaimsPrincipal>
  nameWithType.vb: Func(Of ClaimsPrincipal)
  commentId: T:System.Func{System.Security.Claims.ClaimsPrincipal}
- uid: System.Func`1
  isExternal: false
  name: Func<TResult>
  fullName: System.Func<TResult>
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  nameWithType: Func<TResult>
  nameWithType.vb: Func(Of TResult)
  commentId: T:System.Func`1
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  commentId: T:System.Security.Claims.ClaimsPrincipal
- uid: System.Byte[]
  name: Byte[]
  fullName: System.Byte[]
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    fullName: ()
  nameWithType: Byte[]
  nameWithType.vb: Byte()
- uid: System.Security.Principal.IPrincipal.Identity
  parent: System.Security.Principal.IPrincipal
  isExternal: true
  name: Identity
  fullName: System.Security.Principal.IPrincipal.Identity
  nameWithType: IPrincipal.Identity
  commentId: P:System.Security.Principal.IPrincipal.Identity
- uid: System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
  parent: System
  definition: System.Func`2
  name: Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>
  fullName: System.Func<System.Collections.Generic.IEnumerable<System.Security.Claims.ClaimsIdentity>, System.Security.Claims.ClaimsIdentity>
  fullname.vb: System.Func(Of System.Collections.Generic.IEnumerable(Of System.Security.Claims.ClaimsIdentity), System.Security.Claims.ClaimsIdentity)
  name.vb: Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: '>'
    fullName: '>'
  - name: ', '
    fullName: ', '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: )
    fullName: )
  - name: ', '
    fullName: ', '
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    fullName: System.Security.Claims.ClaimsIdentity
  - name: )
    fullName: )
  nameWithType: Func<IEnumerable<ClaimsIdentity>, ClaimsIdentity>
  nameWithType.vb: Func(Of IEnumerable(Of ClaimsIdentity), ClaimsIdentity)
  commentId: T:System.Func{System.Collections.Generic.IEnumerable{System.Security.Claims.ClaimsIdentity},System.Security.Claims.ClaimsIdentity}
- uid: System.Func`2
  isExternal: false
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
  nameWithType: Func<T, TResult>
  nameWithType.vb: Func(Of T, TResult)
  commentId: T:System.Func`2
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  nameWithType: ClaimsIdentity
  commentId: T:System.Security.Claims.ClaimsIdentity
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  fullname.vb: System.Predicate(Of System.Security.Claims.Claim)
  name.vb: Predicate(Of Claim)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Security.Claims.Claim
    name: Claim
    fullName: System.Security.Claims.Claim
  - name: )
    fullName: )
  nameWithType: Predicate<Claim>
  nameWithType.vb: Predicate(Of Claim)
  commentId: T:System.Predicate{System.Security.Claims.Claim}
- uid: System.Predicate`1
  isExternal: false
  name: Predicate<T>
  fullName: System.Predicate<T>
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    fullName: System.Predicate
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: Predicate<T>
  nameWithType.vb: Predicate(Of T)
  commentId: T:System.Predicate`1
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  fullName: System.Security.Claims.Claim
  nameWithType: Claim
  commentId: T:System.Security.Claims.Claim
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.Security.Principal.IPrincipal.IsInRole(System.String)
  parent: System.Security.Principal.IPrincipal
  isExternal: true
  name: IsInRole(String)
  fullName: System.Security.Principal.IPrincipal.IsInRole(System.String)
  spec.csharp:
  - uid: System.Security.Principal.IPrincipal.IsInRole(System.String)
    name: IsInRole
    fullName: System.Security.Principal.IPrincipal.IsInRole
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Security.Principal.IPrincipal.IsInRole(System.String)
    name: IsInRole
    fullName: System.Security.Principal.IPrincipal.IsInRole
    isExternal: true
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  nameWithType: IPrincipal.IsInRole(String)
  commentId: M:System.Security.Principal.IPrincipal.IsInRole(System.String)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: false
  name: BinaryWriter
  fullName: System.IO.BinaryWriter
  nameWithType: BinaryWriter
  commentId: T:System.IO.BinaryWriter
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
