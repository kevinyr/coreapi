### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpClientHandler
  commentId: T:System.Net.Http.HttpClientHandler
  id: HttpClientHandler
  parent: System.Net.Http
  children:
  - System.Net.Http.HttpClientHandler.#ctor
  - System.Net.Http.HttpClientHandler.AllowAutoRedirect
  - System.Net.Http.HttpClientHandler.AutomaticDecompression
  - System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  - System.Net.Http.HttpClientHandler.ClientCertificateOptions
  - System.Net.Http.HttpClientHandler.ClientCertificates
  - System.Net.Http.HttpClientHandler.CookieContainer
  - System.Net.Http.HttpClientHandler.Credentials
  - System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  - System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  - System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  - System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  - System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  - System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  - System.Net.Http.HttpClientHandler.PreAuthenticate
  - System.Net.Http.HttpClientHandler.Properties
  - System.Net.Http.HttpClientHandler.Proxy
  - System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  - System.Net.Http.HttpClientHandler.SslProtocols
  - System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  - System.Net.Http.HttpClientHandler.SupportsProxy
  - System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  - System.Net.Http.HttpClientHandler.UseCookies
  - System.Net.Http.HttpClientHandler.UseDefaultCredentials
  - System.Net.Http.HttpClientHandler.UseProxy
  langs:
  - csharp
  - vb
  name: HttpClientHandler
  nameWithType: HttpClientHandler
  fullName: System.Net.Http.HttpClientHandler
  type: Class
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HttpClientHandler
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 77
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>The default message handler used by <xref href=\"System.Net.Http.HttpClient\" data-throw-if-not-resolved=\"false\"></xref>.  </p>\n"
  syntax:
    content: 'public class HttpClientHandler : HttpMessageHandler, IDisposable'
    content.vb: >-
      Public Class HttpClientHandler
          Inherits HttpMessageHandler
          Implements IDisposable
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageHandler
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Net.Http.HttpMessageHandler.Dispose
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Net.Http.HttpClientHandler.#ctor
  commentId: M:System.Net.Http.HttpClientHandler.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: HttpClientHandler()
  nameWithType: HttpClientHandler.HttpClientHandler()
  fullName: System.Net.Http.HttpClientHandler.HttpClientHandler()
  type: Constructor
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 79
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Creates an instance of a <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public HttpClientHandler()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.AllowAutoRedirect
  commentId: P:System.Net.Http.HttpClientHandler.AllowAutoRedirect
  id: AllowAutoRedirect
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: AllowAutoRedirect
  nameWithType: HttpClientHandler.AllowAutoRedirect
  fullName: System.Net.Http.HttpClientHandler.AllowAutoRedirect
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AllowAutoRedirect
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 80
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler should follow redirection responses.</p>\n"
  syntax:
    content: public bool AllowAutoRedirect { get; set; }
    content.vb: Public Property AllowAutoRedirect As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler should follow redirection responses; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.AutomaticDecompression
  commentId: P:System.Net.Http.HttpClientHandler.AutomaticDecompression
  id: AutomaticDecompression
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: AutomaticDecompression
  nameWithType: HttpClientHandler.AutomaticDecompression
  fullName: System.Net.Http.HttpClientHandler.AutomaticDecompression
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AutomaticDecompression
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 81
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the type of decompression method used by the handler for automatic decompression of the HTTP content response.</p>\n"
  syntax:
    content: public DecompressionMethods AutomaticDecompression { get; set; }
    content.vb: Public Property AutomaticDecompression As DecompressionMethods
    parameters: []
    return:
      type: System.Net.DecompressionMethods
      description: "\n<p>Returns <xref href=\"System.Net.DecompressionMethods\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The automatic decompression method used by the handler. The default value is <xref href=\"System.Net.DecompressionMethods.None\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  commentId: P:System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  id: CheckCertificateRevocationList
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: CheckCertificateRevocationList
  nameWithType: HttpClientHandler.CheckCertificateRevocationList
  fullName: System.Net.Http.HttpClientHandler.CheckCertificateRevocationList
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CheckCertificateRevocationList
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 82
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public bool CheckCertificateRevocationList { get; set; }
    content.vb: Public Property CheckCertificateRevocationList As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.ClientCertificateOptions
  commentId: P:System.Net.Http.HttpClientHandler.ClientCertificateOptions
  id: ClientCertificateOptions
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: ClientCertificateOptions
  nameWithType: HttpClientHandler.ClientCertificateOptions
  fullName: System.Net.Http.HttpClientHandler.ClientCertificateOptions
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientCertificateOptions
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 83
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates if the certificate is automatically picked from the certificate store or if the caller is allowed to pass in a specific client certificate.</p>\n"
  syntax:
    content: public ClientCertificateOption ClientCertificateOptions { get; set; }
    content.vb: Public Property ClientCertificateOptions As ClientCertificateOption
    parameters: []
    return:
      type: System.Net.Http.ClientCertificateOption
      description: "\n<p>Returns <xref href=\"System.Net.Http.ClientCertificateOption\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The collection of security certificates associated with this handler.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.ClientCertificates
  commentId: P:System.Net.Http.HttpClientHandler.ClientCertificates
  id: ClientCertificates
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: ClientCertificates
  nameWithType: HttpClientHandler.ClientCertificates
  fullName: System.Net.Http.HttpClientHandler.ClientCertificates
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ClientCertificates
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 84
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public X509CertificateCollection ClientCertificates { get; }
    content.vb: Public ReadOnly Property ClientCertificates As X509CertificateCollection
    parameters: []
    return:
      type: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.CookieContainer
  commentId: P:System.Net.Http.HttpClientHandler.CookieContainer
  id: CookieContainer
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: CookieContainer
  nameWithType: HttpClientHandler.CookieContainer
  fullName: System.Net.Http.HttpClientHandler.CookieContainer
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CookieContainer
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 85
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the cookie container used to store server cookies by the handler.</p>\n"
  syntax:
    content: public CookieContainer CookieContainer { get; set; }
    content.vb: Public Property CookieContainer As CookieContainer
    parameters: []
    return:
      type: System.Net.CookieContainer
      description: "\n<p>Returns <xref href=\"System.Net.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The cookie container used to store server cookies by the handler.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.Credentials
  commentId: P:System.Net.Http.HttpClientHandler.Credentials
  id: Credentials
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Credentials
  nameWithType: HttpClientHandler.Credentials
  fullName: System.Net.Http.HttpClientHandler.Credentials
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Credentials
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 86
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets authentication information used by this handler.</p>\n"
  syntax:
    content: public ICredentials Credentials { get; set; }
    content.vb: Public Property Credentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
      description: "\n<p>Returns <xref href=\"System.Net.ICredentials\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The authentication credentials associated with the handler. The default is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  commentId: P:System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  id: DefaultProxyCredentials
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: DefaultProxyCredentials
  nameWithType: HttpClientHandler.DefaultProxyCredentials
  fullName: System.Net.Http.HttpClientHandler.DefaultProxyCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DefaultProxyCredentials
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 87
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public ICredentials DefaultProxyCredentials { get; set; }
    content.vb: Public Property DefaultProxyCredentials As ICredentials
    parameters: []
    return:
      type: System.Net.ICredentials
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  commentId: P:System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  id: MaxAutomaticRedirections
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxAutomaticRedirections
  nameWithType: HttpClientHandler.MaxAutomaticRedirections
  fullName: System.Net.Http.HttpClientHandler.MaxAutomaticRedirections
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxAutomaticRedirections
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 88
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the maximum number of redirects that the handler follows.</p>\n"
  syntax:
    content: public int MaxAutomaticRedirections { get; set; }
    content.vb: Public Property MaxAutomaticRedirections As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The maximum number of redirection responses that the handler follows. The default value is 50.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  commentId: P:System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  id: MaxConnectionsPerServer
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxConnectionsPerServer
  nameWithType: HttpClientHandler.MaxConnectionsPerServer
  fullName: System.Net.Http.HttpClientHandler.MaxConnectionsPerServer
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxConnectionsPerServer
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 89
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public int MaxConnectionsPerServer { get; set; }
    content.vb: Public Property MaxConnectionsPerServer As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  commentId: P:System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  id: MaxRequestContentBufferSize
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxRequestContentBufferSize
  nameWithType: HttpClientHandler.MaxRequestContentBufferSize
  fullName: System.Net.Http.HttpClientHandler.MaxRequestContentBufferSize
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxRequestContentBufferSize
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 90
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets the maximum request content buffer size used by the handler.</p>\n"
  syntax:
    content: public long MaxRequestContentBufferSize { get; set; }
    content.vb: Public Property MaxRequestContentBufferSize As Long
    parameters: []
    return:
      type: System.Int64
      description: "\n<p>Returns <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The maximum request content buffer size in bytes. The default value is 2 gigabytes.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  commentId: P:System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  id: MaxResponseHeadersLength
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: MaxResponseHeadersLength
  nameWithType: HttpClientHandler.MaxResponseHeadersLength
  fullName: System.Net.Http.HttpClientHandler.MaxResponseHeadersLength
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MaxResponseHeadersLength
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 91
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public int MaxResponseHeadersLength { get; set; }
    content.vb: Public Property MaxResponseHeadersLength As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.PreAuthenticate
  commentId: P:System.Net.Http.HttpClientHandler.PreAuthenticate
  id: PreAuthenticate
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: PreAuthenticate
  nameWithType: HttpClientHandler.PreAuthenticate
  fullName: System.Net.Http.HttpClientHandler.PreAuthenticate
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PreAuthenticate
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 92
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler sends an Authorization header with the request.</p>\n"
  syntax:
    content: public bool PreAuthenticate { get; set; }
    content.vb: Public Property PreAuthenticate As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> for the handler to send an HTTP Authorization header with requests after authentication has taken place; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.Properties
  commentId: P:System.Net.Http.HttpClientHandler.Properties
  id: Properties
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: HttpClientHandler.Properties
  fullName: System.Net.Http.HttpClientHandler.Properties
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Properties
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 93
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public IDictionary<string, object> Properties { get; }
    content.vb: Public ReadOnly Property Properties As IDictionary(Of String, Object)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Object}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.Proxy
  commentId: P:System.Net.Http.HttpClientHandler.Proxy
  id: Proxy
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Proxy
  nameWithType: HttpClientHandler.Proxy
  fullName: System.Net.Http.HttpClientHandler.Proxy
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Proxy
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 94
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets proxy information used by the handler.</p>\n"
  syntax:
    content: public IWebProxy Proxy { get; set; }
    content.vb: Public Property Proxy As IWebProxy
    parameters: []
    return:
      type: System.Net.IWebProxy
      description: "\n<p>Returns <xref href=\"System.Net.IWebProxy\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The proxy information used by the handler. The default value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  commentId: P:System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  id: ServerCertificateCustomValidationCallback
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: ServerCertificateCustomValidationCallback
  nameWithType: HttpClientHandler.ServerCertificateCustomValidationCallback
  fullName: System.Net.Http.HttpClientHandler.ServerCertificateCustomValidationCallback
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ServerCertificateCustomValidationCallback
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 95
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, bool> ServerCertificateCustomValidationCallback { get; set; }
    content.vb: Public Property ServerCertificateCustomValidationCallback As Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)
    parameters: []
    return:
      type: System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.SslProtocols
  commentId: P:System.Net.Http.HttpClientHandler.SslProtocols
  id: SslProtocols
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SslProtocols
  nameWithType: HttpClientHandler.SslProtocols
  fullName: System.Net.Http.HttpClientHandler.SslProtocols
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SslProtocols
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 96
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  syntax:
    content: public Authentication.SslProtocols SslProtocols { get; set; }
    content.vb: Public Property SslProtocols As Authentication.SslProtocols
    parameters: []
    return:
      type: System.Security.Authentication.SslProtocols
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  commentId: P:System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  id: SupportsAutomaticDecompression
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SupportsAutomaticDecompression
  nameWithType: HttpClientHandler.SupportsAutomaticDecompression
  fullName: System.Net.Http.HttpClientHandler.SupportsAutomaticDecompression
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsAutomaticDecompression
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 97
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets a value that indicates whether the handler supports automatic response content decompression.</p>\n"
  syntax:
    content: public virtual bool SupportsAutomaticDecompression { get; }
    content.vb: Public Overridable ReadOnly Property SupportsAutomaticDecompression As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports automatic response content decompression; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.SupportsProxy
  commentId: P:System.Net.Http.HttpClientHandler.SupportsProxy
  id: SupportsProxy
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SupportsProxy
  nameWithType: HttpClientHandler.SupportsProxy
  fullName: System.Net.Http.HttpClientHandler.SupportsProxy
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsProxy
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 98
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets a value that indicates whether the handler supports proxy settings.</p>\n"
  syntax:
    content: public virtual bool SupportsProxy { get; }
    content.vb: Public Overridable ReadOnly Property SupportsProxy As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports proxy settings; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  commentId: P:System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  id: SupportsRedirectConfiguration
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SupportsRedirectConfiguration
  nameWithType: HttpClientHandler.SupportsRedirectConfiguration
  fullName: System.Net.Http.HttpClientHandler.SupportsRedirectConfiguration
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SupportsRedirectConfiguration
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 99
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets a value that indicates whether the handler supports configuration settings for the <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\" data-throw-if-not-resolved=\"false\"></xref> properties.</p>\n"
  syntax:
    content: public virtual bool SupportsRedirectConfiguration { get; }
    content.vb: Public Overridable ReadOnly Property SupportsRedirectConfiguration As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports configuration settings for the <xref href=\"System.Net.Http.HttpClientHandler.AllowAutoRedirect\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Net.Http.HttpClientHandler.MaxAutomaticRedirections\" data-throw-if-not-resolved=\"false\"></xref> properties; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Net.Http.HttpClientHandler.UseCookies
  commentId: P:System.Net.Http.HttpClientHandler.UseCookies
  id: UseCookies
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: UseCookies
  nameWithType: HttpClientHandler.UseCookies
  fullName: System.Net.Http.HttpClientHandler.UseCookies
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseCookies
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 100
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler uses the  <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property  to store server cookies and uses these cookies when sending requests.</p>\n"
  syntax:
    content: public bool UseCookies { get; set; }
    content.vb: Public Property UseCookies As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the if the handler supports uses the  <xref href=\"System.Net.Http.HttpClientHandler.CookieContainer\" data-throw-if-not-resolved=\"false\"></xref> property  to store server cookies and uses these cookies when sending requests; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.UseDefaultCredentials
  commentId: P:System.Net.Http.HttpClientHandler.UseDefaultCredentials
  id: UseDefaultCredentials
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: UseDefaultCredentials
  nameWithType: HttpClientHandler.UseDefaultCredentials
  fullName: System.Net.Http.HttpClientHandler.UseDefaultCredentials
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseDefaultCredentials
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 101
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that controls whether default credentials are sent with requests by the handler.</p>\n"
  syntax:
    content: public bool UseDefaultCredentials { get; set; }
    content.vb: Public Property UseDefaultCredentials As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the default credentials are used; otherwise <strong>false</strong>. The default value is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.UseProxy
  commentId: P:System.Net.Http.HttpClientHandler.UseProxy
  id: UseProxy
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: UseProxy
  nameWithType: HttpClientHandler.UseProxy
  fullName: System.Net.Http.HttpClientHandler.UseProxy
  type: Property
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UseProxy
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 102
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Gets or sets a value that indicates whether the handler uses a proxy for requests. </p>\n"
  syntax:
    content: public bool UseProxy { get; set; }
    content.vb: Public Property UseProxy As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>Returns <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>\n<strong>true</strong> if the handler should use a proxy for requests; otherwise <strong>false</strong>. The default value is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  commentId: M:System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: HttpClientHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpClientHandler.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 103
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Net.Http.HttpClientHandler\" data-throw-if-not-resolved=\"false\"></xref> and optionally disposes of the managed resources.</p>\n"
  syntax:
    content: protected override void Dispose(bool disposing)
    content.vb: Protected Overrides Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to releases only unmanaged resources.</p>\n"
  overridden: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
- uid: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClientHandler
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, CancellationToken)
  nameWithType: HttpClientHandler.SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpClientHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Net.Http/ref/System.Net.Http.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SendAsync
    path: src/System.Net.Http/ref/System.Net.Http.cs
    startLine: 104
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "\n<p>Creates an instance of  <xref href=\"System.Net.Http.HttpResponseMessage\" data-throw-if-not-resolved=\"false\"></xref> based on the information provided in the <xref href=\"System.Net.Http.HttpRequestMessage\" data-throw-if-not-resolved=\"false\"></xref> as an operation that will not block.</p>\n"
  syntax:
    content: protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    content.vb: Protected Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "\n<p>The HTTP request message.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>A cancellation token to cancel the operation.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "\n<p>Returns <xref href=\"System.Threading.Tasks.Task`1\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>The task object representing the asynchronous operation.</p>\n"
  overridden: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>request</em> was <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: System.Net.Http
  commentId: N:System.Net.Http
  isExternal: false
  name: System.Net.Http
  nameWithType: System.Net.Http
  fullName: System.Net.Http
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Net.Http.HttpMessageHandler
  commentId: T:System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Net.Http.HttpMessageHandler.Dispose
  commentId: M:System.Net.Http.HttpMessageHandler.Dispose
  parent: System.Net.Http.HttpMessageHandler
  isExternal: false
  name: Dispose()
  nameWithType: HttpMessageHandler.Dispose()
  fullName: System.Net.Http.HttpMessageHandler.Dispose()
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.Dispose
    name: Dispose
    nameWithType: HttpMessageHandler.Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.Dispose
    name: Dispose
    nameWithType: HttpMessageHandler.Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.DecompressionMethods
  commentId: T:System.Net.DecompressionMethods
  parent: System.Net
  isExternal: false
  name: DecompressionMethods
  nameWithType: DecompressionMethods
  fullName: System.Net.DecompressionMethods
- uid: System.Net
  commentId: N:System.Net
  isExternal: false
  name: System.Net
  nameWithType: System.Net
  fullName: System.Net
- uid: System.Net.Http.ClientCertificateOption
  commentId: T:System.Net.Http.ClientCertificateOption
  parent: System.Net.Http
  isExternal: false
  name: ClientCertificateOption
  nameWithType: ClientCertificateOption
  fullName: System.Net.Http.ClientCertificateOption
- uid: System.Security.Cryptography.X509Certificates.X509CertificateCollection
  commentId: T:System.Security.Cryptography.X509Certificates.X509CertificateCollection
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509CertificateCollection
  nameWithType: X509CertificateCollection
  fullName: System.Security.Cryptography.X509Certificates.X509CertificateCollection
- uid: System.Security.Cryptography.X509Certificates
  commentId: N:System.Security.Cryptography.X509Certificates
  isExternal: false
  name: System.Security.Cryptography.X509Certificates
  nameWithType: System.Security.Cryptography.X509Certificates
  fullName: System.Security.Cryptography.X509Certificates
- uid: System.Net.CookieContainer
  commentId: T:System.Net.CookieContainer
  isExternal: false
  name: CookieContainer
  nameWithType: CookieContainer
  fullName: System.Net.CookieContainer
- uid: System.Net.ICredentials
  commentId: T:System.Net.ICredentials
  parent: System.Net
  isExternal: false
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Collections.Generic.IDictionary{System.String,System.Object}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.Object}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, Object>
  nameWithType: IDictionary<String, Object>
  fullName: System.Collections.Generic.IDictionary<System.String, System.Object>
  nameWithType.vb: IDictionary(Of String, Object)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.Object)
  name.vb: IDictionary(Of String, Object)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: false
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Net.IWebProxy
  commentId: T:System.Net.IWebProxy
  isExternal: false
  name: IWebProxy
  nameWithType: IWebProxy
  fullName: System.Net.IWebProxy
- uid: System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}
  commentId: T:System.Func{System.Net.Http.HttpRequestMessage,System.Security.Cryptography.X509Certificates.X509Certificate2,System.Security.Cryptography.X509Certificates.X509Chain,System.Net.Security.SslPolicyErrors,System.Boolean}
  parent: System
  definition: System.Func`5
  name: Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>
  nameWithType: Func<HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean>
  fullName: System.Func<System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.Boolean>
  nameWithType.vb: Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)
  fullname.vb: System.Func(Of System.Net.Http.HttpRequestMessage, System.Security.Cryptography.X509Certificates.X509Certificate2, System.Security.Cryptography.X509Certificates.X509Chain, System.Net.Security.SslPolicyErrors, System.Boolean)
  name.vb: Func(Of HttpRequestMessage, X509Certificate2, X509Chain, Security.SslPolicyErrors, Boolean)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    nameWithType: X509Certificate2
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Chain
    name: X509Chain
    nameWithType: X509Chain
    fullName: System.Security.Cryptography.X509Certificates.X509Chain
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Security.SslPolicyErrors
    name: Security.SslPolicyErrors
    nameWithType: Security.SslPolicyErrors
    fullName: System.Net.Security.SslPolicyErrors
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Certificate2
    name: X509Certificate2
    nameWithType: X509Certificate2
    fullName: System.Security.Cryptography.X509Certificates.X509Certificate2
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Security.Cryptography.X509Certificates.X509Chain
    name: X509Chain
    nameWithType: X509Chain
    fullName: System.Security.Cryptography.X509Certificates.X509Chain
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Net.Security.SslPolicyErrors
    name: Security.SslPolicyErrors
    nameWithType: Security.SslPolicyErrors
    fullName: System.Net.Security.SslPolicyErrors
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`5
  commentId: T:System.Func`5
  isExternal: false
  name: Func<T1, T2, T3, T4, TResult>
  nameWithType: Func<T1, T2, T3, T4, TResult>
  fullName: System.Func<T1, T2, T3, T4, TResult>
  nameWithType.vb: Func(Of T1, T2, T3, T4, TResult)
  fullname.vb: System.Func(Of T1, T2, T3, T4, TResult)
  name.vb: Func(Of T1, T2, T3, T4, TResult)
  spec.csharp:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`5
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T3
    nameWithType: T3
    fullName: T3
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T4
    nameWithType: T4
    fullName: T4
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Security.Authentication.SslProtocols
  commentId: T:System.Security.Authentication.SslProtocols
  parent: System.Security.Authentication
  isExternal: false
  name: Authentication.SslProtocols
  nameWithType: Authentication.SslProtocols
  fullName: System.Security.Authentication.SslProtocols
- uid: System.Security.Authentication
  commentId: N:System.Security.Authentication
  isExternal: false
  name: System.Security.Authentication
  nameWithType: System.Security.Authentication
  fullName: System.Security.Authentication
- uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  commentId: M:System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: true
  name: Dispose(Boolean)
  nameWithType: HttpMessageHandler.Dispose(Boolean)
  fullName: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
    name: Dispose
    nameWithType: HttpMessageHandler.Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.Dispose(System.Boolean)
    name: Dispose
    nameWithType: HttpMessageHandler.Dispose
    fullName: System.Net.Http.HttpMessageHandler.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  commentId: M:System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpMessageHandler
  isExternal: true
  name: SendAsync(HttpRequestMessage, CancellationToken)
  nameWithType: HttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)
  fullName: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage, System.Threading.CancellationToken)
  spec.csharp:
  - uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: HttpMessageHandler.SendAsync
    fullName: System.Net.Http.HttpMessageHandler.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Net.Http.HttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
    name: SendAsync
    nameWithType: HttpMessageHandler.SendAsync
    fullName: System.Net.Http.HttpMessageHandler.SendAsync
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Net.Http.HttpRequestMessage
    name: HttpRequestMessage
    nameWithType: HttpRequestMessage
    fullName: System.Net.Http.HttpRequestMessage
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Net.Http.HttpRequestMessage
  commentId: T:System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  commentId: T:System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullname.vb: System.Threading.Tasks.Task(Of System.Net.Http.HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: System.Net.Http.HttpResponseMessage
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
