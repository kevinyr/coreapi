### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Debugger
  commentId: T:System.Diagnostics.Debugger
  id: Debugger
  parent: System.Diagnostics
  children:
  - System.Diagnostics.Debugger.Break
  - System.Diagnostics.Debugger.IsAttached
  - System.Diagnostics.Debugger.Launch
  langs:
  - csharp
  - vb
  name: Debugger
  nameWithType: Debugger
  fullName: System.Diagnostics.Debugger
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Debugger.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Debugger
    path: src/mscorlib/src/System/Diagnostics/Debugger.cs
    startLine: 19
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Enables communication with a debugger. This class cannot be inherited.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public sealed class Debugger
    content.vb: >-
      <ComVisible(True)>

      Public NotInheritable Class Debugger
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Diagnostics.Debugger.IsAttached
  commentId: P:System.Diagnostics.Debugger.IsAttached
  id: IsAttached
  parent: System.Diagnostics.Debugger
  langs:
  - csharp
  - vb
  name: IsAttached
  nameWithType: Debugger.IsAttached
  fullName: System.Diagnostics.Debugger.IsAttached
  type: Property
  source:
    path: System.Private.CoreLib
    isExternal: true
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Gets a value that indicates whether a debugger is attached to the process.</p>\n"
  syntax:
    content: >-
      public static bool IsAttached

      {
          [SecuritySafeCritical]
          [MethodImpl(MethodImplOptions.InternalCall)]
          get;
      }
    content.vb: Public Shared ReadOnly Property IsAttached As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a debugger is attached; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Diagnostics.Debugger.Break
  commentId: M:System.Diagnostics.Debugger.Break
  id: Break
  parent: System.Diagnostics.Debugger
  langs:
  - csharp
  - vb
  name: Break()
  nameWithType: Debugger.Break()
  fullName: System.Diagnostics.Debugger.Break()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Debugger.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Break
    path: src/mscorlib/src/System/Diagnostics/Debugger.cs
    startLine: 34
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Signals a breakpoint to an attached debugger.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static void Break()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Sub Break
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Security.Permissions.UIPermission\" data-throw-if-not-resolved=\"false\"></xref> is not set to break into the debugger. </p>\n"
  see:
  - linkId: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Debugger.Launch
  commentId: M:System.Diagnostics.Debugger.Launch
  id: Launch
  parent: System.Diagnostics.Debugger
  langs:
  - csharp
  - vb
  name: Launch()
  nameWithType: Debugger.Launch()
  fullName: System.Diagnostics.Debugger.Launch()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Debugger.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Launch
    path: src/mscorlib/src/System/Diagnostics/Debugger.cs
    startLine: 84
  assemblies:
  - System.Diagnostics.Debug
  namespace: System.Diagnostics
  summary: "\n<p>Launches and attaches a debugger to the process.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public static bool Launch()
    content.vb: >-
      <SecuritySafeCritical>

      Public Shared Function Launch As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the startup is successful or if the debugger is already attached; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Security.Permissions.UIPermission\" data-throw-if-not-resolved=\"false\"></xref> is not set to start the debugger. </p>\n"
  seealso:
  - linkId: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  see:
  - linkId: System.Security.Permissions.UIPermission
    commentId: T:System.Security.Permissions.UIPermission
  - linkId: System.Security.Permissions.SecurityPermission
    commentId: T:System.Security.Permissions.SecurityPermission
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Diagnostics
  commentId: N:System.Diagnostics
  isExternal: false
  name: System.Diagnostics
  nameWithType: System.Diagnostics
  fullName: System.Diagnostics
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
