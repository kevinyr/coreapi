### YamlMime:ManagedReference
items:
- uid: System.Threading.SemaphoreSlim
  commentId: T:System.Threading.SemaphoreSlim
  id: SemaphoreSlim
  parent: System.Threading
  children:
  - System.Threading.SemaphoreSlim.#ctor(System.Int32)
  - System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  - System.Threading.SemaphoreSlim.AvailableWaitHandle
  - System.Threading.SemaphoreSlim.CurrentCount
  - System.Threading.SemaphoreSlim.Dispose
  - System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  - System.Threading.SemaphoreSlim.Release
  - System.Threading.SemaphoreSlim.Release(System.Int32)
  - System.Threading.SemaphoreSlim.Wait
  - System.Threading.SemaphoreSlim.Wait(System.Int32)
  - System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  - System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  - System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: SemaphoreSlim
  nameWithType: SemaphoreSlim
  fullName: System.Threading.SemaphoreSlim
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SemaphoreSlim
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 41
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Represents a lightweight alternative to <xref href=\"System.Threading.Semaphore\" data-throw-if-not-resolved=\"false\"></xref> that limits the number of threads that can access a resource or pool of resources concurrently.</p>\n"
  syntax:
    content: >-
      [ComVisible(false)]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      [DebuggerDisplay("Current Count = {m_currentCount}")]

      public class SemaphoreSlim : IDisposable
    content.vb: >-
      <ComVisible(False)>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      <DebuggerDisplay("Current Count = {m_currentCount}")>

      Public Class SemaphoreSlim
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: SemaphoreSlim(Int32)
  nameWithType: SemaphoreSlim.SemaphoreSlim(Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 159
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the initial number of requests that can be granted concurrently.</p>\n"
  syntax:
    content: public SemaphoreSlim(int initialCount)
    content.vb: Public Sub New(initialCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: "\n<p>The initial number of requests for the semaphore that can be granted concurrently.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>initialCount</em> is less than 0.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: SemaphoreSlim(Int32, Int32)
  nameWithType: SemaphoreSlim.SemaphoreSlim(Int32, Int32)
  fullName: System.Threading.SemaphoreSlim.SemaphoreSlim(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 176
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> class, specifying the initial and maximum number of requests that can be granted concurrently.</p>\n"
  syntax:
    content: public SemaphoreSlim(int initialCount, int maxCount)
    content.vb: Public Sub New(initialCount As Integer, maxCount As Integer)
    parameters:
    - id: initialCount
      type: System.Int32
      description: "\n<p>The initial number of requests for the semaphore that can be granted concurrently.</p>\n"
    - id: maxCount
      type: System.Int32
      description: "\n<p>The maximum number of requests for the semaphore that can be granted concurrently.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>initialCount</em> is less than 0, or <em>initialCount</em> is greater than <em>maxCount</em>, or <em>maxCount</em> is equal to or less than 0.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.AvailableWaitHandle
  commentId: P:System.Threading.SemaphoreSlim.AvailableWaitHandle
  id: AvailableWaitHandle
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: AvailableWaitHandle
  nameWithType: SemaphoreSlim.AvailableWaitHandle
  fullName: System.Threading.SemaphoreSlim.AvailableWaitHandle
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AvailableWaitHandle
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 124
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Returns a <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that can be used to wait on the semaphore.</p>\n"
  syntax:
    content: public WaitHandle AvailableWaitHandle { get; }
    content.vb: Public ReadOnly Property AvailableWaitHandle As WaitHandle
    parameters: []
    return:
      type: System.Threading.WaitHandle
      description: "\n<p>A <xref href=\"System.Threading.WaitHandle\" data-throw-if-not-resolved=\"false\"></xref> that can be used to wait on the semaphore.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SemaphoreSlim.CurrentCount
  commentId: P:System.Threading.SemaphoreSlim.CurrentCount
  id: CurrentCount
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: CurrentCount
  nameWithType: SemaphoreSlim.CurrentCount
  fullName: System.Threading.SemaphoreSlim.CurrentCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CurrentCount
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 106
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets the number of remaining threads that can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  syntax:
    content: public int CurrentCount { get; }
    content.vb: Public ReadOnly Property CurrentCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of remaining threads that can enter the semaphore.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Threading.SemaphoreSlim.Dispose
  commentId: M:System.Threading.SemaphoreSlim.Dispose
  id: Dispose
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SemaphoreSlim.Dispose()
  fullName: System.Threading.SemaphoreSlim.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 845
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  commentId: M:System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: SemaphoreSlim.Dispose(Boolean)
  fullName: System.Threading.SemaphoreSlim.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 861
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Threading.SemaphoreSlim.Release
  commentId: M:System.Threading.SemaphoreSlim.Release
  id: Release
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Release()
  nameWithType: SemaphoreSlim.Release()
  fullName: System.Threading.SemaphoreSlim.Release()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Release
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 739
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> object once.</p>\n"
  syntax:
    content: public int Release()
    content.vb: Public Function Release As Integer
    return:
      type: System.Int32
      description: "\n<p>The previous count of the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.Threading.SemaphoreFullException
    commentId: T:System.Threading.SemaphoreFullException
    description: "\n<p>The <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> has already reached its maximum size.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Release(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.Release(System.Int32)
  id: Release(System.Int32)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Release(Int32)
  nameWithType: SemaphoreSlim.Release(Int32)
  fullName: System.Threading.SemaphoreSlim.Release(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Release
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 755
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> object a specified number of times.</p>\n"
  syntax:
    content: public int Release(int releaseCount)
    content.vb: Public Function Release(releaseCount As Integer) As Integer
    parameters:
    - id: releaseCount
      type: System.Int32
      description: "\n<p>The number of times to exit the semaphore.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The previous count of the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>releaseCount</em> is less than 1.</p>\n"
  - type: System.Threading.SemaphoreFullException
    commentId: T:System.Threading.SemaphoreFullException
    description: "\n<p>The <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> has already reached its maximum size.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait
  commentId: M:System.Threading.SemaphoreSlim.Wait
  id: Wait
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait()
  nameWithType: SemaphoreSlim.Wait()
  fullName: System.Threading.SemaphoreSlim.Wait()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 203
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until it can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Wait()
    content.vb: Public Sub Wait
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Int32)
  id: Wait(System.Int32)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(Int32)
  nameWithType: SemaphoreSlim.Wait(Int32)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 291
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until it can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a 32-bit signed integer that specifies the timeout.</p>\n"
  syntax:
    content: public bool Wait(int millisecondsTimeout)
    content.vb: Public Function Wait(millisecondsTimeout As Integer) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>(-1) to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Int32,System.Threading.CancellationToken)
  id: Wait(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(Int32, CancellationToken)
  nameWithType: SemaphoreSlim.Wait(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 309
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until it can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a 32-bit signed integer that specifies the timeout, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Wait(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref>(-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed, or the <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  id: Wait(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(CancellationToken)
  nameWithType: SemaphoreSlim.Wait(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 219
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until it can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public void Wait(CancellationToken cancellationToken)
    content.vb: Public Sub Wait(cancellationToken As CancellationToken)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> token to observe.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created<em> cancellationToken</em> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  id: Wait(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan)
  nameWithType: SemaphoreSlim.Wait(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 237
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until it can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to specify the timeout.</p>\n"
  syntax:
    content: public bool Wait(TimeSpan timeout)
    content.vb: Public Function Wait(timeout As TimeSpan) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The semaphoreSlim instance has been disposed<em>.</em></p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.Wait(System.TimeSpan,System.Threading.CancellationToken)
  id: Wait(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: Wait(TimeSpan, CancellationToken)
  nameWithType: SemaphoreSlim.Wait(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.Wait(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Wait
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 267
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Blocks the current thread until it can enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that specifies the timeout, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public bool Wait(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function Wait(timeout As TimeSpan, cancellationToken As CancellationToken) As Boolean
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>timeout</em> is a negative number other than -1 milliseconds, which represents an infinite time-out -or- timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The semaphoreSlim instance has been disposed<em>.</em></p>\n<p>\n<em>-or-</em>\n</p>\n<p>The <xref href=\"System.Threading.CancellationTokenSource\" data-throw-if-not-resolved=\"false\"></xref> that created <em>cancellationToken</em> has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync
  id: WaitAsync
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync()
  nameWithType: SemaphoreSlim.WaitAsync()
  fullName: System.Threading.SemaphoreSlim.WaitAsync()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 478
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Asynchronously waits to enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public Task WaitAsync()
    content.vb: Public Function WaitAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that will complete when the semaphore has been entered.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  id: WaitAsync(System.Int32)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(Int32)
  nameWithType: SemaphoreSlim.WaitAsync(Int32)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 515
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Asynchronously waits to enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a 32-bit signed integer to measure the time interval. </p>\n"
  syntax:
    content: public Task<bool> WaitAsync(int millisecondsTimeout)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer) As Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, otherwise with a result of <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Int32,System.Threading.CancellationToken)
  id: WaitAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(Int32, CancellationToken)
  nameWithType: SemaphoreSlim.WaitAsync(Int32, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 596
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Asynchronously waits to enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a 32-bit signed integer to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public Task<bool> WaitAsync(int millisecondsTimeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(millisecondsTimeout As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: millisecondsTimeout
      type: System.Int32
      description: "\n<p>The number of milliseconds to wait, or <xref href=\"System.Threading.Timeout.Infinite\" data-throw-if-not-resolved=\"false\"></xref> (-1) to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> to observe.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, otherwise with a result of <strong>false</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed. </p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  id: WaitAsync(System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(CancellationToken)
  nameWithType: SemaphoreSlim.WaitAsync(CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 494
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Asynchronously waits to enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  syntax:
    content: public Task WaitAsync(CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(cancellationToken As CancellationToken) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> token to observe.</p>\n"
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>A task that will complete when the semaphore has been entered. </p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  id: WaitAsync(System.TimeSpan)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(TimeSpan)
  nameWithType: SemaphoreSlim.WaitAsync(TimeSpan)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 543
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Asynchronously waits to enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to measure the time interval.</p>\n"
  syntax:
    content: public Task<bool> WaitAsync(TimeSpan timeout)
    content.vb: Public Function WaitAsync(timeout As TimeSpan) As Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, otherwise with a result of <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The current instance has already been disposed.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out </p>\n<p>-or- </p>\n<p>timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  id: WaitAsync(System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.SemaphoreSlim
  langs:
  - csharp
  - vb
  name: WaitAsync(TimeSpan, CancellationToken)
  nameWithType: SemaphoreSlim.WaitAsync(TimeSpan, CancellationToken)
  fullName: System.Threading.SemaphoreSlim.WaitAsync(System.TimeSpan, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: WaitAsync
    path: src/mscorlib/src/System/Threading/SemaphoreSlim.cs
    startLine: 564
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Asynchronously waits to enter the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, using a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> to measure the time interval, while observing a <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public Task<bool> WaitAsync(TimeSpan timeout, CancellationToken cancellationToken)
    content.vb: Public Function WaitAsync(timeout As TimeSpan, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "\n<p>A <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents the number of milliseconds to wait, or a <xref href=\"System.TimeSpan\" data-throw-if-not-resolved=\"false\"></xref> that represents -1 milliseconds to wait indefinitely.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The <xref href=\"System.Threading.CancellationToken\" data-throw-if-not-resolved=\"false\"></xref> token to observe.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task that will complete with a result of <strong>true</strong> if the current thread successfully entered the <xref href=\"System.Threading.SemaphoreSlim\" data-throw-if-not-resolved=\"false\"></xref>, otherwise with a result of <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>millisecondsTimeout</em> is a negative number other than -1, which represents an infinite time-out</p>\n<p>-or-</p>\n<p>timeout is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: "\n<p>\n<em>cancellationToken</em> was canceled. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.WaitHandle
  commentId: T:System.Threading.WaitHandle
  parent: System.Threading
  isExternal: false
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.Threading.SemaphoreFullException
  commentId: T:System.Threading.SemaphoreFullException
  isExternal: false
  name: SemaphoreFullException
  nameWithType: SemaphoreFullException
  fullName: System.Threading.SemaphoreFullException
- uid: System.OperationCanceledException
  commentId: T:System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
