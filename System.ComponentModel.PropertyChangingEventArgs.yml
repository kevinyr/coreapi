items:
- uid: System.ComponentModel.PropertyChangingEventArgs
  commentId: T:System.ComponentModel.PropertyChangingEventArgs
  id: PropertyChangingEventArgs
  parent: System.ComponentModel
  children:
  - System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)
  - System.ComponentModel.PropertyChangingEventArgs.PropertyName
  langs:
  - csharp
  - vb
  name: PropertyChangingEventArgs
  fullName: System.ComponentModel.PropertyChangingEventArgs
  type: Class
  source:
    remote:
      path: src/System.ObjectModel/src/System/ComponentModel/PropertyChangingEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyChangingEventArgs
    path: src/System.ObjectModel/src/System/ComponentModel/PropertyChangingEventArgs.cs
    startLine: 12
  assemblies:
  - System.ObjectModel
  namespace: System.ComponentModel
  summary: "\n<p>Provides data for the <xref href=\"System.ComponentModel.INotifyPropertyChanging.PropertyChanging\" data-throw-if-not-resolved=\"false\"></xref> event. </p>\n"
  syntax:
    content: 'public class PropertyChangingEventArgs : EventArgs'
    content.vb: >-
      Public Class PropertyChangingEventArgs
          Inherits EventArgs
  inheritance:
  - System.Object
  - System.EventArgs
  inheritedMembers:
  - System.EventArgs.Empty
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: PropertyChangingEventArgs
- uid: System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)
  commentId: M:System.ComponentModel.PropertyChangingEventArgs.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ComponentModel.PropertyChangingEventArgs
  langs:
  - csharp
  - vb
  name: PropertyChangingEventArgs(String)
  fullName: System.ComponentModel.PropertyChangingEventArgs.PropertyChangingEventArgs(System.String)
  type: Constructor
  source:
    remote:
      path: src/System.ObjectModel/src/System/ComponentModel/PropertyChangingEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.ObjectModel/src/System/ComponentModel/PropertyChangingEventArgs.cs
    startLine: 20
  assemblies:
  - System.ObjectModel
  namespace: System.ComponentModel
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ComponentModel.PropertyChangingEventArgs\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: public PropertyChangingEventArgs(string propertyName)
    content.vb: Public Sub New(propertyName As String)
    parameters:
    - id: propertyName
      type: System.String
      description: "\n<p>The name of the property whose value is changing.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: PropertyChangingEventArgs.PropertyChangingEventArgs(String)
- uid: System.ComponentModel.PropertyChangingEventArgs.PropertyName
  commentId: P:System.ComponentModel.PropertyChangingEventArgs.PropertyName
  id: PropertyName
  parent: System.ComponentModel.PropertyChangingEventArgs
  langs:
  - csharp
  - vb
  name: PropertyName
  fullName: System.ComponentModel.PropertyChangingEventArgs.PropertyName
  type: Property
  source:
    remote:
      path: src/System.ObjectModel/src/System/ComponentModel/PropertyChangingEventArgs.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: PropertyName
    path: src/System.ObjectModel/src/System/ComponentModel/PropertyChangingEventArgs.cs
    startLine: 28
  assemblies:
  - System.ObjectModel
  namespace: System.ComponentModel
  summary: "\n<p>Gets the name of the property whose value is changing.</p>\n"
  syntax:
    content: public virtual string PropertyName { get; }
    content.vb: Public Overridable ReadOnly Property PropertyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the property whose value is changing.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  nameWithType: PropertyChangingEventArgs.PropertyName
references:
- uid: System.ComponentModel
  isExternal: false
  name: System.ComponentModel
  fullName: System.ComponentModel
  nameWithType: System.ComponentModel
  commentId: N:System.ComponentModel
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.EventArgs
  parent: System
  isExternal: false
  name: EventArgs
  fullName: System.EventArgs
  nameWithType: EventArgs
  commentId: T:System.EventArgs
- uid: System.EventArgs.Empty
  parent: System.EventArgs
  isExternal: true
  name: Empty
  fullName: System.EventArgs.Empty
  nameWithType: EventArgs.Empty
  commentId: F:System.EventArgs.Empty
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
