### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  id: XmlReader
  parent: System.Xml
  children:
  - System.Xml.XmlReader.#ctor
  - System.Xml.XmlReader.AttributeCount
  - System.Xml.XmlReader.BaseURI
  - System.Xml.XmlReader.CanReadBinaryContent
  - System.Xml.XmlReader.CanReadValueChunk
  - System.Xml.XmlReader.CanResolveEntity
  - System.Xml.XmlReader.Create(System.IO.Stream)
  - System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  - System.Xml.XmlReader.Create(System.IO.TextReader)
  - System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  - System.Xml.XmlReader.Create(System.String)
  - System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  - System.Xml.XmlReader.Depth
  - System.Xml.XmlReader.Dispose
  - System.Xml.XmlReader.Dispose(System.Boolean)
  - System.Xml.XmlReader.EOF
  - System.Xml.XmlReader.GetAttribute(System.Int32)
  - System.Xml.XmlReader.GetAttribute(System.String)
  - System.Xml.XmlReader.GetAttribute(System.String,System.String)
  - System.Xml.XmlReader.GetValueAsync
  - System.Xml.XmlReader.HasAttributes
  - System.Xml.XmlReader.HasValue
  - System.Xml.XmlReader.IsDefault
  - System.Xml.XmlReader.IsEmptyElement
  - System.Xml.XmlReader.IsName(System.String)
  - System.Xml.XmlReader.IsNameToken(System.String)
  - System.Xml.XmlReader.IsStartElement
  - System.Xml.XmlReader.IsStartElement(System.String)
  - System.Xml.XmlReader.IsStartElement(System.String,System.String)
  - System.Xml.XmlReader.Item(System.Int32)
  - System.Xml.XmlReader.Item(System.String)
  - System.Xml.XmlReader.Item(System.String,System.String)
  - System.Xml.XmlReader.LocalName
  - System.Xml.XmlReader.LookupNamespace(System.String)
  - System.Xml.XmlReader.MoveToAttribute(System.Int32)
  - System.Xml.XmlReader.MoveToAttribute(System.String)
  - System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
  - System.Xml.XmlReader.MoveToContent
  - System.Xml.XmlReader.MoveToContentAsync
  - System.Xml.XmlReader.MoveToElement
  - System.Xml.XmlReader.MoveToFirstAttribute
  - System.Xml.XmlReader.MoveToNextAttribute
  - System.Xml.XmlReader.Name
  - System.Xml.XmlReader.NamespaceURI
  - System.Xml.XmlReader.NameTable
  - System.Xml.XmlReader.NodeType
  - System.Xml.XmlReader.Prefix
  - System.Xml.XmlReader.Read
  - System.Xml.XmlReader.ReadAsync
  - System.Xml.XmlReader.ReadAttributeValue
  - System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadContentAsBoolean
  - System.Xml.XmlReader.ReadContentAsDateTimeOffset
  - System.Xml.XmlReader.ReadContentAsDecimal
  - System.Xml.XmlReader.ReadContentAsDouble
  - System.Xml.XmlReader.ReadContentAsFloat
  - System.Xml.XmlReader.ReadContentAsInt
  - System.Xml.XmlReader.ReadContentAsLong
  - System.Xml.XmlReader.ReadContentAsObject
  - System.Xml.XmlReader.ReadContentAsObjectAsync
  - System.Xml.XmlReader.ReadContentAsString
  - System.Xml.XmlReader.ReadContentAsStringAsync
  - System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  - System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadElementContentAsBoolean
  - System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsDecimal
  - System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsDouble
  - System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsFloat
  - System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsInt
  - System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsLong
  - System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsObject
  - System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsObjectAsync
  - System.Xml.XmlReader.ReadElementContentAsString
  - System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
  - System.Xml.XmlReader.ReadElementContentAsStringAsync
  - System.Xml.XmlReader.ReadEndElement
  - System.Xml.XmlReader.ReadInnerXml
  - System.Xml.XmlReader.ReadInnerXmlAsync
  - System.Xml.XmlReader.ReadOuterXml
  - System.Xml.XmlReader.ReadOuterXmlAsync
  - System.Xml.XmlReader.ReadStartElement
  - System.Xml.XmlReader.ReadStartElement(System.String)
  - System.Xml.XmlReader.ReadStartElement(System.String,System.String)
  - System.Xml.XmlReader.ReadState
  - System.Xml.XmlReader.ReadSubtree
  - System.Xml.XmlReader.ReadToDescendant(System.String)
  - System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
  - System.Xml.XmlReader.ReadToFollowing(System.String)
  - System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
  - System.Xml.XmlReader.ReadToNextSibling(System.String)
  - System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
  - System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  - System.Xml.XmlReader.ResolveEntity
  - System.Xml.XmlReader.Settings
  - System.Xml.XmlReader.Skip
  - System.Xml.XmlReader.SkipAsync
  - System.Xml.XmlReader.Value
  - System.Xml.XmlReader.ValueType
  - System.Xml.XmlReader.XmlLang
  - System.Xml.XmlReader.XmlSpace
  langs:
  - csharp
  - vb
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
  type: Class
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlReader
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 229
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Represents a reader that provides fast, noncached, forward-only access to XML data.</p>\n"
  syntax:
    content: 'public abstract class XmlReader : IDisposable'
    content.vb: >-
      Public MustInherit Class XmlReader
          Implements IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Xml.XmlReader.#ctor
  commentId: M:System.Xml.XmlReader.#ctor
  id: '#ctor'
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: XmlReader()
  nameWithType: XmlReader.XmlReader()
  fullName: System.Xml.XmlReader.XmlReader()
  type: Constructor
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 231
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <strong>XmlReader</strong> class.</p>\n"
  syntax:
    content: protected XmlReader()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Xml.XmlReader.AttributeCount
  commentId: P:System.Xml.XmlReader.AttributeCount
  id: AttributeCount
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: AttributeCount
  nameWithType: XmlReader.AttributeCount
  fullName: System.Xml.XmlReader.AttributeCount
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AttributeCount
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 232
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the number of attributes on the current node.</p>\n"
  syntax:
    content: public abstract int AttributeCount { get; }
    content.vb: Public MustOverride ReadOnly Property AttributeCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of attributes on the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.BaseURI
  commentId: P:System.Xml.XmlReader.BaseURI
  id: BaseURI
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: BaseURI
  nameWithType: XmlReader.BaseURI
  fullName: System.Xml.XmlReader.BaseURI
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseURI
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 233
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the base URI of the current node.</p>\n"
  syntax:
    content: public abstract string BaseURI { get; }
    content.vb: Public MustOverride ReadOnly Property BaseURI As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The base URI of the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.CanReadBinaryContent
  commentId: P:System.Xml.XmlReader.CanReadBinaryContent
  id: CanReadBinaryContent
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: CanReadBinaryContent
  nameWithType: XmlReader.CanReadBinaryContent
  fullName: System.Xml.XmlReader.CanReadBinaryContent
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReadBinaryContent
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 234
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implements the binary content read methods.</p>\n"
  syntax:
    content: public virtual bool CanReadBinaryContent { get; }
    content.vb: Public Overridable ReadOnly Property CanReadBinaryContent As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the binary content read methods are implemented; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.CanReadValueChunk
  commentId: P:System.Xml.XmlReader.CanReadValueChunk
  id: CanReadValueChunk
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: CanReadValueChunk
  nameWithType: XmlReader.CanReadValueChunk
  fullName: System.Xml.XmlReader.CanReadValueChunk
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanReadValueChunk
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 235
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  syntax:
    content: public virtual bool CanReadValueChunk { get; }
    content.vb: Public Overridable ReadOnly Property CanReadValueChunk As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implements the <xref href=\"System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> method; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.CanResolveEntity
  commentId: P:System.Xml.XmlReader.CanResolveEntity
  id: CanResolveEntity
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: CanResolveEntity
  nameWithType: XmlReader.CanResolveEntity
  fullName: System.Xml.XmlReader.CanResolveEntity
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: CanResolveEntity
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 236
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether this reader can parse and resolve entities.</p>\n"
  syntax:
    content: public virtual bool CanResolveEntity { get; }
    content.vb: Public Overridable ReadOnly Property CanResolveEntity As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reader can parse and resolve entities; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.Depth
  commentId: P:System.Xml.XmlReader.Depth
  id: Depth
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Depth
  nameWithType: XmlReader.Depth
  fullName: System.Xml.XmlReader.Depth
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Depth
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 237
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the depth of the current node in the XML document.</p>\n"
  syntax:
    content: public abstract int Depth { get; }
    content.vb: Public MustOverride ReadOnly Property Depth As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The depth of the current node in the XML document.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.EOF
  commentId: P:System.Xml.XmlReader.EOF
  id: EOF
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: EOF
  nameWithType: XmlReader.EOF
  fullName: System.Xml.XmlReader.EOF
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: EOF
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 238
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the reader is positioned at the end of the stream.</p>\n"
  syntax:
    content: public abstract bool EOF { get; }
    content.vb: Public MustOverride ReadOnly Property EOF As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reader is positioned at the end of the stream; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.HasAttributes
  commentId: P:System.Xml.XmlReader.HasAttributes
  id: HasAttributes
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: HasAttributes
  nameWithType: XmlReader.HasAttributes
  fullName: System.Xml.XmlReader.HasAttributes
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasAttributes
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 239
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets a value indicating whether the current node has any attributes.</p>\n"
  syntax:
    content: public virtual bool HasAttributes { get; }
    content.vb: Public Overridable ReadOnly Property HasAttributes As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node has attributes; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.HasValue
  commentId: P:System.Xml.XmlReader.HasValue
  id: HasValue
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: HasValue
  nameWithType: XmlReader.HasValue
  fullName: System.Xml.XmlReader.HasValue
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 240
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current node can have a <xref href=\"System.Xml.XmlReader.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual bool HasValue { get; }
    content.vb: Public Overridable ReadOnly Property HasValue As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the node on which the reader is currently positioned can have a <strong>Value</strong>; otherwise, <strong>false</strong>. If <strong>false</strong>, the node has a value of <strong>String.Empty</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.IsDefault
  commentId: P:System.Xml.XmlReader.IsDefault
  id: IsDefault
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsDefault
  nameWithType: XmlReader.IsDefault
  fullName: System.Xml.XmlReader.IsDefault
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDefault
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 241
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</p>\n"
  syntax:
    content: public virtual bool IsDefault { get; }
    content.vb: Public Overridable ReadOnly Property IsDefault As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node is an attribute whose value was generated from the default value defined in the DTD or schema; <strong>false</strong> if the attribute value was explicitly set.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.IsEmptyElement
  commentId: P:System.Xml.XmlReader.IsEmptyElement
  id: IsEmptyElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsEmptyElement
  nameWithType: XmlReader.IsEmptyElement
  fullName: System.Xml.XmlReader.IsEmptyElement
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEmptyElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 242
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets a value indicating whether the current node is an empty element (for example, <code>&lt;MyElement/&gt;</code>).</p>\n"
  syntax:
    content: public abstract bool IsEmptyElement { get; }
    content.vb: Public MustOverride ReadOnly Property IsEmptyElement As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current node is an element (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> equals <strong>XmlNodeType.Element</strong>) that ends with <code>/&gt;</code>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Item(System.Int32)
  commentId: P:System.Xml.XmlReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: XmlReader.Item[Int32]
  fullName: System.Xml.XmlReader.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 243
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n"
  syntax:
    content: public virtual string this[int i] { get; }
    content.vb: Public Overridable ReadOnly Property Item(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.GetAttribute(System.Int32)
    commentId: M:System.Xml.XmlReader.GetAttribute(System.Int32)
  nameWithType.vb: XmlReader.Item(Int32)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlReader.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Xml.XmlReader.Item(System.String)
  commentId: P:System.Xml.XmlReader.Item(System.String)
  id: Item(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: XmlReader.Item[String]
  fullName: System.Xml.XmlReader.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 244
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual string this[string name] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.GetAttribute(System.String)
    commentId: M:System.Xml.XmlReader.GetAttribute(System.String)
  nameWithType.vb: XmlReader.Item(String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlReader.Item(System.String)
  name.vb: Item(String)
- uid: System.Xml.XmlReader.Item(System.String,System.String)
  commentId: P:System.Xml.XmlReader.Item(System.String,System.String)
  id: Item(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Item[String, String]
  nameWithType: XmlReader.Item[String, String]
  fullName: System.Xml.XmlReader.Item[System.String, System.String]
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 245
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual string this[string name, string namespaceURI] { get; }
    content.vb: Public Overridable ReadOnly Property Item(name As String, namespaceURI As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.GetAttribute(System.String,System.String)
    commentId: M:System.Xml.XmlReader.GetAttribute(System.String,System.String)
  nameWithType.vb: XmlReader.Item(String, String)
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
  fullName.vb: System.Xml.XmlReader.Item(System.String, System.String)
  name.vb: Item(String, String)
- uid: System.Xml.XmlReader.LocalName
  commentId: P:System.Xml.XmlReader.LocalName
  id: LocalName
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: LocalName
  nameWithType: XmlReader.LocalName
  fullName: System.Xml.XmlReader.LocalName
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 246
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the local name of the current node.</p>\n"
  syntax:
    content: public abstract string LocalName { get; }
    content.vb: Public MustOverride ReadOnly Property LocalName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the current node with the prefix removed. For example, <strong>LocalName</strong> is <strong>book</strong> for the element <code>&lt;bk:book&gt;</code>.</p>\n<p>For node types that do not have a name (like <strong>Text</strong>, <strong>Comment</strong>, and so on), this property returns <strong>String.Empty</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.Name
    commentId: P:System.Xml.XmlReader.Name
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Name
  commentId: P:System.Xml.XmlReader.Name
  id: Name
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: XmlReader.Name
  fullName: System.Xml.XmlReader.Name
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Name
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 247
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the qualified name of the current node.</p>\n"
  syntax:
    content: public virtual string Name { get; }
    content.vb: Public Overridable ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The qualified name of the current node. For example, <strong>Name</strong> is <strong>bk:book</strong> for the element <code>&lt;bk:book&gt;</code>.</p>\n<p>The name returned is dependent on the <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the node. The following node types return the listed values. All other node types return an empty string.</p>\n<p>Node type </p>\n<p>Name </p>\n<table><tbody><tr><td>\n<p>\n<strong>Attribute</strong>\n</p>\n</td><td>\n<p>The name of the attribute. </p>\n</td></tr><tr><td>\n<p>\n<strong>DocumentType</strong>\n</p>\n</td><td>\n<p>The document type name. </p>\n</td></tr><tr><td>\n<p>\n<strong>Element</strong>\n</p>\n</td><td>\n<p>The tag name. </p>\n</td></tr><tr><td>\n<p>\n<strong>EntityReference</strong>\n</p>\n</td><td>\n<p>The name of the entity referenced. </p>\n</td></tr><tr><td>\n<p>\n<strong>ProcessingInstruction</strong>\n</p>\n</td><td>\n<p>The target of the processing instruction. </p>\n</td></tr><tr><td>\n<p>\n<strong>XmlDeclaration</strong>\n</p>\n</td><td>\n<p>The literal string <strong>xml</strong>. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.LocalName
    commentId: P:System.Xml.XmlReader.LocalName
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.NamespaceURI
  commentId: P:System.Xml.XmlReader.NamespaceURI
  id: NamespaceURI
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: NamespaceURI
  nameWithType: XmlReader.NamespaceURI
  fullName: System.Xml.XmlReader.NamespaceURI
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceURI
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 248
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</p>\n"
  syntax:
    content: public abstract string NamespaceURI { get; }
    content.vb: Public MustOverride ReadOnly Property NamespaceURI As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace URI of the current node; otherwise an empty string.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.NameTable
  commentId: P:System.Xml.XmlReader.NameTable
  id: NameTable
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: NameTable
  nameWithType: XmlReader.NameTable
  fullName: System.Xml.XmlReader.NameTable
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NameTable
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 249
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> associated with this implementation.</p>\n"
  syntax:
    content: public abstract XmlNameTable NameTable { get; }
    content.vb: Public MustOverride ReadOnly Property NameTable As XmlNameTable
    parameters: []
    return:
      type: System.Xml.XmlNameTable
      description: "\n<p>The <strong>XmlNameTable</strong> enabling you to get the atomized version of a string within the node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlNameTable
    commentId: T:System.Xml.XmlNameTable
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.NodeType
  commentId: P:System.Xml.XmlReader.NodeType
  id: NodeType
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: NodeType
  nameWithType: XmlReader.NodeType
  fullName: System.Xml.XmlReader.NodeType
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NodeType
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 250
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the type of the current node.</p>\n"
  syntax:
    content: public abstract XmlNodeType NodeType { get; }
    content.vb: Public MustOverride ReadOnly Property NodeType As XmlNodeType
    parameters: []
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>One of the enumeration values that specify the type of the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Prefix
  commentId: P:System.Xml.XmlReader.Prefix
  id: Prefix
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Prefix
  nameWithType: XmlReader.Prefix
  fullName: System.Xml.XmlReader.Prefix
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Prefix
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 251
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the namespace prefix associated with the current node.</p>\n"
  syntax:
    content: public abstract string Prefix { get; }
    content.vb: Public MustOverride ReadOnly Property Prefix As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The namespace prefix associated with the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.ReadState
  commentId: P:System.Xml.XmlReader.ReadState
  id: ReadState
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadState
  nameWithType: XmlReader.ReadState
  fullName: System.Xml.XmlReader.ReadState
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadState
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 252
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the state of the reader.</p>\n"
  syntax:
    content: public abstract ReadState ReadState { get; }
    content.vb: Public MustOverride ReadOnly Property ReadState As ReadState
    parameters: []
    return:
      type: System.Xml.ReadState
      description: "\n<p>One of the enumeration values that specifies the state of the reader.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.Settings
  commentId: P:System.Xml.XmlReader.Settings
  id: Settings
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Settings
  nameWithType: XmlReader.Settings
  fullName: System.Xml.XmlReader.Settings
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Settings
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 253
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to create this <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public virtual XmlReaderSettings Settings { get; }
    content.vb: Public Overridable ReadOnly Property Settings As XmlReaderSettings
    parameters: []
    return:
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object used to create this reader instance. If this reader was not created using the <xref href=\"System.Xml.XmlReader.Create(System.IO.Stream)\" data-throw-if-not-resolved=\"false\"></xref> method, this property returns <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.Value
  commentId: P:System.Xml.XmlReader.Value
  id: Value
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: XmlReader.Value
  fullName: System.Xml.XmlReader.Value
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Value
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 254
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the text value of the current node.</p>\n"
  syntax:
    content: public abstract string Value { get; }
    content.vb: Public MustOverride ReadOnly Property Value As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The value returned depends on the <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the node. The following table lists node types that have a value to return. All other node types return <strong>String.Empty</strong>.</p>\n<p>Node type </p>\n<p>Value </p>\n<table><tbody><tr><td>\n<p>\n<strong>Attribute</strong>\n</p>\n</td><td>\n<p>The value of the attribute. </p>\n</td></tr><tr><td>\n<p>\n<strong>CDATA</strong>\n</p>\n</td><td>\n<p>The content of the CDATA section. </p>\n</td></tr><tr><td>\n<p>\n<strong>Comment</strong>\n</p>\n</td><td>\n<p>The content of the comment. </p>\n</td></tr><tr><td>\n<p>\n<strong>DocumentType</strong>\n</p>\n</td><td>\n<p>The internal subset. </p>\n</td></tr><tr><td>\n<p>\n<strong>ProcessingInstruction</strong>\n</p>\n</td><td>\n<p>The entire content, excluding the target. </p>\n</td></tr><tr><td>\n<p>\n<strong>SignificantWhitespace</strong>\n</p>\n</td><td>\n<p>The white space between markup in a mixed content model. </p>\n</td></tr><tr><td>\n<p>\n<strong>Text</strong>\n</p>\n</td><td>\n<p>The content of the text node. </p>\n</td></tr><tr><td>\n<p>\n<strong>Whitespace</strong>\n</p>\n</td><td>\n<p>The white space between markup. </p>\n</td></tr><tr><td>\n<p>\n<strong>XmlDeclaration</strong>\n</p>\n</td><td>\n<p>The content of the declaration. </p>\n</td></tr></tbody></table>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Xml.XmlReader.ValueType
  commentId: P:System.Xml.XmlReader.ValueType
  id: ValueType
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ValueType
  nameWithType: XmlReader.ValueType
  fullName: System.Xml.XmlReader.ValueType
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ValueType
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 255
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Gets The Common Language Runtime (CLR) type for the current node.</p>\n"
  syntax:
    content: public virtual Type ValueType { get; }
    content.vb: Public Overridable ReadOnly Property ValueType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The CLR type that corresponds to the typed value of the node. The default is <strong>System.String</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.XmlLang
  commentId: P:System.Xml.XmlReader.XmlLang
  id: XmlLang
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: XmlLang
  nameWithType: XmlReader.XmlLang
  fullName: System.Xml.XmlReader.XmlLang
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlLang
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 256
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the current <strong>xml:lang</strong> scope.</p>\n"
  syntax:
    content: public virtual string XmlLang { get; }
    content.vb: Public Overridable ReadOnly Property XmlLang As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The current <strong>xml:lang</strong> scope.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.XmlSpace
    commentId: P:System.Xml.XmlReader.XmlSpace
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.XmlSpace
  commentId: P:System.Xml.XmlReader.XmlSpace
  id: XmlSpace
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: XmlSpace
  nameWithType: XmlReader.XmlSpace
  fullName: System.Xml.XmlReader.XmlSpace
  type: Property
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlSpace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 257
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the current <strong>xml:space</strong> scope.</p>\n"
  syntax:
    content: public virtual XmlSpace XmlSpace { get; }
    content.vb: Public Overridable ReadOnly Property XmlSpace As XmlSpace
    parameters: []
    return:
      type: System.Xml.XmlSpace
      description: "\n<p>One of the <xref href=\"System.Xml.XmlSpace\" data-throw-if-not-resolved=\"false\"></xref> values. If no <strong>xml:space</strong> scope exists, this property defaults to <strong>XmlSpace.None</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.XmlLang
    commentId: P:System.Xml.XmlReader.XmlLang
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Xml.XmlReader.Create(System.IO.Stream)
  commentId: M:System.Xml.XmlReader.Create(System.IO.Stream)
  id: Create(System.IO.Stream)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(Stream)
  nameWithType: XmlReader.Create(Stream)
  fullName: System.Xml.XmlReader.Create(System.IO.Stream)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 258
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified stream with default settings.</p>\n"
  syntax:
    content: public static XmlReader Create(Stream input)
    content.vb: Public Shared Function Create(input As Stream) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> does not have sufficient permissions to access the location of the XML data.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  id: Create(System.IO.Stream,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(Stream, XmlReaderSettings)
  nameWithType: XmlReader.Create(Stream, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 259
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified stream and settings.</p>\n"
  syntax:
    content: public static XmlReader Create(Stream input, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(input As Stream, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data.</p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  commentId: M:System.Xml.XmlReader.Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  id: Create(System.IO.Stream,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(Stream, XmlReaderSettings, XmlParserContext)
  nameWithType: XmlReader.Create(Stream, XmlReaderSettings, XmlParserContext)
  fullName: System.Xml.XmlReader.Create(System.IO.Stream, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 260
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance using the specified stream, settings, and context information for parsing.</p>\n"
  syntax:
    content: public static XmlReader Create(Stream input, XmlReaderSettings settings, XmlParserContext inputContext)
    content.vb: Public Shared Function Create(input As Stream, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader
    parameters:
    - id: input
      type: System.IO.Stream
      description: "\n<p>The stream that contains the XML data. </p>\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> scans the first bytes of the stream looking for a byte order mark or other sign of encoding. When encoding is determined, the encoding is used to continue reading the stream, and processing continues parsing the input as a stream of (Unicode) characters.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    - id: inputContext
      type: System.Xml.XmlParserContext
      description: "\n<p>The context information required to parse the XML fragment. The context information can include the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition. </p>\n<p>This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.TextReader)
  commentId: M:System.Xml.XmlReader.Create(System.IO.TextReader)
  id: Create(System.IO.TextReader)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(TextReader)
  nameWithType: XmlReader.Create(TextReader)
  fullName: System.Xml.XmlReader.Create(System.IO.TextReader)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 261
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified text reader.</p>\n"
  syntax:
    content: public static XmlReader Create(TextReader input)
    content.vb: Public Shared Function Create(input As TextReader) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "\n<p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration is not used by the XML reader to decode the data stream.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  id: Create(System.IO.TextReader,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(TextReader, XmlReaderSettings)
  nameWithType: XmlReader.Create(TextReader, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 262
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified text reader and settings.</p>\n"
  syntax:
    content: public static XmlReader Create(TextReader input, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(input As TextReader, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "\n<p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref>. This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  commentId: M:System.Xml.XmlReader.Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  id: Create(System.IO.TextReader,System.Xml.XmlReaderSettings,System.Xml.XmlParserContext)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(TextReader, XmlReaderSettings, XmlParserContext)
  nameWithType: XmlReader.Create(TextReader, XmlReaderSettings, XmlParserContext)
  fullName: System.Xml.XmlReader.Create(System.IO.TextReader, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 263
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified text reader, settings, and context information for parsing.</p>\n"
  syntax:
    content: public static XmlReader Create(TextReader input, XmlReaderSettings settings, XmlParserContext inputContext)
    content.vb: Public Shared Function Create(input As TextReader, settings As XmlReaderSettings, inputContext As XmlParserContext) As XmlReader
    parameters:
    - id: input
      type: System.IO.TextReader
      description: "\n<p>The text reader from which to read the XML data. A text reader returns a stream of Unicode characters, so the encoding specified in the XML declaration isn't used by the XML reader to decode the data stream.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    - id: inputContext
      type: System.Xml.XmlParserContext
      description: "\n<p>The context information required to parse the XML fragment. The context information can include the <xref href=\"System.Xml.XmlNameTable\" data-throw-if-not-resolved=\"false\"></xref> to use, encoding, namespace scope, the current <code>xml:lang</code> and <code>xml:space</code> scope, base URI, and document type definition.</p>\n<p>This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>input</em> value is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The <xref href=\"System.Xml.XmlReaderSettings.NameTable\" data-throw-if-not-resolved=\"false\"></xref>  and <xref href=\"System.Xml.XmlParserContext.NameTable\" data-throw-if-not-resolved=\"false\"></xref> properties both contain values. (Only one of these <strong>NameTable</strong> properties can be set and used).</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.String)
  commentId: M:System.Xml.XmlReader.Create(System.String)
  id: Create(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(String)
  nameWithType: XmlReader.Create(String)
  fullName: System.Xml.XmlReader.Create(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 264
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance with specified URI.</p>\n"
  syntax:
    content: public static XmlReader Create(string inputUri)
    content.vb: Public Shared Function Create(inputUri As String) As XmlReader
    parameters:
    - id: inputUri
      type: System.String
      description: "\n<p>The URI for the file that contains the XML data. The <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> class is used to convert the path to a canonical data representation.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>inputUri</em> value is <strong>null</strong>.</p>\n"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> does not have sufficient permissions to access the location of the XML data.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file identified by the URI does not exist.</p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The URI format is not correct.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.String,System.Xml.XmlReaderSettings)
  id: Create(System.String,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(String, XmlReaderSettings)
  nameWithType: XmlReader.Create(String, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.String, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 265
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified URI and settings.</p>\n"
  syntax:
    content: public static XmlReader Create(string inputUri, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(inputUri As String, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: inputUri
      type: System.String
      description: "\n<p>The URI for the file containing the XML data. The <xref href=\"System.Xml.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> object on the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object is used to convert the path to a canonical data representation. If <xref href=\"System.Xml.XmlReaderSettings.XmlResolver\" data-throw-if-not-resolved=\"false\"></xref> is <strong>null</strong>, a new <xref href=\"System.Xml.XmlUrlResolver\" data-throw-if-not-resolved=\"false\"></xref> object is used.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance. This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is used to read the XML data in the stream.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>inputUri</em> value is <strong>null</strong>.</p>\n"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "\n<p>The file specified by the URI cannot be found.</p>\n"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "\n<p>In the <a href=\"http://go.microsoft.com/fwlink/?LinkID=247912\">.NET for Windows Store apps</a> or the Portable Class Library, catch the base class exception, <xref href=\"System.FormatException\" data-throw-if-not-resolved=\"false\"></xref>, instead.</p>\n<p>The URI format is not correct.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  commentId: M:System.Xml.XmlReader.Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  id: Create(System.Xml.XmlReader,System.Xml.XmlReaderSettings)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Create(XmlReader, XmlReaderSettings)
  nameWithType: XmlReader.Create(XmlReader, XmlReaderSettings)
  fullName: System.Xml.XmlReader.Create(System.Xml.XmlReader, System.Xml.XmlReaderSettings)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Create
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 266
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Creates a new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance by using the specified XML reader and settings.</p>\n"
  syntax:
    content: public static XmlReader Create(XmlReader reader, XmlReaderSettings settings)
    content.vb: Public Shared Function Create(reader As XmlReader, settings As XmlReaderSettings) As XmlReader
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "\n<p>The object that you want to use as the underlying XML reader.</p>\n"
    - id: settings
      type: System.Xml.XmlReaderSettings
      description: "\n<p>The settings for the new <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n<p>The conformance level of the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object must either match the conformance level of the underlying reader, or it must be set to <xref href=\"System.Xml.ConformanceLevel.Auto\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Xml.XmlReader
      description: "\n<p>An object that is wrapped around the specified <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>reader</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>If the <xref href=\"System.Xml.XmlReaderSettings\" data-throw-if-not-resolved=\"false\"></xref> object specifies a conformance level that is not consistent with conformance level of the underlying reader.</p>\n<p>-or-</p>\n<p>The underlying <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an <xref href=\"System.Xml.ReadState.Error\" data-throw-if-not-resolved=\"false\"></xref> or <xref href=\"System.Xml.ReadState.Closed\" data-throw-if-not-resolved=\"false\"></xref> state.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.Dispose
  commentId: M:System.Xml.XmlReader.Dispose
  id: Dispose
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: XmlReader.Dispose()
  fullName: System.Xml.XmlReader.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 267
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Xml.XmlReader.Dispose(System.Boolean)
  commentId: M:System.Xml.XmlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: XmlReader.Dispose(Boolean)
  fullName: System.Xml.XmlReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 268
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Releases the unmanaged resources used by the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the managed resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release both managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Xml.XmlReader.GetAttribute(System.Int32)
  commentId: M:System.Xml.XmlReader.GetAttribute(System.Int32)
  id: GetAttribute(System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetAttribute(Int32)
  nameWithType: XmlReader.GetAttribute(Int32)
  fullName: System.Xml.XmlReader.GetAttribute(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 269
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified index.</p>\n"
  syntax:
    content: public abstract string GetAttribute(int i)
    content.vb: Public MustOverride Function GetAttribute(i As Integer) As String
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute. The index is zero-based. (The first attribute has index 0.)</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. This method does not move the reader.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>i</em> is out of range. It must be non-negative and less than the size of the attribute collection.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.GetAttribute(System.String)
  commentId: M:System.Xml.XmlReader.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetAttribute(String)
  nameWithType: XmlReader.GetAttribute(String)
  fullName: System.Xml.XmlReader.GetAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 270
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract string GetAttribute(string name)
    content.vb: Public MustOverride Function GetAttribute(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found or the value is <strong>String.Empty</strong>, <strong>null</strong> is returned.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.GetAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlReader.GetAttribute(System.String,System.String)
  id: GetAttribute(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetAttribute(String, String)
  nameWithType: XmlReader.GetAttribute(String, String)
  fullName: System.Xml.XmlReader.GetAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 271
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, gets the value of the attribute with the specified <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract string GetAttribute(string name, string namespaceURI)
    content.vb: Public MustOverride Function GetAttribute(name As String, namespaceURI As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified attribute. If the attribute is not found or the value is <strong>String.Empty</strong>, <strong>null</strong> is returned. This method does not move the reader.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.GetValueAsync
  commentId: M:System.Xml.XmlReader.GetValueAsync
  id: GetValueAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: GetValueAsync()
  nameWithType: XmlReader.GetValueAsync()
  fullName: System.Xml.XmlReader.GetValueAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValueAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 272
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously gets the value of the current node.</p>\n"
  syntax:
    content: public virtual Task<string> GetValueAsync()
    content.vb: Public Overridable Function GetValueAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The value of the current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.IsName(System.String)
  commentId: M:System.Xml.XmlReader.IsName(System.String)
  id: IsName(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsName(String)
  nameWithType: XmlReader.IsName(String)
  fullName: System.Xml.XmlReader.IsName(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsName
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 273
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns a value indicating whether the string argument is a valid XML name.</p>\n"
  syntax:
    content: public static bool IsName(string str)
    content.vb: Public Shared Function IsName(str As String) As Boolean
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The name to validate.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the name is valid; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>str</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.IsNameToken(System.String)
  commentId: M:System.Xml.XmlReader.IsNameToken(System.String)
  id: IsNameToken(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsNameToken(String)
  nameWithType: XmlReader.IsNameToken(String)
  fullName: System.Xml.XmlReader.IsNameToken(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNameToken
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 274
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns a value indicating whether or not the string argument is a valid XML name token.</p>\n"
  syntax:
    content: public static bool IsNameToken(string str)
    content.vb: Public Shared Function IsNameToken(str As String) As Boolean
    parameters:
    - id: str
      type: System.String
      description: "\n<p>The name token to validate.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if it is a valid name token; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>str</em> value is <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.XmlReader.IsStartElement
  commentId: M:System.Xml.XmlReader.IsStartElement
  id: IsStartElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsStartElement()
  nameWithType: XmlReader.IsStartElement()
  fullName: System.Xml.XmlReader.IsStartElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 275
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Calls <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> and tests if the current content node is a start tag or empty element tag.</p>\n"
  syntax:
    content: public virtual bool IsStartElement()
    content.vb: Public Overridable Function IsStartElement As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> finds a start tag or empty element tag; <strong>false</strong> if a node type other than <strong>XmlNodeType.Element</strong> was found.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.MoveToContent
    commentId: M:System.Xml.XmlReader.MoveToContent
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.IsStartElement(System.String)
  commentId: M:System.Xml.XmlReader.IsStartElement(System.String)
  id: IsStartElement(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsStartElement(String)
  nameWithType: XmlReader.IsStartElement(String)
  fullName: System.Xml.XmlReader.IsStartElement(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 276
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Calls <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> and tests if the current content node is a start tag or empty element tag and if the <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref> property of the element found matches the given argument.</p>\n"
  syntax:
    content: public virtual bool IsStartElement(string name)
    content.vb: Public Overridable Function IsStartElement(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The string matched against the <strong>Name</strong> property of the element found.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the resulting node is an element and the <strong>Name</strong> property matches the specified string. <strong>false</strong> if a node type other than <strong>XmlNodeType.Element</strong> was found or if the element <strong>Name</strong> property does not match the specified string.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.MoveToContent
    commentId: M:System.Xml.XmlReader.MoveToContent
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.IsStartElement(System.String,System.String)
  commentId: M:System.Xml.XmlReader.IsStartElement(System.String,System.String)
  id: IsStartElement(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: IsStartElement(String, String)
  nameWithType: XmlReader.IsStartElement(String, String)
  fullName: System.Xml.XmlReader.IsStartElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 277
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Calls <xref href=\"System.Xml.XmlReader.MoveToContent\" data-throw-if-not-resolved=\"false\"></xref> and tests if the current content node is a start tag or empty element tag and if the <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> properties of the element found match the given strings.</p>\n"
  syntax:
    content: public virtual bool IsStartElement(string localname, string ns)
    content.vb: Public Overridable Function IsStartElement(localname As String, ns As String) As Boolean
    parameters:
    - id: localname
      type: System.String
      description: "\n<p>The string to match against the <strong>LocalName</strong> property of the element found.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The string to match against the <strong>NamespaceURI</strong> property of the element found.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the resulting node is an element. <strong>false</strong> if a node type other than <strong>XmlNodeType.Element</strong> was found or if the <strong>LocalName</strong> and <strong>NamespaceURI</strong> properties of the element do not match the specified strings.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.MoveToContent
    commentId: M:System.Xml.XmlReader.MoveToContent
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.LookupNamespace(System.String)
  commentId: M:System.Xml.XmlReader.LookupNamespace(System.String)
  id: LookupNamespace(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: LookupNamespace(String)
  nameWithType: XmlReader.LookupNamespace(String)
  fullName: System.Xml.XmlReader.LookupNamespace(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LookupNamespace
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 278
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, resolves a namespace prefix in the current element's scope.</p>\n"
  syntax:
    content: public abstract string LookupNamespace(string prefix)
    content.vb: Public MustOverride Function LookupNamespace(prefix As String) As String
    parameters:
    - id: prefix
      type: System.String
      description: "\n<p>The prefix whose namespace URI you want to resolve. To match the default namespace, pass an empty string. </p>\n"
    return:
      type: System.String
      description: "\n<p>The namespace URI to which the prefix maps or <strong>null</strong> if no matching prefix is found.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToAttribute(System.Int32)
  commentId: M:System.Xml.XmlReader.MoveToAttribute(System.Int32)
  id: MoveToAttribute(System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToAttribute(Int32)
  nameWithType: XmlReader.MoveToAttribute(Int32)
  fullName: System.Xml.XmlReader.MoveToAttribute(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 279
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the attribute with the specified index.</p>\n"
  syntax:
    content: public virtual void MoveToAttribute(int i)
    content.vb: Public Overridable Sub MoveToAttribute(i As Integer)
    parameters:
    - id: i
      type: System.Int32
      description: "\n<p>The index of the attribute.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The parameter has a negative value.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.MoveToAttribute(System.String)
  commentId: M:System.Xml.XmlReader.MoveToAttribute(System.String)
  id: MoveToAttribute(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToAttribute(String)
  nameWithType: XmlReader.MoveToAttribute(String)
  fullName: System.Xml.XmlReader.MoveToAttribute(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 280
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the attribute with the specified <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract bool MoveToAttribute(string name)
    content.vb: Public MustOverride Function MoveToAttribute(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the attribute.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the attribute is found; otherwise, <strong>false</strong>. If <strong>false</strong>, the reader's position does not change.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
  commentId: M:System.Xml.XmlReader.MoveToAttribute(System.String,System.String)
  id: MoveToAttribute(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToAttribute(String, String)
  nameWithType: XmlReader.MoveToAttribute(String, String)
  fullName: System.Xml.XmlReader.MoveToAttribute(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 281
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the attribute with the specified <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract bool MoveToAttribute(string name, string ns)
    content.vb: Public MustOverride Function MoveToAttribute(name As String, ns As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The local name of the attribute.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the attribute.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the attribute is found; otherwise, <strong>false</strong>. If <strong>false</strong>, the reader's position does not change.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToContent
  commentId: M:System.Xml.XmlReader.MoveToContent
  id: MoveToContent
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToContent()
  nameWithType: XmlReader.MoveToContent()
  fullName: System.Xml.XmlReader.MoveToContent()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToContent
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 282
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks whether the current node is a content (non-white space text, <strong>CDATA</strong>, <strong>Element</strong>, <strong>EndElement</strong>, <strong>EntityReference</strong>, or <strong>EndEntity</strong>) node. If the node is not a content node, the reader skips ahead to the next content node or end of file. It skips over nodes of the following type: <strong>ProcessingInstruction</strong>, <strong>DocumentType</strong>, <strong>Comment</strong>, <strong>Whitespace</strong>, or <strong>SignificantWhitespace</strong>.</p>\n"
  syntax:
    content: public virtual XmlNodeType MoveToContent()
    content.vb: Public Overridable Function MoveToContent As XmlNodeType
    return:
      type: System.Xml.XmlNodeType
      description: "\n<p>The <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the current node found by the method or <strong>XmlNodeType.None</strong> if the reader has reached the end of the input stream.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.MoveToContentAsync
  commentId: M:System.Xml.XmlReader.MoveToContentAsync
  id: MoveToContentAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToContentAsync()
  nameWithType: XmlReader.MoveToContentAsync()
  fullName: System.Xml.XmlReader.MoveToContentAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToContentAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 283
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously checks whether the current node is a content node. If the node is not a content node, the reader skips ahead to the next content node or end of file.</p>\n"
  syntax:
    content: public virtual Task<XmlNodeType> MoveToContentAsync()
    content.vb: Public Overridable Function MoveToContentAsync As Task(Of XmlNodeType)
    return:
      type: System.Threading.Tasks.Task{System.Xml.XmlNodeType}
      description: "\n<p>The <xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> of the current node found by the method or <strong>XmlNodeType.None</strong> if the reader has reached the end of the input stream.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.MoveToElement
  commentId: M:System.Xml.XmlReader.MoveToElement
  id: MoveToElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToElement()
  nameWithType: XmlReader.MoveToElement()
  fullName: System.Xml.XmlReader.MoveToElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 284
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the element that contains the current attribute node.</p>\n"
  syntax:
    content: public abstract bool MoveToElement()
    content.vb: Public MustOverride Function MoveToElement As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <strong>false</strong> if the reader is not positioned on an attribute (the position of the reader does not change).</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToFirstAttribute
  commentId: M:System.Xml.XmlReader.MoveToFirstAttribute
  id: MoveToFirstAttribute
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToFirstAttribute()
  nameWithType: XmlReader.MoveToFirstAttribute()
  fullName: System.Xml.XmlReader.MoveToFirstAttribute()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToFirstAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 285
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the first attribute.</p>\n"
  syntax:
    content: public abstract bool MoveToFirstAttribute()
    content.vb: Public MustOverride Function MoveToFirstAttribute As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an attribute exists (the reader moves to the first attribute); otherwise, <strong>false</strong> (the position of the reader does not change).</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.MoveToNextAttribute
  commentId: M:System.Xml.XmlReader.MoveToNextAttribute
  id: MoveToNextAttribute
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: MoveToNextAttribute()
  nameWithType: XmlReader.MoveToNextAttribute()
  fullName: System.Xml.XmlReader.MoveToNextAttribute()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MoveToNextAttribute
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 286
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, moves to the next attribute.</p>\n"
  syntax:
    content: public abstract bool MoveToNextAttribute()
    content.vb: Public MustOverride Function MoveToNextAttribute As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there is a next attribute; <strong>false</strong> if there are no more attributes.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.Read
  commentId: M:System.Xml.XmlReader.Read
  id: Read
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: XmlReader.Read()
  fullName: System.Xml.XmlReader.Read()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 287
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, reads the next node from the stream.</p>\n"
  syntax:
    content: public abstract bool Read()
    content.vb: Public MustOverride Function Read As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the next node was read successfully; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>An error occurred while parsing the XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.ReadAsync
  commentId: M:System.Xml.XmlReader.ReadAsync
  id: ReadAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadAsync()
  nameWithType: XmlReader.ReadAsync()
  fullName: System.Xml.XmlReader.ReadAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 288
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the next node from the stream.</p>\n"
  syntax:
    content: public virtual Task<bool> ReadAsync()
    content.vb: Public Overridable Function ReadAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>\n<strong>true</strong> if the next node was read successfully; <strong>false</strong> if there are no more nodes to read.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadAttributeValue
  commentId: M:System.Xml.XmlReader.ReadAttributeValue
  id: ReadAttributeValue
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadAttributeValue()
  nameWithType: XmlReader.ReadAttributeValue()
  fullName: System.Xml.XmlReader.ReadAttributeValue()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAttributeValue
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 289
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, parses the attribute value into one or more <strong>Text</strong>, <strong>EntityReference</strong>, or <strong>EndEntity</strong> nodes.</p>\n"
  syntax:
    content: public abstract bool ReadAttributeValue()
    content.vb: Public MustOverride Function ReadAttributeValue As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are nodes to return.</p>\n<p>\n<strong>false</strong> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</p>\n<p>An empty attribute, such as, <code>misc=\"\"</code>, returns <strong>true</strong> with a single node with a value of <strong>String.Empty</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAs(Type, IXmlNamespaceResolver)
  nameWithType: XmlReader.ReadContentAs(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAs
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 290
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the content as an object of the type specified.</p>\n"
  syntax:
    content: public virtual object ReadContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadContentAs(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n<p>Note   With the release of the .NET Framework 3.5, the value of the <em>returnType</em> parameter can now be the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion. For example, this can be used when converting an <xref href=\"System.Xml.XmlQualifiedName\" data-throw-if-not-resolved=\"false\"></xref> object to an <code>xs:string</code>.</p>\n<p>This value can be <strong>null</strong>.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The concatenated text content or attribute value converted to the requested type.</p>\n"
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The content is not in the correct format for the target type.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>returnType</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node is not a supported node type. See the table below for details.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Read <strong>Decimal.MaxValue</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsAsync(Type, IXmlNamespaceResolver)
  nameWithType: XmlReader.ReadContentAsAsync(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 291
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content as an object of the type specified.</p>\n"
  syntax:
    content: public virtual Task<object> ReadContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadContentAsAsync(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Task(Of Object)
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>The concatenated text content or attribute value converted to the requested type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBase64(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadContentAsBase64(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBase64(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBase64
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 292
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the content and returns the Base64 decoded binary bytes.</p>\n"
  syntax:
    content: public virtual int ReadContentAsBase64(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBase64(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is not supported on the current node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  - linkId: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  nameWithType.vb: XmlReader.ReadContentAsBase64(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBase64(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBase64(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBase64Async(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadContentAsBase64Async(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBase64Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 293
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content and returns the Base64 decoded binary bytes.</p>\n"
  syntax:
    content: public virtual Task<int> ReadContentAsBase64Async(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBase64Async(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  nameWithType.vb: XmlReader.ReadContentAsBase64Async(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBase64Async(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBase64Async(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBinHex(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadContentAsBinHex(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBinHex
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 294
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the content and returns the <strong>BinHex</strong> decoded binary bytes.</p>\n"
  syntax:
    content: public virtual int ReadContentAsBinHex(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBinHex(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<xref href=\"System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)\" data-throw-if-not-resolved=\"false\"></xref> is not supported on the current node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  - linkId: System.Xml.XmlNodeType
    commentId: T:System.Xml.XmlNodeType
  nameWithType.vb: XmlReader.ReadContentAsBinHex(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBinHex(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  id: ReadContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBinHexAsync(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadContentAsBinHexAsync(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBinHexAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 295
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content and returns the <strong>BinHex</strong> decoded binary bytes.</p>\n"
  syntax:
    content: public virtual Task<int> ReadContentAsBinHexAsync(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadContentAsBinHexAsync(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  nameWithType.vb: XmlReader.ReadContentAsBinHexAsync(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadContentAsBinHexAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadContentAsBinHexAsync(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadContentAsBoolean
  commentId: M:System.Xml.XmlReader.ReadContentAsBoolean
  id: ReadContentAsBoolean
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsBoolean()
  nameWithType: XmlReader.ReadContentAsBoolean()
  fullName: System.Xml.XmlReader.ReadContentAsBoolean()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsBoolean
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 296
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <strong>Boolean</strong>.</p>\n"
  syntax:
    content: public virtual bool ReadContentAsBoolean()
    content.vb: Public Overridable Function ReadContentAsBoolean As Boolean
    return:
      type: System.Boolean
      description: "\n<p>The text content as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsDateTimeOffset
  commentId: M:System.Xml.XmlReader.ReadContentAsDateTimeOffset
  id: ReadContentAsDateTimeOffset
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsDateTimeOffset()
  nameWithType: XmlReader.ReadContentAsDateTimeOffset()
  fullName: System.Xml.XmlReader.ReadContentAsDateTimeOffset()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsDateTimeOffset
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 297
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual DateTimeOffset ReadContentAsDateTimeOffset()
    content.vb: Public Overridable Function ReadContentAsDateTimeOffset As DateTimeOffset
    return:
      type: System.DateTimeOffset
      description: "\n<p>The text content as a <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsDecimal
  commentId: M:System.Xml.XmlReader.ReadContentAsDecimal
  id: ReadContentAsDecimal
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsDecimal()
  nameWithType: XmlReader.ReadContentAsDecimal()
  fullName: System.Xml.XmlReader.ReadContentAsDecimal()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsDecimal
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 298
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual decimal ReadContentAsDecimal()
    content.vb: Public Overridable Function ReadContentAsDecimal As Decimal
    return:
      type: System.Decimal
      description: "\n<p>The text content at the current position as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsDouble
  commentId: M:System.Xml.XmlReader.ReadContentAsDouble
  id: ReadContentAsDouble
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsDouble()
  nameWithType: XmlReader.ReadContentAsDouble()
  fullName: System.Xml.XmlReader.ReadContentAsDouble()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsDouble
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 299
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a double-precision floating-point number.</p>\n"
  syntax:
    content: public virtual double ReadContentAsDouble()
    content.vb: Public Overridable Function ReadContentAsDouble As Double
    return:
      type: System.Double
      description: "\n<p>The text content as a double-precision floating-point number.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsFloat
  commentId: M:System.Xml.XmlReader.ReadContentAsFloat
  id: ReadContentAsFloat
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsFloat()
  nameWithType: XmlReader.ReadContentAsFloat()
  fullName: System.Xml.XmlReader.ReadContentAsFloat()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsFloat
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 300
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a single-precision floating point number.</p>\n"
  syntax:
    content: public virtual float ReadContentAsFloat()
    content.vb: Public Overridable Function ReadContentAsFloat As Single
    return:
      type: System.Single
      description: "\n<p>The text content at the current position as a single-precision floating point number.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsInt
  commentId: M:System.Xml.XmlReader.ReadContentAsInt
  id: ReadContentAsInt
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsInt()
  nameWithType: XmlReader.ReadContentAsInt()
  fullName: System.Xml.XmlReader.ReadContentAsInt()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsInt
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 301
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a 32-bit signed integer.</p>\n"
  syntax:
    content: public virtual int ReadContentAsInt()
    content.vb: Public Overridable Function ReadContentAsInt As Integer
    return:
      type: System.Int32
      description: "\n<p>The text content as a 32-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsLong
  commentId: M:System.Xml.XmlReader.ReadContentAsLong
  id: ReadContentAsLong
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsLong()
  nameWithType: XmlReader.ReadContentAsLong()
  fullName: System.Xml.XmlReader.ReadContentAsLong()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsLong
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 302
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a 64-bit signed integer.</p>\n"
  syntax:
    content: public virtual long ReadContentAsLong()
    content.vb: Public Overridable Function ReadContentAsLong As Long
    return:
      type: System.Int64
      description: "\n<p>The text content as a 64-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsObject
  commentId: M:System.Xml.XmlReader.ReadContentAsObject
  id: ReadContentAsObject
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsObject()
  nameWithType: XmlReader.ReadContentAsObject()
  fullName: System.Xml.XmlReader.ReadContentAsObject()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsObject
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 303
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object ReadContentAsObject()
    content.vb: Public Overridable Function ReadContentAsObject As Object
    return:
      type: System.Object
      description: "\n<p>The text content as the most appropriate common language runtime (CLR) object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsObjectAsync
  commentId: M:System.Xml.XmlReader.ReadContentAsObjectAsync
  id: ReadContentAsObjectAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsObjectAsync()
  nameWithType: XmlReader.ReadContentAsObjectAsync()
  fullName: System.Xml.XmlReader.ReadContentAsObjectAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsObjectAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 304
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the text content at the current position as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Task<object> ReadContentAsObjectAsync()
    content.vb: Public Overridable Function ReadContentAsObjectAsync As Task(Of Object)
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>The text content as the most appropriate common language runtime (CLR) object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsString
  commentId: M:System.Xml.XmlReader.ReadContentAsString
  id: ReadContentAsString
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsString()
  nameWithType: XmlReader.ReadContentAsString()
  fullName: System.Xml.XmlReader.ReadContentAsString()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 305
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the text content at the current position as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual string ReadContentAsString()
    content.vb: Public Overridable Function ReadContentAsString As String
    return:
      type: System.String
      description: "\n<p>The text content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The attempted cast is not valid.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The string format is not valid.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadContentAsStringAsync
  commentId: M:System.Xml.XmlReader.ReadContentAsStringAsync
  id: ReadContentAsStringAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadContentAsStringAsync()
  nameWithType: XmlReader.ReadContentAsStringAsync()
  fullName: System.Xml.XmlReader.ReadContentAsStringAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadContentAsStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 306
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the text content at the current position as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual Task<string> ReadContentAsStringAsync()
    content.vb: Public Overridable Function ReadContentAsStringAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The text content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAs(Type, IXmlNamespaceResolver)
  nameWithType: XmlReader.ReadElementContentAs(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAs
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 307
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the element content as the requested type.</p>\n"
  syntax:
    content: public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadElementContentAs(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n<p>Note   With the release of the .NET Framework 3.5, the value of the <em>returnType</em> parameter can now be the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element content converted to the requested typed object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Read <strong>Decimal.MaxValue</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  id: ReadElementContentAs(System.Type,System.Xml.IXmlNamespaceResolver,System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAs(Type, IXmlNamespaceResolver, String, String)
  nameWithType: XmlReader.ReadElementContentAs(Type, IXmlNamespaceResolver, String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAs(System.Type, System.Xml.IXmlNamespaceResolver, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAs
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 308
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the element content as the requested type.</p>\n"
  syntax:
    content: public virtual object ReadElementContentAs(Type returnType, IXmlNamespaceResolver namespaceResolver, string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAs(returnType As Type, namespaceResolver As IXmlNamespaceResolver, localName As String, namespaceURI As String) As Object
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n<p>Note   With the release of the .NET Framework 3.5, the value of the <em>returnType</em> parameter can now be the <xref href=\"System.DateTimeOffset\" data-throw-if-not-resolved=\"false\"></xref> type.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The element content converted to the requested typed object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>Read <strong>Decimal.MaxValue</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  id: ReadElementContentAsAsync(System.Type,System.Xml.IXmlNamespaceResolver)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsAsync(Type, IXmlNamespaceResolver)
  nameWithType: XmlReader.ReadElementContentAsAsync(Type, IXmlNamespaceResolver)
  fullName: System.Xml.XmlReader.ReadElementContentAsAsync(System.Type, System.Xml.IXmlNamespaceResolver)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 309
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the element content as the requested type.</p>\n"
  syntax:
    content: public virtual Task<object> ReadElementContentAsAsync(Type returnType, IXmlNamespaceResolver namespaceResolver)
    content.vb: Public Overridable Function ReadElementContentAsAsync(returnType As Type, namespaceResolver As IXmlNamespaceResolver) As Task(Of Object)
    parameters:
    - id: returnType
      type: System.Type
      description: "\n<p>The type of the value to be returned.</p>\n"
    - id: namespaceResolver
      type: System.Xml.IXmlNamespaceResolver
      description: "\n<p>An <xref href=\"System.Xml.IXmlNamespaceResolver\" data-throw-if-not-resolved=\"false\"></xref> object that is used to resolve any namespace prefixes related to type conversion.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>The element content converted to the requested typed object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBase64(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadElementContentAsBase64(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBase64
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 310
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the element and decodes the <strong>Base64</strong> content.</p>\n"
  syntax:
    content: public virtual int ReadElementContentAsBase64(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBase64(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node is not an element node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The element contains mixed-content.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The content cannot be converted to the requested type.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: XmlReader.ReadElementContentAsBase64(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBase64(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBase64(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBase64Async(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBase64Async(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadElementContentAsBase64Async(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBase64Async
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 311
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the element and decodes the <strong>Base64</strong> content.</p>\n"
  syntax:
    content: public virtual Task<int> ReadElementContentAsBase64Async(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBase64Async(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  nameWithType.vb: XmlReader.ReadElementContentAsBase64Async(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBase64Async(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBase64Async(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBinHex(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadElementContentAsBinHex(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBinHex
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 312
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the element and decodes the <strong>BinHex</strong> content.</p>\n"
  syntax:
    content: public virtual int ReadElementContentAsBinHex(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBinHex(buffer As Byte(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node is not an element node.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The element contains mixed-content.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>The content cannot be converted to the requested type.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
    commentId: M:System.Xml.XmlReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: XmlReader.ReadElementContentAsBinHex(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBinHex(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBinHex(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  id: ReadElementContentAsBinHexAsync(System.Byte[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBinHexAsync(Byte[], Int32, Int32)
  nameWithType: XmlReader.ReadElementContentAsBinHexAsync(Byte[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBinHexAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 313
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the element and decodes the <strong>BinHex</strong> content.</p>\n"
  syntax:
    content: public virtual Task<int> ReadElementContentAsBinHexAsync(byte[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadElementContentAsBinHexAsync(buffer As Byte(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the resulting text. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset into the buffer where to start copying the result.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of bytes to copy into the buffer. The actual number of bytes copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of bytes written to the buffer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  nameWithType.vb: XmlReader.ReadElementContentAsBinHexAsync(Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadElementContentAsBinHexAsync(System.Byte(), System.Int32, System.Int32)
  name.vb: ReadElementContentAsBinHexAsync(Byte(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadElementContentAsBoolean
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBoolean
  id: ReadElementContentAsBoolean
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBoolean()
  nameWithType: XmlReader.ReadElementContentAsBoolean()
  fullName: System.Xml.XmlReader.ReadElementContentAsBoolean()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBoolean
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 314
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual bool ReadElementContentAsBoolean()
    content.vb: Public Overridable Function ReadElementContentAsBoolean As Boolean
    return:
      type: System.Boolean
      description: "\n<p>The element content as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsBoolean(System.String,System.String)
  id: ReadElementContentAsBoolean(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsBoolean(String, String)
  nameWithType: XmlReader.ReadElementContentAsBoolean(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsBoolean(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsBoolean
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 315
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual bool ReadElementContentAsBoolean(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsBoolean(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The element content as a <xref href=\"System.Boolean\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDecimal
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDecimal
  id: ReadElementContentAsDecimal
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDecimal()
  nameWithType: XmlReader.ReadElementContentAsDecimal()
  fullName: System.Xml.XmlReader.ReadElementContentAsDecimal()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDecimal
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 316
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual decimal ReadElementContentAsDecimal()
    content.vb: Public Overridable Function ReadElementContentAsDecimal As Decimal
    return:
      type: System.Decimal
      description: "\n<p>The element content as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDecimal(System.String,System.String)
  id: ReadElementContentAsDecimal(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDecimal(String, String)
  nameWithType: XmlReader.ReadElementContentAsDecimal(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsDecimal(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDecimal
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 317
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual decimal ReadElementContentAsDecimal(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsDecimal(localName As String, namespaceURI As String) As Decimal
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The element content as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDouble
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDouble
  id: ReadElementContentAsDouble
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDouble()
  nameWithType: XmlReader.ReadElementContentAsDouble()
  fullName: System.Xml.XmlReader.ReadElementContentAsDouble()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDouble
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 318
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a double-precision floating-point number.</p>\n"
  syntax:
    content: public virtual double ReadElementContentAsDouble()
    content.vb: Public Overridable Function ReadElementContentAsDouble As Double
    return:
      type: System.Double
      description: "\n<p>The element content as a double-precision floating-point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a double-precision floating-point number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsDouble(System.String,System.String)
  id: ReadElementContentAsDouble(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsDouble(String, String)
  nameWithType: XmlReader.ReadElementContentAsDouble(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsDouble(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsDouble
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 319
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a double-precision floating-point number.</p>\n"
  syntax:
    content: public virtual double ReadElementContentAsDouble(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsDouble(localName As String, namespaceURI As String) As Double
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The element content as a double-precision floating-point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsFloat
  commentId: M:System.Xml.XmlReader.ReadElementContentAsFloat
  id: ReadElementContentAsFloat
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsFloat()
  nameWithType: XmlReader.ReadElementContentAsFloat()
  fullName: System.Xml.XmlReader.ReadElementContentAsFloat()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsFloat
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 320
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as single-precision floating-point number.</p>\n"
  syntax:
    content: public virtual float ReadElementContentAsFloat()
    content.vb: Public Overridable Function ReadElementContentAsFloat As Single
    return:
      type: System.Single
      description: "\n<p>The element content as a single-precision floating point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a single-precision floating-point number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsFloat(System.String,System.String)
  id: ReadElementContentAsFloat(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsFloat(String, String)
  nameWithType: XmlReader.ReadElementContentAsFloat(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsFloat(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsFloat
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 321
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a single-precision floating-point number.</p>\n"
  syntax:
    content: public virtual float ReadElementContentAsFloat(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsFloat(localName As String, namespaceURI As String) As Single
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The element content as a single-precision floating point number.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a single-precision floating-point number.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsInt
  commentId: M:System.Xml.XmlReader.ReadElementContentAsInt
  id: ReadElementContentAsInt
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsInt()
  nameWithType: XmlReader.ReadElementContentAsInt()
  fullName: System.Xml.XmlReader.ReadElementContentAsInt()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsInt
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 322
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a 32-bit signed integer.</p>\n"
  syntax:
    content: public virtual int ReadElementContentAsInt()
    content.vb: Public Overridable Function ReadElementContentAsInt As Integer
    return:
      type: System.Int32
      description: "\n<p>The element content as a 32-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 32-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsInt(System.String,System.String)
  id: ReadElementContentAsInt(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsInt(String, String)
  nameWithType: XmlReader.ReadElementContentAsInt(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsInt(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsInt
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 323
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 32-bit signed integer.</p>\n"
  syntax:
    content: public virtual int ReadElementContentAsInt(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsInt(localName As String, namespaceURI As String) As Integer
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The element content as a 32-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 32-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsLong
  commentId: M:System.Xml.XmlReader.ReadElementContentAsLong
  id: ReadElementContentAsLong
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsLong()
  nameWithType: XmlReader.ReadElementContentAsLong()
  fullName: System.Xml.XmlReader.ReadElementContentAsLong()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsLong
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 324
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a 64-bit signed integer.</p>\n"
  syntax:
    content: public virtual long ReadElementContentAsLong()
    content.vb: Public Overridable Function ReadElementContentAsLong As Long
    return:
      type: System.Int64
      description: "\n<p>The element content as a 64-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 64-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsLong(System.String,System.String)
  id: ReadElementContentAsLong(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsLong(String, String)
  nameWithType: XmlReader.ReadElementContentAsLong(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsLong(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsLong
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 325
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a 64-bit signed integer.</p>\n"
  syntax:
    content: public virtual long ReadElementContentAsLong(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsLong(localName As String, namespaceURI As String) As Long
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The element content as a 64-bit signed integer.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a 64-bit signed integer.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsObject
  commentId: M:System.Xml.XmlReader.ReadElementContentAsObject
  id: ReadElementContentAsObject
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsObject()
  nameWithType: XmlReader.ReadElementContentAsObject()
  fullName: System.Xml.XmlReader.ReadElementContentAsObject()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsObject
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 326
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object ReadElementContentAsObject()
    content.vb: Public Overridable Function ReadElementContentAsObject As Object
    return:
      type: System.Object
      description: "\n<p>A boxed common language runtime (CLR) object of the most appropriate type. The <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsObject(System.String,System.String)
  id: ReadElementContentAsObject(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsObject(String, String)
  nameWithType: XmlReader.ReadElementContentAsObject(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsObject(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsObject
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 327
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object ReadElementContentAsObject(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsObject(localName As String, namespaceURI As String) As Object
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Object
      description: "\n<p>A boxed common language runtime (CLR) object of the most appropriate type. The <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to the requested type.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsObjectAsync
  commentId: M:System.Xml.XmlReader.ReadElementContentAsObjectAsync
  id: ReadElementContentAsObjectAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsObjectAsync()
  nameWithType: XmlReader.ReadElementContentAsObjectAsync()
  fullName: System.Xml.XmlReader.ReadElementContentAsObjectAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsObjectAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 328
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the current element and returns the contents as an <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Task<object> ReadElementContentAsObjectAsync()
    content.vb: Public Overridable Function ReadElementContentAsObjectAsync As Task(Of Object)
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "\n<p>A boxed common language runtime (CLR) object of the most appropriate type. The <xref href=\"System.Xml.XmlReader.ValueType\" data-throw-if-not-resolved=\"false\"></xref> property determines the appropriate CLR type. If the content is typed as a list type, this method returns an array of boxed objects of the appropriate type.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsString
  commentId: M:System.Xml.XmlReader.ReadElementContentAsString
  id: ReadElementContentAsString
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsString()
  nameWithType: XmlReader.ReadElementContentAsString()
  fullName: System.Xml.XmlReader.ReadElementContentAsString()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 329
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads the current element and returns the contents as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual string ReadElementContentAsString()
    content.vb: Public Overridable Function ReadElementContentAsString As String
    return:
      type: System.String
      description: "\n<p>The element content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadElementContentAsString(System.String,System.String)
  id: ReadElementContentAsString(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsString(String, String)
  nameWithType: XmlReader.ReadElementContentAsString(String, String)
  fullName: System.Xml.XmlReader.ReadElementContentAsString(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsString
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 330
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the specified local name and namespace URI matches that of the current element, then reads the current element and returns the contents as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual string ReadElementContentAsString(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadElementContentAsString(localName As String, namespaceURI As String) As String
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.String
      description: "\n<p>The element content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current element contains child elements.</p>\n<p>-or-</p>\n<p>The element content cannot be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The method is called with <strong>null</strong> arguments.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The specified local name and namespace URI do not match that of the current element being read.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadElementContentAsStringAsync
  commentId: M:System.Xml.XmlReader.ReadElementContentAsStringAsync
  id: ReadElementContentAsStringAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadElementContentAsStringAsync()
  nameWithType: XmlReader.ReadElementContentAsStringAsync()
  fullName: System.Xml.XmlReader.ReadElementContentAsStringAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadElementContentAsStringAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 331
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the current element and returns the contents as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual Task<string> ReadElementContentAsStringAsync()
    content.vb: Public Overridable Function ReadElementContentAsStringAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>The element content as a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadEndElement
  commentId: M:System.Xml.XmlReader.ReadEndElement
  id: ReadEndElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadEndElement()
  nameWithType: XmlReader.ReadEndElement()
  fullName: System.Xml.XmlReader.ReadEndElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadEndElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 332
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current content node is an end tag and advances the reader to the next node.</p>\n"
  syntax:
    content: public virtual void ReadEndElement()
    content.vb: Public Overridable Sub ReadEndElement
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The current node is not an end tag or if incorrect XML is encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadStartElement
    commentId: M:System.Xml.XmlReader.ReadStartElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadInnerXml
  commentId: M:System.Xml.XmlReader.ReadInnerXml
  id: ReadInnerXml
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadInnerXml()
  nameWithType: XmlReader.ReadInnerXml()
  fullName: System.Xml.XmlReader.ReadInnerXml()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadInnerXml
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 333
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, reads all the content, including markup, as a string.</p>\n"
  syntax:
    content: public virtual string ReadInnerXml()
    content.vb: Public Overridable Function ReadInnerXml As String
    return:
      type: System.String
      description: "\n<p>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</p>\n<p>If the current node is neither an element nor attribute, an empty string is returned.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML was not well-formed, or an error occurred while parsing the XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadInnerXmlAsync
  commentId: M:System.Xml.XmlReader.ReadInnerXmlAsync
  id: ReadInnerXmlAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadInnerXmlAsync()
  nameWithType: XmlReader.ReadInnerXmlAsync()
  fullName: System.Xml.XmlReader.ReadInnerXmlAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadInnerXmlAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 334
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads all the content, including markup, as a string.</p>\n"
  syntax:
    content: public virtual Task<string> ReadInnerXmlAsync()
    content.vb: Public Overridable Function ReadInnerXmlAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>All the XML content, including markup, in the current node. If the current node has no children, an empty string is returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadOuterXml
  commentId: M:System.Xml.XmlReader.ReadOuterXml
  id: ReadOuterXml
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadOuterXml()
  nameWithType: XmlReader.ReadOuterXml()
  fullName: System.Xml.XmlReader.ReadOuterXml()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOuterXml
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 335
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, reads the content, including markup, representing this node and all its children.</p>\n"
  syntax:
    content: public virtual string ReadOuterXml()
    content.vb: Public Overridable Function ReadOuterXml As String
    return:
      type: System.String
      description: "\n<p>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML was not well-formed, or an error occurred while parsing the XML.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadOuterXmlAsync
  commentId: M:System.Xml.XmlReader.ReadOuterXmlAsync
  id: ReadOuterXmlAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadOuterXmlAsync()
  nameWithType: XmlReader.ReadOuterXmlAsync()
  fullName: System.Xml.XmlReader.ReadOuterXmlAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadOuterXmlAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 336
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads the content, including markup, representing this node and all its children.</p>\n"
  syntax:
    content: public virtual Task<string> ReadOuterXmlAsync()
    content.vb: Public Overridable Function ReadOuterXmlAsync As Task(Of String)
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "\n<p>If the reader is positioned on an element or an attribute node, this method returns all the XML content, including markup, of the current node and all its children; otherwise, it returns an empty string.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadStartElement
  commentId: M:System.Xml.XmlReader.ReadStartElement
  id: ReadStartElement
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadStartElement()
  nameWithType: XmlReader.ReadStartElement()
  fullName: System.Xml.XmlReader.ReadStartElement()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 337
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current node is an element and advances the reader to the next node.</p>\n"
  syntax:
    content: public virtual void ReadStartElement()
    content.vb: Public Overridable Sub ReadStartElement
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML was encountered in the input stream.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadEndElement
    commentId: M:System.Xml.XmlReader.ReadEndElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadStartElement(System.String)
  commentId: M:System.Xml.XmlReader.ReadStartElement(System.String)
  id: ReadStartElement(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadStartElement(String)
  nameWithType: XmlReader.ReadStartElement(String)
  fullName: System.Xml.XmlReader.ReadStartElement(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 338
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current content node is an element with the given <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref> and advances the reader to the next node.</p>\n"
  syntax:
    content: public virtual void ReadStartElement(string name)
    content.vb: Public Overridable Sub ReadStartElement(name As String)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML was encountered in the input stream. </p>\n<p>-or- </p>\n<p>The <xref href=\"System.Xml.XmlReader.Name\" data-throw-if-not-resolved=\"false\"></xref> of the element does not match the given <em>name</em>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadEndElement
    commentId: M:System.Xml.XmlReader.ReadEndElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadStartElement(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadStartElement(System.String,System.String)
  id: ReadStartElement(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadStartElement(String, String)
  nameWithType: XmlReader.ReadStartElement(String, String)
  fullName: System.Xml.XmlReader.ReadStartElement(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadStartElement
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 339
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Checks that the current content node is an element with the given <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> and advances the reader to the next node.</p>\n"
  syntax:
    content: public virtual void ReadStartElement(string localname, string ns)
    content.vb: Public Overridable Sub ReadStartElement(localname As String, ns As String)
    parameters:
    - id: localname
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: ns
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>Incorrect XML was encountered in the input stream.</p>\n<p>-or-</p>\n<p>The <xref href=\"System.Xml.XmlReader.LocalName\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Xml.XmlReader.NamespaceURI\" data-throw-if-not-resolved=\"false\"></xref> properties of the element found do not match the given arguments.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.XmlReader.ReadEndElement
    commentId: M:System.Xml.XmlReader.ReadEndElement
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadSubtree
  commentId: M:System.Xml.XmlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadSubtree()
  nameWithType: XmlReader.ReadSubtree()
  fullName: System.Xml.XmlReader.ReadSubtree()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadSubtree
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 340
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Returns a new <strong>XmlReader</strong> instance that can be used to read the current node, and all its descendants.</p>\n"
  syntax:
    content: public virtual XmlReader ReadSubtree()
    content.vb: Public Overridable Function ReadSubtree As XmlReader
    return:
      type: System.Xml.XmlReader
      description: "\n<p>A new XML reader instance set to <xref href=\"System.Xml.ReadState.Initial\" data-throw-if-not-resolved=\"false\"></xref>. Calling the <xref href=\"System.Xml.XmlReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method positions the new reader on the node that was current before the call to the <xref href=\"System.Xml.XmlReader.ReadSubtree\" data-throw-if-not-resolved=\"false\"></xref> method.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The XML reader isn't positioned on an element when this method is called.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToDescendant(System.String)
  commentId: M:System.Xml.XmlReader.ReadToDescendant(System.String)
  id: ReadToDescendant(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToDescendant(String)
  nameWithType: XmlReader.ReadToDescendant(String)
  fullName: System.Xml.XmlReader.ReadToDescendant(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToDescendant
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 341
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to the next descendant element with the specified qualified name.</p>\n"
  syntax:
    content: public virtual bool ReadToDescendant(string name)
    content.vb: Public Overridable Function ReadToDescendant(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching descendant element is found; otherwise <strong>false</strong>. If a matching child element is not found, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the element.</p>\n<p>If the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element when <xref href=\"System.Xml.XmlReader.ReadToDescendant(System.String)\" data-throw-if-not-resolved=\"false\"></xref> was called, this method returns <strong>false</strong> and the position of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not changed.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadToDescendant(System.String,System.String)
  id: ReadToDescendant(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToDescendant(String, String)
  nameWithType: XmlReader.ReadToDescendant(String, String)
  fullName: System.Xml.XmlReader.ReadToDescendant(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToDescendant
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 342
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> to the next descendant element with the specified local name and namespace URI.</p>\n"
  syntax:
    content: public virtual bool ReadToDescendant(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadToDescendant(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element you wish to move to.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching descendant element is found; otherwise <strong>false</strong>. If a matching child element is not found, the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the element.</p>\n<p>If the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not positioned on an element when <xref href=\"System.Xml.XmlReader.ReadToDescendant(System.String,System.String)\" data-throw-if-not-resolved=\"false\"></xref> was called, this method returns <strong>false</strong> and the position of the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is not changed.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToFollowing(System.String)
  commentId: M:System.Xml.XmlReader.ReadToFollowing(System.String)
  id: ReadToFollowing(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToFollowing(String)
  nameWithType: XmlReader.ReadToFollowing(String)
  fullName: System.Xml.XmlReader.ReadToFollowing(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToFollowing
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 343
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads until an element with the specified qualified name is found.</p>\n"
  syntax:
    content: public virtual bool ReadToFollowing(string name)
    content.vb: Public Overridable Function ReadToFollowing(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the element.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching element is found; otherwise <strong>false</strong> and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an end of file state.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadToFollowing(System.String,System.String)
  id: ReadToFollowing(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToFollowing(String, String)
  nameWithType: XmlReader.ReadToFollowing(String, String)
  fullName: System.Xml.XmlReader.ReadToFollowing(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToFollowing
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 344
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads until an element with the specified local name and namespace URI is found.</p>\n"
  syntax:
    content: public virtual bool ReadToFollowing(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadToFollowing(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the element.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the element.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching element is found; otherwise <strong>false</strong> and the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> is in an end of file state.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToNextSibling(System.String)
  commentId: M:System.Xml.XmlReader.ReadToNextSibling(System.String)
  id: ReadToNextSibling(System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToNextSibling(String)
  nameWithType: XmlReader.ReadToNextSibling(String)
  fullName: System.Xml.XmlReader.ReadToNextSibling(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToNextSibling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 345
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <strong>XmlReader</strong> to the next sibling element with the specified qualified name.</p>\n"
  syntax:
    content: public virtual bool ReadToNextSibling(string name)
    content.vb: Public Overridable Function ReadToNextSibling(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The qualified name of the sibling element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching sibling element is found; otherwise <strong>false</strong>. If a matching sibling element is not found, the <strong>XmlReader</strong> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the parent element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>The parameter is an empty string.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
  commentId: M:System.Xml.XmlReader.ReadToNextSibling(System.String,System.String)
  id: ReadToNextSibling(System.String,System.String)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadToNextSibling(String, String)
  nameWithType: XmlReader.ReadToNextSibling(String, String)
  fullName: System.Xml.XmlReader.ReadToNextSibling(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadToNextSibling
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 346
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Advances the <strong>XmlReader</strong> to the next sibling element with the specified local name and namespace URI.</p>\n"
  syntax:
    content: public virtual bool ReadToNextSibling(string localName, string namespaceURI)
    content.vb: Public Overridable Function ReadToNextSibling(localName As String, namespaceURI As String) As Boolean
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>The local name of the sibling element you wish to move to.</p>\n"
    - id: namespaceURI
      type: System.String
      description: "\n<p>The namespace URI of the sibling element you wish to move to.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if a matching sibling element is found; otherwise, <strong>false</strong>. If a matching sibling element is not found, the <strong>XmlReader</strong> is positioned on the end tag (<xref href=\"System.Xml.XmlReader.NodeType\" data-throw-if-not-resolved=\"false\"></xref> is <strong>XmlNodeType.EndElement</strong>) of the parent element.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>Both parameter values are <strong>null</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)
  id: ReadValueChunk(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadValueChunk(Char[], Int32, Int32)
  nameWithType: XmlReader.ReadValueChunk(Char[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadValueChunk(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadValueChunk
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 347
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Reads large streams of text embedded in an XML document.</p>\n"
  syntax:
    content: public virtual int ReadValueChunk(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadValueChunk(buffer As Char(), index As Integer, count As Integer) As Integer
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The array of characters that serves as the buffer to which the text contents are written. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset within the buffer where the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can start to copy the results.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of characters read into the buffer. The value zero is returned when there is no more text content.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The current node does not have a value (<xref href=\"System.Xml.XmlReader.HasValue\" data-throw-if-not-resolved=\"false\"></xref> is <strong>false</strong>).</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>buffer</em> value is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The index into the buffer, or index + count is larger than the allocated buffer size.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> implementation does not support this method.</p>\n"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "\n<p>The XML data is not well-formed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  nameWithType.vb: XmlReader.ReadValueChunk(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadValueChunk(System.Char(), System.Int32, System.Int32)
  name.vb: ReadValueChunk(Char(), Int32, Int32)
- uid: System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  commentId: M:System.Xml.XmlReader.ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  id: ReadValueChunkAsync(System.Char[],System.Int32,System.Int32)
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ReadValueChunkAsync(Char[], Int32, Int32)
  nameWithType: XmlReader.ReadValueChunkAsync(Char[], Int32, Int32)
  fullName: System.Xml.XmlReader.ReadValueChunkAsync(System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadValueChunkAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 348
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously reads large streams of text embedded in an XML document.</p>\n"
  syntax:
    content: public virtual Task<int> ReadValueChunkAsync(char[] buffer, int index, int count)
    content.vb: Public Overridable Function ReadValueChunkAsync(buffer As Char(), index As Integer, count As Integer) As Task(Of Integer)
    parameters:
    - id: buffer
      type: System.Char[]
      description: "\n<p>The array of characters that serves as the buffer to which the text contents are written. This value cannot be <strong>null</strong>.</p>\n"
    - id: index
      type: System.Int32
      description: "\n<p>The offset within the buffer where the <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> can start to copy the results.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The maximum number of characters to copy into the buffer. The actual number of characters copied is returned from this method.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "\n<p>The number of characters read into the buffer. The value zero is returned when there is no more text content.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  nameWithType.vb: XmlReader.ReadValueChunkAsync(Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Xml.XmlReader.ReadValueChunkAsync(System.Char(), System.Int32, System.Int32)
  name.vb: ReadValueChunkAsync(Char(), Int32, Int32)
- uid: System.Xml.XmlReader.ResolveEntity
  commentId: M:System.Xml.XmlReader.ResolveEntity
  id: ResolveEntity
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: ResolveEntity()
  nameWithType: XmlReader.ResolveEntity()
  fullName: System.Xml.XmlReader.ResolveEntity()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ResolveEntity
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 349
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>When overridden in a derived class, resolves the entity reference for <strong>EntityReference</strong> nodes.</p>\n"
  syntax:
    content: public abstract void ResolveEntity()
    content.vb: Public MustOverride Sub ResolveEntity
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The reader is not positioned on an <strong>EntityReference</strong> node; this implementation of the reader cannot resolve entities (<xref href=\"System.Xml.XmlReader.CanResolveEntity\" data-throw-if-not-resolved=\"false\"></xref> returns <strong>false</strong>).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  seealso:
  - linkId: System.Xml.EntityHandling
    commentId: T:System.Xml.EntityHandling
  - linkId: System.Xml.XmlReader.CanResolveEntity
    commentId: P:System.Xml.XmlReader.CanResolveEntity
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Xml.XmlReader.Skip
  commentId: M:System.Xml.XmlReader.Skip
  id: Skip
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: Skip()
  nameWithType: XmlReader.Skip()
  fullName: System.Xml.XmlReader.Skip()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Skip
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 350
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Skips the children of the current node.</p>\n"
  syntax:
    content: public virtual void Skip()
    content.vb: Public Overridable Sub Skip
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Xml.XmlReader.SkipAsync
  commentId: M:System.Xml.XmlReader.SkipAsync
  id: SkipAsync
  parent: System.Xml.XmlReader
  langs:
  - csharp
  - vb
  name: SkipAsync()
  nameWithType: XmlReader.SkipAsync()
  fullName: System.Xml.XmlReader.SkipAsync()
  type: Method
  source:
    remote:
      path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SkipAsync
    path: src/System.Xml.ReaderWriter/ref/System.Xml.ReaderWriter.cs
    startLine: 351
  assemblies:
  - System.Xml.ReaderWriter
  namespace: System.Xml
  summary: "\n<p>Asynchronously skips the children of the current node.</p>\n"
  syntax:
    content: public virtual Task SkipAsync()
    content.vb: Public Overridable Function SkipAsync As Task
    return:
      type: System.Threading.Tasks.Task
      description: "\n<p>The current node.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> method was called before a previous asynchronous operation finished. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “An asynchronous operation is already in progress.”</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An <xref href=\"System.Xml.XmlReader\" data-throw-if-not-resolved=\"false\"></xref> asynchronous method was called without setting the <xref href=\"System.Xml.XmlReaderSettings.Async\" data-throw-if-not-resolved=\"false\"></xref> flag to <strong>true</strong>. In this case, <xref href=\"System.InvalidOperationException\" data-throw-if-not-resolved=\"false\"></xref> is thrown with the message “Set XmlReaderSettings.Async to true if you want to use Async Methods.”</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Xml
  commentId: N:System.Xml
  isExternal: false
  name: System.Xml
  nameWithType: System.Xml
  fullName: System.Xml
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlNameTable
  commentId: T:System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: false
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.XmlNodeType
  commentId: T:System.Xml.XmlNodeType
  parent: System.Xml
  isExternal: false
  name: XmlNodeType
  nameWithType: XmlNodeType
  fullName: System.Xml.XmlNodeType
- uid: System.Xml.ReadState
  commentId: T:System.Xml.ReadState
  parent: System.Xml
  isExternal: false
  name: ReadState
  nameWithType: ReadState
  fullName: System.Xml.ReadState
- uid: System.Xml.XmlReaderSettings
  commentId: T:System.Xml.XmlReaderSettings
  parent: System.Xml
  isExternal: false
  name: XmlReaderSettings
  nameWithType: XmlReaderSettings
  fullName: System.Xml.XmlReaderSettings
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlSpace
  commentId: T:System.Xml.XmlSpace
  parent: System.Xml
  isExternal: false
  name: XmlSpace
  nameWithType: XmlSpace
  fullName: System.Xml.XmlSpace
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.XmlReader
  commentId: T:System.Xml.XmlReader
  parent: System.Xml
  isExternal: false
  name: Xml.XmlReader
  nameWithType: Xml.XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Xml.XmlParserContext
  commentId: T:System.Xml.XmlParserContext
  parent: System.Xml
  isExternal: false
  name: XmlParserContext
  nameWithType: XmlParserContext
  fullName: System.Xml.XmlParserContext
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.String}
  commentId: T:System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  nameWithType.vb: Task(Of String)
  fullname.vb: System.Threading.Tasks.Task(Of System.String)
  name.vb: Task(Of String)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.Tasks.Task{System.Xml.XmlNodeType}
  commentId: T:System.Threading.Tasks.Task{System.Xml.XmlNodeType}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<XmlNodeType>
  nameWithType: Task<XmlNodeType>
  fullName: System.Threading.Tasks.Task<System.Xml.XmlNodeType>
  nameWithType.vb: Task(Of XmlNodeType)
  fullname.vb: System.Threading.Tasks.Task(Of System.Xml.XmlNodeType)
  name.vb: Task(Of XmlNodeType)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlNodeType
    name: XmlNodeType
    nameWithType: XmlNodeType
    fullName: System.Xml.XmlNodeType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.XmlNodeType
    name: XmlNodeType
    nameWithType: XmlNodeType
    fullName: System.Xml.XmlNodeType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Xml.IXmlNamespaceResolver
  commentId: T:System.Xml.IXmlNamespaceResolver
  parent: System.Xml
  isExternal: false
  name: IXmlNamespaceResolver
  nameWithType: IXmlNamespaceResolver
  fullName: System.Xml.IXmlNamespaceResolver
- uid: System.Threading.Tasks.Task{System.Object}
  commentId: T:System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  nameWithType.vb: Task(Of Object)
  fullname.vb: System.Threading.Tasks.Task(Of System.Object)
  name.vb: Task(Of Object)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: false
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Security.SecurityException
  commentId: T:System.Security.SecurityException
  isExternal: false
  name: SecurityException
  nameWithType: SecurityException
  fullName: System.Security.SecurityException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.IO.FileNotFoundException
  commentId: T:System.IO.FileNotFoundException
  isExternal: false
  name: FileNotFoundException
  nameWithType: FileNotFoundException
  fullName: System.IO.FileNotFoundException
- uid: System.UriFormatException
  commentId: T:System.UriFormatException
  isExternal: false
  name: UriFormatException
  nameWithType: UriFormatException
  fullName: System.UriFormatException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.Xml.XmlException
  commentId: T:System.Xml.XmlException
  isExternal: false
  name: XmlException
  nameWithType: XmlException
  fullName: System.Xml.XmlException
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
