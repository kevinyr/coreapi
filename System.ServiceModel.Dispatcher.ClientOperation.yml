items:
- uid: System.ServiceModel.Dispatcher.ClientOperation
  commentId: T:System.ServiceModel.Dispatcher.ClientOperation
  id: ClientOperation
  parent: System.ServiceModel.Dispatcher
  children:
  - System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)
  - System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)
  - System.ServiceModel.Dispatcher.ClientOperation.Action
  - System.ServiceModel.Dispatcher.ClientOperation.ClientParameterInspectors
  - System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply
  - System.ServiceModel.Dispatcher.ClientOperation.Formatter
  - System.ServiceModel.Dispatcher.ClientOperation.IsOneWay
  - System.ServiceModel.Dispatcher.ClientOperation.Name
  - System.ServiceModel.Dispatcher.ClientOperation.Parent
  - System.ServiceModel.Dispatcher.ClientOperation.ReplyAction
  - System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest
  - System.ServiceModel.Dispatcher.ClientOperation.TaskMethod
  - System.ServiceModel.Dispatcher.ClientOperation.TaskTResult
  langs:
  - csharp
  - vb
  name: ClientOperation
  fullName: System.ServiceModel.Dispatcher.ClientOperation
  type: Class
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ClientOperation
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 29
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Used to modify or extend the execution behavior of a specific contract operation in a client object or client channel object. This class cannot be inherited. </p>\n"
  syntax:
    content: 'public sealed class ClientOperation : ClientOperationCompatBase'
    content.vb: >-
      Public NotInheritable Class ClientOperation
          Inherits ClientOperationCompatBase
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
  nameWithType: ClientOperation
- uid: System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)
  commentId: M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)
  id: '#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String)'
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: ClientOperation(ClientRuntime, String, String)
  fullName: System.ServiceModel.Dispatcher.ClientOperation.ClientOperation(System.ServiceModel.Dispatcher.ClientRuntime, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 51
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.ClientOperation\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <xref href=\"System.ServiceModel.Dispatcher.ClientRuntime\" data-throw-if-not-resolved=\"false\"></xref>, name, and action values. </p>\n"
  syntax:
    content: public ClientOperation(ClientRuntime parent, string name, string action)
    content.vb: Public Sub New(parent As ClientRuntime, name As String, action As String)
    parameters:
    - id: parent
      type: System.ServiceModel.Dispatcher.ClientRuntime
      description: "\n<p>The containing <xref href=\"System.ServiceModel.Dispatcher.ClientRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the operation.</p>\n"
    - id: action
      type: System.String
      description: "\n<p>The action of the operation.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.ClientOperation(ClientRuntime, String, String)
- uid: System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)
  commentId: M:System.ServiceModel.Dispatcher.ClientOperation.#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)
  id: '#ctor(System.ServiceModel.Dispatcher.ClientRuntime,System.String,System.String,System.String)'
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: ClientOperation(ClientRuntime, String, String, String)
  fullName: System.ServiceModel.Dispatcher.ClientOperation.ClientOperation(System.ServiceModel.Dispatcher.ClientRuntime, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: .ctor
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 56
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.ServiceModel.Dispatcher.ClientOperation\" data-throw-if-not-resolved=\"false\"></xref> class using the specified <xref href=\"System.ServiceModel.Dispatcher.ClientRuntime\" data-throw-if-not-resolved=\"false\"></xref>, name, action, and reply action values. </p>\n"
  syntax:
    content: public ClientOperation(ClientRuntime parent, string name, string action, string replyAction)
    content.vb: Public Sub New(parent As ClientRuntime, name As String, action As String, replyAction As String)
    parameters:
    - id: parent
      type: System.ServiceModel.Dispatcher.ClientRuntime
      description: "\n<p>The containing <xref href=\"System.ServiceModel.Dispatcher.ClientRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
    - id: name
      type: System.String
      description: "\n<p>The name of the operation.</p>\n"
    - id: action
      type: System.String
      description: "\n<p>The action of the operation.</p>\n"
    - id: replyAction
      type: System.String
      description: "\n<p>The action of the reply message.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.ClientOperation(ClientRuntime, String, String, String)
- uid: System.ServiceModel.Dispatcher.ClientOperation.Action
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.Action
  id: Action
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: Action
  fullName: System.ServiceModel.Dispatcher.ClientOperation.Action
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Action
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 73
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the action of the operation.</p>\n"
  syntax:
    content: public string Action { get; }
    content.vb: Public ReadOnly Property Action As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The action of the operation.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ClientOperation.Action
- uid: System.ServiceModel.Dispatcher.ClientOperation.ClientParameterInspectors
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.ClientParameterInspectors
  id: ClientParameterInspectors
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: ClientParameterInspectors
  fullName: System.ServiceModel.Dispatcher.ClientOperation.ClientParameterInspectors
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ClientParameterInspectors
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 201
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets a collection of parameter inspector objects used to view or modify parameters prior to or subsequent to a client call.</p>\n"
  syntax:
    content: public ICollection<IParameterInspector> ClientParameterInspectors { get; }
    content.vb: Public ReadOnly Property ClientParameterInspectors As ICollection(Of IParameterInspector)
    parameters: []
    return:
      type: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.IParameterInspector}
      description: "\n<p>A collection of parameter inspector objects used to view or modify parameters prior to or subsequent to a client call.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ClientOperation.ClientParameterInspectors
- uid: System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply
  id: DeserializeReply
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: DeserializeReply
  fullName: System.ServiceModel.Dispatcher.ClientOperation.DeserializeReply
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: DeserializeReply
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 235
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets a value that indicates whether the <xref href=\"System.ServiceModel.Dispatcher.ClientOperation.Formatter\" data-throw-if-not-resolved=\"false\"></xref> property value is used to deserialize the reply message.</p>\n"
  syntax:
    content: public bool DeserializeReply { get; set; }
    content.vb: Public Property DeserializeReply As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true </strong>if the return type is not a <xref href=\"System.ServiceModel.Channels.Message\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.DeserializeReply
- uid: System.ServiceModel.Dispatcher.ClientOperation.Formatter
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.Formatter
  id: Formatter
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: Formatter
  fullName: System.ServiceModel.Dispatcher.ClientOperation.Formatter
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Formatter
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 122
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets the formatter that serializes objects into messages and deserializes messages into objects.</p>\n"
  syntax:
    content: public IClientMessageFormatter Formatter { get; set; }
    content.vb: Public Property Formatter As IClientMessageFormatter
    parameters: []
    return:
      type: System.ServiceModel.Dispatcher.IClientMessageFormatter
      description: "\n<p>An <xref href=\"System.ServiceModel.Dispatcher.IClientMessageFormatter\" data-throw-if-not-resolved=\"false\"></xref> implementation.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.Formatter
- uid: System.ServiceModel.Dispatcher.ClientOperation.IsOneWay
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.IsOneWay
  id: IsOneWay
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: IsOneWay
  fullName: System.ServiceModel.Dispatcher.ClientOperation.IsOneWay
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: IsOneWay
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 183
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets a value that indicates if the operation is a one-way operation.</p>\n"
  syntax:
    content: public bool IsOneWay { get; set; }
    content.vb: Public Property IsOneWay As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the indigo2 client should not expect a reply; otherwise, <strong>false</strong>. The default value is <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.IsOneWay
- uid: System.ServiceModel.Dispatcher.ClientOperation.Name
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.Name
  id: Name
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: Name
  fullName: System.ServiceModel.Dispatcher.ClientOperation.Name
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Name
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 196
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the name of the operation.</p>\n"
  syntax:
    content: public string Name { get; }
    content.vb: Public ReadOnly Property Name As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The name of the operation.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ClientOperation.Name
- uid: System.ServiceModel.Dispatcher.ClientOperation.Parent
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.Parent
  id: Parent
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: Parent
  fullName: System.ServiceModel.Dispatcher.ClientOperation.Parent
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: Parent
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 212
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the containing <xref href=\"System.ServiceModel.Dispatcher.ClientRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public ClientRuntime Parent { get; }
    content.vb: Public ReadOnly Property Parent As ClientRuntime
    parameters: []
    return:
      type: System.ServiceModel.Dispatcher.ClientRuntime
      description: "\n<p>The containing <xref href=\"System.ServiceModel.Dispatcher.ClientRuntime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ClientOperation.Parent
- uid: System.ServiceModel.Dispatcher.ClientOperation.ReplyAction
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.ReplyAction
  id: ReplyAction
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: ReplyAction
  fullName: System.ServiceModel.Dispatcher.ClientOperation.ReplyAction
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: ReplyAction
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 217
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets the action of the reply message for this operation.</p>\n"
  syntax:
    content: public string ReplyAction { get; }
    content.vb: Public ReadOnly Property ReplyAction As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The action of the reply.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  nameWithType: ClientOperation.ReplyAction
- uid: System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest
  id: SerializeRequest
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: SerializeRequest
  fullName: System.ServiceModel.Dispatcher.ClientOperation.SerializeRequest
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: SerializeRequest
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 222
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets a value that specifies whether the <xref href=\"System.ServiceModel.Dispatcher.ClientOperation.Formatter\" data-throw-if-not-resolved=\"false\"></xref> object serializes an outbound message.</p>\n"
  syntax:
    content: public bool SerializeRequest { get; set; }
    content.vb: Public Property SerializeRequest As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.ServiceModel.Dispatcher.ClientOperation.Formatter\" data-throw-if-not-resolved=\"false\"></xref> property serializes the return values into a reply message; otherwise, <strong>false</strong>. The default is <strong>true</strong>.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.SerializeRequest
- uid: System.ServiceModel.Dispatcher.ClientOperation.TaskMethod
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.TaskMethod
  id: TaskMethod
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: TaskMethod
  fullName: System.ServiceModel.Dispatcher.ClientOperation.TaskMethod
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: TaskMethod
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 248
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets the method associated with a task.</p>\n"
  syntax:
    content: public MethodInfo TaskMethod { get; set; }
    content.vb: Public Property TaskMethod As MethodInfo
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>A <xref href=\"System.Reflection.MethodInfo\" data-throw-if-not-resolved=\"false\"></xref> object that represents the method associated with a task.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.TaskMethod
- uid: System.ServiceModel.Dispatcher.ClientOperation.TaskTResult
  commentId: P:System.ServiceModel.Dispatcher.ClientOperation.TaskTResult
  id: TaskTResult
  parent: System.ServiceModel.Dispatcher.ClientOperation
  langs:
  - csharp
  - vb
  name: TaskTResult
  fullName: System.ServiceModel.Dispatcher.ClientOperation.TaskTResult
  type: Property
  source:
    remote:
      path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
      branch: master
      repo: https://github.com/dotnet/wcf.git
    id: TaskTResult
    path: src/System.Private.ServiceModel/src/System/ServiceModel/Dispatcher/ClientOperation.cs
    startLine: 261
  assemblies:
  - System.ServiceModel.Primitives
  namespace: System.ServiceModel.Dispatcher
  summary: "\n<p>Gets or sets the type of the result of the method that is associated with a task.</p>\n"
  syntax:
    content: public Type TaskTResult { get; set; }
    content.vb: Public Property TaskTResult As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the result of the method that is associated with a task.</p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  nameWithType: ClientOperation.TaskTResult
references:
- uid: System.ServiceModel.Dispatcher
  isExternal: false
  name: System.ServiceModel.Dispatcher
  fullName: System.ServiceModel.Dispatcher
  nameWithType: System.ServiceModel.Dispatcher
  commentId: N:System.ServiceModel.Dispatcher
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  nameWithType: Object
  commentId: T:System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.ToString()
  commentId: M:System.Object.ToString
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object)
  commentId: M:System.Object.Equals(System.Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.Equals(Object, Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  nameWithType: Object.ReferenceEquals(Object, Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetHashCode()
  commentId: M:System.Object.GetHashCode
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.GetType()
  commentId: M:System.Object.GetType
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  nameWithType: Object.MemberwiseClone()
  commentId: M:System.Object.MemberwiseClone
- uid: System
  isExternal: false
  name: System
  fullName: System
  nameWithType: System
  commentId: N:System
- uid: System.ServiceModel.Dispatcher.ClientRuntime
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: ClientRuntime
  fullName: System.ServiceModel.Dispatcher.ClientRuntime
  nameWithType: ClientRuntime
  commentId: T:System.ServiceModel.Dispatcher.ClientRuntime
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  nameWithType: String
  commentId: T:System.String
- uid: System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.IParameterInspector}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.ICollection`1
  name: ICollection<IParameterInspector>
  fullName: System.Collections.Generic.ICollection<System.ServiceModel.Dispatcher.IParameterInspector>
  fullname.vb: System.Collections.Generic.ICollection(Of System.ServiceModel.Dispatcher.IParameterInspector)
  name.vb: ICollection(Of IParameterInspector)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: <
    fullName: <
  - uid: System.ServiceModel.Dispatcher.IParameterInspector
    name: IParameterInspector
    fullName: System.ServiceModel.Dispatcher.IParameterInspector
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.ServiceModel.Dispatcher.IParameterInspector
    name: IParameterInspector
    fullName: System.ServiceModel.Dispatcher.IParameterInspector
  - name: )
    fullName: )
  nameWithType: ICollection<IParameterInspector>
  nameWithType.vb: ICollection(Of IParameterInspector)
  commentId: T:System.Collections.Generic.ICollection{System.ServiceModel.Dispatcher.IParameterInspector}
- uid: System.Collections.Generic.ICollection`1
  isExternal: false
  name: ICollection<T>
  fullName: System.Collections.Generic.ICollection<T>
  fullname.vb: System.Collections.Generic.ICollection(Of T)
  name.vb: ICollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    fullName: System.Collections.Generic.ICollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  nameWithType: ICollection<T>
  nameWithType.vb: ICollection(Of T)
  commentId: T:System.Collections.Generic.ICollection`1
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
  nameWithType: System.Collections.Generic
  commentId: N:System.Collections.Generic
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  nameWithType: Boolean
  commentId: T:System.Boolean
- uid: System.ServiceModel.Dispatcher.IClientMessageFormatter
  parent: System.ServiceModel.Dispatcher
  isExternal: false
  name: IClientMessageFormatter
  fullName: System.ServiceModel.Dispatcher.IClientMessageFormatter
  nameWithType: IClientMessageFormatter
  commentId: T:System.ServiceModel.Dispatcher.IClientMessageFormatter
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  fullName: System.Reflection.MethodInfo
  nameWithType: MethodInfo
  commentId: T:System.Reflection.MethodInfo
- uid: System.Reflection
  isExternal: false
  name: System.Reflection
  fullName: System.Reflection
  nameWithType: System.Reflection
  commentId: N:System.Reflection
- uid: System.Type
  parent: System
  isExternal: false
  name: Type
  fullName: System.Type
  nameWithType: Type
  commentId: T:System.Type
