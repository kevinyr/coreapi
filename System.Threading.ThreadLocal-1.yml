### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadLocal`1
  commentId: T:System.Threading.ThreadLocal`1
  id: ThreadLocal`1
  parent: System.Threading
  children:
  - System.Threading.ThreadLocal`1.#ctor
  - System.Threading.ThreadLocal`1.#ctor(System.Boolean)
  - System.Threading.ThreadLocal`1.#ctor(System.Func{`0})
  - System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)
  - System.Threading.ThreadLocal`1.Dispose
  - System.Threading.ThreadLocal`1.Dispose(System.Boolean)
  - System.Threading.ThreadLocal`1.Finalize
  - System.Threading.ThreadLocal`1.IsValueCreated
  - System.Threading.ThreadLocal`1.ToString
  - System.Threading.ThreadLocal`1.Value
  - System.Threading.ThreadLocal`1.Values
  langs:
  - csharp
  - vb
  name: ThreadLocal<T>
  nameWithType: ThreadLocal<T>
  fullName: System.Threading.ThreadLocal<T>
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ThreadLocal
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 35
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Provides thread-local storage of data.</p>\n"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (SystemThreading_ThreadLocalDebugView<>))]

      [DebuggerDisplay("IsValueCreated={IsValueCreated}, Value={ValueForDebugDisplay}, Count={ValuesCountForDebugDisplay}")]

      [HostProtection(Synchronization = true, ExternalThreading = true)]

      public class ThreadLocal<T> : IDisposable
    content.vb: >-
      <DebuggerTypeProxy(GetType(SystemThreading_ThreadLocalDebugView(Of )))>

      <DebuggerDisplay("IsValueCreated={IsValueCreated}, Value={ValueForDebugDisplay}, Count={ValuesCountForDebugDisplay}")>

      <HostProtection(Synchronization:=True, ExternalThreading:=True)>

      Public Class ThreadLocal(Of T)
          Implements IDisposable
    typeParameters:
    - id: T
      description: "\n<p>Specifies the type of data stored per-thread.</p>\n"
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  - linkId: System.Threading.AsyncLocal`1
    commentId: T:System.Threading.AsyncLocal`1
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  nameWithType.vb: ThreadLocal(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: System.Threading.ThreadLocal(Of T)
  name.vb: ThreadLocal(Of T)
- uid: System.Threading.ThreadLocal`1.#ctor
  commentId: M:System.Threading.ThreadLocal`1.#ctor
  id: '#ctor'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal()
  nameWithType: ThreadLocal<T>.ThreadLocal()
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 80
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes the <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: public ThreadLocal()
    content.vb: Public Sub New
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal()
- uid: System.Threading.ThreadLocal`1.#ctor(System.Boolean)
  commentId: M:System.Threading.ThreadLocal`1.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal(Boolean)
  nameWithType: ThreadLocal<T>.ThreadLocal(Boolean)
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal(System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 89
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes the <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance and specifies whether all values are accessible from any thread.</p>\n"
  syntax:
    content: public ThreadLocal(bool trackAllValues)
    content.vb: Public Sub New(trackAllValues As Boolean)
    parameters:
    - id: trackAllValues
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to track all values set on the instance and expose them through the <xref href=\"System.Threading.ThreadLocal`1.Values\" data-throw-if-not-resolved=\"false\"></xref> property; <strong>false</strong> otherwise.</p>\n"
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal(Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal(System.Boolean)
- uid: System.Threading.ThreadLocal`1.#ctor(System.Func{`0})
  commentId: M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0})
  id: '#ctor(System.Func{`0})'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal(Func<T>)
  nameWithType: ThreadLocal<T>.ThreadLocal(Func<T>)
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal(System.Func<T>)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 106
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes the <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified <em>valueFactory</em> function.</p>\n"
  syntax:
    content: public ThreadLocal(Func<T> valueFactory)
    content.vb: Public Sub New(valueFactory As Func(Of T))
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The  <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref> invoked to produce a lazily-initialized value when an attempt is made to retrieve <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> without it having been previously initialized.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is a null reference (Nothing in Visual Basic).</p>\n"
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal(Func(Of T))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal(System.Func(Of T))
  name.vb: ThreadLocal(Func(Of T))
- uid: System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)
  commentId: M:System.Threading.ThreadLocal`1.#ctor(System.Func{`0},System.Boolean)
  id: '#ctor(System.Func{`0},System.Boolean)'
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ThreadLocal(Func<T>, Boolean)
  nameWithType: ThreadLocal<T>.ThreadLocal(Func<T>, Boolean)
  fullName: System.Threading.ThreadLocal<T>.ThreadLocal(System.Func<T>, System.Boolean)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 126
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Initializes the <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance with the specified <em>valueFactory</em> function and a flag that indicates whether all values are accessible from any thread.</p>\n"
  syntax:
    content: public ThreadLocal(Func<T> valueFactory, bool trackAllValues)
    content.vb: Public Sub New(valueFactory As Func(Of T), trackAllValues As Boolean)
    parameters:
    - id: valueFactory
      type: System.Func{{T}}
      description: "\n<p>The <xref href=\"System.Func`1\" data-throw-if-not-resolved=\"false\"></xref> invoked to produce a lazily-initialized value when an attempt is made to retrieve <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> without it having been previously initialized.</p>\n"
    - id: trackAllValues
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to track all values set on the instance and expose them through the <xref href=\"System.Threading.ThreadLocal`1.Values\" data-throw-if-not-resolved=\"false\"></xref> property; <strong>false</strong> otherwise.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>valueFactory</em> is a <strong>null</strong> reference (<strong>Nothing</strong> in Visual Basic).</p>\n"
  nameWithType.vb: ThreadLocal(Of T).ThreadLocal(Func(Of T), Boolean)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).ThreadLocal(System.Func(Of T), System.Boolean)
  name.vb: ThreadLocal(Func(Of T), Boolean)
- uid: System.Threading.ThreadLocal`1.IsValueCreated
  commentId: P:System.Threading.ThreadLocal`1.IsValueCreated
  id: IsValueCreated
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: IsValueCreated
  nameWithType: ThreadLocal<T>.IsValueCreated
  fullName: System.Threading.ThreadLocal<T>.IsValueCreated
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsValueCreated
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 509
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets whether <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> is initialized on the current thread.</p>\n"
  syntax:
    content: public bool IsValueCreated { get; }
    content.vb: Public ReadOnly Property IsValueCreated As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>true if <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> is initialized on the current thread; otherwise false.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).IsValueCreated
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.ThreadLocal(Of T).IsValueCreated
- uid: System.Threading.ThreadLocal`1.Value
  commentId: P:System.Threading.ThreadLocal`1.Value
  id: Value
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: ThreadLocal<T>.Value
  fullName: System.Threading.ThreadLocal<T>.Value
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Value
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 263
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets or sets the value of this instance for the current thread.</p>\n"
  syntax:
    content: >-
      [DebuggerBrowsable(DebuggerBrowsableState.Never)]

      public T Value { get; set; }
    content.vb: >-
      <DebuggerBrowsable(DebuggerBrowsableState.Never)>

      Public Property Value As T
    parameters: []
    return:
      type: '{T}'
      description: "\n<p>Returns an instance of the object that this ThreadLocal is responsible for initializing.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The initialization function attempted to reference <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> recursively.</p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>No default constructor is provided and no value factory is supplied.</p>\n"
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).Value
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).Value
- uid: System.Threading.ThreadLocal`1.Values
  commentId: P:System.Threading.ThreadLocal`1.Values
  id: Values
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: ThreadLocal<T>.Values
  fullName: System.Threading.ThreadLocal<T>.Values
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Values
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 453
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Gets a list for all of the values currently stored by all of the threads that have accessed this instance.</p>\n"
  syntax:
    content: public IList<T> Values { get; }
    content.vb: Public ReadOnly Property Values As IList(Of T)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{T}}
      description: "\n<p>A list for all of the values currently stored by all of the threads that have accessed this instance.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>Values stored by all threads are not available because this instance was initialized with the <em>trackAllValues</em> argument set to <strong>false</strong> in the call to a class constructor. </p>\n"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  nameWithType.vb: ThreadLocal(Of T).Values
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: System.Threading.ThreadLocal(Of T).Values
- uid: System.Threading.ThreadLocal`1.Dispose
  commentId: M:System.Threading.ThreadLocal`1.Dispose
  id: Dispose
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: ThreadLocal<T>.Dispose()
  fullName: System.Threading.ThreadLocal<T>.Dispose()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 169
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  implements:
  - System.IDisposable.Dispose
  nameWithType.vb: ThreadLocal(Of T).Dispose()
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Threading.ThreadLocal(Of T).Dispose()
- uid: System.Threading.ThreadLocal`1.Dispose(System.Boolean)
  commentId: M:System.Threading.ThreadLocal`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: ThreadLocal<T>.Dispose(Boolean)
  fullName: System.Threading.ThreadLocal<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Dispose
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 184
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the resources used by this <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>A Boolean value that indicates whether this method is being called due to a call to <xref href=\"System.Threading.ThreadLocal`1.Dispose\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).Dispose(Boolean)
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: System.Threading.ThreadLocal(Of T).Dispose(System.Boolean)
- uid: System.Threading.ThreadLocal`1.Finalize
  commentId: M:System.Threading.ThreadLocal`1.Finalize
  id: Finalize
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: Finalize()
  nameWithType: ThreadLocal<T>.Finalize()
  fullName: System.Threading.ThreadLocal<T>.Finalize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Finalize
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 155
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Releases the resources used by this <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance.</p>\n"
  syntax:
    content: protected void Finalize()
    content.vb: Protected Sub Finalize
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).Finalize()
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: System.Threading.ThreadLocal(Of T).Finalize()
- uid: System.Threading.ThreadLocal`1.ToString
  commentId: M:System.Threading.ThreadLocal`1.ToString
  id: ToString
  parent: System.Threading.ThreadLocal`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ThreadLocal<T>.ToString()
  fullName: System.Threading.ThreadLocal<T>.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Threading/ThreadLocal.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Threading/ThreadLocal.cs
    startLine: 242
  assemblies:
  - System.Threading
  namespace: System.Threading
  summary: "\n<p>Creates and returns a string representation of this instance for the current thread.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The result of calling <xref href=\"System.Object.ToString\" data-throw-if-not-resolved=\"false\"></xref> on the <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.ToString
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>The <xref href=\"System.Threading.ThreadLocal`1\" data-throw-if-not-resolved=\"false\"></xref> instance has been disposed.</p>\n"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "\n<p>The <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> for the current thread is a null reference (Nothing in Visual Basic).</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The initialization function attempted to reference <xref href=\"System.Threading.ThreadLocal`1.Value\" data-throw-if-not-resolved=\"false\"></xref> recursively.</p>\n"
  - type: System.MissingMemberException
    commentId: T:System.MissingMemberException
    description: "\n<p>No default constructor is provided and no value factory is supplied.</p>\n"
  seealso:
  - linkId: System.Lazy`1
    commentId: T:System.Lazy`1
  nameWithType.vb: ThreadLocal(Of T).ToString()
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: System.Threading.ThreadLocal(Of T).ToString()
references:
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Func{{T}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  nameWithType.vb: Func(Of T)
  fullname.vb: System.Func(Of T)
  name.vb: Func(Of T)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: false
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Generic.IList{{T}}
  commentId: T:System.Collections.Generic.IList{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: false
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.MissingMemberException
  commentId: T:System.MissingMemberException
  parent: System
  isExternal: false
  name: MissingMemberException
  nameWithType: MissingMemberException
  fullName: System.MissingMemberException
- uid: System.NullReferenceException
  commentId: T:System.NullReferenceException
  isExternal: false
  name: NullReferenceException
  nameWithType: NullReferenceException
  fullName: System.NullReferenceException
