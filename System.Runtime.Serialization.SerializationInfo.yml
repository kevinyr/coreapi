### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.SerializationInfo
  commentId: T:System.Runtime.Serialization.SerializationInfo
  id: SerializationInfo
  parent: System.Runtime.Serialization
  children:
  - System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)
  - System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)
  - System.Runtime.Serialization.SerializationInfo.AssemblyName
  - System.Runtime.Serialization.SerializationInfo.FullTypeName
  - System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetEnumerator
  - System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  - System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)
  - System.Runtime.Serialization.SerializationInfo.MemberCount
  - System.Runtime.Serialization.SerializationInfo.ObjectType
  - System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  langs:
  - csharp
  - vb
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SerializationInfo
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 30
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Stores all the data needed to serialize or deserialize an object. This class cannot be inherited.</p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      public sealed class SerializationInfo
    content.vb: >-
      <ComVisible(True)>

      Public NotInheritable Class SerializationInfo
  seealso:
  - linkId: System.Runtime.Serialization.ISerializable
    commentId: T:System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)
  commentId: M:System.Runtime.Serialization.SerializationInfo.#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)
  id: '#ctor(System.Type,System.Runtime.Serialization.IFormatterConverter)'
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: SerializationInfo(Type, IFormatterConverter)
  nameWithType: SerializationInfo.SerializationInfo(Type, IFormatterConverter)
  fullName: System.Runtime.Serialization.SerializationInfo.SerializationInfo(System.Type, System.Runtime.Serialization.IFormatterConverter)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 52
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Creates a new instance of the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public SerializationInfo(Type type, IFormatterConverter converter)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(type As Type, converter As IFormatterConverter)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the object to serialize. </p>\n"
    - id: converter
      type: System.Runtime.Serialization.IFormatterConverter
      description: "\n<p>The <xref href=\"System.Runtime.Serialization.IFormatterConverter\" data-throw-if-not-resolved=\"false\"></xref> used during deserialization. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> or <em>converter</em> is <strong>null</strong>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AssemblyName
  commentId: P:System.Runtime.Serialization.SerializationInfo.AssemblyName
  id: AssemblyName
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AssemblyName
  nameWithType: SerializationInfo.AssemblyName
  fullName: System.Runtime.Serialization.SerializationInfo.AssemblyName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AssemblyName
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 107
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the assembly name of the type to serialize during serialization only.</p>\n"
  syntax:
    content: >-
      public string AssemblyName

      {
          get;
          [SecuritySafeCritical]
          set;
      }
    content.vb: Public Property AssemblyName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The full name of the assembly of the type to serialize.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value the property is set to is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.FullTypeName
  commentId: P:System.Runtime.Serialization.SerializationInfo.FullTypeName
  id: FullTypeName
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: FullTypeName
  nameWithType: SerializationInfo.FullTypeName
  fullName: System.Runtime.Serialization.SerializationInfo.FullTypeName
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FullTypeName
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 88
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets or sets the full name of the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to serialize.</p>\n"
  syntax:
    content: public string FullTypeName { get; set; }
    content.vb: Public Property FullTypeName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The full name of the type to serialize.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The value this property is set to is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.MemberCount
  commentId: P:System.Runtime.Serialization.SerializationInfo.MemberCount
  id: MemberCount
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: MemberCount
  nameWithType: SerializationInfo.MemberCount
  fullName: System.Runtime.Serialization.SerializationInfo.MemberCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MemberCount
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 204
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Gets the number of members that have been added to the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public int MemberCount { get; }
    content.vb: Public ReadOnly Property MemberCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of members that have been added to the current <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.SerializationInfo.ObjectType
  commentId: P:System.Runtime.Serialization.SerializationInfo.ObjectType
  id: ObjectType
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: ObjectType
  nameWithType: SerializationInfo.ObjectType
  fullName: System.Runtime.Serialization.SerializationInfo.ObjectType
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ObjectType
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 212
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Returns the type of the object to be serialized.</p>\n"
  syntax:
    content: public Type ObjectType { get; }
    content.vb: Public ReadOnly Property ObjectType As Type
    parameters: []
    return:
      type: System.Type
      description: "\n<p>The type of the object being serialized.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Boolean)
  id: AddValue(System.String,System.Boolean)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Boolean)
  nameWithType: SerializationInfo.AddValue(String, Boolean)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 306
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a Boolean value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, bool value)
    content.vb: Public Sub AddValue(name As String, value As Boolean)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Boolean
      description: "\n<p>The Boolean value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Byte)
  id: AddValue(System.String,System.Byte)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Byte)
  nameWithType: SerializationInfo.AddValue(String, Byte)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Byte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 323
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds an 8-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, byte value)
    content.vb: Public Sub AddValue(name As String, value As Byte)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Byte
      description: "\n<p>The byte value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Char)
  id: AddValue(System.String,System.Char)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Char)
  nameWithType: SerializationInfo.AddValue(String, Char)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Char)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 311
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a Unicode character value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, char value)
    content.vb: Public Sub AddValue(name As String, value As Char)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Char
      description: "\n<p>The character value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.DateTime)
  id: AddValue(System.String,System.DateTime)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, DateTime)
  nameWithType: SerializationInfo.AddValue(String, DateTime)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.DateTime)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 376
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, DateTime value)
    content.vb: Public Sub AddValue(name As String, value As Date)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Decimal)
  id: AddValue(System.String,System.Decimal)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Decimal)
  nameWithType: SerializationInfo.AddValue(String, Decimal)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Decimal)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 371
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a decimal value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, decimal value)
    content.vb: Public Sub AddValue(name As String, value As Decimal)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Decimal
      description: "\n<p>The decimal value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>If a value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Double)
  id: AddValue(System.String,System.Double)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Double)
  nameWithType: SerializationInfo.AddValue(String, Double)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Double)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 366
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a double-precision floating-point value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, double value)
    content.vb: Public Sub AddValue(name As String, value As Double)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Double
      description: "\n<p>The double value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int16)
  id: AddValue(System.String,System.Int16)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Int16)
  nameWithType: SerializationInfo.AddValue(String, Int16)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Int16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 328
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 16-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, short value)
    content.vb: Public Sub AddValue(name As String, value As Short)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Int16
      description: "\n<p>The <strong>Int16</strong> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int32)
  id: AddValue(System.String,System.Int32)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Int32)
  nameWithType: SerializationInfo.AddValue(String, Int32)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 339
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 32-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, int value)
    content.vb: Public Sub AddValue(name As String, value As Integer)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Int32
      description: "\n<p>The <strong>Int32</strong> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Int64)
  id: AddValue(System.String,System.Int64)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Int64)
  nameWithType: SerializationInfo.AddValue(String, Int64)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Int64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 350
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 64-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, long value)
    content.vb: Public Sub AddValue(name As String, value As Long)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Int64
      description: "\n<p>The Int64 value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object)
  id: AddValue(System.String,System.Object)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Object)
  nameWithType: SerializationInfo.AddValue(String, Object)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 294
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds the specified object into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store, where it is associated with a specified name.</p>\n"
  syntax:
    content: public void AddValue(string name, object value)
    content.vb: Public Sub AddValue(name As String, value As Object)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to be serialized. Any children of this object will automatically be serialized. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Object,System.Type)
  id: AddValue(System.String,System.Object,System.Type)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Object, Type)
  nameWithType: SerializationInfo.AddValue(String, Object, Type)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Object, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 278
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store, where <em>value</em> is associated with <em>name</em> and is serialized as being of <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref><em>type</em>.</p>\n"
  syntax:
    content: public void AddValue(string name, object value, Type type)
    content.vb: Public Sub AddValue(name As String, value As Object, type As Type)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The value to be serialized. Any children of this object will automatically be serialized. </p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> to associate with the current object. This parameter must always be the type of the object itself or of one of its base classes. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>If <em>name</em> or <em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.SByte)
  id: AddValue(System.String,System.SByte)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, SByte)
  nameWithType: SerializationInfo.AddValue(String, SByte)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.SByte)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 317
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds an 8-bit signed integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, sbyte value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As SByte)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.SByte
      description: "\n<p>The <strong>Sbyte</strong> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.Single)
  id: AddValue(System.String,System.Single)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, Single)
  nameWithType: SerializationInfo.AddValue(String, Single)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.Single)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 361
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a single-precision floating-point value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public void AddValue(string name, float value)
    content.vb: Public Sub AddValue(name As String, value As Single)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.Single
      description: "\n<p>The single value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt16)
  id: AddValue(System.String,System.UInt16)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, UInt16)
  nameWithType: SerializationInfo.AddValue(String, UInt16)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.UInt16)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 333
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 16-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, ushort value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As UShort)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.UInt16
      description: "\n<p>The <strong>UInt16</strong> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt32)
  id: AddValue(System.String,System.UInt32)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, UInt32)
  nameWithType: SerializationInfo.AddValue(String, UInt32)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.UInt32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 344
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 32-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, uint value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As UInteger)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.UInt32
      description: "\n<p>The <strong>UInt32</strong> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)
  commentId: M:System.Runtime.Serialization.SerializationInfo.AddValue(System.String,System.UInt64)
  id: AddValue(System.String,System.UInt64)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: AddValue(String, UInt64)
  nameWithType: SerializationInfo.AddValue(String, UInt64)
  fullName: System.Runtime.Serialization.SerializationInfo.AddValue(System.String, System.UInt64)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 355
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Adds a 64-bit unsigned integer value into the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public void AddValue(string name, ulong value)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub AddValue(name As String, value As ULong)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name to associate with the value, so it can be deserialized later. </p>\n"
    - id: value
      type: System.UInt64
      description: "\n<p>The <strong>UInt64</strong> value to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>name</em> parameter is <strong>null</strong>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>A value has already been associated with <em>name</em>. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  id: GetBoolean(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetBoolean(String)
  nameWithType: SerializationInfo.GetBoolean(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetBoolean(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetBoolean
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 572
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a Boolean value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public bool GetBoolean(string name)
    content.vb: Public Function GetBoolean(name As String) As Boolean
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The Boolean value associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a Boolean value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  id: GetByte(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetByte(String)
  nameWithType: SerializationInfo.GetByte(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetByte(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetByte
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 612
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves an 8-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public byte GetByte(string name)
    content.vb: Public Function GetByte(name As String) As Byte
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve. </p>\n"
    return:
      type: System.Byte
      description: "\n<p>The 8-bit unsigned integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to an 8-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  id: GetChar(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetChar(String)
  nameWithType: SerializationInfo.GetChar(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetChar(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetChar
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 585
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a Unicode character value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public char GetChar(string name)
    content.vb: Public Function GetChar(name As String) As Char
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.Char
      description: "\n<p>The Unicode character associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a Unicode character. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  id: GetDateTime(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetDateTime(String)
  nameWithType: SerializationInfo.GetDateTime(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetDateTime(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDateTime
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 746
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public DateTime GetDateTime(string name)
    content.vb: Public Function GetDateTime(name As String) As Date
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.  </p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  id: GetDecimal(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetDecimal(String)
  nameWithType: SerializationInfo.GetDecimal(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetDecimal(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDecimal
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 733
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a decimal value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public decimal GetDecimal(string name)
    content.vb: Public Function GetDecimal(name As String) As Decimal
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.  </p>\n"
    return:
      type: System.Decimal
      description: "\n<p>A decimal value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a decimal. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  id: GetDouble(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetDouble(String)
  nameWithType: SerializationInfo.GetDouble(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetDouble(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDouble
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 720
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a double-precision floating-point value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public double GetDouble(string name)
    content.vb: Public Function GetDouble(name As String) As Double
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The double-precision floating-point value associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a double-precision floating-point value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetEnumerator
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetEnumerator
  id: GetEnumerator
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SerializationInfo.GetEnumerator()
  fullName: System.Runtime.Serialization.SerializationInfo.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 236
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Returns a <xref href=\"System.Runtime.Serialization.SerializationInfoEnumerator\" data-throw-if-not-resolved=\"false\"></xref> used to iterate through the name-value pairs in the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public SerializationInfoEnumerator GetEnumerator()
    content.vb: Public Function GetEnumerator As SerializationInfoEnumerator
    return:
      type: System.Runtime.Serialization.SerializationInfoEnumerator
      description: "\n<p>A <xref href=\"System.Runtime.Serialization.SerializationInfoEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for parsing the name-value pairs contained in the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  id: GetInt16(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetInt16(String)
  nameWithType: SerializationInfo.GetInt16(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetInt16(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetInt16
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 625
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 16-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public short GetInt16(string name)
    content.vb: Public Function GetInt16(name As String) As Short
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The 16-bit signed integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 16-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  id: GetInt32(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetInt32(String)
  nameWithType: SerializationInfo.GetInt32(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetInt32(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetInt32
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 652
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 32-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public int GetInt32(string name)
    content.vb: Public Function GetInt32(name As String) As Integer
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The 32-bit signed integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 32-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  id: GetInt64(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetInt64(String)
  nameWithType: SerializationInfo.GetInt64(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetInt64(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetInt64
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 679
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 64-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public long GetInt64(string name)
    content.vb: Public Function GetInt64(name As String) As Long
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The 64-bit signed integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 64-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  id: GetSByte(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetSByte(String)
  nameWithType: SerializationInfo.GetSByte(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetSByte(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSByte
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 598
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves an 8-bit signed integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public sbyte GetSByte(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetSByte(name As String) As SByte
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.SByte
      description: "\n<p>The 8-bit signed integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to an 8-bit signed integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  id: GetSingle(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetSingle(String)
  nameWithType: SerializationInfo.GetSingle(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetSingle(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetSingle
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 706
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a single-precision floating-point value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public float GetSingle(string name)
    content.vb: Public Function GetSingle(name As String) As Single
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the value to retrieve. </p>\n"
    return:
      type: System.Single
      description: "\n<p>The single-precision floating-point value associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a single-precision floating-point value. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  id: GetString(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetString(String)
  nameWithType: SerializationInfo.GetString(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetString(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetString
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 759
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: public string GetString(string name)
    content.vb: Public Function GetString(name As String) As String
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  id: GetUInt16(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetUInt16(String)
  nameWithType: SerializationInfo.GetUInt16(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetUInt16(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUInt16
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 638
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 16-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public ushort GetUInt16(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetUInt16(name As String) As UShort
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.UInt16
      description: "\n<p>The 16-bit unsigned integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 16-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  id: GetUInt32(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetUInt32(String)
  nameWithType: SerializationInfo.GetUInt32(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetUInt32(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUInt32
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 665
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 32-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public uint GetUInt32(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetUInt32(name As String) As UInteger
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.UInt32
      description: "\n<p>The 32-bit unsigned integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 32-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  id: GetUInt64(System.String)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetUInt64(String)
  nameWithType: SerializationInfo.GetUInt64(String)
  fullName: System.Runtime.Serialization.SerializationInfo.GetUInt64(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetUInt64
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 692
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a 64-bit unsigned integer value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public ulong GetUInt64(string name)
    content.vb: >-
      <CLSCompliant(False)>

      Public Function GetUInt64(name As String) As ULong
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    return:
      type: System.UInt64
      description: "\n<p>The 64-bit unsigned integer associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to a 64-bit unsigned integer. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)
  commentId: M:System.Runtime.Serialization.SerializationInfo.GetValue(System.String,System.Type)
  id: GetValue(System.String,System.Type)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: GetValue(String, Type)
  nameWithType: SerializationInfo.GetValue(String, Type)
  fullName: System.Runtime.Serialization.SerializationInfo.GetValue(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetValue
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 503
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Retrieves a value from the <xref href=\"System.Runtime.Serialization.SerializationInfo\" data-throw-if-not-resolved=\"false\"></xref> store.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public object GetValue(string name, Type type)
    content.vb: >-
      <SecuritySafeCritical>

      Public Function GetValue(name As String, type As Type) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name associated with the value to retrieve.</p>\n"
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the value to retrieve. If the stored value cannot be converted to this type, the system will throw a <xref href=\"System.InvalidCastException\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The object of the specified <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> associated with <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> or <em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The value associated with <em>name</em> cannot be converted to <em>type</em>. </p>\n"
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "\n<p>An element with the specified name is not found in the current instance. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  commentId: M:System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  id: SetType(System.Type)
  parent: System.Runtime.Serialization.SerializationInfo
  langs:
  - csharp
  - vb
  name: SetType(Type)
  nameWithType: SerializationInfo.SetType(Type)
  fullName: System.Runtime.Serialization.SerializationInfo.SetType(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetType
    path: src/mscorlib/src/System/Runtime/Serialization/SerializationInfo.cs
    startLine: 130
  assemblies:
  - System.Runtime.Serialization.Formatters
  namespace: System.Runtime.Serialization
  summary: "\n<p>Sets the <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the object to serialize.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public void SetType(Type type)
    content.vb: >-
      <SecuritySafeCritical>

      Public Sub SetType(type As Type)
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the object to serialize. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>The <em>type</em> parameter is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Runtime.Serialization
  commentId: N:System.Runtime.Serialization
  isExternal: false
  name: System.Runtime.Serialization
  nameWithType: System.Runtime.Serialization
  fullName: System.Runtime.Serialization
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Runtime.Serialization.IFormatterConverter
  commentId: T:System.Runtime.Serialization.IFormatterConverter
  parent: System.Runtime.Serialization
  isExternal: false
  name: IFormatterConverter
  nameWithType: IFormatterConverter
  fullName: System.Runtime.Serialization.IFormatterConverter
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.SByte
  commentId: T:System.SByte
  parent: System
  isExternal: false
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: false
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: false
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.UInt64
  commentId: T:System.UInt64
  parent: System
  isExternal: false
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Runtime.Serialization.SerializationInfoEnumerator
  commentId: T:System.Runtime.Serialization.SerializationInfoEnumerator
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfoEnumerator
  nameWithType: SerializationInfoEnumerator
  fullName: System.Runtime.Serialization.SerializationInfoEnumerator
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Runtime.Serialization.SerializationException
  commentId: T:System.Runtime.Serialization.SerializationException
  isExternal: false
  name: SerializationException
  nameWithType: SerializationException
  fullName: System.Runtime.Serialization.SerializationException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
