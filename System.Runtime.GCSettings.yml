### YamlMime:ManagedReference
items:
- uid: System.Runtime.GCSettings
  commentId: T:System.Runtime.GCSettings
  id: GCSettings
  parent: System.Runtime
  children:
  - System.Runtime.GCSettings.IsServerGC
  - System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  - System.Runtime.GCSettings.LatencyMode
  langs:
  - csharp
  - vb
  name: GCSettings
  nameWithType: GCSettings
  fullName: System.Runtime.GCSettings
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/GcSettings.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GCSettings
    path: src/mscorlib/src/System/Runtime/GcSettings.cs
    startLine: 32
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>Specifies the garbage collection settings for the current process. </p>\n"
  syntax:
    content: public static class GCSettings
    content.vb: Public Module GCSettings
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Runtime.GCSettings.IsServerGC
  commentId: P:System.Runtime.GCSettings.IsServerGC
  id: IsServerGC
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  - vb
  name: IsServerGC
  nameWithType: GCSettings.IsServerGC
  fullName: System.Runtime.GCSettings.IsServerGC
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/GcSettings.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsServerGC
    path: src/mscorlib/src/System/Runtime/GcSettings.cs
    startLine: 92
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>Gets a value that indicates whether server garbage collection is enabled.</p>\n"
  syntax:
    content: >-
      public static bool IsServerGC

      {
          [SecuritySafeCritical]
          get;
      }
    content.vb: Public Shared ReadOnly Property IsServerGC As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if server garbage collection is enabled; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  commentId: P:System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  id: LargeObjectHeapCompactionMode
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  - vb
  name: LargeObjectHeapCompactionMode
  nameWithType: GCSettings.LargeObjectHeapCompactionMode
  fullName: System.Runtime.GCSettings.LargeObjectHeapCompactionMode
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/GcSettings.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LargeObjectHeapCompactionMode
    path: src/mscorlib/src/System/Runtime/GcSettings.cs
    startLine: 66
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>[Supported in the .NET Framework 4.5.1 and later versions] </p>\n<p>Gets or sets a value that indicates whether a full blocking garbage collection compacts the large object heap (LOH). </p>\n"
  syntax:
    content: >-
      public static GCLargeObjectHeapCompactionMode LargeObjectHeapCompactionMode

      {
          [SecuritySafeCritical]
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
          [SecurityCritical]
          [HostProtection(MayLeakOnAbort = true)]
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          set;
      }
    content.vb: Public Shared Property LargeObjectHeapCompactionMode As GCLargeObjectHeapCompactionMode
    parameters: []
    return:
      type: System.Runtime.GCLargeObjectHeapCompactionMode
      description: "\n<p>One of the enumeration values that indicates whether a full blocking garbage collection compacts the LOH. </p>\n"
  seealso:
  - linkId: System.Runtime.GCLargeObjectHeapCompactionMode
    commentId: T:System.Runtime.GCLargeObjectHeapCompactionMode
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
- uid: System.Runtime.GCSettings.LatencyMode
  commentId: P:System.Runtime.GCSettings.LatencyMode
  id: LatencyMode
  parent: System.Runtime.GCSettings
  langs:
  - csharp
  - vb
  name: LatencyMode
  nameWithType: GCSettings.LatencyMode
  fullName: System.Runtime.GCSettings.LatencyMode
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Runtime/GcSettings.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LatencyMode
    path: src/mscorlib/src/System/Runtime/GcSettings.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System.Runtime
  summary: "\n<p>Gets or sets the current latency mode for garbage collection.</p>\n"
  syntax:
    content: >-
      public static GCLatencyMode LatencyMode

      {
          [SecuritySafeCritical]
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          get;
          [SecurityCritical]
          [HostProtection(MayLeakOnAbort = true)]
          [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]
          set;
      }
    content.vb: Public Shared Property LatencyMode As GCLatencyMode
    parameters: []
    return:
      type: System.Runtime.GCLatencyMode
      description: "\n<p>One of the enumeration values that specifies the latency mode. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>The <xref href=\"System.Runtime.GCSettings.LatencyMode\" data-throw-if-not-resolved=\"false\"></xref> property is being set to an invalid value. </p>\n<p>-or-</p>\n<p>The <xref href=\"System.Runtime.GCSettings.LatencyMode\" data-throw-if-not-resolved=\"false\"></xref> property cannot be set to <xref href=\"System.Runtime.GCLatencyMode.NoGCRegion\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  - get
  - set
  modifiers.vb:
  - Public
  - Shared
references:
- uid: System.Runtime
  commentId: N:System.Runtime
  isExternal: false
  name: System.Runtime
  nameWithType: System.Runtime
  fullName: System.Runtime
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.GCLargeObjectHeapCompactionMode
  commentId: T:System.Runtime.GCLargeObjectHeapCompactionMode
  parent: System.Runtime
  isExternal: false
  name: GCLargeObjectHeapCompactionMode
  nameWithType: GCLargeObjectHeapCompactionMode
  fullName: System.Runtime.GCLargeObjectHeapCompactionMode
- uid: System.Runtime.GCLatencyMode
  commentId: T:System.Runtime.GCLatencyMode
  parent: System.Runtime
  isExternal: false
  name: GCLatencyMode
  nameWithType: GCLatencyMode
  fullName: System.Runtime.GCLatencyMode
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
