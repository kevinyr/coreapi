items:
- uid: System.Xml.XmlBinaryReaderSession
  commentId: T:System.Xml.XmlBinaryReaderSession
  id: XmlBinaryReaderSession
  parent: System.Xml
  children:
  - System.Xml.XmlBinaryReaderSession.#ctor
  - System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)
  - System.Xml.XmlBinaryReaderSession.Clear
  - System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  - System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)
  - System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  langs:
  - csharp
  - vb
  name: XmlBinaryReaderSession
  fullName: System.Xml.XmlBinaryReaderSession
  type: Class
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XmlBinaryReaderSession
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 108
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Enables optimized strings to be managed in a dynamic way.</p>\n"
  syntax:
    content: 'public class XmlBinaryReaderSession : IXmlDictionary'
    content.vb: >-
      Public Class XmlBinaryReaderSession
          Implements IXmlDictionary
  inheritance:
  - System.Object
  implements:
  - System.Xml.IXmlDictionary
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  nameWithType: XmlBinaryReaderSession
- uid: System.Xml.XmlBinaryReaderSession.#ctor
  commentId: M:System.Xml.XmlBinaryReaderSession.#ctor
  id: '#ctor'
  parent: System.Xml.XmlBinaryReaderSession
  langs:
  - csharp
  - vb
  name: XmlBinaryReaderSession()
  fullName: System.Xml.XmlBinaryReaderSession.XmlBinaryReaderSession()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 110
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Xml.XmlBinaryReaderSession\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public XmlBinaryReaderSession()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlBinaryReaderSession.XmlBinaryReaderSession()
- uid: System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)
  commentId: M:System.Xml.XmlBinaryReaderSession.Add(System.Int32,System.String)
  id: Add(System.Int32,System.String)
  parent: System.Xml.XmlBinaryReaderSession
  langs:
  - csharp
  - vb
  name: Add(Int32, String)
  fullName: System.Xml.XmlBinaryReaderSession.Add(System.Int32, System.String)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Add
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 111
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Creates an <xref href=\"System.Xml.XmlDictionaryString\" data-throw-if-not-resolved=\"false\"></xref> from the input parameters and adds it to an internal collection.</p>\n"
  syntax:
    content: public XmlDictionaryString Add(int id, string value)
    content.vb: Public Function Add(id As Integer, value As String) As XmlDictionaryString
    parameters:
    - id: id
      type: System.Int32
      description: "\n<p>The key value.</p>\n"
    - id: value
      type: System.String
      description: "\n<p>The value.</p>\n"
    return:
      type: System.Xml.XmlDictionaryString
      description: "\n<p>The newly created <xref href=\"System.Xml.XmlDictionaryString\" data-throw-if-not-resolved=\"false\"></xref> that is added to an internal collection.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>id</em> is less than zero.</p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An entry with key = <em>id</em> already exists.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlBinaryReaderSession.Add(Int32, String)
- uid: System.Xml.XmlBinaryReaderSession.Clear
  commentId: M:System.Xml.XmlBinaryReaderSession.Clear
  id: Clear
  parent: System.Xml.XmlBinaryReaderSession
  langs:
  - csharp
  - vb
  name: Clear()
  fullName: System.Xml.XmlBinaryReaderSession.Clear()
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 112
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Clears the internal collection of all contents.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  nameWithType: XmlBinaryReaderSession.Clear()
- uid: System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  commentId: M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  id: TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  parent: System.Xml.XmlBinaryReaderSession
  langs:
  - csharp
  - vb
  name: TryLookup(Int32, out XmlDictionaryString)
  fullName: System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32, out System.Xml.XmlDictionaryString)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryLookup
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 113
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Checks whether the internal collection contains an entry matching a key.</p>\n"
  syntax:
    content: public bool TryLookup(int key, out XmlDictionaryString result)
    content.vb: Public Function TryLookup(key As Integer, ByRef result As XmlDictionaryString) As Boolean
    parameters:
    - id: key
      type: System.Int32
      description: "\n<p>The key to search on.</p>\n"
    - id: result
      type: System.Xml.XmlDictionaryString
      description: "\n<p>When this method returns, contains a string if an entry is found; otherwise, <strong>null</strong>. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an entry matching the <em>key</em> was found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>key</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.XmlBinaryReaderSession.TryLookup(System.Int32, ByRef System.Xml.XmlDictionaryString)
  name.vb: TryLookup(Int32, ByRef XmlDictionaryString)
  nameWithType: XmlBinaryReaderSession.TryLookup(Int32, out XmlDictionaryString)
  nameWithType.vb: XmlBinaryReaderSession.TryLookup(Int32, ByRef XmlDictionaryString)
- uid: System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)
  commentId: M:System.Xml.XmlBinaryReaderSession.TryLookup(System.String,System.Xml.XmlDictionaryString@)
  id: TryLookup(System.String,System.Xml.XmlDictionaryString@)
  parent: System.Xml.XmlBinaryReaderSession
  langs:
  - csharp
  - vb
  name: TryLookup(String, out XmlDictionaryString)
  fullName: System.Xml.XmlBinaryReaderSession.TryLookup(System.String, out System.Xml.XmlDictionaryString)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryLookup
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 114
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Checks whether the internal collection contains an entry matching a value.</p>\n"
  syntax:
    content: public bool TryLookup(string value, out XmlDictionaryString result)
    content.vb: Public Function TryLookup(value As String, ByRef result As XmlDictionaryString) As Boolean
    parameters:
    - id: value
      type: System.String
      description: "\n<p>The value to search for.</p>\n"
    - id: result
      type: System.Xml.XmlDictionaryString
      description: "\n<p>When this method returns, contains a string if an entry is found; otherwise, <strong>null</strong>. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an entry matching the <em>value</em> was found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.XmlBinaryReaderSession.TryLookup(System.String, ByRef System.Xml.XmlDictionaryString)
  name.vb: TryLookup(String, ByRef XmlDictionaryString)
  nameWithType: XmlBinaryReaderSession.TryLookup(String, out XmlDictionaryString)
  nameWithType.vb: XmlBinaryReaderSession.TryLookup(String, ByRef XmlDictionaryString)
- uid: System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  commentId: M:System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  id: TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  parent: System.Xml.XmlBinaryReaderSession
  langs:
  - csharp
  - vb
  name: TryLookup(XmlDictionaryString, out XmlDictionaryString)
  fullName: System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString, out System.Xml.XmlDictionaryString)
  type: Method
  source:
    remote:
      path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TryLookup
    path: src/System.Runtime.Serialization.Xml/ref/System.Runtime.Serialization.Xml.cs
    startLine: 115
  assemblies:
  - System.Runtime.Serialization.Xml
  namespace: System.Xml
  summary: "\n<p>Checks whether the internal collection contains an entry matching a value.</p>\n"
  syntax:
    content: public bool TryLookup(XmlDictionaryString value, out XmlDictionaryString result)
    content.vb: Public Function TryLookup(value As XmlDictionaryString, ByRef result As XmlDictionaryString) As Boolean
    parameters:
    - id: value
      type: System.Xml.XmlDictionaryString
      description: "\n<p>The value to search for.</p>\n"
    - id: result
      type: System.Xml.XmlDictionaryString
      description: "\n<p>When this method returns, contains a string if an entry is found; otherwise, <strong>null</strong>. This parameter is passed uninitialized.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if an entry matching the <em>value</em> was found; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  implements:
  - System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Xml.XmlBinaryReaderSession.TryLookup(System.Xml.XmlDictionaryString, ByRef System.Xml.XmlDictionaryString)
  name.vb: TryLookup(XmlDictionaryString, ByRef XmlDictionaryString)
  nameWithType: XmlBinaryReaderSession.TryLookup(XmlDictionaryString, out XmlDictionaryString)
  nameWithType.vb: XmlBinaryReaderSession.TryLookup(XmlDictionaryString, ByRef XmlDictionaryString)
references:
- uid: System.Xml
  isExternal: false
  name: System.Xml
  fullName: System.Xml
  commentId: N:System.Xml
  nameWithType: System.Xml
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  fullName: System.Object
  commentId: T:System.Object
  nameWithType: Object
- uid: System.Xml.IXmlDictionary
  parent: System.Xml
  isExternal: false
  name: IXmlDictionary
  fullName: System.Xml.IXmlDictionary
  commentId: T:System.Xml.IXmlDictionary
  nameWithType: IXmlDictionary
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.ToString
  nameWithType: Object.ToString()
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object)
  nameWithType: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.Equals(System.Object,System.Object)
  nameWithType: Object.Equals(Object, Object)
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetHashCode
  nameWithType: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.GetType
  nameWithType: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  commentId: M:System.Object.MemberwiseClone
  nameWithType: Object.MemberwiseClone()
- uid: System
  isExternal: false
  name: System
  fullName: System
  commentId: N:System
  nameWithType: System
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  fullName: System.Int32
  commentId: T:System.Int32
  nameWithType: Int32
- uid: System.String
  parent: System
  isExternal: false
  name: String
  fullName: System.String
  commentId: T:System.String
  nameWithType: String
- uid: System.Xml.XmlDictionaryString
  parent: System.Xml
  isExternal: false
  name: XmlDictionaryString
  fullName: System.Xml.XmlDictionaryString
  commentId: T:System.Xml.XmlDictionaryString
  nameWithType: XmlDictionaryString
- uid: System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  parent: System.Xml.IXmlDictionary
  isExternal: true
  name: TryLookup(Int32, XmlDictionaryString)
  fullName: System.Xml.IXmlDictionary.TryLookup(System.Int32, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
    name: TryLookup
    fullName: System.Xml.IXmlDictionary.TryLookup
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
    name: TryLookup
    fullName: System.Xml.IXmlDictionary.TryLookup
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: )
    fullName: )
  commentId: M:System.Xml.IXmlDictionary.TryLookup(System.Int32,System.Xml.XmlDictionaryString@)
  nameWithType: IXmlDictionary.TryLookup(Int32, XmlDictionaryString)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  fullName: System.Boolean
  commentId: T:System.Boolean
  nameWithType: Boolean
- uid: System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
  parent: System.Xml.IXmlDictionary
  isExternal: true
  name: TryLookup(String, XmlDictionaryString)
  fullName: System.Xml.IXmlDictionary.TryLookup(System.String, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
    name: TryLookup
    fullName: System.Xml.IXmlDictionary.TryLookup
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
    name: TryLookup
    fullName: System.Xml.IXmlDictionary.TryLookup
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: )
    fullName: )
  commentId: M:System.Xml.IXmlDictionary.TryLookup(System.String,System.Xml.XmlDictionaryString@)
  nameWithType: IXmlDictionary.TryLookup(String, XmlDictionaryString)
- uid: System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  parent: System.Xml.IXmlDictionary
  isExternal: false
  name: TryLookup(XmlDictionaryString, XmlDictionaryString)
  fullName: System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString)
  spec.csharp:
  - uid: System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
    name: TryLookup
    fullName: System.Xml.IXmlDictionary.TryLookup
  - name: (
    fullName: (
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
    name: TryLookup
    fullName: System.Xml.IXmlDictionary.TryLookup
  - name: (
    fullName: (
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: ', '
    fullName: ', '
  - uid: System.Xml.XmlDictionaryString
    name: XmlDictionaryString
    fullName: System.Xml.XmlDictionaryString
  - name: )
    fullName: )
  commentId: M:System.Xml.IXmlDictionary.TryLookup(System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString@)
  nameWithType: IXmlDictionary.TryLookup(XmlDictionaryString, XmlDictionaryString)
- uid: System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  fullName: System.ArgumentNullException
  nameWithType: ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  fullName: System.InvalidOperationException
  nameWithType: InvalidOperationException
  commentId: T:System.InvalidOperationException
