### YamlMime:ManagedReference
items:
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  id: TypeInfo
  parent: System.Reflection
  children:
  - System.Reflection.TypeInfo.Assembly
  - System.Reflection.TypeInfo.AssemblyQualifiedName
  - System.Reflection.TypeInfo.AsType
  - System.Reflection.TypeInfo.Attributes
  - System.Reflection.TypeInfo.BaseType
  - System.Reflection.TypeInfo.ContainsGenericParameters
  - System.Reflection.TypeInfo.DeclaredConstructors
  - System.Reflection.TypeInfo.DeclaredEvents
  - System.Reflection.TypeInfo.DeclaredFields
  - System.Reflection.TypeInfo.DeclaredMembers
  - System.Reflection.TypeInfo.DeclaredMethods
  - System.Reflection.TypeInfo.DeclaredNestedTypes
  - System.Reflection.TypeInfo.DeclaredProperties
  - System.Reflection.TypeInfo.DeclaringMethod
  - System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  - System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  - System.Reflection.TypeInfo.FullName
  - System.Reflection.TypeInfo.GenericParameterAttributes
  - System.Reflection.TypeInfo.GenericParameterPosition
  - System.Reflection.TypeInfo.GenericTypeArguments
  - System.Reflection.TypeInfo.GenericTypeParameters
  - System.Reflection.TypeInfo.GetArrayRank
  - System.Reflection.TypeInfo.GetConstructor(System.Type[])
  - System.Reflection.TypeInfo.GetConstructors
  - System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  - System.Reflection.TypeInfo.GetDeclaredField(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  - System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  - System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  - System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  - System.Reflection.TypeInfo.GetDefaultMembers
  - System.Reflection.TypeInfo.GetElementType
  - System.Reflection.TypeInfo.GetEnumName(System.Object)
  - System.Reflection.TypeInfo.GetEnumNames
  - System.Reflection.TypeInfo.GetEnumUnderlyingType
  - System.Reflection.TypeInfo.GetEnumValues
  - System.Reflection.TypeInfo.GetEvent(System.String)
  - System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetEvents
  - System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetField(System.String)
  - System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetFields
  - System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetGenericArguments
  - System.Reflection.TypeInfo.GetGenericParameterConstraints
  - System.Reflection.TypeInfo.GetGenericTypeDefinition
  - System.Reflection.TypeInfo.GetInterface(System.String)
  - System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean)
  - System.Reflection.TypeInfo.GetInterfaces
  - System.Reflection.TypeInfo.GetMember(System.String)
  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetMembers
  - System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetMethod(System.String)
  - System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])
  - System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeInfo.GetMethods
  - System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetNestedType(System.String)
  - System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetNestedTypes
  - System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetProperties
  - System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetProperty(System.String)
  - System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type)
  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])
  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])
  - System.Reflection.TypeInfo.GUID
  - System.Reflection.TypeInfo.HasElementType
  - System.Reflection.TypeInfo.ImplementedInterfaces
  - System.Reflection.TypeInfo.IsAbstract
  - System.Reflection.TypeInfo.IsAnsiClass
  - System.Reflection.TypeInfo.IsArray
  - System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  - System.Reflection.TypeInfo.IsAssignableFrom(System.Type)
  - System.Reflection.TypeInfo.IsAutoClass
  - System.Reflection.TypeInfo.IsAutoLayout
  - System.Reflection.TypeInfo.IsByRef
  - System.Reflection.TypeInfo.IsClass
  - System.Reflection.TypeInfo.IsCOMObject
  - System.Reflection.TypeInfo.IsEnum
  - System.Reflection.TypeInfo.IsEnumDefined(System.Object)
  - System.Reflection.TypeInfo.IsEquivalentTo(System.Type)
  - System.Reflection.TypeInfo.IsExplicitLayout
  - System.Reflection.TypeInfo.IsGenericParameter
  - System.Reflection.TypeInfo.IsGenericType
  - System.Reflection.TypeInfo.IsGenericTypeDefinition
  - System.Reflection.TypeInfo.IsImport
  - System.Reflection.TypeInfo.IsInstanceOfType(System.Object)
  - System.Reflection.TypeInfo.IsInterface
  - System.Reflection.TypeInfo.IsLayoutSequential
  - System.Reflection.TypeInfo.IsMarshalByRef
  - System.Reflection.TypeInfo.IsNested
  - System.Reflection.TypeInfo.IsNestedAssembly
  - System.Reflection.TypeInfo.IsNestedFamANDAssem
  - System.Reflection.TypeInfo.IsNestedFamily
  - System.Reflection.TypeInfo.IsNestedFamORAssem
  - System.Reflection.TypeInfo.IsNestedPrivate
  - System.Reflection.TypeInfo.IsNestedPublic
  - System.Reflection.TypeInfo.IsNotPublic
  - System.Reflection.TypeInfo.IsPointer
  - System.Reflection.TypeInfo.IsPrimitive
  - System.Reflection.TypeInfo.IsPublic
  - System.Reflection.TypeInfo.IsSealed
  - System.Reflection.TypeInfo.IsSerializable
  - System.Reflection.TypeInfo.IsSpecialName
  - System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  - System.Reflection.TypeInfo.IsUnicodeClass
  - System.Reflection.TypeInfo.IsValueType
  - System.Reflection.TypeInfo.IsVisible
  - System.Reflection.TypeInfo.MakeArrayType
  - System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  - System.Reflection.TypeInfo.MakeByRefType
  - System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  - System.Reflection.TypeInfo.MakePointerType
  - System.Reflection.TypeInfo.MemberType
  - System.Reflection.TypeInfo.Namespace
  - System.Reflection.TypeInfo.StructLayoutAttribute
  - System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  - System.Reflection.TypeInfo.TypeInitializer
  - System.Reflection.TypeInfo.UnderlyingSystemType
  langs:
  - csharp
  - vb
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TypeInfo
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 24
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Represents type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types. </p>\n"
  syntax:
    content: >-
      [ComVisible(true)]

      [Serializable]

      public abstract class TypeInfo : Type, ICustomAttributeProvider, _MemberInfo, _Type, IReflect, IReflectableType
    content.vb: >-
      <ComVisible(True)>

      <Serializable>

      Public MustInherit Class TypeInfo
          Inherits Type
          Implements ICustomAttributeProvider, _MemberInfo, _Type, IReflect, IReflectableType
  inheritance:
  - System.Object
  - System.Reflection.MemberInfo
  implements:
  - System.Reflection.ICustomAttributeProvider
  - System.Reflection.IReflectableType
  inheritedMembers:
  - System.Reflection.MemberInfo.CustomAttributes
  - System.Reflection.MemberInfo.DeclaringType
  - System.Reflection.MemberInfo.MetadataToken
  - System.Reflection.MemberInfo.Module
  - System.Reflection.MemberInfo.Name
  - System.Reflection.MemberInfo.Equals(System.Object)
  - System.Reflection.MemberInfo.GetHashCode
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  - System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  - System.Object.ToString
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Reflection.TypeInfo.AsType
  commentId: M:System.Reflection.TypeInfo.AsType
  id: AsType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: AsType()
  nameWithType: TypeInfo.AsType()
  fullName: System.Reflection.TypeInfo.AsType()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AsType
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 34
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns the current type as a <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public virtual Type AsType()
    content.vb: Public Overridable Function AsType As Type
    return:
      type: System.Type
      description: "\n<p>The current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.DeclaredConstructors
  commentId: P:System.Reflection.TypeInfo.DeclaredConstructors
  id: DeclaredConstructors
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredConstructors
  nameWithType: TypeInfo.DeclaredConstructors
  fullName: System.Reflection.TypeInfo.DeclaredConstructors
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredConstructors
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 123
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the constructors declared by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<ConstructorInfo> DeclaredConstructors { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredConstructors As IEnumerable(Of ConstructorInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
      description: "\n<p>A collection of the constructors declared by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredEvents
  commentId: P:System.Reflection.TypeInfo.DeclaredEvents
  id: DeclaredEvents
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredEvents
  nameWithType: TypeInfo.DeclaredEvents
  fullName: System.Reflection.TypeInfo.DeclaredEvents
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredEvents
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 131
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the events defined by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<EventInfo> DeclaredEvents { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredEvents As IEnumerable(Of EventInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
      description: "\n<p>A collection of the events defined by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredFields
  commentId: P:System.Reflection.TypeInfo.DeclaredFields
  id: DeclaredFields
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredFields
  nameWithType: TypeInfo.DeclaredFields
  fullName: System.Reflection.TypeInfo.DeclaredFields
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredFields
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 139
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the fields defined by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<FieldInfo> DeclaredFields { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredFields As IEnumerable(Of FieldInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
      description: "\n<p>A collection of the fields defined by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredMembers
  commentId: P:System.Reflection.TypeInfo.DeclaredMembers
  id: DeclaredMembers
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredMembers
  nameWithType: TypeInfo.DeclaredMembers
  fullName: System.Reflection.TypeInfo.DeclaredMembers
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredMembers
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 147
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the members defined by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<MemberInfo> DeclaredMembers { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredMembers As IEnumerable(Of MemberInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
      description: "\n<p>A collection of the members defined by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredMethods
  commentId: P:System.Reflection.TypeInfo.DeclaredMethods
  id: DeclaredMethods
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredMethods
  nameWithType: TypeInfo.DeclaredMethods
  fullName: System.Reflection.TypeInfo.DeclaredMethods
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredMethods
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 155
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the methods defined by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<MethodInfo> DeclaredMethods { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredMethods As IEnumerable(Of MethodInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
      description: "\n<p>A collection of the methods defined by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredNestedTypes
  commentId: P:System.Reflection.TypeInfo.DeclaredNestedTypes
  id: DeclaredNestedTypes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredNestedTypes
  nameWithType: TypeInfo.DeclaredNestedTypes
  fullName: System.Reflection.TypeInfo.DeclaredNestedTypes
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredNestedTypes
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 162
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the nested types defined by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<TypeInfo> DeclaredNestedTypes { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredNestedTypes As IEnumerable(Of TypeInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
      description: "\n<p>A collection of nested types defined by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaredProperties
  commentId: P:System.Reflection.TypeInfo.DeclaredProperties
  id: DeclaredProperties
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaredProperties
  nameWithType: TypeInfo.DeclaredProperties
  fullName: System.Reflection.TypeInfo.DeclaredProperties
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: DeclaredProperties
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 172
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the properties defined by the current type. </p>\n"
  syntax:
    content: public virtual IEnumerable<PropertyInfo> DeclaredProperties { get; }
    content.vb: Public Overridable ReadOnly Property DeclaredProperties As IEnumerable(Of PropertyInfo)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
      description: "\n<p>A collection of the properties defined by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  commentId: M:System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter,System.Object)
  id: FindInterfaces(System.Reflection.TypeFilter,System.Object)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: FindInterfaces(TypeFilter, Object)
  nameWithType: TypeInfo.FindInterfaces(TypeFilter, Object)
  fullName: System.Reflection.TypeInfo.FindInterfaces(System.Reflection.TypeFilter, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindInterfaces
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 437
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type[] FindInterfaces(TypeFilter filter, object filterCriteria)
    content.vb: Public Overridable Function FindInterfaces(filter As TypeFilter, filterCriteria As Object) As Type()
    parameters:
    - id: filter
      type: System.Reflection.TypeFilter
    - id: filterCriteria
      type: System.Object
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  commentId: M:System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  id: FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  nameWithType: TypeInfo.FindMembers(MemberTypes, BindingFlags, MemberFilter, Object)
  fullName: System.Reflection.TypeInfo.FindMembers(System.Reflection.MemberTypes, System.Reflection.BindingFlags, System.Reflection.MemberFilter, System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FindMembers
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 438
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MemberInfo[] FindMembers(MemberTypes memberType, BindingFlags bindingAttr, MemberFilter filter, object filterCriteria)
    content.vb: Public Overridable Function FindMembers(memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()
    parameters:
    - id: memberType
      type: System.Reflection.MemberTypes
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    - id: filter
      type: System.Reflection.MemberFilter
    - id: filterCriteria
      type: System.Object
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GenericTypeParameters
  commentId: P:System.Reflection.TypeInfo.GenericTypeParameters
  id: GenericTypeParameters
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericTypeParameters
  nameWithType: TypeInfo.GenericTypeParameters
  fullName: System.Reflection.TypeInfo.GenericTypeParameters
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GenericTypeParameters
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 38
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets an array of the generic type parameters of the current instance. </p>\n"
  syntax:
    content: public virtual Type[] GenericTypeParameters { get; }
    content.vb: Public Overridable ReadOnly Property GenericTypeParameters As Type()
    parameters: []
    return:
      type: System.Type[]
      description: "\n<p>An array that contains the current instance's generic type parameters, or an array of <xref href=\"System.Array.Length\" data-throw-if-not-resolved=\"false\"></xref> zero if the current instance has no generic type parameters. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.GetConstructor(System.Type[])
  commentId: M:System.Reflection.TypeInfo.GetConstructor(System.Type[])
  id: GetConstructor(System.Type[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetConstructor(Type[])
  nameWithType: TypeInfo.GetConstructor(Type[])
  fullName: System.Reflection.TypeInfo.GetConstructor(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConstructor
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 440
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public ConstructorInfo GetConstructor(Type[] types)
    content.vb: Public Function GetConstructor(types As Type()) As ConstructorInfo
    parameters:
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.ConstructorInfo
  nameWithType.vb: TypeInfo.GetConstructor(Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.TypeInfo.GetConstructor(System.Type())
  name.vb: GetConstructor(Type())
- uid: System.Reflection.TypeInfo.GetConstructors
  commentId: M:System.Reflection.TypeInfo.GetConstructors
  id: GetConstructors
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetConstructors()
  nameWithType: TypeInfo.GetConstructors()
  fullName: System.Reflection.TypeInfo.GetConstructors()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConstructors
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 441
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public ConstructorInfo[] GetConstructors()
    content.vb: Public Function GetConstructors As ConstructorInfo()
    return:
      type: System.Reflection.ConstructorInfo[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)
  id: GetConstructors(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetConstructors(BindingFlags)
  nameWithType: TypeInfo.GetConstructors(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetConstructors(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetConstructors
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 442
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual ConstructorInfo[] GetConstructors(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetConstructors(bindingAttr As BindingFlags) As ConstructorInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.ConstructorInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  id: GetDeclaredEvent(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredEvent(String)
  nameWithType: TypeInfo.GetDeclaredEvent(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredEvent(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDeclaredEvent
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 82
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an object that represents the specified public event declared by the current type.</p>\n"
  syntax:
    content: public virtual EventInfo GetDeclaredEvent(string name)
    content.vb: Public Overridable Function GetDeclaredEvent(name As String) As EventInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the event.</p>\n"
    return:
      type: System.Reflection.EventInfo
      description: "\n<p>An object that represents the specified event, if found; otherwise, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredField(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredField(System.String)
  id: GetDeclaredField(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredField(String)
  nameWithType: TypeInfo.GetDeclaredField(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredField(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDeclaredField
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 86
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an object that represents the specified public field declared by the current type.</p>\n"
  syntax:
    content: public virtual FieldInfo GetDeclaredField(string name)
    content.vb: Public Overridable Function GetDeclaredField(name As String) As FieldInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the field.</p>\n"
    return:
      type: System.Reflection.FieldInfo
      description: "\n<p>An object that represents the specified field, if found; otherwise, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  id: GetDeclaredMethod(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredMethod(String)
  nameWithType: TypeInfo.GetDeclaredMethod(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredMethod(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDeclaredMethod
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 90
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an object that represents the specified public method declared by the current type.</p>\n"
  syntax:
    content: public virtual MethodInfo GetDeclaredMethod(string name)
    content.vb: Public Overridable Function GetDeclaredMethod(name As String) As MethodInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the method.</p>\n"
    return:
      type: System.Reflection.MethodInfo
      description: "\n<p>An object that represents the specified method, if found; otherwise, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  id: GetDeclaredMethods(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredMethods(String)
  nameWithType: TypeInfo.GetDeclaredMethods(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredMethods(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDeclaredMethods
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 95
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a collection that contains all public methods declared on the current type that match the specified name.</p>\n"
  syntax:
    content: public virtual IEnumerable<MethodInfo> GetDeclaredMethods(string name)
    content.vb: Public Overridable Function GetDeclaredMethods(name As String) As IEnumerable(Of MethodInfo)
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The method name to search for.</p>\n"
    return:
      type: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
      description: "\n<p>A collection that contains methods that match <em>name</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  id: GetDeclaredNestedType(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredNestedType(String)
  nameWithType: TypeInfo.GetDeclaredNestedType(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredNestedType(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDeclaredNestedType
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 103
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an object that represents the specified public nested type declared by the current type.</p>\n"
  syntax:
    content: public virtual TypeInfo GetDeclaredNestedType(string name)
    content.vb: Public Overridable Function GetDeclaredNestedType(name As String) As TypeInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the nested type.</p>\n"
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>An object that represents the specified nested type, if found; otherwise, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  commentId: M:System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  id: GetDeclaredProperty(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDeclaredProperty(String)
  nameWithType: TypeInfo.GetDeclaredProperty(String)
  fullName: System.Reflection.TypeInfo.GetDeclaredProperty(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetDeclaredProperty
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 112
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns an object that represents the specified public property declared by the current type.</p>\n"
  syntax:
    content: public virtual PropertyInfo GetDeclaredProperty(string name)
    content.vb: Public Overridable Function GetDeclaredProperty(name As String) As PropertyInfo
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the property.</p>\n"
    return:
      type: System.Reflection.PropertyInfo
      description: "\n<p>An object that represents the specified property, if found; otherwise, <strong>null</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>name</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetDefaultMembers
  commentId: M:System.Reflection.TypeInfo.GetDefaultMembers
  id: GetDefaultMembers
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetDefaultMembers()
  nameWithType: TypeInfo.GetDefaultMembers()
  fullName: System.Reflection.TypeInfo.GetDefaultMembers()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDefaultMembers
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 449
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MemberInfo[] GetDefaultMembers()
    content.vb: Public Overridable Function GetDefaultMembers As MemberInfo()
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEnumName(System.Object)
  commentId: M:System.Reflection.TypeInfo.GetEnumName(System.Object)
  id: GetEnumName(System.Object)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEnumName(Object)
  nameWithType: TypeInfo.GetEnumName(Object)
  fullName: System.Reflection.TypeInfo.GetEnumName(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumName
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 450
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual string GetEnumName(object value)
    content.vb: Public Overridable Function GetEnumName(value As Object) As String
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.String
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEnumNames
  commentId: M:System.Reflection.TypeInfo.GetEnumNames
  id: GetEnumNames
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEnumNames()
  nameWithType: TypeInfo.GetEnumNames()
  fullName: System.Reflection.TypeInfo.GetEnumNames()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumNames
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 451
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual string[] GetEnumNames()
    content.vb: Public Overridable Function GetEnumNames As String()
    return:
      type: System.String[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEnumUnderlyingType
  commentId: M:System.Reflection.TypeInfo.GetEnumUnderlyingType
  id: GetEnumUnderlyingType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEnumUnderlyingType()
  nameWithType: TypeInfo.GetEnumUnderlyingType()
  fullName: System.Reflection.TypeInfo.GetEnumUnderlyingType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumUnderlyingType
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 452
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type GetEnumUnderlyingType()
    content.vb: Public Overridable Function GetEnumUnderlyingType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEnumValues
  commentId: M:System.Reflection.TypeInfo.GetEnumValues
  id: GetEnumValues
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEnumValues()
  nameWithType: TypeInfo.GetEnumValues()
  fullName: System.Reflection.TypeInfo.GetEnumValues()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumValues
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 453
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Array GetEnumValues()
    content.vb: Public Overridable Function GetEnumValues As Array
    return:
      type: System.Array
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEvent(System.String)
  commentId: M:System.Reflection.TypeInfo.GetEvent(System.String)
  id: GetEvent(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEvent(String)
  nameWithType: TypeInfo.GetEvent(String)
  fullName: System.Reflection.TypeInfo.GetEvent(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvent
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 454
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public EventInfo GetEvent(string name)
    content.vb: Public Function GetEvent(name As String) As EventInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.EventInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetEvent(System.String,System.Reflection.BindingFlags)
  id: GetEvent(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEvent(String, BindingFlags)
  nameWithType: TypeInfo.GetEvent(String, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetEvent(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvent
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 455
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual EventInfo GetEvent(string name, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetEvent(name As String, bindingAttr As BindingFlags) As EventInfo
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.EventInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEvents
  commentId: M:System.Reflection.TypeInfo.GetEvents
  id: GetEvents
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEvents()
  nameWithType: TypeInfo.GetEvents()
  fullName: System.Reflection.TypeInfo.GetEvents()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 456
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual EventInfo[] GetEvents()
    content.vb: Public Overridable Function GetEvents As EventInfo()
    return:
      type: System.Reflection.EventInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)
  id: GetEvents(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetEvents(BindingFlags)
  nameWithType: TypeInfo.GetEvents(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetEvents(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEvents
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 457
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual EventInfo[] GetEvents(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetEvents(bindingAttr As BindingFlags) As EventInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.EventInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetField(System.String)
  commentId: M:System.Reflection.TypeInfo.GetField(System.String)
  id: GetField(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetField(String)
  nameWithType: TypeInfo.GetField(String)
  fullName: System.Reflection.TypeInfo.GetField(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetField
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 458
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public FieldInfo GetField(string name)
    content.vb: Public Function GetField(name As String) As FieldInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetField(String, BindingFlags)
  nameWithType: TypeInfo.GetField(String, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetField(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetField
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 459
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual FieldInfo GetField(string name, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetField(name As String, bindingAttr As BindingFlags) As FieldInfo
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.FieldInfo
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetFields
  commentId: M:System.Reflection.TypeInfo.GetFields
  id: GetFields
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetFields()
  nameWithType: TypeInfo.GetFields()
  fullName: System.Reflection.TypeInfo.GetFields()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFields
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 460
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public FieldInfo[] GetFields()
    content.vb: Public Function GetFields As FieldInfo()
    return:
      type: System.Reflection.FieldInfo[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetFields(BindingFlags)
  nameWithType: TypeInfo.GetFields(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetFields(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFields
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 461
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual FieldInfo[] GetFields(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetFields(bindingAttr As BindingFlags) As FieldInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.FieldInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetGenericArguments
  commentId: M:System.Reflection.TypeInfo.GetGenericArguments
  id: GetGenericArguments
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetGenericArguments()
  nameWithType: TypeInfo.GetGenericArguments()
  fullName: System.Reflection.TypeInfo.GetGenericArguments()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericArguments
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 462
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type[] GetGenericArguments()
    content.vb: Public Overridable Function GetGenericArguments As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetInterface(System.String)
  commentId: M:System.Reflection.TypeInfo.GetInterface(System.String)
  id: GetInterface(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetInterface(String)
  nameWithType: TypeInfo.GetInterface(String)
  fullName: System.Reflection.TypeInfo.GetInterface(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInterface
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 463
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public Type GetInterface(string name)
    content.vb: Public Function GetInterface(name As String) As Type
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean)
  commentId: M:System.Reflection.TypeInfo.GetInterface(System.String,System.Boolean)
  id: GetInterface(System.String,System.Boolean)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetInterface(String, Boolean)
  nameWithType: TypeInfo.GetInterface(String, Boolean)
  fullName: System.Reflection.TypeInfo.GetInterface(System.String, System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInterface
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 464
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type GetInterface(string name, bool ignoreCase)
    content.vb: Public Overridable Function GetInterface(name As String, ignoreCase As Boolean) As Type
    parameters:
    - id: name
      type: System.String
    - id: ignoreCase
      type: System.Boolean
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetInterfaces
  commentId: M:System.Reflection.TypeInfo.GetInterfaces
  id: GetInterfaces
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetInterfaces()
  nameWithType: TypeInfo.GetInterfaces()
  fullName: System.Reflection.TypeInfo.GetInterfaces()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInterfaces
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 465
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type[] GetInterfaces()
    content.vb: Public Overridable Function GetInterfaces As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetMember(System.String)
  commentId: M:System.Reflection.TypeInfo.GetMember(System.String)
  id: GetMember(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMember(String)
  nameWithType: TypeInfo.GetMember(String)
  fullName: System.Reflection.TypeInfo.GetMember(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMember
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 466
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MemberInfo[] GetMember(string name)
    content.vb: Public Function GetMember(name As String) As MemberInfo()
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMember(String, BindingFlags)
  nameWithType: TypeInfo.GetMember(String, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetMember(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMember
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 467
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MemberInfo[] GetMember(string name, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetMember(name As String, bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMember(String, MemberTypes, BindingFlags)
  nameWithType: TypeInfo.GetMember(String, MemberTypes, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetMember(System.String, System.Reflection.MemberTypes, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMember
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 468
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MemberInfo[] GetMember(string name, MemberTypes type, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetMember(name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: name
      type: System.String
    - id: type
      type: System.Reflection.MemberTypes
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetMembers
  commentId: M:System.Reflection.TypeInfo.GetMembers
  id: GetMembers
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMembers()
  nameWithType: TypeInfo.GetMembers()
  fullName: System.Reflection.TypeInfo.GetMembers()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMembers
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 469
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MemberInfo[] GetMembers()
    content.vb: Public Function GetMembers As MemberInfo()
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMembers(BindingFlags)
  nameWithType: TypeInfo.GetMembers(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetMembers(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMembers
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 470
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MemberInfo[] GetMembers(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetMembers(bindingAttr As BindingFlags) As MemberInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MemberInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetMethod(System.String)
  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String)
  id: GetMethod(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMethod(String)
  nameWithType: TypeInfo.GetMethod(String)
  fullName: System.Reflection.TypeInfo.GetMethod(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 471
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MethodInfo GetMethod(string name)
    content.vb: Public Function GetMethod(name As String) As MethodInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMethod(String, BindingFlags)
  nameWithType: TypeInfo.GetMethod(String, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetMethod(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 472
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MethodInfo GetMethod(string name, BindingFlags bindingAttr)
    content.vb: Public Function GetMethod(name As String, bindingAttr As BindingFlags) As MethodInfo
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MethodInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])
  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String,System.Type[])
  id: GetMethod(System.String,System.Type[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMethod(String, Type[])
  nameWithType: TypeInfo.GetMethod(String, Type[])
  fullName: System.Reflection.TypeInfo.GetMethod(System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 473
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MethodInfo GetMethod(string name, Type[] types)
    content.vb: Public Function GetMethod(name As String, types As Type()) As MethodInfo
    parameters:
    - id: name
      type: System.String
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.MethodInfo
  nameWithType.vb: TypeInfo.GetMethod(String, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.TypeInfo.GetMethod(System.String, System.Type())
  name.vb: GetMethod(String, Type())
- uid: System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Reflection.TypeInfo.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMethod(String, Type[], ParameterModifier[])
  nameWithType: TypeInfo.GetMethod(String, Type[], ParameterModifier[])
  fullName: System.Reflection.TypeInfo.GetMethod(System.String, System.Type[], System.Reflection.ParameterModifier[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethod
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 474
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MethodInfo GetMethod(string name, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetMethod(name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo
    parameters:
    - id: name
      type: System.String
    - id: types
      type: System.Type[]
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
    return:
      type: System.Reflection.MethodInfo
  nameWithType.vb: TypeInfo.GetMethod(String, Type(), ParameterModifier())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.TypeInfo.GetMethod(System.String, System.Type(), System.Reflection.ParameterModifier())
  name.vb: GetMethod(String, Type(), ParameterModifier())
- uid: System.Reflection.TypeInfo.GetMethods
  commentId: M:System.Reflection.TypeInfo.GetMethods
  id: GetMethods
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMethods()
  nameWithType: TypeInfo.GetMethods()
  fullName: System.Reflection.TypeInfo.GetMethods()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethods
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 475
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public MethodInfo[] GetMethods()
    content.vb: Public Function GetMethods As MethodInfo()
    return:
      type: System.Reflection.MethodInfo[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetMethods(BindingFlags)
  nameWithType: TypeInfo.GetMethods(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetMethods(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetMethods
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 476
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual MethodInfo[] GetMethods(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetMethods(bindingAttr As BindingFlags) As MethodInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.MethodInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetNestedType(System.String)
  commentId: M:System.Reflection.TypeInfo.GetNestedType(System.String)
  id: GetNestedType(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetNestedType(String)
  nameWithType: TypeInfo.GetNestedType(String)
  fullName: System.Reflection.TypeInfo.GetNestedType(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNestedType
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 477
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public Type GetNestedType(string name)
    content.vb: Public Function GetNestedType(name As String) As Type
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Type
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetNestedType(System.String,System.Reflection.BindingFlags)
  id: GetNestedType(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetNestedType(String, BindingFlags)
  nameWithType: TypeInfo.GetNestedType(String, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetNestedType(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNestedType
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 478
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type GetNestedType(string name, BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetNestedType(name As String, bindingAttr As BindingFlags) As Type
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetNestedTypes
  commentId: M:System.Reflection.TypeInfo.GetNestedTypes
  id: GetNestedTypes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetNestedTypes()
  nameWithType: TypeInfo.GetNestedTypes()
  fullName: System.Reflection.TypeInfo.GetNestedTypes()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNestedTypes
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 479
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public Type[] GetNestedTypes()
    content.vb: Public Function GetNestedTypes As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)
  id: GetNestedTypes(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetNestedTypes(BindingFlags)
  nameWithType: TypeInfo.GetNestedTypes(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetNestedTypes(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetNestedTypes
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 480
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type[] GetNestedTypes(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetNestedTypes(bindingAttr As BindingFlags) As Type()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetProperties
  commentId: M:System.Reflection.TypeInfo.GetProperties
  id: GetProperties
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperties()
  nameWithType: TypeInfo.GetProperties()
  fullName: System.Reflection.TypeInfo.GetProperties()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 481
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo[] GetProperties()
    content.vb: Public Function GetProperties As PropertyInfo()
    return:
      type: System.Reflection.PropertyInfo[]
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperties(BindingFlags)
  nameWithType: TypeInfo.GetProperties(BindingFlags)
  fullName: System.Reflection.TypeInfo.GetProperties(System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperties
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 482
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual PropertyInfo[] GetProperties(BindingFlags bindingAttr)
    content.vb: Public Overridable Function GetProperties(bindingAttr As BindingFlags) As PropertyInfo()
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.PropertyInfo[]
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GetProperty(System.String)
  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperty(String)
  nameWithType: TypeInfo.GetProperty(String)
  fullName: System.Reflection.TypeInfo.GetProperty(System.String)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 483
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo GetProperty(string name)
    content.vb: Public Function GetProperty(name As String) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)
  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperty(String, BindingFlags)
  nameWithType: TypeInfo.GetProperty(String, BindingFlags)
  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Reflection.BindingFlags)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 484
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo GetProperty(string name, BindingFlags bindingAttr)
    content.vb: Public Function GetProperty(name As String, bindingAttr As BindingFlags) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    - id: bindingAttr
      type: System.Reflection.BindingFlags
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type)
  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type)
  id: GetProperty(System.String,System.Type)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperty(String, Type)
  nameWithType: TypeInfo.GetProperty(String, Type)
  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 485
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo GetProperty(string name, Type returnType)
    content.vb: Public Function GetProperty(name As String, returnType As Type) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    return:
      type: System.Reflection.PropertyInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])
  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[])
  id: GetProperty(System.String,System.Type,System.Type[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperty(String, Type, Type[])
  nameWithType: TypeInfo.GetProperty(String, Type, Type[])
  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 486
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo GetProperty(string name, Type returnType, Type[] types)
    content.vb: Public Function GetProperty(name As String, returnType As Type, types As Type()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.PropertyInfo
  nameWithType.vb: TypeInfo.GetProperty(String, Type, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type())
  name.vb: GetProperty(String, Type, Type())
- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperty(String, Type, Type[], ParameterModifier[])
  nameWithType: TypeInfo.GetProperty(String, Type, Type[], ParameterModifier[])
  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type[], System.Reflection.ParameterModifier[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 487
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo GetProperty(string name, Type returnType, Type[] types, ParameterModifier[] modifiers)
    content.vb: Public Function GetProperty(name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    - id: returnType
      type: System.Type
    - id: types
      type: System.Type[]
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
    return:
      type: System.Reflection.PropertyInfo
  nameWithType.vb: TypeInfo.GetProperty(String, Type, Type(), ParameterModifier())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.TypeInfo.GetProperty(System.String, System.Type, System.Type(), System.Reflection.ParameterModifier())
  name.vb: GetProperty(String, Type, Type(), ParameterModifier())
- uid: System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])
  commentId: M:System.Reflection.TypeInfo.GetProperty(System.String,System.Type[])
  id: GetProperty(System.String,System.Type[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetProperty(String, Type[])
  nameWithType: TypeInfo.GetProperty(String, Type[])
  fullName: System.Reflection.TypeInfo.GetProperty(System.String, System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProperty
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 488
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public PropertyInfo GetProperty(string name, Type[] types)
    content.vb: Public Function GetProperty(name As String, types As Type()) As PropertyInfo
    parameters:
    - id: name
      type: System.String
    - id: types
      type: System.Type[]
    return:
      type: System.Reflection.PropertyInfo
  nameWithType.vb: TypeInfo.GetProperty(String, Type())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Reflection.TypeInfo.GetProperty(System.String, System.Type())
  name.vb: GetProperty(String, Type())
- uid: System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  commentId: M:System.Reflection.TypeInfo.System#Reflection#IReflectableType#GetTypeInfo
  id: System#Reflection#IReflectableType#GetTypeInfo
  isEii: true
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IReflectableType.GetTypeInfo()
  nameWithType: TypeInfo.IReflectableType.GetTypeInfo()
  fullName: System.Reflection.TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.Reflection.IReflectableType.GetTypeInfo
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a representation of the current type as a <xref href=\"System.Reflection.TypeInfo\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: TypeInfo IReflectableType.GetTypeInfo()
    content.vb: Function System.Reflection.IReflectableType.GetTypeInfo As TypeInfo Implements IReflectableType.GetTypeInfo
    return:
      type: System.Reflection.TypeInfo
      description: "\n<p>A reference to the current type.</p>\n"
  implements:
  - System.Reflection.IReflectableType.GetTypeInfo
  nameWithType.vb: TypeInfo.System.Reflection.IReflectableType.GetTypeInfo()
  name.vb: System.Reflection.IReflectableType.GetTypeInfo()
- uid: System.Reflection.TypeInfo.ImplementedInterfaces
  commentId: P:System.Reflection.TypeInfo.ImplementedInterfaces
  id: ImplementedInterfaces
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: ImplementedInterfaces
  nameWithType: TypeInfo.ImplementedInterfaces
  fullName: System.Reflection.TypeInfo.ImplementedInterfaces
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ImplementedInterfaces
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 181
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Gets a collection of the interfaces implemented by the current type.</p>\n"
  syntax:
    content: public virtual IEnumerable<Type> ImplementedInterfaces { get; }
    content.vb: Public Overridable ReadOnly Property ImplementedInterfaces As IEnumerable(Of Type)
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Type}
      description: "\n<p>A collection of the interfaces implemented by the current type.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Type)
  commentId: M:System.Reflection.TypeInfo.IsAssignableFrom(System.Type)
  id: IsAssignableFrom(System.Type)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(Type)
  nameWithType: TypeInfo.IsAssignableFrom(Type)
  fullName: System.Reflection.TypeInfo.IsAssignableFrom(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAssignableFrom
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 491
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsAssignableFrom(Type c)
    content.vb: Public Overridable Function IsAssignableFrom(c As Type) As Boolean
    parameters:
    - id: c
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  commentId: M:System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  id: IsAssignableFrom(System.Reflection.TypeInfo)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAssignableFrom(TypeInfo)
  nameWithType: TypeInfo.IsAssignableFrom(TypeInfo)
  fullName: System.Reflection.TypeInfo.IsAssignableFrom(System.Reflection.TypeInfo)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Reflection/TypeInfo.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsAssignableFrom
    path: src/mscorlib/src/System/Reflection/TypeInfo.cs
    startLine: 50
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  summary: "\n<p>Returns a value that indicates whether the specified type can be assigned to the current type.</p>\n"
  syntax:
    content: public virtual bool IsAssignableFrom(TypeInfo typeInfo)
    content.vb: Public Overridable Function IsAssignableFrom(typeInfo As TypeInfo) As Boolean
    parameters:
    - id: typeInfo
      type: System.Reflection.TypeInfo
      description: "\n<p>The type to check.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified type can be assigned to this type; otherwise, <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.IsEnumDefined(System.Object)
  commentId: M:System.Reflection.TypeInfo.IsEnumDefined(System.Object)
  id: IsEnumDefined(System.Object)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsEnumDefined(Object)
  nameWithType: TypeInfo.IsEnumDefined(Object)
  fullName: System.Reflection.TypeInfo.IsEnumDefined(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnumDefined
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 493
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsEnumDefined(object value)
    content.vb: Public Overridable Function IsEnumDefined(value As Object) As Boolean
    parameters:
    - id: value
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)
  commentId: M:System.Reflection.TypeInfo.IsInstanceOfType(System.Object)
  id: IsInstanceOfType(System.Object)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsInstanceOfType(Object)
  nameWithType: TypeInfo.IsInstanceOfType(Object)
  fullName: System.Reflection.TypeInfo.IsInstanceOfType(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInstanceOfType
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 494
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsInstanceOfType(object o)
    content.vb: Public Overridable Function IsInstanceOfType(o As Object) As Boolean
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.StructLayoutAttribute
  commentId: P:System.Reflection.TypeInfo.StructLayoutAttribute
  id: StructLayoutAttribute
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: StructLayoutAttribute
  nameWithType: TypeInfo.StructLayoutAttribute
  fullName: System.Reflection.TypeInfo.StructLayoutAttribute
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: StructLayoutAttribute
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 495
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual StructLayoutAttribute StructLayoutAttribute { get; }
    content.vb: Public Overridable ReadOnly Property StructLayoutAttribute As StructLayoutAttribute
    parameters: []
    return:
      type: System.Runtime.InteropServices.StructLayoutAttribute
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.TypeInitializer
  commentId: P:System.Reflection.TypeInfo.TypeInitializer
  id: TypeInitializer
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: TypeInitializer
  nameWithType: TypeInfo.TypeInitializer
  fullName: System.Reflection.TypeInfo.TypeInitializer
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: TypeInitializer
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 496
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public ConstructorInfo TypeInitializer { get; }
    content.vb: Public ReadOnly Property TypeInitializer As ConstructorInfo
    parameters: []
    return:
      type: System.Reflection.ConstructorInfo
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.UnderlyingSystemType
  commentId: P:System.Reflection.TypeInfo.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: UnderlyingSystemType
  nameWithType: TypeInfo.UnderlyingSystemType
  fullName: System.Reflection.TypeInfo.UnderlyingSystemType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: UnderlyingSystemType
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 497
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual Type UnderlyingSystemType { get; }
    content.vb: Public Overridable ReadOnly Property UnderlyingSystemType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.MemberType
  commentId: P:System.Reflection.TypeInfo.MemberType
  id: MemberType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MemberType
  nameWithType: TypeInfo.MemberType
  fullName: System.Reflection.TypeInfo.MemberType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MemberType
    path: src/System.Reflection/ref/System.Reflection.cs
    startLine: 498
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public override MemberTypes MemberType { get; }
    content.vb: Public Overrides ReadOnly Property MemberType As MemberTypes
    parameters: []
    return:
      type: System.Reflection.MemberTypes
  overridden: System.Reflection.MemberInfo.MemberType
  modifiers.csharp:
  - public
  - override
  - get
  modifiers.vb:
  - Public
  - Overrides
  - ReadOnly
- uid: System.Reflection.TypeInfo.Attributes
  commentId: P:System.Reflection.TypeInfo.Attributes
  id: Attributes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: Attributes
  nameWithType: TypeInfo.Attributes
  fullName: System.Reflection.TypeInfo.Attributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Attributes
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 26
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract TypeAttributes Attributes { get; }
    content.vb: Public MustOverride ReadOnly Property Attributes As TypeAttributes
    parameters: []
    return:
      type: System.Reflection.TypeAttributes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GetArrayRank
  commentId: M:System.Reflection.TypeInfo.GetArrayRank
  id: GetArrayRank
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetArrayRank()
  nameWithType: TypeInfo.GetArrayRank()
  fullName: System.Reflection.TypeInfo.GetArrayRank()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetArrayRank
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 27
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract int GetArrayRank()
    content.vb: Public MustOverride Function GetArrayRank As Integer
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.GetElementType
  commentId: M:System.Reflection.TypeInfo.GetElementType
  id: GetElementType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetElementType()
  nameWithType: TypeInfo.GetElementType()
  fullName: System.Reflection.TypeInfo.GetElementType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetElementType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 28
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type GetElementType()
    content.vb: Public MustOverride Function GetElementType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.GetGenericParameterConstraints
  commentId: M:System.Reflection.TypeInfo.GetGenericParameterConstraints
  id: GetGenericParameterConstraints
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetGenericParameterConstraints()
  nameWithType: TypeInfo.GetGenericParameterConstraints()
  fullName: System.Reflection.TypeInfo.GetGenericParameterConstraints()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericParameterConstraints
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 29
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type[] GetGenericParameterConstraints()
    content.vb: Public MustOverride Function GetGenericParameterConstraints As Type()
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  commentId: M:System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  id: IsSubclassOf(System.Type)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSubclassOf(Type)
  nameWithType: TypeInfo.IsSubclassOf(Type)
  fullName: System.Reflection.TypeInfo.IsSubclassOf(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSubclassOf
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 30
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsSubclassOf(Type c)
    content.vb: Public Overridable Function IsSubclassOf(c As Type) As Boolean
    parameters:
    - id: c
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)
  commentId: M:System.Reflection.TypeInfo.IsEquivalentTo(System.Type)
  id: IsEquivalentTo(System.Type)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsEquivalentTo(Type)
  nameWithType: TypeInfo.IsEquivalentTo(Type)
  fullName: System.Reflection.TypeInfo.IsEquivalentTo(System.Type)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEquivalentTo
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 31
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsEquivalentTo(Type other)
    content.vb: Public Overridable Function IsEquivalentTo(other As Type) As Boolean
    parameters:
    - id: other
      type: System.Type
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Reflection.TypeInfo.GenericTypeArguments
  commentId: P:System.Reflection.TypeInfo.GenericTypeArguments
  id: GenericTypeArguments
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericTypeArguments
  nameWithType: TypeInfo.GenericTypeArguments
  fullName: System.Reflection.TypeInfo.GenericTypeArguments
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericTypeArguments
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 32
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type[] GenericTypeArguments { get; }
    content.vb: Public MustOverride ReadOnly Property GenericTypeArguments As Type()
    parameters: []
    return:
      type: System.Type[]
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GetGenericTypeDefinition
  commentId: M:System.Reflection.TypeInfo.GetGenericTypeDefinition
  id: GetGenericTypeDefinition
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GetGenericTypeDefinition()
  nameWithType: TypeInfo.GetGenericTypeDefinition()
  fullName: System.Reflection.TypeInfo.GetGenericTypeDefinition()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGenericTypeDefinition
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 33
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type GetGenericTypeDefinition()
    content.vb: Public MustOverride Function GetGenericTypeDefinition As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.Assembly
  commentId: P:System.Reflection.TypeInfo.Assembly
  id: Assembly
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: Assembly
  nameWithType: TypeInfo.Assembly
  fullName: System.Reflection.TypeInfo.Assembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Assembly
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 34
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Assembly Assembly { get; }
    content.vb: Public MustOverride ReadOnly Property Assembly As Assembly
    parameters: []
    return:
      type: System.Reflection.Assembly
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.BaseType
  commentId: P:System.Reflection.TypeInfo.BaseType
  id: BaseType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: BaseType
  nameWithType: TypeInfo.BaseType
  fullName: System.Reflection.TypeInfo.BaseType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: BaseType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 35
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type BaseType { get; }
    content.vb: Public MustOverride ReadOnly Property BaseType As Type
    parameters: []
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.ContainsGenericParameters
  commentId: P:System.Reflection.TypeInfo.ContainsGenericParameters
  id: ContainsGenericParameters
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: ContainsGenericParameters
  nameWithType: TypeInfo.ContainsGenericParameters
  fullName: System.Reflection.TypeInfo.ContainsGenericParameters
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ContainsGenericParameters
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 36
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool ContainsGenericParameters { get; }
    content.vb: Public MustOverride ReadOnly Property ContainsGenericParameters As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.DeclaringMethod
  commentId: P:System.Reflection.TypeInfo.DeclaringMethod
  id: DeclaringMethod
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: DeclaringMethod
  nameWithType: TypeInfo.DeclaringMethod
  fullName: System.Reflection.TypeInfo.DeclaringMethod
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DeclaringMethod
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 38
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract MethodBase DeclaringMethod { get; }
    content.vb: Public MustOverride ReadOnly Property DeclaringMethod As MethodBase
    parameters: []
    return:
      type: System.Reflection.MethodBase
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.FullName
  commentId: P:System.Reflection.TypeInfo.FullName
  id: FullName
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: TypeInfo.FullName
  fullName: System.Reflection.TypeInfo.FullName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FullName
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 39
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string FullName { get; }
    content.vb: Public MustOverride ReadOnly Property FullName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GenericParameterAttributes
  commentId: P:System.Reflection.TypeInfo.GenericParameterAttributes
  id: GenericParameterAttributes
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericParameterAttributes
  nameWithType: TypeInfo.GenericParameterAttributes
  fullName: System.Reflection.TypeInfo.GenericParameterAttributes
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterAttributes
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 40
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract GenericParameterAttributes GenericParameterAttributes { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterAttributes As GenericParameterAttributes
    parameters: []
    return:
      type: System.Reflection.GenericParameterAttributes
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GenericParameterPosition
  commentId: P:System.Reflection.TypeInfo.GenericParameterPosition
  id: GenericParameterPosition
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GenericParameterPosition
  nameWithType: TypeInfo.GenericParameterPosition
  fullName: System.Reflection.TypeInfo.GenericParameterPosition
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GenericParameterPosition
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 41
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract int GenericParameterPosition { get; }
    content.vb: Public MustOverride ReadOnly Property GenericParameterPosition As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.GUID
  commentId: P:System.Reflection.TypeInfo.GUID
  id: GUID
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: GUID
  nameWithType: TypeInfo.GUID
  fullName: System.Reflection.TypeInfo.GUID
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GUID
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 42
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Guid GUID { get; }
    content.vb: Public MustOverride ReadOnly Property GUID As Guid
    parameters: []
    return:
      type: System.Guid
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.HasElementType
  commentId: P:System.Reflection.TypeInfo.HasElementType
  id: HasElementType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: HasElementType
  nameWithType: TypeInfo.HasElementType
  fullName: System.Reflection.TypeInfo.HasElementType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasElementType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 43
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool HasElementType { get; }
    content.vb: Public ReadOnly Property HasElementType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAbstract
  commentId: P:System.Reflection.TypeInfo.IsAbstract
  id: IsAbstract
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAbstract
  nameWithType: TypeInfo.IsAbstract
  fullName: System.Reflection.TypeInfo.IsAbstract
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAbstract
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 44
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAbstract { get; }
    content.vb: Public ReadOnly Property IsAbstract As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAnsiClass
  commentId: P:System.Reflection.TypeInfo.IsAnsiClass
  id: IsAnsiClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAnsiClass
  nameWithType: TypeInfo.IsAnsiClass
  fullName: System.Reflection.TypeInfo.IsAnsiClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAnsiClass
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 45
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAnsiClass { get; }
    content.vb: Public ReadOnly Property IsAnsiClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsArray
  commentId: P:System.Reflection.TypeInfo.IsArray
  id: IsArray
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsArray
  nameWithType: TypeInfo.IsArray
  fullName: System.Reflection.TypeInfo.IsArray
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsArray
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 46
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsArray { get; }
    content.vb: Public ReadOnly Property IsArray As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAutoClass
  commentId: P:System.Reflection.TypeInfo.IsAutoClass
  id: IsAutoClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAutoClass
  nameWithType: TypeInfo.IsAutoClass
  fullName: System.Reflection.TypeInfo.IsAutoClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAutoClass
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 47
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAutoClass { get; }
    content.vb: Public ReadOnly Property IsAutoClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsAutoLayout
  commentId: P:System.Reflection.TypeInfo.IsAutoLayout
  id: IsAutoLayout
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsAutoLayout
  nameWithType: TypeInfo.IsAutoLayout
  fullName: System.Reflection.TypeInfo.IsAutoLayout
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsAutoLayout
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 48
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsAutoLayout { get; }
    content.vb: Public ReadOnly Property IsAutoLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsByRef
  commentId: P:System.Reflection.TypeInfo.IsByRef
  id: IsByRef
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsByRef
  nameWithType: TypeInfo.IsByRef
  fullName: System.Reflection.TypeInfo.IsByRef
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsByRef
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 49
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsByRef { get; }
    content.vb: Public ReadOnly Property IsByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsClass
  commentId: P:System.Reflection.TypeInfo.IsClass
  id: IsClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsClass
  nameWithType: TypeInfo.IsClass
  fullName: System.Reflection.TypeInfo.IsClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsClass
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 50
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsClass { get; }
    content.vb: Public ReadOnly Property IsClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsCOMObject
  commentId: P:System.Reflection.TypeInfo.IsCOMObject
  id: IsCOMObject
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsCOMObject
  nameWithType: TypeInfo.IsCOMObject
  fullName: System.Reflection.TypeInfo.IsCOMObject
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsCOMObject
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 51
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsCOMObject { get; }
    content.vb: Public Overridable ReadOnly Property IsCOMObject As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsEnum
  commentId: P:System.Reflection.TypeInfo.IsEnum
  id: IsEnum
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsEnum
  nameWithType: TypeInfo.IsEnum
  fullName: System.Reflection.TypeInfo.IsEnum
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsEnum
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 52
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsEnum { get; }
    content.vb: Public MustOverride ReadOnly Property IsEnum As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsExplicitLayout
  commentId: P:System.Reflection.TypeInfo.IsExplicitLayout
  id: IsExplicitLayout
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsExplicitLayout
  nameWithType: TypeInfo.IsExplicitLayout
  fullName: System.Reflection.TypeInfo.IsExplicitLayout
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsExplicitLayout
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 53
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsExplicitLayout { get; }
    content.vb: Public ReadOnly Property IsExplicitLayout As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsGenericParameter
  commentId: P:System.Reflection.TypeInfo.IsGenericParameter
  id: IsGenericParameter
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsGenericParameter
  nameWithType: TypeInfo.IsGenericParameter
  fullName: System.Reflection.TypeInfo.IsGenericParameter
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericParameter
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 54
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericParameter { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericParameter As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsGenericType
  commentId: P:System.Reflection.TypeInfo.IsGenericType
  id: IsGenericType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsGenericType
  nameWithType: TypeInfo.IsGenericType
  fullName: System.Reflection.TypeInfo.IsGenericType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 55
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericType { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsGenericTypeDefinition
  commentId: P:System.Reflection.TypeInfo.IsGenericTypeDefinition
  id: IsGenericTypeDefinition
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsGenericTypeDefinition
  nameWithType: TypeInfo.IsGenericTypeDefinition
  fullName: System.Reflection.TypeInfo.IsGenericTypeDefinition
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsGenericTypeDefinition
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 56
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsGenericTypeDefinition { get; }
    content.vb: Public MustOverride ReadOnly Property IsGenericTypeDefinition As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsImport
  commentId: P:System.Reflection.TypeInfo.IsImport
  id: IsImport
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsImport
  nameWithType: TypeInfo.IsImport
  fullName: System.Reflection.TypeInfo.IsImport
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsImport
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 57
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsImport { get; }
    content.vb: Public ReadOnly Property IsImport As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsInterface
  commentId: P:System.Reflection.TypeInfo.IsInterface
  id: IsInterface
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsInterface
  nameWithType: TypeInfo.IsInterface
  fullName: System.Reflection.TypeInfo.IsInterface
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsInterface
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 58
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsInterface { get; }
    content.vb: Public ReadOnly Property IsInterface As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsLayoutSequential
  commentId: P:System.Reflection.TypeInfo.IsLayoutSequential
  id: IsLayoutSequential
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsLayoutSequential
  nameWithType: TypeInfo.IsLayoutSequential
  fullName: System.Reflection.TypeInfo.IsLayoutSequential
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsLayoutSequential
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 59
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsLayoutSequential { get; }
    content.vb: Public ReadOnly Property IsLayoutSequential As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsMarshalByRef
  commentId: P:System.Reflection.TypeInfo.IsMarshalByRef
  id: IsMarshalByRef
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsMarshalByRef
  nameWithType: TypeInfo.IsMarshalByRef
  fullName: System.Reflection.TypeInfo.IsMarshalByRef
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsMarshalByRef
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 60
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsMarshalByRef { get; }
    content.vb: Public ReadOnly Property IsMarshalByRef As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNested
  commentId: P:System.Reflection.TypeInfo.IsNested
  id: IsNested
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNested
  nameWithType: TypeInfo.IsNested
  fullName: System.Reflection.TypeInfo.IsNested
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNested
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 61
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNested { get; }
    content.vb: Public ReadOnly Property IsNested As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedAssembly
  commentId: P:System.Reflection.TypeInfo.IsNestedAssembly
  id: IsNestedAssembly
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedAssembly
  nameWithType: TypeInfo.IsNestedAssembly
  fullName: System.Reflection.TypeInfo.IsNestedAssembly
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedAssembly
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 62
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedAssembly { get; }
    content.vb: Public ReadOnly Property IsNestedAssembly As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedFamANDAssem
  commentId: P:System.Reflection.TypeInfo.IsNestedFamANDAssem
  id: IsNestedFamANDAssem
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedFamANDAssem
  nameWithType: TypeInfo.IsNestedFamANDAssem
  fullName: System.Reflection.TypeInfo.IsNestedFamANDAssem
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedFamANDAssem
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 63
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamANDAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamANDAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedFamily
  commentId: P:System.Reflection.TypeInfo.IsNestedFamily
  id: IsNestedFamily
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedFamily
  nameWithType: TypeInfo.IsNestedFamily
  fullName: System.Reflection.TypeInfo.IsNestedFamily
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedFamily
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 64
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamily { get; }
    content.vb: Public ReadOnly Property IsNestedFamily As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedFamORAssem
  commentId: P:System.Reflection.TypeInfo.IsNestedFamORAssem
  id: IsNestedFamORAssem
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedFamORAssem
  nameWithType: TypeInfo.IsNestedFamORAssem
  fullName: System.Reflection.TypeInfo.IsNestedFamORAssem
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedFamORAssem
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 65
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedFamORAssem { get; }
    content.vb: Public ReadOnly Property IsNestedFamORAssem As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedPrivate
  commentId: P:System.Reflection.TypeInfo.IsNestedPrivate
  id: IsNestedPrivate
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedPrivate
  nameWithType: TypeInfo.IsNestedPrivate
  fullName: System.Reflection.TypeInfo.IsNestedPrivate
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedPrivate
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 66
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedPrivate { get; }
    content.vb: Public ReadOnly Property IsNestedPrivate As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNestedPublic
  commentId: P:System.Reflection.TypeInfo.IsNestedPublic
  id: IsNestedPublic
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNestedPublic
  nameWithType: TypeInfo.IsNestedPublic
  fullName: System.Reflection.TypeInfo.IsNestedPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNestedPublic
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 67
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNestedPublic { get; }
    content.vb: Public ReadOnly Property IsNestedPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsNotPublic
  commentId: P:System.Reflection.TypeInfo.IsNotPublic
  id: IsNotPublic
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsNotPublic
  nameWithType: TypeInfo.IsNotPublic
  fullName: System.Reflection.TypeInfo.IsNotPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsNotPublic
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 68
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsNotPublic { get; }
    content.vb: Public ReadOnly Property IsNotPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsPointer
  commentId: P:System.Reflection.TypeInfo.IsPointer
  id: IsPointer
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsPointer
  nameWithType: TypeInfo.IsPointer
  fullName: System.Reflection.TypeInfo.IsPointer
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPointer
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 69
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsPointer { get; }
    content.vb: Public ReadOnly Property IsPointer As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsPrimitive
  commentId: P:System.Reflection.TypeInfo.IsPrimitive
  id: IsPrimitive
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsPrimitive
  nameWithType: TypeInfo.IsPrimitive
  fullName: System.Reflection.TypeInfo.IsPrimitive
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPrimitive
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 70
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsPrimitive { get; }
    content.vb: Public Overridable ReadOnly Property IsPrimitive As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsPublic
  commentId: P:System.Reflection.TypeInfo.IsPublic
  id: IsPublic
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsPublic
  nameWithType: TypeInfo.IsPublic
  fullName: System.Reflection.TypeInfo.IsPublic
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsPublic
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 71
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsPublic { get; }
    content.vb: Public ReadOnly Property IsPublic As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsSealed
  commentId: P:System.Reflection.TypeInfo.IsSealed
  id: IsSealed
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSealed
  nameWithType: TypeInfo.IsSealed
  fullName: System.Reflection.TypeInfo.IsSealed
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSealed
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 72
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsSealed { get; }
    content.vb: Public ReadOnly Property IsSealed As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsVisible
  commentId: P:System.Reflection.TypeInfo.IsVisible
  id: IsVisible
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsVisible
  nameWithType: TypeInfo.IsVisible
  fullName: System.Reflection.TypeInfo.IsVisible
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsVisible
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 73
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsVisible { get; }
    content.vb: Public ReadOnly Property IsVisible As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsSerializable
  commentId: P:System.Reflection.TypeInfo.IsSerializable
  id: IsSerializable
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSerializable
  nameWithType: TypeInfo.IsSerializable
  fullName: System.Reflection.TypeInfo.IsSerializable
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSerializable
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 74
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract bool IsSerializable { get; }
    content.vb: Public MustOverride ReadOnly Property IsSerializable As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsSpecialName
  commentId: P:System.Reflection.TypeInfo.IsSpecialName
  id: IsSpecialName
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsSpecialName
  nameWithType: TypeInfo.IsSpecialName
  fullName: System.Reflection.TypeInfo.IsSpecialName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsSpecialName
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 75
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsSpecialName { get; }
    content.vb: Public ReadOnly Property IsSpecialName As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsUnicodeClass
  commentId: P:System.Reflection.TypeInfo.IsUnicodeClass
  id: IsUnicodeClass
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsUnicodeClass
  nameWithType: TypeInfo.IsUnicodeClass
  fullName: System.Reflection.TypeInfo.IsUnicodeClass
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsUnicodeClass
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 76
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public bool IsUnicodeClass { get; }
    content.vb: Public ReadOnly Property IsUnicodeClass As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Reflection.TypeInfo.IsValueType
  commentId: P:System.Reflection.TypeInfo.IsValueType
  id: IsValueType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: IsValueType
  nameWithType: TypeInfo.IsValueType
  fullName: System.Reflection.TypeInfo.IsValueType
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsValueType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 77
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public virtual bool IsValueType { get; }
    content.vb: Public Overridable ReadOnly Property IsValueType As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Reflection.TypeInfo.Namespace
  commentId: P:System.Reflection.TypeInfo.Namespace
  id: Namespace
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: TypeInfo.Namespace
  fullName: System.Reflection.TypeInfo.Namespace
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 78
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string Namespace { get; }
    content.vb: Public MustOverride ReadOnly Property Namespace As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.AssemblyQualifiedName
  commentId: P:System.Reflection.TypeInfo.AssemblyQualifiedName
  id: AssemblyQualifiedName
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: AssemblyQualifiedName
  nameWithType: TypeInfo.AssemblyQualifiedName
  fullName: System.Reflection.TypeInfo.AssemblyQualifiedName
  type: Property
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AssemblyQualifiedName
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 79
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract string AssemblyQualifiedName { get; }
    content.vb: Public MustOverride ReadOnly Property AssemblyQualifiedName As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Reflection.TypeInfo.MakeArrayType
  commentId: M:System.Reflection.TypeInfo.MakeArrayType
  id: MakeArrayType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeArrayType()
  nameWithType: TypeInfo.MakeArrayType()
  fullName: System.Reflection.TypeInfo.MakeArrayType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 81
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeArrayType()
    content.vb: Public MustOverride Function MakeArrayType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  commentId: M:System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  id: MakeArrayType(System.Int32)
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeArrayType(Int32)
  nameWithType: TypeInfo.MakeArrayType(Int32)
  fullName: System.Reflection.TypeInfo.MakeArrayType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeArrayType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 82
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeArrayType(int rank)
    content.vb: Public MustOverride Function MakeArrayType(rank As Integer) As Type
    parameters:
    - id: rank
      type: System.Int32
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.MakeByRefType
  commentId: M:System.Reflection.TypeInfo.MakeByRefType
  id: MakeByRefType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeByRefType()
  nameWithType: TypeInfo.MakeByRefType()
  fullName: System.Reflection.TypeInfo.MakeByRefType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeByRefType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 83
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeByRefType()
    content.vb: Public MustOverride Function MakeByRefType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  commentId: M:System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  id: MakeGenericType(System.Type[])
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakeGenericType(Type[])
  nameWithType: TypeInfo.MakeGenericType(Type[])
  fullName: System.Reflection.TypeInfo.MakeGenericType(System.Type[])
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeGenericType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 84
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakeGenericType(params Type[] typeArguments)
    content.vb: Public MustOverride Function MakeGenericType(ParamArray typeArguments As Type()) As Type
    parameters:
    - id: typeArguments
      type: System.Type[]
    return:
      type: System.Type
  nameWithType.vb: TypeInfo.MakeGenericType(Type())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Reflection.TypeInfo.MakeGenericType(System.Type())
  name.vb: MakeGenericType(Type())
- uid: System.Reflection.TypeInfo.MakePointerType
  commentId: M:System.Reflection.TypeInfo.MakePointerType
  id: MakePointerType
  parent: System.Reflection.TypeInfo
  langs:
  - csharp
  - vb
  name: MakePointerType()
  nameWithType: TypeInfo.MakePointerType()
  fullName: System.Reflection.TypeInfo.MakePointerType()
  type: Method
  source:
    remote:
      path: src/System.Reflection/ref/System.Reflection.Manual.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakePointerType
    path: src/System.Reflection/ref/System.Reflection.Manual.cs
    startLine: 85
  assemblies:
  - System.Reflection
  namespace: System.Reflection
  syntax:
    content: public abstract Type MakePointerType()
    content.vb: Public MustOverride Function MakePointerType As Type
    return:
      type: System.Type
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System.Reflection
  commentId: N:System.Reflection
  isExternal: false
  name: System.Reflection
  nameWithType: System.Reflection
  fullName: System.Reflection
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Reflection.MemberInfo
  commentId: T:System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: false
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Reflection.ICustomAttributeProvider
  commentId: T:System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Reflection.IReflectableType
  commentId: T:System.Reflection.IReflectableType
  parent: System.Reflection
  isExternal: false
  name: IReflectableType
  nameWithType: IReflectableType
  fullName: System.Reflection.IReflectableType
- uid: System.Reflection.MemberInfo.CustomAttributes
  commentId: P:System.Reflection.MemberInfo.CustomAttributes
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: CustomAttributes
  nameWithType: MemberInfo.CustomAttributes
  fullName: System.Reflection.MemberInfo.CustomAttributes
- uid: System.Reflection.MemberInfo.DeclaringType
  commentId: P:System.Reflection.MemberInfo.DeclaringType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: DeclaringType
  nameWithType: MemberInfo.DeclaringType
  fullName: System.Reflection.MemberInfo.DeclaringType
- uid: System.Reflection.MemberInfo.MetadataToken
  commentId: P:System.Reflection.MemberInfo.MetadataToken
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MetadataToken
  nameWithType: MemberInfo.MetadataToken
  fullName: System.Reflection.MemberInfo.MetadataToken
- uid: System.Reflection.MemberInfo.Module
  commentId: P:System.Reflection.MemberInfo.Module
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Module
  nameWithType: MemberInfo.Module
  fullName: System.Reflection.MemberInfo.Module
- uid: System.Reflection.MemberInfo.Name
  commentId: P:System.Reflection.MemberInfo.Name
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: Name
  nameWithType: MemberInfo.Name
  fullName: System.Reflection.MemberInfo.Name
- uid: System.Reflection.MemberInfo.Equals(System.Object)
  commentId: M:System.Reflection.MemberInfo.Equals(System.Object)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: Equals(Object)
  nameWithType: MemberInfo.Equals(Object)
  fullName: System.Reflection.MemberInfo.Equals(System.Object)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.Equals(System.Object)
    name: Equals
    nameWithType: MemberInfo.Equals
    fullName: System.Reflection.MemberInfo.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.GetHashCode
  commentId: M:System.Reflection.MemberInfo.GetHashCode
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: GetHashCode()
  nameWithType: MemberInfo.GetHashCode()
  fullName: System.Reflection.MemberInfo.GetHashCode()
  spec.csharp:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.GetHashCode
    name: GetHashCode
    nameWithType: MemberInfo.GetHashCode
    fullName: System.Reflection.MemberInfo.GetHashCode
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.GetCustomAttributes(Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
    name: ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(System.Type, System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.GetCustomAttributes(Type, Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
    name: ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#GetCustomAttributes(System.Type,System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.GetCustomAttributes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  commentId: M:System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
  parent: System.Reflection.MemberInfo
  isExternal: true
  name: ICustomAttributeProvider.IsDefined(Type, Boolean)
  nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined(Type, Boolean)
  fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(System.Type, System.Boolean)
  nameWithType.vb: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  name.vb: System.Reflection.ICustomAttributeProvider.IsDefined(Type, Boolean)
  spec.csharp:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
    name: ICustomAttributeProvider.IsDefined
    nameWithType: MemberInfo.ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.MemberInfo.System#Reflection#ICustomAttributeProvider#IsDefined(System.Type,System.Boolean)
    name: System.Reflection.ICustomAttributeProvider.IsDefined
    nameWithType: MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
    fullName: System.Reflection.MemberInfo.System.Reflection.ICustomAttributeProvider.IsDefined
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.ConstructorInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ConstructorInfo>
  nameWithType: IEnumerable<ConstructorInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.ConstructorInfo>
  nameWithType.vb: IEnumerable(Of ConstructorInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.ConstructorInfo)
  name.vb: IEnumerable(Of ConstructorInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.EventInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<EventInfo>
  nameWithType: IEnumerable<EventInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.EventInfo>
  nameWithType.vb: IEnumerable(Of EventInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.EventInfo)
  name.vb: IEnumerable(Of EventInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.FieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<FieldInfo>
  nameWithType: IEnumerable<FieldInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.FieldInfo>
  nameWithType.vb: IEnumerable(Of FieldInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.FieldInfo)
  name.vb: IEnumerable(Of FieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MemberInfo>
  nameWithType: IEnumerable<MemberInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo>
  nameWithType.vb: IEnumerable(Of MemberInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MemberInfo)
  name.vb: IEnumerable(Of MemberInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.MethodInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MethodInfo>
  nameWithType: IEnumerable<MethodInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.MethodInfo>
  nameWithType.vb: IEnumerable(Of MethodInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.MethodInfo)
  name.vb: IEnumerable(Of MethodInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TypeInfo>
  nameWithType: IEnumerable<TypeInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.TypeInfo>
  nameWithType.vb: IEnumerable(Of TypeInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.TypeInfo)
  name.vb: IEnumerable(Of TypeInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.TypeInfo
    name: TypeInfo
    nameWithType: TypeInfo
    fullName: System.Reflection.TypeInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  commentId: T:System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<PropertyInfo>
  nameWithType: IEnumerable<PropertyInfo>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo>
  nameWithType.vb: IEnumerable(Of PropertyInfo)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Reflection.PropertyInfo)
  name.vb: IEnumerable(Of PropertyInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Reflection.TypeFilter
  commentId: T:System.Reflection.TypeFilter
  parent: System.Reflection
  isExternal: false
  name: TypeFilter
  nameWithType: TypeFilter
  fullName: System.Reflection.TypeFilter
- uid: System.Type[]
  name: Type[]
  nameWithType: Type[]
  fullName: System.Type[]
  nameWithType.vb: Type()
  fullname.vb: System.Type()
  name.vb: Type()
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.MemberTypes
  commentId: T:System.Reflection.MemberTypes
  parent: System.Reflection
  isExternal: false
  name: MemberTypes
  nameWithType: MemberTypes
  fullName: System.Reflection.MemberTypes
- uid: System.Reflection.BindingFlags
  commentId: T:System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.MemberFilter
  commentId: T:System.Reflection.MemberFilter
  parent: System.Reflection
  isExternal: false
  name: MemberFilter
  nameWithType: MemberFilter
  fullName: System.Reflection.MemberFilter
- uid: System.Reflection.MemberInfo[]
  name: MemberInfo[]
  nameWithType: MemberInfo[]
  fullName: System.Reflection.MemberInfo[]
  nameWithType.vb: MemberInfo()
  fullname.vb: System.Reflection.MemberInfo()
  name.vb: MemberInfo()
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: System.Reflection.MemberInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.ConstructorInfo
  commentId: T:System.Reflection.ConstructorInfo
  parent: System.Reflection
  isExternal: false
  name: ConstructorInfo
  nameWithType: ConstructorInfo
  fullName: System.Reflection.ConstructorInfo
- uid: System.Reflection.ConstructorInfo[]
  name: ConstructorInfo[]
  nameWithType: ConstructorInfo[]
  fullName: System.Reflection.ConstructorInfo[]
  nameWithType.vb: ConstructorInfo()
  fullname.vb: System.Reflection.ConstructorInfo()
  name.vb: ConstructorInfo()
  spec.csharp:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ConstructorInfo
    name: ConstructorInfo
    nameWithType: ConstructorInfo
    fullName: System.Reflection.ConstructorInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.EventInfo
  commentId: T:System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: false
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Reflection.FieldInfo
  commentId: T:System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: false
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.MethodInfo
  commentId: T:System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: false
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.TypeInfo
  commentId: T:System.Reflection.TypeInfo
  parent: System.Reflection
  isExternal: false
  name: TypeInfo
  nameWithType: TypeInfo
  fullName: System.Reflection.TypeInfo
- uid: System.Reflection.PropertyInfo
  commentId: T:System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: false
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Reflection.EventInfo[]
  name: EventInfo[]
  nameWithType: EventInfo[]
  fullName: System.Reflection.EventInfo[]
  nameWithType.vb: EventInfo()
  fullname.vb: System.Reflection.EventInfo()
  name.vb: EventInfo()
  spec.csharp:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.EventInfo
    name: EventInfo
    nameWithType: EventInfo
    fullName: System.Reflection.EventInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.FieldInfo[]
  name: FieldInfo[]
  nameWithType: FieldInfo[]
  fullName: System.Reflection.FieldInfo[]
  nameWithType.vb: FieldInfo()
  fullname.vb: System.Reflection.FieldInfo()
  name.vb: FieldInfo()
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: System.Reflection.FieldInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Reflection.ParameterModifier[]
  name: ParameterModifier[]
  nameWithType: ParameterModifier[]
  fullName: System.Reflection.ParameterModifier[]
  nameWithType.vb: ParameterModifier()
  fullname.vb: System.Reflection.ParameterModifier()
  name.vb: ParameterModifier()
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: System.Reflection.ParameterModifier
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.MethodInfo[]
  name: MethodInfo[]
  nameWithType: MethodInfo[]
  fullName: System.Reflection.MethodInfo[]
  nameWithType.vb: MethodInfo()
  fullname.vb: System.Reflection.MethodInfo()
  name.vb: MethodInfo()
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: System.Reflection.MethodInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.PropertyInfo[]
  name: PropertyInfo[]
  nameWithType: PropertyInfo[]
  fullName: System.Reflection.PropertyInfo[]
  nameWithType.vb: PropertyInfo()
  fullname.vb: System.Reflection.PropertyInfo()
  name.vb: PropertyInfo()
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: System.Reflection.PropertyInfo
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Reflection.IReflectableType.GetTypeInfo
  commentId: M:System.Reflection.IReflectableType.GetTypeInfo
  parent: System.Reflection.IReflectableType
  isExternal: false
  name: GetTypeInfo()
  nameWithType: IReflectableType.GetTypeInfo()
  fullName: System.Reflection.IReflectableType.GetTypeInfo()
  spec.csharp:
  - uid: System.Reflection.IReflectableType.GetTypeInfo
    name: GetTypeInfo
    nameWithType: IReflectableType.GetTypeInfo
    fullName: System.Reflection.IReflectableType.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Reflection.IReflectableType.GetTypeInfo
    name: GetTypeInfo
    nameWithType: IReflectableType.GetTypeInfo
    fullName: System.Reflection.IReflectableType.GetTypeInfo
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Type}
  commentId: T:System.Collections.Generic.IEnumerable{System.Type}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Type>
  nameWithType: IEnumerable<Type>
  fullName: System.Collections.Generic.IEnumerable<System.Type>
  nameWithType.vb: IEnumerable(Of Type)
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Type)
  name.vb: IEnumerable(Of Type)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: System.Type
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Runtime.InteropServices.StructLayoutAttribute
  commentId: T:System.Runtime.InteropServices.StructLayoutAttribute
  parent: System.Runtime.InteropServices
  isExternal: false
  name: StructLayoutAttribute
  nameWithType: StructLayoutAttribute
  fullName: System.Runtime.InteropServices.StructLayoutAttribute
- uid: System.Runtime.InteropServices
  commentId: N:System.Runtime.InteropServices
  isExternal: false
  name: System.Runtime.InteropServices
  nameWithType: System.Runtime.InteropServices
  fullName: System.Runtime.InteropServices
- uid: System.Reflection.MemberInfo.MemberType
  commentId: P:System.Reflection.MemberInfo.MemberType
  parent: System.Reflection.MemberInfo
  isExternal: false
  name: MemberType
  nameWithType: MemberInfo.MemberType
  fullName: System.Reflection.MemberInfo.MemberType
- uid: System.Reflection.TypeAttributes
  commentId: T:System.Reflection.TypeAttributes
  parent: System.Reflection
  isExternal: false
  name: TypeAttributes
  nameWithType: TypeAttributes
  fullName: System.Reflection.TypeAttributes
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Reflection.Assembly
  commentId: T:System.Reflection.Assembly
  parent: System.Reflection
  isExternal: false
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Reflection.MethodBase
  commentId: T:System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: false
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.GenericParameterAttributes
  commentId: T:System.Reflection.GenericParameterAttributes
  parent: System.Reflection
  isExternal: false
  name: GenericParameterAttributes
  nameWithType: GenericParameterAttributes
  fullName: System.Reflection.GenericParameterAttributes
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
