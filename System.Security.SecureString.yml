### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  id: SecureString
  parent: System.Security
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  - vb
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SecureString
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 9
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.</p>\n"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
    content.vb: >-
      Public NotInheritable Class SecureString
          Implements IDisposable
  seealso:
  - linkId: System.Runtime.InteropServices.ComVisibleAttribute
    commentId: T:System.Runtime.InteropServices.ComVisibleAttribute
  - linkId: System.Runtime.InteropServices.Marshal
    commentId: T:System.Runtime.InteropServices.Marshal
  - linkId: System.Runtime.ConstrainedExecution.CriticalFinalizerObject
    commentId: T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject
  - linkId: System.IDisposable
    commentId: T:System.IDisposable
  see:
  - linkId: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - linkId: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - linkId: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - linkId: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - linkId: System.Security.SecureString
    commentId: T:System.Security.SecureString
  - linkId: System.Security.SecureString
    commentId: T:System.Security.SecureString
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Security.SecureString.#ctor
  commentId: M:System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 16
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public SecureString()
    content.vb: Public Sub New
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this instance.</p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This operation is not supported on this platform.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  commentId: M:System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: SecureString(Char*, Int32)
  nameWithType: SecureString.SecureString(Char*, Int32)
  fullName: System.Security.SecureString.SecureString(System.Char*, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 21
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> class from a subarray of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects. </p>\n<p>This constructor is not CLS-compliant. The CLS-compliant alternative is <xref href=\"System.Security.SecureString.#ctor\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public SecureString(char *value, int length)
    content.vb: >-
      <CLSCompliant(False)>

      Public Sub New(value As Char *, length As Integer)
    parameters:
    - id: value
      type: System.Char*
      description: "\n<p>A pointer to an array of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The number of elements of <em>value</em> to include in the new instance.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>length</em> is less than zero or greater than 65,536.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>This operation is not supported on this platform.</p>\n"
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Length
  commentId: P:System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Length
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 40
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Gets the number of characters in the current secure string.</p>\n"
  syntax:
    content: public int Length { get; }
    content.vb: Public ReadOnly Property Length As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of <xref href=\"System.Char\" data-throw-if-not-resolved=\"false\"></xref> objects in this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Security.SecureString.AppendChar(System.Char)
  commentId: M:System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(System.Char)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: AppendChar
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 52
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Appends a character to the end of the current secure string.</p>\n"
  syntax:
    content: public void AppendChar(char c)
    content.vb: Public Sub AppendChar(c As Char)
    parameters:
    - id: c
      type: System.Char
      description: "\n<p>A character to append to this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Clear
  commentId: M:System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Clear
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 63
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Deletes the value of the current secure string.</p>\n"
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  seealso:
  - linkId: System.Security.SecureString.Length
    commentId: P:System.Security.SecureString.Length
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Copy
  commentId: M:System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Copy
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 74
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Creates a copy of the current secure string.</p>\n"
  syntax:
    content: public SecureString Copy()
    content.vb: Public Function Copy As SecureString
    return:
      type: System.Security.SecureString
      description: "\n<p>A duplicate of this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  seealso:
  - linkId: System.Security.SecureString.MakeReadOnly
    commentId: M:System.Security.SecureString.MakeReadOnly
  - linkId: System.Security.SecureString.IsReadOnly
    commentId: M:System.Security.SecureString.IsReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.Dispose
  commentId: M:System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 83
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Releases all resources used by the current <xref href=\"System.Security.SecureString\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  commentId: M:System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: InsertAt(Int32, Char)
  nameWithType: SecureString.InsertAt(Int32, Char)
  fullName: System.Security.SecureString.InsertAt(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: InsertAt
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 91
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Inserts a character in this secure string at the specified index position. </p>\n"
  syntax:
    content: public void InsertAt(int index, char c)
    content.vb: Public Sub InsertAt(index As Integer, c As Char)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index position where parameter <em>c</em> is inserted.</p>\n"
    - id: c
      type: System.Char
      description: "\n<p>The character to insert.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero, or greater than the length of this secure string.</p>\n<p>-or-</p>\n<p>Performing this operation would make the length of this secure string greater than 65,536 characters.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.IsReadOnly
  commentId: M:System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsReadOnly
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 107
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Indicates whether this secure string is marked read-only.</p>\n"
  syntax:
    content: public bool IsReadOnly()
    content.vb: Public Function IsReadOnly As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this secure string is marked read-only; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  seealso:
  - linkId: System.Security.SecureString.MakeReadOnly
    commentId: M:System.Security.SecureString.MakeReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.MakeReadOnly
  commentId: M:System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: MakeReadOnly
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 116
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Makes the text value of this secure string read-only.   </p>\n"
  syntax:
    content: public void MakeReadOnly()
    content.vb: Public Sub MakeReadOnly
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  seealso:
  - linkId: System.Security.SecureString.IsReadOnly
    commentId: M:System.Security.SecureString.IsReadOnly
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  commentId: M:System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RemoveAt
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 125
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Removes the character at the specified index position from this secure string.</p>\n"
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index position of a character in this secure string.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  commentId: M:System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  - vb
  name: SetAt(Int32, Char)
  nameWithType: SecureString.SetAt(Int32, Char)
  fullName: System.Security.SecureString.SetAt(System.Int32, System.Char)
  type: Method
  source:
    remote:
      path: src/System.Security.SecureString/src/System/Security/SecureString.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: SetAt
    path: src/System.Security.SecureString/src/System/Security/SecureString.cs
    startLine: 141
  assemblies:
  - System.Security.SecureString
  namespace: System.Security
  summary: "\n<p>Replaces the existing character at the specified index position with another character.</p>\n"
  syntax:
    content: public void SetAt(int index, char c)
    content.vb: Public Sub SetAt(index As Integer, c As Char)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index position of an existing character in this secure string</p>\n"
    - id: c
      type: System.Char
      description: "\n<p>A character that replaces the existing character.</p>\n"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "\n<p>This secure string has already been disposed.</p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>This secure string is read-only.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero, or greater than or equal to the length of this secure string.</p>\n"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "\n<p>An error occurred while protecting or unprotecting the value of this secure string.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: System.Security
  commentId: N:System.Security
  isExternal: false
  name: System.Security
  nameWithType: System.Security
  fullName: System.Security
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Char*
  name: Char*
  nameWithType: Char*
  fullName: System.Char*
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '*'
    nameWithType: '*'
    fullName: '*'
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString
  commentId: T:System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptographicException
  commentId: T:System.Security.Cryptography.CryptographicException
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  commentId: T:System.ObjectDisposedException
  isExternal: false
  name: ObjectDisposedException
  nameWithType: ObjectDisposedException
  fullName: System.ObjectDisposedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
