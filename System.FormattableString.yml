### YamlMime:ManagedReference
items:
- uid: System.FormattableString
  commentId: T:System.FormattableString
  id: FormattableString
  parent: System
  children:
  - System.FormattableString.#ctor
  - System.FormattableString.ArgumentCount
  - System.FormattableString.Format
  - System.FormattableString.GetArgument(System.Int32)
  - System.FormattableString.GetArguments
  - System.FormattableString.Invariant(System.FormattableString)
  - System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.FormattableString.ToString
  - System.FormattableString.ToString(System.IFormatProvider)
  langs:
  - csharp
  - vb
  name: FormattableString
  nameWithType: FormattableString
  fullName: System.FormattableString
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FormattableString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 19
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents a composite format string, along with the arguments to be formatted. </p>\n"
  syntax:
    content: 'public abstract class FormattableString : IFormattable'
    content.vb: >-
      Public MustInherit Class FormattableString
          Implements IFormattable
  inheritance:
  - System.Object
  implements:
  - System.IFormattable
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.FormattableString.#ctor
  commentId: M:System.FormattableString.#ctor
  id: '#ctor'
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: FormattableString()
  nameWithType: FormattableString.FormattableString()
  fullName: System.FormattableString.FormattableString()
  type: Constructor
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 870
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Instantiates a new instance of the <xref href=\"System.FormattableString\" data-throw-if-not-resolved=\"false\"></xref> class. </p>\n"
  syntax:
    content: protected FormattableString()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.FormattableString.ArgumentCount
  commentId: P:System.FormattableString.ArgumentCount
  id: ArgumentCount
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: ArgumentCount
  nameWithType: FormattableString.ArgumentCount
  fullName: System.FormattableString.ArgumentCount
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArgumentCount
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 35
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the number of arguments to be formatted. </p>\n"
  syntax:
    content: public abstract int ArgumentCount { get; }
    content.vb: Public MustOverride ReadOnly Property ArgumentCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of arguments to be formatted. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.FormattableString.Format
  commentId: P:System.FormattableString.Format
  id: Format
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: Format
  nameWithType: FormattableString.Format
  fullName: System.FormattableString.Format
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Format
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 24
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the composite format string. </p>\n"
  syntax:
    content: public abstract string Format { get; }
    content.vb: Public MustOverride ReadOnly Property Format As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The composite format string. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.FormattableString.GetArgument(System.Int32)
  commentId: M:System.FormattableString.GetArgument(System.Int32)
  id: GetArgument(System.Int32)
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: GetArgument(Int32)
  nameWithType: FormattableString.GetArgument(Int32)
  fullName: System.FormattableString.GetArgument(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArgument
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 40
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the argument at the specified index position. </p>\n"
  syntax:
    content: public abstract object GetArgument(int index)
    content.vb: Public MustOverride Function GetArgument(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The index of the argument. Its value can range from zero to one less than the value of <xref href=\"System.FormattableString.ArgumentCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The argument. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.FormattableString.GetArguments
  commentId: M:System.FormattableString.GetArguments
  id: GetArguments
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: GetArguments()
  nameWithType: FormattableString.GetArguments()
  fullName: System.FormattableString.GetArguments()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetArguments
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 30
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns an object array that contains one or more objects to format. </p>\n"
  syntax:
    content: public abstract object[] GetArguments()
    content.vb: Public MustOverride Function GetArguments As Object()
    return:
      type: System.Object[]
      description: "\n<p>An object array that contains one or more objects to format. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.FormattableString.Invariant(System.FormattableString)
  commentId: M:System.FormattableString.Invariant(System.FormattableString)
  id: Invariant(System.FormattableString)
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: Invariant(FormattableString)
  nameWithType: FormattableString.Invariant(FormattableString)
  fullName: System.FormattableString.Invariant(System.FormattableString)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invariant
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 65
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a result string in which arguments are formatted by using the conventions of the invariant culture. </p>\n"
  syntax:
    content: public static string Invariant(FormattableString formattable)
    content.vb: Public Shared Function Invariant(formattable As FormattableString) As String
    parameters:
    - id: formattable
      type: System.FormattableString
      description: "\n<p>The object to convert to a result string. </p>\n"
    return:
      type: System.String
      description: "\n<p>The string that results from formatting the current instance by using the conventions of the invariant culture. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>formattable</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)
  commentId: M:System.FormattableString.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: IFormattable.ToString(String, IFormatProvider)
  nameWithType: FormattableString.IFormattable.ToString(String, IFormatProvider)
  fullName: System.FormattableString.System.IFormattable.ToString(System.String, System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: System.IFormattable.ToString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 47
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the string that results from formatting the format string along with its arguments by using the formatting conventions of a specified culture. </p>\n"
  syntax:
    content: string IFormattable.ToString(string ignored, IFormatProvider formatProvider)
    content.vb: Function System.IFormattable.ToString(ignored As String, formatProvider As IFormatProvider) As String Implements IFormattable.ToString
    parameters:
    - id: ignored
      type: System.String
      description: "\n<p>A string. This argument is ignored. </p>\n"
    - id: formatProvider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>A string formatted using the conventions of the <em>formatProvider</em> parameter. </p>\n"
  implements:
  - System.IFormattable.ToString(System.String,System.IFormatProvider)
  nameWithType.vb: FormattableString.System.IFormattable.ToString(String, IFormatProvider)
  name.vb: System.IFormattable.ToString(String, IFormatProvider)
- uid: System.FormattableString.ToString
  commentId: M:System.FormattableString.ToString
  id: ToString
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: FormattableString.ToString()
  fullName: System.FormattableString.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 75
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of the current culture. </p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A result string formatted by using the conventions of the current culture. </p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.FormattableString.ToString(System.IFormatProvider)
  commentId: M:System.FormattableString.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.FormattableString
  langs:
  - csharp
  - vb
  name: ToString(IFormatProvider)
  nameWithType: FormattableString.ToString(IFormatProvider)
  fullName: System.FormattableString.ToString(System.IFormatProvider)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/FormattableString.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/FormattableString.cs
    startLine: 45
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns the string that results from formatting the composite format string along with its arguments by using the formatting conventions of a specified culture. </p>\n"
  syntax:
    content: public abstract string ToString(IFormatProvider formatProvider)
    content.vb: Public MustOverride Function ToString(formatProvider As IFormatProvider) As String
    parameters:
    - id: formatProvider
      type: System.IFormatProvider
      description: "\n<p>An object that provides culture-specific formatting information. </p>\n"
    return:
      type: System.String
      description: "\n<p>A result string formatted by using the conventions of <em>formatProvider</em>. </p>\n"
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IFormattable
  commentId: T:System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.FormattableString
  commentId: T:System.FormattableString
  parent: System
  isExternal: false
  name: FormattableString
  nameWithType: FormattableString
  fullName: System.FormattableString
- uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
  commentId: M:System.IFormattable.ToString(System.String,System.IFormatProvider)
  parent: System.IFormattable
  isExternal: true
  name: ToString(String, IFormatProvider)
  nameWithType: IFormattable.ToString(String, IFormatProvider)
  fullName: System.IFormattable.ToString(System.String, System.IFormatProvider)
  spec.csharp:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IFormattable.ToString(System.String,System.IFormatProvider)
    name: ToString
    nameWithType: IFormattable.ToString
    fullName: System.IFormattable.ToString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.IFormatProvider
    name: IFormatProvider
    nameWithType: IFormatProvider
    fullName: System.IFormatProvider
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IFormatProvider
  commentId: T:System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
