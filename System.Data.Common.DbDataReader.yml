### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  id: DbDataReader
  parent: System.Data.Common
  children:
  - System.Data.Common.DbDataReader.#ctor
  - System.Data.Common.DbDataReader.Depth
  - System.Data.Common.DbDataReader.Dispose
  - System.Data.Common.DbDataReader.Dispose(System.Boolean)
  - System.Data.Common.DbDataReader.FieldCount
  - System.Data.Common.DbDataReader.GetBoolean(System.Int32)
  - System.Data.Common.DbDataReader.GetByte(System.Int32)
  - System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.Common.DbDataReader.GetChar(System.Int32)
  - System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.Common.DbDataReader.GetData(System.Int32)
  - System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)
  - System.Data.Common.DbDataReader.GetDateTime(System.Int32)
  - System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  - System.Data.Common.DbDataReader.GetDecimal(System.Int32)
  - System.Data.Common.DbDataReader.GetDouble(System.Int32)
  - System.Data.Common.DbDataReader.GetEnumerator
  - System.Data.Common.DbDataReader.GetFieldType(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  - System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.GetFloat(System.Int32)
  - System.Data.Common.DbDataReader.GetGuid(System.Int32)
  - System.Data.Common.DbDataReader.GetInt16(System.Int32)
  - System.Data.Common.DbDataReader.GetInt32(System.Int32)
  - System.Data.Common.DbDataReader.GetInt64(System.Int32)
  - System.Data.Common.DbDataReader.GetName(System.Int32)
  - System.Data.Common.DbDataReader.GetOrdinal(System.String)
  - System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  - System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  - System.Data.Common.DbDataReader.GetStream(System.Int32)
  - System.Data.Common.DbDataReader.GetString(System.Int32)
  - System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  - System.Data.Common.DbDataReader.GetValue(System.Int32)
  - System.Data.Common.DbDataReader.GetValues(System.Object[])
  - System.Data.Common.DbDataReader.HasRows
  - System.Data.Common.DbDataReader.IsClosed
  - System.Data.Common.DbDataReader.IsDBNull(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  - System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.Item(System.Int32)
  - System.Data.Common.DbDataReader.Item(System.String)
  - System.Data.Common.DbDataReader.NextResult
  - System.Data.Common.DbDataReader.NextResultAsync
  - System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.Read
  - System.Data.Common.DbDataReader.ReadAsync
  - System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbDataReader.RecordsAffected
  - System.Data.Common.DbDataReader.System#Data#IDataReader#Close
  - System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable
  - System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  - System.Data.Common.DbDataReader.VisibleFieldCount
  langs:
  - csharp
  - vb
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
  type: Class
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: DbDataReader
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 17
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Reads a forward-only stream of rows from a data source.</p>\n"
  syntax:
    content: 'public abstract class DbDataReader : IDataReader, IDataRecord, IDisposable, IEnumerable'
    content.vb: >-
      Public MustInherit Class DbDataReader
          Implements IDataReader, IDataRecord, IDisposable, IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.Data.IDataReader
  - System.Data.IDataRecord
  - System.IDisposable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.GetColumnSchema
  - System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: System.Data.Common.DbDataReader.#ctor
  commentId: M:System.Data.Common.DbDataReader.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: DbDataReader()
  nameWithType: DbDataReader.DbDataReader()
  fullName: System.Data.Common.DbDataReader.DbDataReader()
  type: Constructor
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: .ctor
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 22
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: protected DbDataReader()
    content.vb: Protected Sub New
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: System.Data.Common.DbDataReader.Depth
  commentId: P:System.Data.Common.DbDataReader.Depth
  id: Depth
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: Depth
  nameWithType: DbDataReader.Depth
  fullName: System.Data.Common.DbDataReader.Depth
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Depth
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 26
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets a value indicating the depth of nesting for the current row.</p>\n"
  syntax:
    content: public abstract int Depth { get; }
    content.vb: Public MustOverride ReadOnly Property Depth As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The depth of nesting for the current row.</p>\n"
  implements:
  - System.Data.IDataReader.Depth
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Data.Common.DbDataReader.FieldCount
  commentId: P:System.Data.Common.DbDataReader.FieldCount
  id: FieldCount
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: FieldCount
  nameWithType: DbDataReader.FieldCount
  fullName: System.Data.Common.DbDataReader.FieldCount
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: FieldCount
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 31
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the number of columns in the current row.</p>\n"
  syntax:
    content: public abstract int FieldCount { get; }
    content.vb: Public MustOverride ReadOnly Property FieldCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of columns in the current row.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>There is no current connection to an instance of SQL Server. </p>\n"
  implements:
  - System.Data.IDataRecord.FieldCount
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Data.Common.DbDataReader.HasRows
  commentId: P:System.Data.Common.DbDataReader.HasRows
  id: HasRows
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: HasRows
  nameWithType: DbDataReader.HasRows
  fullName: System.Data.Common.DbDataReader.HasRows
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: HasRows
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 36
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets a value that indicates whether this <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> contains one or more rows.</p>\n"
  syntax:
    content: public abstract bool HasRows { get; }
    content.vb: Public MustOverride ReadOnly Property HasRows As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> contains one or more rows; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Data.Common.DbDataReader.IsClosed
  commentId: P:System.Data.Common.DbDataReader.IsClosed
  id: IsClosed
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IsClosed
  nameWithType: DbDataReader.IsClosed
  fullName: System.Data.Common.DbDataReader.IsClosed
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsClosed
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 41
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed.</p>\n"
  syntax:
    content: public abstract bool IsClosed { get; }
    content.vb: Public MustOverride ReadOnly Property IsClosed As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed; otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed. </p>\n"
  implements:
  - System.Data.IDataReader.IsClosed
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Data.Common.DbDataReader.Item(System.Int32)
  commentId: P:System.Data.Common.DbDataReader.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: DbDataReader.Item[Int32]
  fullName: System.Data.Common.DbDataReader.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 59
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as an instance of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract object this[int ordinal] { get; }
    content.vb: Public MustOverride ReadOnly Property Item(ordinal As Integer) As Object
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The index passed was outside the range of 0 through <xref href=\"System.Data.IDataRecord.FieldCount\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  implements:
  - System.Data.IDataRecord.Item(System.Int32)
  nameWithType.vb: DbDataReader.Item(Int32)
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: System.Data.Common.DbDataReader.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Data.Common.DbDataReader.Item(System.String)
  commentId: P:System.Data.Common.DbDataReader.Item(System.String)
  id: Item(System.String)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: Item[String]
  nameWithType: DbDataReader.Item[String]
  fullName: System.Data.Common.DbDataReader.Item[System.String]
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: this[]
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 64
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as an instance of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract object this[string name] { get; }
    content.vb: Public MustOverride ReadOnly Property Item(name As String) As Object
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the column.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>No column with the specified name was found. </p>\n"
  implements:
  - System.Data.IDataRecord.Item(System.String)
  nameWithType.vb: DbDataReader.Item(String)
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
  fullName.vb: System.Data.Common.DbDataReader.Item(System.String)
  name.vb: Item(String)
- uid: System.Data.Common.DbDataReader.RecordsAffected
  commentId: P:System.Data.Common.DbDataReader.RecordsAffected
  id: RecordsAffected
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: RecordsAffected
  nameWithType: DbDataReader.RecordsAffected
  fullName: System.Data.Common.DbDataReader.RecordsAffected
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: RecordsAffected
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 46
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the number of rows changed, inserted, or deleted by execution of the SQL statement. </p>\n"
  syntax:
    content: public abstract int RecordsAffected { get; }
    content.vb: Public MustOverride ReadOnly Property RecordsAffected As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of rows changed, inserted, or deleted. -1 for SELECT statements; 0 if no rows were affected or the statement failed.</p>\n"
  implements:
  - System.Data.IDataReader.RecordsAffected
  modifiers.csharp:
  - public
  - abstract
  - get
  modifiers.vb:
  - Public
  - MustOverride
  - ReadOnly
- uid: System.Data.Common.DbDataReader.VisibleFieldCount
  commentId: P:System.Data.Common.DbDataReader.VisibleFieldCount
  id: VisibleFieldCount
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: VisibleFieldCount
  nameWithType: DbDataReader.VisibleFieldCount
  fullName: System.Data.Common.DbDataReader.VisibleFieldCount
  type: Property
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: VisibleFieldCount
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 51
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the number of fields in the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> that are not hidden.</p>\n"
  syntax:
    content: public virtual int VisibleFieldCount { get; }
    content.vb: Public Overridable ReadOnly Property VisibleFieldCount As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of fields that are not hidden.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Data.Common.DbDataReader.Dispose
  commentId: M:System.Data.Common.DbDataReader.Dispose
  id: Dispose
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: Dispose()
  nameWithType: DbDataReader.Dispose()
  fullName: System.Data.Common.DbDataReader.Dispose()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 69
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Releases all resources used by the current instance of the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> class.</p>\n"
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  implements:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbDataReader.Dispose(System.Boolean)
  commentId: M:System.Data.Common.DbDataReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  nameWithType: DbDataReader.Dispose(Boolean)
  fullName: System.Data.Common.DbDataReader.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Dispose
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 74
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Releases the managed resources used by the <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> and optionally releases the unmanaged resources.</p>\n"
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> to release managed and unmanaged resources; <strong>false</strong> to release only unmanaged resources.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Data.Common.DbDataReader.GetBoolean(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetBoolean(Int32)
  nameWithType: DbDataReader.GetBoolean(Int32)
  fullName: System.Data.Common.DbDataReader.GetBoolean(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBoolean
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 92
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a Boolean.</p>\n"
  syntax:
    content: public abstract bool GetBoolean(int ordinal)
    content.vb: Public MustOverride Function GetBoolean(ordinal As Integer) As Boolean
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetBoolean(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetByte(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetByte(Int32)
  nameWithType: DbDataReader.GetByte(Int32)
  fullName: System.Data.Common.DbDataReader.GetByte(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetByte
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 94
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a byte.</p>\n"
  syntax:
    content: public abstract byte GetByte(int ordinal)
    content.vb: Public MustOverride Function GetByte(ordinal As Integer) As Byte
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Byte
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetByte(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)
  nameWithType: DbDataReader.GetBytes(Int32, Int64, Byte[], Int32, Int32)
  fullName: System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetBytes
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 96
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Reads a stream of bytes from the specified column, starting at location indicated by <em>dataOffset</em>, into the buffer, starting at the location indicated by <em>bufferOffset</em>.</p>\n"
  syntax:
    content: public abstract long GetBytes(int ordinal, long dataOffset, byte[] buffer, int bufferOffset, int length)
    content.vb: Public MustOverride Function GetBytes(ordinal As Integer, dataOffset As Long, buffer As Byte(), bufferOffset As Integer, length As Integer) As Long
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    - id: dataOffset
      type: System.Int64
      description: "\n<p>The index within the row from which to begin the read operation.</p>\n"
    - id: buffer
      type: System.Byte[]
      description: "\n<p>The buffer into which to copy the data.</p>\n"
    - id: bufferOffset
      type: System.Int32
      description: "\n<p>The index with the buffer to which the data will be copied.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters to read.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The actual number of bytes read.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  nameWithType.vb: DbDataReader.GetBytes(Int32, Int64, Byte(), Int32, Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Data.Common.DbDataReader.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)
- uid: System.Data.Common.DbDataReader.GetChar(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetChar(Int32)
  nameWithType: DbDataReader.GetChar(Int32)
  fullName: System.Data.Common.DbDataReader.GetChar(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChar
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 98
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a single character.</p>\n"
  syntax:
    content: public abstract char GetChar(int ordinal)
    content.vb: Public MustOverride Function GetChar(ordinal As Integer) As Char
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Char
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetChar(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetChars(Int32, Int64, Char[], Int32, Int32)
  nameWithType: DbDataReader.GetChars(Int32, Int64, Char[], Int32, Int32)
  fullName: System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetChars
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 100
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Reads a stream of characters from the specified column, starting at location indicated by <em>dataOffset</em>, into the buffer, starting at the location indicated by <em>bufferOffset</em>.</p>\n"
  syntax:
    content: public abstract long GetChars(int ordinal, long dataOffset, char[] buffer, int bufferOffset, int length)
    content.vb: Public MustOverride Function GetChars(ordinal As Integer, dataOffset As Long, buffer As Char(), bufferOffset As Integer, length As Integer) As Long
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    - id: dataOffset
      type: System.Int64
      description: "\n<p>The index within the row from which to begin the read operation.</p>\n"
    - id: buffer
      type: System.Char[]
      description: "\n<p>The buffer into which to copy the data.</p>\n"
    - id: bufferOffset
      type: System.Int32
      description: "\n<p>The index with the buffer to which the data will be copied.</p>\n"
    - id: length
      type: System.Int32
      description: "\n<p>The maximum number of characters to read.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The actual number of characters read.</p>\n"
  implements:
  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  nameWithType.vb: DbDataReader.GetChars(Int32, Int64, Char(), Int32, Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Data.Common.DbDataReader.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)
- uid: System.Data.Common.DbDataReader.GetData(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetData(System.Int32)
  id: GetData(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetData(Int32)
  nameWithType: DbDataReader.GetData(Int32)
  fullName: System.Data.Common.DbDataReader.GetData(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetData
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 102
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Returns a <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> object for the requested column ordinal.</p>\n"
  syntax:
    content: public DbDataReader GetData(int ordinal)
    content.vb: Public Function GetData(ordinal As Integer) As DbDataReader
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Data.Common.DbDataReader
      description: "\n<p>A <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetDataTypeName(Int32)
  nameWithType: DbDataReader.GetDataTypeName(Int32)
  fullName: System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDataTypeName
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 81
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets name of the data type of the specified column.</p>\n"
  syntax:
    content: public abstract string GetDataTypeName(int ordinal)
    content.vb: Public MustOverride Function GetDataTypeName(ordinal As Integer) As String
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.String
      description: "\n<p>A string representing the name of the data type.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetDataTypeName(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetDateTime(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetDateTime(Int32)
  nameWithType: DbDataReader.GetDateTime(Int32)
  fullName: System.Data.Common.DbDataReader.GetDateTime(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDateTime
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 113
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.DateTime\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public abstract DateTime GetDateTime(int ordinal)
    content.vb: Public MustOverride Function GetDateTime(ordinal As Integer) As Date
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.DateTime
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetDateTime(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  id: GetDbDataReader(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetDbDataReader(Int32)
  nameWithType: DbDataReader.GetDbDataReader(Int32)
  fullName: System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDbDataReader
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 108
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Returns a <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> object for the requested column ordinal that can be overridden with a provider-specific implementation.</p>\n"
  syntax:
    content: protected virtual DbDataReader GetDbDataReader(int ordinal)
    content.vb: Protected Overridable Function GetDbDataReader(ordinal As Integer) As DbDataReader
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Data.Common.DbDataReader
      description: "\n<p>A <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
- uid: System.Data.Common.DbDataReader.GetDecimal(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetDecimal(Int32)
  nameWithType: DbDataReader.GetDecimal(Int32)
  fullName: System.Data.Common.DbDataReader.GetDecimal(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDecimal
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 115
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a <xref href=\"System.Decimal\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public abstract decimal GetDecimal(int ordinal)
    content.vb: Public MustOverride Function GetDecimal(ordinal As Integer) As Decimal
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Decimal
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetDecimal(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetDouble(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetDouble(Int32)
  nameWithType: DbDataReader.GetDouble(Int32)
  fullName: System.Data.Common.DbDataReader.GetDouble(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetDouble
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 117
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a double-precision floating point number.</p>\n"
  syntax:
    content: public abstract double GetDouble(int ordinal)
    content.vb: Public MustOverride Function GetDouble(ordinal As Integer) As Double
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Double
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetDouble(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetEnumerator
  commentId: M:System.Data.Common.DbDataReader.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: DbDataReader.GetEnumerator()
  fullName: System.Data.Common.DbDataReader.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetEnumerator
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 83
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Returns an <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the rows in the data reader.</p>\n"
  syntax:
    content: public abstract IEnumerator GetEnumerator()
    content.vb: Public MustOverride Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> that can be used to iterate through the rows in the data reader.</p>\n"
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetFieldType(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetFieldType(Int32)
  nameWithType: DbDataReader.GetFieldType(Int32)
  fullName: System.Data.Common.DbDataReader.GetFieldType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldType
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 85
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the data type of the specified column.</p>\n"
  syntax:
    content: public abstract Type GetFieldType(int ordinal)
    content.vb: Public MustOverride Function GetFieldType(ordinal As Integer) As Type
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The data type of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetFieldType(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)
  id: GetFieldValue``1(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetFieldValue<T>(Int32)
  nameWithType: DbDataReader.GetFieldValue<T>(Int32)
  fullName: System.Data.Common.DbDataReader.GetFieldValue<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldValue
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 178
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Synchronously gets the value of the specified column as a type.</p>\n"
  syntax:
    content: public virtual T GetFieldValue<T>(int ordinal)
    content.vb: Public Overridable Function GetFieldValue(Of T)(ordinal As Integer) As T
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The column to be retrieved.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>Synchronously gets the value of the specified column as a type.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The column to be retrieved.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.SqlClient.SqlDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.SqlClient.SqlDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>T</em> doesn’t match the type returned by SQL Server or cannot be cast.</p>\n"
  nameWithType.vb: DbDataReader.GetFieldValue(Of T)(Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Data.Common.DbDataReader.GetFieldValue(Of T)(System.Int32)
  name.vb: GetFieldValue(Of T)(Int32)
- uid: System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)
  id: GetFieldValueAsync``1(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetFieldValueAsync<T>(Int32)
  nameWithType: DbDataReader.GetFieldValueAsync<T>(Int32)
  fullName: System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldValueAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 183
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Asynchronously gets the value of the specified column as a type.</p>\n"
  syntax:
    content: public Task<T> GetFieldValueAsync<T>(int ordinal)
    content.vb: Public Function GetFieldValueAsync(Of T)(ordinal As Integer) As Task(Of T)
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The type of the value to be returned.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the value to be returned. See the remarks section for more information.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\n<p>The type of the value to be returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>T</em> doesn’t match the type returned by the data source  or cannot be cast.</p>\n"
  nameWithType.vb: DbDataReader.GetFieldValueAsync(Of T)(Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: System.Data.Common.DbDataReader.GetFieldValueAsync(Of T)(System.Int32)
  name.vb: GetFieldValueAsync(Of T)(Int32)
- uid: System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  id: GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetFieldValueAsync<T>(Int32, CancellationToken)
  nameWithType: DbDataReader.GetFieldValueAsync<T>(Int32, CancellationToken)
  fullName: System.Data.Common.DbDataReader.GetFieldValueAsync<T>(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFieldValueAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 188
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Asynchronously gets the value of the specified column as a type.</p>\n"
  syntax:
    content: public virtual Task<T> GetFieldValueAsync<T>(int ordinal, CancellationToken cancellationToken)
    content.vb: Public Overridable Function GetFieldValueAsync(Of T)(ordinal As Integer, cancellationToken As CancellationToken) As Task(Of T)
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The type of the value to be returned.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction, which propagates a notification that operations should be canceled. This does not guarantee the cancellation. A setting of <strong>CancellationToken.None</strong> makes this method equivalent to <xref href=\"System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The returned task must be marked as cancelled.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the value to be returned. See the remarks section for more information.</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: "\n<p>The type of the value to be returned.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>\n<em>T</em> doesn’t match the type returned by the data source or cannot be cast.</p>\n"
  nameWithType.vb: DbDataReader.GetFieldValueAsync(Of T)(Int32, CancellationToken)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Data.Common.DbDataReader.GetFieldValueAsync(Of T)(System.Int32, System.Threading.CancellationToken)
  name.vb: GetFieldValueAsync(Of T)(Int32, CancellationToken)
- uid: System.Data.Common.DbDataReader.GetFloat(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetFloat(Int32)
  nameWithType: DbDataReader.GetFloat(Int32)
  fullName: System.Data.Common.DbDataReader.GetFloat(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetFloat
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 119
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a single-precision floating point number.</p>\n"
  syntax:
    content: public abstract float GetFloat(int ordinal)
    content.vb: Public MustOverride Function GetFloat(ordinal As Integer) As Single
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Single
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetFloat(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetGuid(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetGuid(Int32)
  nameWithType: DbDataReader.GetGuid(Int32)
  fullName: System.Data.Common.DbDataReader.GetGuid(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetGuid
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 121
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a globally-unique identifier (GUID).</p>\n"
  syntax:
    content: public abstract Guid GetGuid(int ordinal)
    content.vb: Public MustOverride Function GetGuid(ordinal As Integer) As Guid
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Guid
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetGuid(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetInt16(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetInt16(Int32)
  nameWithType: DbDataReader.GetInt16(Int32)
  fullName: System.Data.Common.DbDataReader.GetInt16(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt16
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 123
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a 16-bit signed integer.</p>\n"
  syntax:
    content: public abstract short GetInt16(int ordinal)
    content.vb: Public MustOverride Function GetInt16(ordinal As Integer) As Short
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Int16
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetInt16(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetInt32(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetInt32(Int32)
  nameWithType: DbDataReader.GetInt32(Int32)
  fullName: System.Data.Common.DbDataReader.GetInt32(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt32
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 125
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a 32-bit signed integer.</p>\n"
  syntax:
    content: public abstract int GetInt32(int ordinal)
    content.vb: Public MustOverride Function GetInt32(ordinal As Integer) As Integer
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetInt32(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetInt64(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetInt64(Int32)
  nameWithType: DbDataReader.GetInt64(Int32)
  fullName: System.Data.Common.DbDataReader.GetInt64(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetInt64
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 127
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as a 64-bit signed integer.</p>\n"
  syntax:
    content: public abstract long GetInt64(int ordinal)
    content.vb: Public MustOverride Function GetInt64(ordinal As Integer) As Long
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Int64
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetInt64(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetName(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetName(Int32)
  nameWithType: DbDataReader.GetName(Int32)
  fullName: System.Data.Common.DbDataReader.GetName(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetName
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 87
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the name of the column, given the zero-based column ordinal.</p>\n"
  syntax:
    content: public abstract string GetName(int ordinal)
    content.vb: Public MustOverride Function GetName(ordinal As Integer) As String
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.String
      description: "\n<p>The name of the specified column.</p>\n"
  implements:
  - System.Data.IDataRecord.GetName(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetOrdinal(System.String)
  commentId: M:System.Data.Common.DbDataReader.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetOrdinal(String)
  nameWithType: DbDataReader.GetOrdinal(String)
  fullName: System.Data.Common.DbDataReader.GetOrdinal(System.String)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetOrdinal
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 89
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the column ordinal given the name of the column.</p>\n"
  syntax:
    content: public abstract int GetOrdinal(string name)
    content.vb: Public MustOverride Function GetOrdinal(name As String) As Integer
    parameters:
    - id: name
      type: System.String
      description: "\n<p>The name of the column.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>The name specified is not a valid column name.</p>\n"
  implements:
  - System.Data.IDataRecord.GetOrdinal(System.String)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  id: GetProviderSpecificFieldType(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetProviderSpecificFieldType(Int32)
  nameWithType: DbDataReader.GetProviderSpecificFieldType(Int32)
  fullName: System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProviderSpecificFieldType
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 129
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Returns the provider-specific field type of the specified column.</p>\n"
  syntax:
    content: public virtual Type GetProviderSpecificFieldType(int ordinal)
    content.vb: Public Overridable Function GetProviderSpecificFieldType(ordinal As Integer) As Type
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Type
      description: "\n<p>The <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> object that describes the data type of the specified column.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  id: GetProviderSpecificValue(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetProviderSpecificValue(Int32)
  nameWithType: DbDataReader.GetProviderSpecificValue(Int32)
  fullName: System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProviderSpecificValue
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 134
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as an instance of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object GetProviderSpecificValue(int ordinal)
    content.vb: Public Overridable Function GetProviderSpecificValue(ordinal As Integer) As Object
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the specified column.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  commentId: M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  id: GetProviderSpecificValues(System.Object[])
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetProviderSpecificValues(Object[])
  nameWithType: DbDataReader.GetProviderSpecificValues(Object[])
  fullName: System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetProviderSpecificValues
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 139
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets all provider-specific attribute columns in the collection for the current row.</p>\n"
  syntax:
    content: public virtual int GetProviderSpecificValues(object[] values)
    content.vb: Public Overridable Function GetProviderSpecificValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
      description: "\n<p>An array of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> into which to copy the attribute columns.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of instances of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> in the array.</p>\n"
  nameWithType.vb: DbDataReader.GetProviderSpecificValues(Object())
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object())
  name.vb: GetProviderSpecificValues(Object())
- uid: System.Data.Common.DbDataReader.GetStream(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetStream(System.Int32)
  id: GetStream(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetStream(Int32)
  nameWithType: DbDataReader.GetStream(Int32)
  fullName: System.Data.Common.DbDataReader.GetStream(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetStream
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 146
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Retrieves data as a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual Stream GetStream(int ordinal)
    content.vb: Public Overridable Function GetStream(ordinal As Integer) As Stream
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>Retrieves data as a <xref href=\"System.IO.Stream\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.IO.Stream
      description: "\n<p>The returned object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The returned type was not one of the types below:</p>\n<ul><li>\n<p>binary</p>\n</li><li>\n<p>image</p>\n</li><li>\n<p>varbinary</p>\n</li><li>\n<p>udt</p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.GetString(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetString(Int32)
  nameWithType: DbDataReader.GetString(Int32)
  fullName: System.Data.Common.DbDataReader.GetString(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetString
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 144
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as an instance of <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract string GetString(int ordinal)
    content.vb: Public MustOverride Function GetString(ordinal As Integer) As String
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.String
      description: "\n<p>The value of the specified column.</p>\n"
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The specified cast is not valid. </p>\n"
  implements:
  - System.Data.IDataRecord.GetString(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  id: GetTextReader(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetTextReader(Int32)
  nameWithType: DbDataReader.GetTextReader(Int32)
  fullName: System.Data.Common.DbDataReader.GetTextReader(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetTextReader
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 164
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Retrieves data as a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual TextReader GetTextReader(int ordinal)
    content.vb: Public Overridable Function GetTextReader(ordinal As Integer) As TextReader
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>Retrieves data as a <xref href=\"System.IO.TextReader\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.IO.TextReader
      description: "\n<p>The returned object.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Tried to read a previously-read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The returned type was not one of the types below:</p>\n<ul><li>\n<p>char</p>\n</li><li>\n<p>nchar</p>\n</li><li>\n<p>ntext</p>\n</li><li>\n<p>nvarchar</p>\n</li><li>\n<p>text</p>\n</li><li>\n<p>varchar</p>\n</li></ul>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.GetValue(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetValue(Int32)
  nameWithType: DbDataReader.GetValue(Int32)
  fullName: System.Data.Common.DbDataReader.GetValue(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValue
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 176
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets the value of the specified column as an instance of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public abstract object GetValue(int ordinal)
    content.vb: Public MustOverride Function GetValue(ordinal As Integer) As Object
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Object
      description: "\n<p>The value of the specified column.</p>\n"
  implements:
  - System.Data.IDataRecord.GetValue(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.GetValues(System.Object[])
  commentId: M:System.Data.Common.DbDataReader.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: GetValues(Object[])
  nameWithType: DbDataReader.GetValues(Object[])
  fullName: System.Data.Common.DbDataReader.GetValues(System.Object[])
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetValues
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 207
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Populates an array of objects with the column values of the current row.</p>\n"
  syntax:
    content: public abstract int GetValues(object[] values)
    content.vb: Public MustOverride Function GetValues(values As Object()) As Integer
    parameters:
    - id: values
      type: System.Object[]
      description: "\n<p>An array of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> into which to copy the attribute columns.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The number of instances of <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> in the array.</p>\n"
  implements:
  - System.Data.IDataRecord.GetValues(System.Object[])
  nameWithType.vb: DbDataReader.GetValues(Object())
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
  fullName.vb: System.Data.Common.DbDataReader.GetValues(System.Object())
  name.vb: GetValues(Object())
- uid: System.Data.Common.DbDataReader.IsDBNull(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IsDBNull(Int32)
  nameWithType: DbDataReader.IsDBNull(Int32)
  fullName: System.Data.Common.DbDataReader.IsDBNull(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNull
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 209
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Gets a value that indicates whether the column contains nonexistent or missing values.</p>\n"
  syntax:
    content: public abstract bool IsDBNull(int ordinal)
    content.vb: Public MustOverride Function IsDBNull(ordinal As Integer) As Boolean
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified column is equivalent to <xref href=\"System.DBNull\" data-throw-if-not-resolved=\"false\"></xref>; otherwise <strong>false</strong>.</p>\n"
  implements:
  - System.Data.IDataRecord.IsDBNull(System.Int32)
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  id: IsDBNullAsync(System.Int32)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IsDBNullAsync(Int32)
  nameWithType: DbDataReader.IsDBNullAsync(Int32)
  fullName: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNullAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 211
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.Common.DbDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, which gets a value that indicates whether the column contains non-existent or missing values.</p>\n"
  syntax:
    content: public Task<bool> IsDBNullAsync(int ordinal)
    content.vb: Public Function IsDBNullAsync(ordinal As Integer) As Task(Of Boolean)
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column to be retrieved.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Trying to read a previously read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  commentId: M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  id: IsDBNullAsync(System.Int32,System.Threading.CancellationToken)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IsDBNullAsync(Int32, CancellationToken)
  nameWithType: DbDataReader.IsDBNullAsync(Int32, CancellationToken)
  fullName: System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: IsDBNullAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 216
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.Common.DbDataReader.IsDBNull(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>, which gets a value that indicates whether the column contains non-existent or missing values. Optionally, sends a notification that operations should be cancelled.</p>\n"
  syntax:
    content: public virtual Task<bool> IsDBNullAsync(int ordinal, CancellationToken cancellationToken)
    content.vb: Public Overridable Function IsDBNullAsync(ordinal As Integer, cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column to be retrieved.</p>\n"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction, which propagates a notification that operations should be canceled. This does not guarantee the cancellation. A setting of <strong>CancellationToken.None</strong> makes this method equivalent to <xref href=\"System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>. The returned task must be marked as cancelled.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>\n<strong>true</strong> if the specified column value is equivalent to <strong>DBNull</strong> otherwise <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>The connection drops or is closed during the data retrieval.</p>\n<p>The <xref href=\"System.Data.Common.DbDataReader\" data-throw-if-not-resolved=\"false\"></xref> is closed during the data retrieval.</p>\n<p>There is no data ready to be read (for example, the first <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> hasn't been called, or returned false).</p>\n<p>Trying to read a previously read column in sequential mode.</p>\n<p>There was an asynchronous operation in progress. This applies to all Get* methods when running in sequential mode, as they could be called while reading a stream.</p>\n"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "\n<p>Trying to read a column that does not exist.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.NextResult
  commentId: M:System.Data.Common.DbDataReader.NextResult
  id: NextResult
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: NextResult()
  nameWithType: DbDataReader.NextResult()
  fullName: System.Data.Common.DbDataReader.NextResult()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextResult
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 235
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Advances the reader to the next result when reading the results of a batch of statements.</p>\n"
  syntax:
    content: public abstract bool NextResult()
    content.vb: Public MustOverride Function NextResult As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are more result sets; otherwise <strong>false</strong>.</p>\n"
  implements:
  - System.Data.IDataReader.NextResult
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.NextResultAsync
  commentId: M:System.Data.Common.DbDataReader.NextResultAsync
  id: NextResultAsync
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: NextResultAsync()
  nameWithType: DbDataReader.NextResultAsync()
  fullName: System.Data.Common.DbDataReader.NextResultAsync()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextResultAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 263
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.Common.DbDataReader.NextResult\" data-throw-if-not-resolved=\"false\"></xref>, which advances the reader to the next result when reading the results of a batch of statements.</p>\n<p>Invokes <xref href=\"System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with CancellationToken.None.</p>\n"
  syntax:
    content: public Task<bool> NextResultAsync()
    content.vb: Public Function NextResultAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "\n<p>An error occurred while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  id: NextResultAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: NextResultAsync(CancellationToken)
  nameWithType: DbDataReader.NextResultAsync(CancellationToken)
  fullName: System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NextResultAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 268
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>This is the asynchronous version of <xref href=\"System.Data.Common.DbDataReader.NextResult\" data-throw-if-not-resolved=\"false\"></xref>. Providers should override with an appropriate implementation. The <em>cancellationToken</em> may optionally be ignored.</p>\n<p>The default implementation invokes the synchronous <xref href=\"System.Data.Common.DbDataReader.NextResult\" data-throw-if-not-resolved=\"false\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled <em>cancellationToken</em>. Exceptions thrown by <xref href=\"System.Data.Common.DbDataReader.NextResult\" data-throw-if-not-resolved=\"false\"></xref> will be communicated via the returned Task Exception property.</p>\n<p>Other methods and properties of the DbDataReader object should not be invoked while the returned Task is not yet completed.</p>\n"
  syntax:
    content: public virtual Task<bool> NextResultAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function NextResultAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "\n<p>An error occurred while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.Read
  commentId: M:System.Data.Common.DbDataReader.Read
  id: Read
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: Read()
  nameWithType: DbDataReader.Read()
  fullName: System.Data.Common.DbDataReader.Read()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Read
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 237
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>Advances the reader to the next record in a result set.</p>\n"
  syntax:
    content: public abstract bool Read()
    content.vb: Public MustOverride Function Read As Boolean
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if there are more rows; otherwise <strong>false</strong>.</p>\n"
  implements:
  - System.Data.IDataReader.Read
  modifiers.csharp:
  - public
  - abstract
  modifiers.vb:
  - Public
  - MustOverride
- uid: System.Data.Common.DbDataReader.ReadAsync
  commentId: M:System.Data.Common.DbDataReader.ReadAsync
  id: ReadAsync
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: ReadAsync()
  nameWithType: DbDataReader.ReadAsync()
  fullName: System.Data.Common.DbDataReader.ReadAsync()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 239
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>An asynchronous version of <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref>, which advances the reader to the next record in a result set. This method invokes <xref href=\"System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref> with CancellationToken.None.</p>\n"
  syntax:
    content: public Task<bool> ReadAsync()
    content.vb: Public Function ReadAsync As Task(Of Boolean)
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "\n<p>An error occurred while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  commentId: M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  id: ReadAsync(System.Threading.CancellationToken)
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: ReadAsync(CancellationToken)
  nameWithType: DbDataReader.ReadAsync(CancellationToken)
  fullName: System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ReadAsync
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 244
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>This is the asynchronous version of <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref>.  Providers should override with an appropriate implementation. The cancellationToken may optionally be ignored.</p>\n<p>The default implementation invokes the synchronous <xref href=\"System.Data.Common.DbDataReader.Read\" data-throw-if-not-resolved=\"false\"></xref> method and returns a completed task, blocking the calling thread. The default implementation will return a cancelled task if passed an already cancelled cancellationToken.  Exceptions thrown by Read will be communicated via the returned Task Exception property.</p>\n<p>Do not invoke other methods and properties of the <strong>DbDataReader</strong> object until the returned Task is complete.</p>\n"
  syntax:
    content: public virtual Task<bool> ReadAsync(CancellationToken cancellationToken)
    content.vb: Public Overridable Function ReadAsync(cancellationToken As CancellationToken) As Task(Of Boolean)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "\n<p>The cancellation instruction.</p>\n"
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "\n<p>A task representing the asynchronous operation.</p>\n"
  exceptions:
  - type: System.Data.Common.DbException
    commentId: T:System.Data.Common.DbException
    description: "\n<p>An error occurred while executing the command text.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  commentId: M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)
  id: System#Data#IDataRecord#GetData(System.Int32)
  isEii: true
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IDataRecord.GetData(Int32)
  nameWithType: DbDataReader.IDataRecord.GetData(Int32)
  fullName: System.Data.Common.DbDataReader.System.Data.IDataRecord.GetData(System.Int32)
  type: Method
  source:
    remote:
      path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Data.IDataRecord.GetData
    path: src/System.Data.Common/src/System/Data/Common/DbDataReader.cs
    startLine: 296
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  summary: "\n<p>For a description of this member, see <xref href=\"System.Data.IDataRecord.GetData(System.Int32)\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: IDataReader IDataRecord.GetData(int ordinal)
    content.vb: Function System.Data.IDataRecord.GetData(ordinal As Integer) As IDataReader Implements IDataRecord.GetData
    parameters:
    - id: ordinal
      type: System.Int32
      description: "\n<p>The zero-based column ordinal.</p>\n"
    return:
      type: System.Data.IDataReader
      description: "\n<p>An instance of <xref href=\"System.Data.IDataReader\" data-throw-if-not-resolved=\"false\"></xref> to be used when the field points to more remote structured data.</p>\n"
  implements:
  - System.Data.IDataRecord.GetData(System.Int32)
  nameWithType.vb: DbDataReader.System.Data.IDataRecord.GetData(Int32)
  name.vb: System.Data.IDataRecord.GetData(Int32)
- uid: System.Data.Common.DbDataReader.System#Data#IDataReader#Close
  commentId: M:System.Data.Common.DbDataReader.System#Data#IDataReader#Close
  id: System#Data#IDataReader#Close
  isEii: true
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IDataReader.Close()
  nameWithType: DbDataReader.IDataReader.Close()
  fullName: System.Data.Common.DbDataReader.System.Data.IDataReader.Close()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/ref/System.Data.Common.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Data.IDataReader.Close
    path: src/System.Data.Common/ref/System.Data.Common.cs
    startLine: 363
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  syntax:
    content: void IDataReader.Close()
    content.vb: Sub System.Data.IDataReader.Close Implements IDataReader.Close
  implements:
  - System.Data.IDataReader.Close
  nameWithType.vb: DbDataReader.System.Data.IDataReader.Close()
  name.vb: System.Data.IDataReader.Close()
- uid: System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable
  commentId: M:System.Data.Common.DbDataReader.System#Data#IDataReader#GetSchemaTable
  id: System#Data#IDataReader#GetSchemaTable
  isEii: true
  parent: System.Data.Common.DbDataReader
  langs:
  - csharp
  - vb
  name: IDataReader.GetSchemaTable()
  nameWithType: DbDataReader.IDataReader.GetSchemaTable()
  fullName: System.Data.Common.DbDataReader.System.Data.IDataReader.GetSchemaTable()
  type: Method
  source:
    remote:
      path: src/System.Data.Common/ref/System.Data.Common.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.Data.IDataReader.GetSchemaTable
    path: src/System.Data.Common/ref/System.Data.Common.cs
    startLine: 364
  assemblies:
  - System.Data.Common
  namespace: System.Data.Common
  syntax:
    content: DataTable IDataReader.GetSchemaTable()
    content.vb: Function System.Data.IDataReader.GetSchemaTable As DataTable Implements IDataReader.GetSchemaTable
    return:
      type: System.Data.DataTable
  implements:
  - System.Data.IDataReader.GetSchemaTable
  nameWithType.vb: DbDataReader.System.Data.IDataReader.GetSchemaTable()
  name.vb: System.Data.IDataReader.GetSchemaTable()
references:
- uid: System.Data.Common
  commentId: N:System.Data.Common
  isExternal: false
  name: System.Data.Common
  nameWithType: System.Data.Common
  fullName: System.Data.Common
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Data.IDataReader
  commentId: T:System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.IDataRecord
  commentId: T:System.Data.IDataRecord
  parent: System.Data
  isExternal: false
  name: IDataRecord
  nameWithType: IDataRecord
  fullName: System.Data.IDataRecord
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.GetColumnSchema
  commentId: M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
  parent: System.Data.Common.DbDataReaderExtensions
  definition: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
  name: GetColumnSchema()
  nameWithType: DbDataReaderExtensions.GetColumnSchema()
  fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema()
  spec.csharp:
  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema
    name: GetColumnSchema
    nameWithType: DbDataReaderExtensions.GetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema
    name: GetColumnSchema
    nameWithType: DbDataReaderExtensions.GetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbDataReader.System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
  commentId: M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
  parent: System.Data.Common.DbDataReaderExtensions
  definition: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
  name: CanGetColumnSchema()
  nameWithType: DbDataReaderExtensions.CanGetColumnSchema()
  fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema()
  spec.csharp:
  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
    name: CanGetColumnSchema
    nameWithType: DbDataReaderExtensions.CanGetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
    name: CanGetColumnSchema
    nameWithType: DbDataReaderExtensions.CanGetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Data
  commentId: N:System.Data
  isExternal: false
  name: System.Data
  nameWithType: System.Data
  fullName: System.Data
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
  commentId: M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
  isExternal: false
  name: GetColumnSchema(DbDataReader)
  nameWithType: DbDataReaderExtensions.GetColumnSchema(DbDataReader)
  fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
  spec.csharp:
  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
    name: GetColumnSchema
    nameWithType: DbDataReaderExtensions.GetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)
    name: GetColumnSchema
    nameWithType: DbDataReaderExtensions.GetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.GetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.Common.DbDataReaderExtensions
  commentId: T:System.Data.Common.DbDataReaderExtensions
  parent: System.Data.Common
  isExternal: false
  name: DbDataReaderExtensions
  nameWithType: DbDataReaderExtensions
  fullName: System.Data.Common.DbDataReaderExtensions
- uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
  commentId: M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
  isExternal: false
  name: CanGetColumnSchema(DbDataReader)
  nameWithType: DbDataReaderExtensions.CanGetColumnSchema(DbDataReader)
  fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
  spec.csharp:
  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
    name: CanGetColumnSchema
    nameWithType: DbDataReaderExtensions.CanGetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)
    name: CanGetColumnSchema
    nameWithType: DbDataReaderExtensions.CanGetColumnSchema
    fullName: System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.Common.DbDataReader
    name: DbDataReader
    nameWithType: DbDataReader
    fullName: System.Data.Common.DbDataReader
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Data.IDataReader.Depth
  commentId: P:System.Data.IDataReader.Depth
  parent: System.Data.IDataReader
  isExternal: false
  name: Depth
  nameWithType: IDataReader.Depth
  fullName: System.Data.IDataReader.Depth
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDataRecord.FieldCount
  commentId: P:System.Data.IDataRecord.FieldCount
  parent: System.Data.IDataRecord
  isExternal: false
  name: FieldCount
  nameWithType: IDataRecord.FieldCount
  fullName: System.Data.IDataRecord.FieldCount
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.IDataReader.IsClosed
  commentId: P:System.Data.IDataReader.IsClosed
  parent: System.Data.IDataReader
  isExternal: false
  name: IsClosed
  nameWithType: IDataReader.IsClosed
  fullName: System.Data.IDataReader.IsClosed
- uid: System.Data.IDataRecord.Item(System.Int32)
  commentId: P:System.Data.IDataRecord.Item(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: Item[Int32]
  nameWithType: IDataRecord.Item[Int32]
  fullName: System.Data.IDataRecord.Item[System.Int32]
  nameWithType.vb: IDataRecord.Item(Int32)
  fullname.vb: System.Data.IDataRecord.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.Item(System.Int32)
    name: Item
    nameWithType: IDataRecord.Item
    fullName: System.Data.IDataRecord.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Data.IDataRecord.Item(System.Int32)
    name: Item
    nameWithType: IDataRecord.Item
    fullName: System.Data.IDataRecord.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.Item(System.String)
  commentId: P:System.Data.IDataRecord.Item(System.String)
  parent: System.Data.IDataRecord
  isExternal: true
  name: Item[String]
  nameWithType: IDataRecord.Item[String]
  fullName: System.Data.IDataRecord.Item[System.String]
  nameWithType.vb: IDataRecord.Item(String)
  fullname.vb: System.Data.IDataRecord.Item(System.String)
  name.vb: Item(String)
  spec.csharp:
  - uid: System.Data.IDataRecord.Item(System.String)
    name: Item
    nameWithType: IDataRecord.Item
    fullName: System.Data.IDataRecord.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Data.IDataRecord.Item(System.String)
    name: Item
    nameWithType: IDataRecord.Item
    fullName: System.Data.IDataRecord.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDataReader.RecordsAffected
  commentId: P:System.Data.IDataReader.RecordsAffected
  parent: System.Data.IDataReader
  isExternal: false
  name: RecordsAffected
  nameWithType: IDataReader.RecordsAffected
  fullName: System.Data.IDataReader.RecordsAffected
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: false
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetBoolean(System.Int32)
  commentId: M:System.Data.IDataRecord.GetBoolean(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetBoolean(Int32)
  nameWithType: IDataRecord.GetBoolean(Int32)
  fullName: System.Data.IDataRecord.GetBoolean(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetBoolean(System.Int32)
    name: GetBoolean
    nameWithType: IDataRecord.GetBoolean
    fullName: System.Data.IDataRecord.GetBoolean
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetBoolean(System.Int32)
    name: GetBoolean
    nameWithType: IDataRecord.GetBoolean
    fullName: System.Data.IDataRecord.GetBoolean
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetByte(System.Int32)
  commentId: M:System.Data.IDataRecord.GetByte(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetByte(Int32)
  nameWithType: IDataRecord.GetByte(Int32)
  fullName: System.Data.IDataRecord.GetByte(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetByte(System.Int32)
    name: GetByte
    nameWithType: IDataRecord.GetByte
    fullName: System.Data.IDataRecord.GetByte
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetByte(System.Int32)
    name: GetByte
    nameWithType: IDataRecord.GetByte
    fullName: System.Data.IDataRecord.GetByte
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: false
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  commentId: M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetBytes(Int32, Int64, Byte[], Int32, Int32)
  nameWithType: IDataRecord.GetBytes(Int32, Int64, Byte[], Int32, Int32)
  fullName: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte[], System.Int32, System.Int32)
  nameWithType.vb: IDataRecord.GetBytes(Int32, Int64, Byte(), Int32, Int32)
  fullname.vb: System.Data.IDataRecord.GetBytes(System.Int32, System.Int64, System.Byte(), System.Int32, System.Int32)
  name.vb: GetBytes(Int32, Int64, Byte(), Int32, Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
    name: GetBytes
    nameWithType: IDataRecord.GetBytes
    fullName: System.Data.IDataRecord.GetBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
    name: GetBytes
    nameWithType: IDataRecord.GetBytes
    fullName: System.Data.IDataRecord.GetBytes
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: false
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Data.IDataRecord.GetChar(System.Int32)
  commentId: M:System.Data.IDataRecord.GetChar(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetChar(Int32)
  nameWithType: IDataRecord.GetChar(Int32)
  fullName: System.Data.IDataRecord.GetChar(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetChar(System.Int32)
    name: GetChar
    nameWithType: IDataRecord.GetChar
    fullName: System.Data.IDataRecord.GetChar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetChar(System.Int32)
    name: GetChar
    nameWithType: IDataRecord.GetChar
    fullName: System.Data.IDataRecord.GetChar
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char
  commentId: T:System.Char
  parent: System
  isExternal: false
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  commentId: M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetChars(Int32, Int64, Char[], Int32, Int32)
  nameWithType: IDataRecord.GetChars(Int32, Int64, Char[], Int32, Int32)
  fullName: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char[], System.Int32, System.Int32)
  nameWithType.vb: IDataRecord.GetChars(Int32, Int64, Char(), Int32, Int32)
  fullname.vb: System.Data.IDataRecord.GetChars(System.Int32, System.Int64, System.Char(), System.Int32, System.Int32)
  name.vb: GetChars(Int32, Int64, Char(), Int32, Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
    name: GetChars
    nameWithType: IDataRecord.GetChars
    fullName: System.Data.IDataRecord.GetChars
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
    name: GetChars
    nameWithType: IDataRecord.GetChars
    fullName: System.Data.IDataRecord.GetChars
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Char[]
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullname.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Data.Common.DbDataReader
  commentId: T:System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: Common.DbDataReader
  nameWithType: Common.DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDataTypeName(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetDataTypeName(Int32)
  nameWithType: IDataRecord.GetDataTypeName(Int32)
  fullName: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
    name: GetDataTypeName
    nameWithType: IDataRecord.GetDataTypeName
    fullName: System.Data.IDataRecord.GetDataTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
    name: GetDataTypeName
    nameWithType: IDataRecord.GetDataTypeName
    fullName: System.Data.IDataRecord.GetDataTypeName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetDateTime(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDateTime(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetDateTime(Int32)
  nameWithType: IDataRecord.GetDateTime(Int32)
  fullName: System.Data.IDataRecord.GetDateTime(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetDateTime(System.Int32)
    name: GetDateTime
    nameWithType: IDataRecord.GetDateTime
    fullName: System.Data.IDataRecord.GetDateTime
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetDateTime(System.Int32)
    name: GetDateTime
    nameWithType: IDataRecord.GetDateTime
    fullName: System.Data.IDataRecord.GetDateTime
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: false
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.IDataRecord.GetDecimal(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDecimal(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetDecimal(Int32)
  nameWithType: IDataRecord.GetDecimal(Int32)
  fullName: System.Data.IDataRecord.GetDecimal(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetDecimal(System.Int32)
    name: GetDecimal
    nameWithType: IDataRecord.GetDecimal
    fullName: System.Data.IDataRecord.GetDecimal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetDecimal(System.Int32)
    name: GetDecimal
    nameWithType: IDataRecord.GetDecimal
    fullName: System.Data.IDataRecord.GetDecimal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: false
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.IDataRecord.GetDouble(System.Int32)
  commentId: M:System.Data.IDataRecord.GetDouble(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetDouble(Int32)
  nameWithType: IDataRecord.GetDouble(Int32)
  fullName: System.Data.IDataRecord.GetDouble(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetDouble(System.Int32)
    name: GetDouble
    nameWithType: IDataRecord.GetDouble
    fullName: System.Data.IDataRecord.GetDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetDouble(System.Int32)
    name: GetDouble
    nameWithType: IDataRecord.GetDouble
    fullName: System.Data.IDataRecord.GetDouble
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: false
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.IDataRecord.GetFieldType(System.Int32)
  commentId: M:System.Data.IDataRecord.GetFieldType(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetFieldType(Int32)
  nameWithType: IDataRecord.GetFieldType(Int32)
  fullName: System.Data.IDataRecord.GetFieldType(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetFieldType(System.Int32)
    name: GetFieldType
    nameWithType: IDataRecord.GetFieldType
    fullName: System.Data.IDataRecord.GetFieldType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetFieldType(System.Int32)
    name: GetFieldType
    nameWithType: IDataRecord.GetFieldType
    fullName: System.Data.IDataRecord.GetFieldType
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: false
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Data.IDataRecord.GetFloat(System.Int32)
  commentId: M:System.Data.IDataRecord.GetFloat(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetFloat(Int32)
  nameWithType: IDataRecord.GetFloat(Int32)
  fullName: System.Data.IDataRecord.GetFloat(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetFloat(System.Int32)
    name: GetFloat
    nameWithType: IDataRecord.GetFloat
    fullName: System.Data.IDataRecord.GetFloat
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetFloat(System.Int32)
    name: GetFloat
    nameWithType: IDataRecord.GetFloat
    fullName: System.Data.IDataRecord.GetFloat
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: false
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.IDataRecord.GetGuid(System.Int32)
  commentId: M:System.Data.IDataRecord.GetGuid(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetGuid(Int32)
  nameWithType: IDataRecord.GetGuid(Int32)
  fullName: System.Data.IDataRecord.GetGuid(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetGuid(System.Int32)
    name: GetGuid
    nameWithType: IDataRecord.GetGuid
    fullName: System.Data.IDataRecord.GetGuid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetGuid(System.Int32)
    name: GetGuid
    nameWithType: IDataRecord.GetGuid
    fullName: System.Data.IDataRecord.GetGuid
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Guid
  commentId: T:System.Guid
  parent: System
  isExternal: false
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.IDataRecord.GetInt16(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt16(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetInt16(Int32)
  nameWithType: IDataRecord.GetInt16(Int32)
  fullName: System.Data.IDataRecord.GetInt16(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetInt16(System.Int32)
    name: GetInt16
    nameWithType: IDataRecord.GetInt16
    fullName: System.Data.IDataRecord.GetInt16
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetInt16(System.Int32)
    name: GetInt16
    nameWithType: IDataRecord.GetInt16
    fullName: System.Data.IDataRecord.GetInt16
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.IDataRecord.GetInt32(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt32(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetInt32(Int32)
  nameWithType: IDataRecord.GetInt32(Int32)
  fullName: System.Data.IDataRecord.GetInt32(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetInt32(System.Int32)
    name: GetInt32
    nameWithType: IDataRecord.GetInt32
    fullName: System.Data.IDataRecord.GetInt32
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetInt32(System.Int32)
    name: GetInt32
    nameWithType: IDataRecord.GetInt32
    fullName: System.Data.IDataRecord.GetInt32
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetInt64(System.Int32)
  commentId: M:System.Data.IDataRecord.GetInt64(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetInt64(Int32)
  nameWithType: IDataRecord.GetInt64(Int32)
  fullName: System.Data.IDataRecord.GetInt64(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetInt64(System.Int32)
    name: GetInt64
    nameWithType: IDataRecord.GetInt64
    fullName: System.Data.IDataRecord.GetInt64
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetInt64(System.Int32)
    name: GetInt64
    nameWithType: IDataRecord.GetInt64
    fullName: System.Data.IDataRecord.GetInt64
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetName(System.Int32)
  commentId: M:System.Data.IDataRecord.GetName(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetName(Int32)
  nameWithType: IDataRecord.GetName(Int32)
  fullName: System.Data.IDataRecord.GetName(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetName(System.Int32)
    name: GetName
    nameWithType: IDataRecord.GetName
    fullName: System.Data.IDataRecord.GetName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetName(System.Int32)
    name: GetName
    nameWithType: IDataRecord.GetName
    fullName: System.Data.IDataRecord.GetName
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetOrdinal(System.String)
  commentId: M:System.Data.IDataRecord.GetOrdinal(System.String)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetOrdinal(String)
  nameWithType: IDataRecord.GetOrdinal(String)
  fullName: System.Data.IDataRecord.GetOrdinal(System.String)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetOrdinal(System.String)
    name: GetOrdinal
    nameWithType: IDataRecord.GetOrdinal
    fullName: System.Data.IDataRecord.GetOrdinal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetOrdinal(System.String)
    name: GetOrdinal
    nameWithType: IDataRecord.GetOrdinal
    fullName: System.Data.IDataRecord.GetOrdinal
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: false
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: System.Data.IDataRecord.GetString(System.Int32)
  commentId: M:System.Data.IDataRecord.GetString(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetString(Int32)
  nameWithType: IDataRecord.GetString(Int32)
  fullName: System.Data.IDataRecord.GetString(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetString(System.Int32)
    name: GetString
    nameWithType: IDataRecord.GetString
    fullName: System.Data.IDataRecord.GetString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetString(System.Int32)
    name: GetString
    nameWithType: IDataRecord.GetString
    fullName: System.Data.IDataRecord.GetString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IO.TextReader
  commentId: T:System.IO.TextReader
  parent: System.IO
  isExternal: false
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Data.IDataRecord.GetValue(System.Int32)
  commentId: M:System.Data.IDataRecord.GetValue(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetValue(Int32)
  nameWithType: IDataRecord.GetValue(Int32)
  fullName: System.Data.IDataRecord.GetValue(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetValue(System.Int32)
    name: GetValue
    nameWithType: IDataRecord.GetValue
    fullName: System.Data.IDataRecord.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetValue(System.Int32)
    name: GetValue
    nameWithType: IDataRecord.GetValue
    fullName: System.Data.IDataRecord.GetValue
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetValues(System.Object[])
  commentId: M:System.Data.IDataRecord.GetValues(System.Object[])
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetValues(Object[])
  nameWithType: IDataRecord.GetValues(Object[])
  fullName: System.Data.IDataRecord.GetValues(System.Object[])
  nameWithType.vb: IDataRecord.GetValues(Object())
  fullname.vb: System.Data.IDataRecord.GetValues(System.Object())
  name.vb: GetValues(Object())
  spec.csharp:
  - uid: System.Data.IDataRecord.GetValues(System.Object[])
    name: GetValues
    nameWithType: IDataRecord.GetValues
    fullName: System.Data.IDataRecord.GetValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetValues(System.Object[])
    name: GetValues
    nameWithType: IDataRecord.GetValues
    fullName: System.Data.IDataRecord.GetValues
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.IsDBNull(System.Int32)
  commentId: M:System.Data.IDataRecord.IsDBNull(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: IsDBNull(Int32)
  nameWithType: IDataRecord.IsDBNull(Int32)
  fullName: System.Data.IDataRecord.IsDBNull(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.IsDBNull(System.Int32)
    name: IsDBNull
    nameWithType: IDataRecord.IsDBNull
    fullName: System.Data.IDataRecord.IsDBNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.IsDBNull(System.Int32)
    name: IsDBNull
    nameWithType: IDataRecord.IsDBNull
    fullName: System.Data.IDataRecord.IsDBNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataReader.NextResult
  commentId: M:System.Data.IDataReader.NextResult
  parent: System.Data.IDataReader
  isExternal: false
  name: NextResult()
  nameWithType: IDataReader.NextResult()
  fullName: System.Data.IDataReader.NextResult()
  spec.csharp:
  - uid: System.Data.IDataReader.NextResult
    name: NextResult
    nameWithType: IDataReader.NextResult
    fullName: System.Data.IDataReader.NextResult
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataReader.NextResult
    name: NextResult
    nameWithType: IDataReader.NextResult
    fullName: System.Data.IDataReader.NextResult
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataReader.Read
  commentId: M:System.Data.IDataReader.Read
  parent: System.Data.IDataReader
  isExternal: false
  name: Read()
  nameWithType: IDataReader.Read()
  fullName: System.Data.IDataReader.Read()
  spec.csharp:
  - uid: System.Data.IDataReader.Read
    name: Read
    nameWithType: IDataReader.Read
    fullName: System.Data.IDataReader.Read
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataReader.Read
    name: Read
    nameWithType: IDataReader.Read
    fullName: System.Data.IDataReader.Read
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataRecord.GetData(System.Int32)
  commentId: M:System.Data.IDataRecord.GetData(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: true
  name: GetData(Int32)
  nameWithType: IDataRecord.GetData(Int32)
  fullName: System.Data.IDataRecord.GetData(System.Int32)
  spec.csharp:
  - uid: System.Data.IDataRecord.GetData(System.Int32)
    name: GetData
    nameWithType: IDataRecord.GetData
    fullName: System.Data.IDataRecord.GetData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataRecord.GetData(System.Int32)
    name: GetData
    nameWithType: IDataRecord.GetData
    fullName: System.Data.IDataRecord.GetData
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataReader.Close
  commentId: M:System.Data.IDataReader.Close
  parent: System.Data.IDataReader
  isExternal: false
  name: Close()
  nameWithType: IDataReader.Close()
  fullName: System.Data.IDataReader.Close()
  spec.csharp:
  - uid: System.Data.IDataReader.Close
    name: Close
    nameWithType: IDataReader.Close
    fullName: System.Data.IDataReader.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataReader.Close
    name: Close
    nameWithType: IDataReader.Close
    fullName: System.Data.IDataReader.Close
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.IDataReader.GetSchemaTable
  commentId: M:System.Data.IDataReader.GetSchemaTable
  parent: System.Data.IDataReader
  isExternal: false
  name: GetSchemaTable()
  nameWithType: IDataReader.GetSchemaTable()
  fullName: System.Data.IDataReader.GetSchemaTable()
  spec.csharp:
  - uid: System.Data.IDataReader.GetSchemaTable
    name: GetSchemaTable
    nameWithType: IDataReader.GetSchemaTable
    fullName: System.Data.IDataReader.GetSchemaTable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Data.IDataReader.GetSchemaTable
    name: GetSchemaTable
    nameWithType: IDataReader.GetSchemaTable
    fullName: System.Data.IDataReader.GetSchemaTable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Data.DataTable
  commentId: T:System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
- uid: System.Data.Common.DbException
  commentId: T:System.Data.Common.DbException
  isExternal: false
  name: DbException
  nameWithType: DbException
  fullName: System.Data.Common.DbException
