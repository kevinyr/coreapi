### YamlMime:ManagedReference
items:
- uid: System.Collections.ArrayList
  commentId: T:System.Collections.ArrayList
  id: ArrayList
  parent: System.Collections
  children:
  - System.Collections.ArrayList.#ctor
  - System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  - System.Collections.ArrayList.#ctor(System.Int32)
  - System.Collections.ArrayList.Adapter(System.Collections.IList)
  - System.Collections.ArrayList.Add(System.Object)
  - System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.BinarySearch(System.Object)
  - System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  - System.Collections.ArrayList.Capacity
  - System.Collections.ArrayList.Clear
  - System.Collections.ArrayList.Clone
  - System.Collections.ArrayList.Contains(System.Object)
  - System.Collections.ArrayList.CopyTo(System.Array)
  - System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  - System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  - System.Collections.ArrayList.Count
  - System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  - System.Collections.ArrayList.FixedSize(System.Collections.IList)
  - System.Collections.ArrayList.GetEnumerator
  - System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  - System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.IsFixedSize
  - System.Collections.ArrayList.IsReadOnly
  - System.Collections.ArrayList.IsSynchronized
  - System.Collections.ArrayList.Item(System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  - System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  - System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  - System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  - System.Collections.ArrayList.Remove(System.Object)
  - System.Collections.ArrayList.RemoveAt(System.Int32)
  - System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  - System.Collections.ArrayList.Reverse
  - System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  - System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - System.Collections.ArrayList.Sort
  - System.Collections.ArrayList.Sort(System.Collections.IComparer)
  - System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  - System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  - System.Collections.ArrayList.Synchronized(System.Collections.IList)
  - System.Collections.ArrayList.SyncRoot
  - System.Collections.ArrayList.ToArray
  - System.Collections.ArrayList.ToArray(System.Type)
  - System.Collections.ArrayList.TrimToSize
  langs:
  - csharp
  - vb
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ArrayList
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 34
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Implements the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> interface using an array whose size is dynamically increased as required.</p>\n"
  syntax:
    content: >-
      [DebuggerTypeProxy(typeof (ArrayList.ArrayListDebugView))]

      [DebuggerDisplay("Count = {Count}")]

      [Serializable]

      [ComVisible(true)]

      public class ArrayList : IList, ICollection, IEnumerable, ICloneable
    content.vb: >-
      <DebuggerTypeProxy(GetType(ArrayList.ArrayListDebugView))>

      <DebuggerDisplay("Count = {Count}")>

      <Serializable>

      <ComVisible(True)>

      Public Class ArrayList
          Implements IList, ICollection, IEnumerable, ICloneable
  seealso:
  - linkId: System.Collections.IList
    commentId: T:System.Collections.IList
  - linkId: System.Collections.Generic.List`1
    commentId: T:System.Collections.Generic.List`1
  inheritance:
  - System.Object
  implements:
  - System.Collections.IList
  - System.Collections.ICollection
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  extensionMethods:
  - System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  - System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  - System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  - System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: System.Collections.ArrayList.#ctor
  commentId: M:System.Collections.ArrayList.#ctor
  id: '#ctor'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ArrayList()
  nameWithType: ArrayList.ArrayList()
  fullName: System.Collections.ArrayList.ArrayList()
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 61
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the default initial capacity.</p>\n"
  syntax:
    content: public ArrayList()
    content.vb: Public Sub New
  seealso:
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.#ctor(System.Collections.ICollection)
  id: '#ctor(System.Collections.ICollection)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ArrayList(ICollection)
  nameWithType: ArrayList.ArrayList(ICollection)
  fullName: System.Collections.ArrayList.ArrayList(System.Collections.ICollection)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 83
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class that contains elements copied from the specified collection and that has the same initial capacity as the number of elements copied.</p>\n"
  syntax:
    content: public ArrayList(ICollection c)
    content.vb: Public Sub New(c As ICollection)
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copied to the new list. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.ArrayList.#ctor(System.Int32)
  commentId: M:System.Collections.ArrayList.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ArrayList(Int32)
  nameWithType: ArrayList.ArrayList(Int32)
  fullName: System.Collections.ArrayList.ArrayList(System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 69
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> class that is empty and has the specified initial capacity.</p>\n"
  syntax:
    content: public ArrayList(int capacity)
    content.vb: Public Sub New(capacity As Integer)
    parameters:
    - id: capacity
      type: System.Int32
      description: "\n<p>The number of elements that the new list can initially store. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>capacity</em> is less than zero. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Collections.ArrayList.Capacity
  commentId: P:System.Collections.ArrayList.Capacity
  id: Capacity
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: ArrayList.Capacity
  fullName: System.Collections.ArrayList.Capacity
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Capacity
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 103
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  syntax:
    content: public virtual int Capacity { get; set; }
    content.vb: Public Overridable Property Capacity As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements that the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> can contain.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<xref href=\"System.Collections.ArrayList.Capacity\" data-throw-if-not-resolved=\"false\"></xref> is set to a value that is less than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "\n<p>There is not enough memory available on the system.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Count
  commentId: P:System.Collections.ArrayList.Count
  id: Count
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: ArrayList.Count
  fullName: System.Collections.ArrayList.Count
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Count
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 132
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets the number of elements actually contained in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int Count { get; }
    content.vb: Public Overridable ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The number of elements actually contained in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  implements:
  - System.Collections.ICollection.Count
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.IsFixedSize
  commentId: P:System.Collections.ArrayList.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IsFixedSize
  nameWithType: ArrayList.IsFixedSize
  fullName: System.Collections.ArrayList.IsFixedSize
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsFixedSize
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 139
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size.</p>\n"
  syntax:
    content: public virtual bool IsFixedSize { get; }
    content.vb: Public Overridable ReadOnly Property IsFixedSize As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  implements:
  - System.Collections.IList.IsFixedSize
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.IsReadOnly
  commentId: P:System.Collections.ArrayList.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: ArrayList.IsReadOnly
  fullName: System.Collections.ArrayList.IsReadOnly
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsReadOnly
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 145
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    content.vb: Public Overridable ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only; otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
    commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  implements:
  - System.Collections.IList.IsReadOnly
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.IsSynchronized
  commentId: P:System.Collections.ArrayList.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IsSynchronized
  nameWithType: ArrayList.IsSynchronized
  fullName: System.Collections.ArrayList.IsSynchronized
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IsSynchronized
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 150
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets a value indicating whether access to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe).</p>\n"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    content.vb: Public Overridable ReadOnly Property IsSynchronized As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if access to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is synchronized (thread safe); otherwise, <strong>false</strong>. The default is <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.SyncRoot
    commentId: P:System.Collections.ArrayList.SyncRoot
  - linkId: System.Collections.ArrayList.Synchronized(System.Collections.IList)
    commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)
  implements:
  - System.Collections.ICollection.IsSynchronized
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.Item(System.Int32)
  commentId: P:System.Collections.ArrayList.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: ArrayList.Item[Int32]
  fullName: System.Collections.ArrayList.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: this[]
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 166
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets or sets the element at the specified index.</p>\n"
  syntax:
    content: public virtual object this[int index] { get; set; }
    content.vb: Public Overridable Property Item(index As Integer) As Object
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to get or set. </p>\n"
    return:
      type: System.Object
      description: "\n<p>The element at the specified index.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  implements:
  - System.Collections.IList.Item(System.Int32)
  nameWithType.vb: ArrayList.Item(Int32)
  modifiers.csharp:
  - public
  - virtual
  - get
  - set
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: System.Collections.ArrayList.Item(System.Int32)
  name.vb: Item(Int32)
- uid: System.Collections.ArrayList.SyncRoot
  commentId: P:System.Collections.ArrayList.SyncRoot
  id: SyncRoot
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: SyncRoot
  nameWithType: ArrayList.SyncRoot
  fullName: System.Collections.ArrayList.SyncRoot
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SyncRoot
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 155
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Gets an object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object SyncRoot { get; }
    content.vb: Public Overridable ReadOnly Property SyncRoot As Object
    parameters: []
    return:
      type: System.Object
      description: "\n<p>An object that can be used to synchronize access to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IsSynchronized
    commentId: P:System.Collections.ArrayList.IsSynchronized
  - linkId: System.Collections.ArrayList.Synchronized(System.Collections.IList)
    commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)
  implements:
  - System.Collections.ICollection.SyncRoot
  modifiers.csharp:
  - public
  - virtual
  - get
  modifiers.vb:
  - Public
  - Overridable
  - ReadOnly
- uid: System.Collections.ArrayList.Adapter(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.Adapter(System.Collections.IList)
  id: Adapter(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Adapter(IList)
  nameWithType: ArrayList.Adapter(IList)
  fullName: System.Collections.ArrayList.Adapter(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Adapter
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 188
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper for a specific <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public static ArrayList Adapter(IList list)
    content.vb: Public Shared Function Adapter(list As IList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to wrap.</p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper around the <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.IList
    commentId: T:System.Collections.IList
  - linkId: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
    commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  - linkId: System.Collections.ArrayList.Reverse
    commentId: M:System.Collections.ArrayList.Reverse
  - linkId: System.Collections.ArrayList.Sort
    commentId: M:System.Collections.ArrayList.Sort
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Add(System.Object)
  commentId: M:System.Collections.ArrayList.Add(System.Object)
  id: Add(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Add(Object)
  nameWithType: ArrayList.Add(Object)
  fullName: System.Collections.ArrayList.Add(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Add
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 200
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds an object to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int Add(object value)
    content.vb: Public Overridable Function Add(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to be added to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the <em>value</em> has been added.</p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - linkId: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  - linkId: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  implements:
  - System.Collections.IList.Add(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  id: AddRange(System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: AddRange(ICollection)
  nameWithType: ArrayList.AddRange(ICollection)
  fullName: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: AddRange
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 212
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Adds the elements of an <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void AddRange(ICollection c)
    content.vb: Public Overridable Sub AddRange(c As ICollection)
    parameters:
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements should be added to the end of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ICollection
    commentId: T:System.Collections.ICollection
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  - linkId: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  - linkId: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - linkId: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Int32,System.Int32,System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: BinarySearch(Int32, Int32, Object, IComparer)
  nameWithType: ArrayList.BinarySearch(Int32, Int32, Object, IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(System.Int32, System.Int32, System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 236
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches a range of elements in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\n"
  syntax:
    content: public virtual int BinarySearch(int index, int count, object value, IComparer comparer)
    content.vb: Public Overridable Function BinarySearch(index As Integer, count As Integer, value As Object, comparer As IComparer) As Integer
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the range to search. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate. The value can be <strong>null</strong>. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer that is the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>comparer</em> is <strong>null</strong> and neither <em>value</em> nor the elements of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong> and <em>value</em> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  seealso:
  - linkId: System.Collections.IComparer
    commentId: T:System.Collections.IComparer
  - linkId: System.IComparable
    commentId: T:System.IComparable
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.BinarySearch(System.Object)
  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object)
  id: BinarySearch(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: BinarySearch(Object)
  nameWithType: ArrayList.BinarySearch(Object)
  fullName: System.Collections.ArrayList.BinarySearch(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 250
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches the entire sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> for an element using the default comparer and returns the zero-based index of the element.</p>\n"
  syntax:
    content: public virtual int BinarySearch(object value)
    content.vb: Public Overridable Function BinarySearch(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>Neither <em>value</em> nor the elements of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>value</em> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.BinarySearch(System.Object,System.Collections.IComparer)
  id: BinarySearch(System.Object,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: BinarySearch(Object, IComparer)
  nameWithType: ArrayList.BinarySearch(Object, IComparer)
  fullName: System.Collections.ArrayList.BinarySearch(System.Object, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: BinarySearch
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 256
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches the entire sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> for an element using the specified comparer and returns the zero-based index of the element.</p>\n"
  syntax:
    content: public virtual int BinarySearch(object value, IComparer comparer)
    content.vb: Public Overridable Function BinarySearch(value As Object, comparer As IComparer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate. The value can be <strong>null</strong>. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>\n<strong>null</strong> to use the default comparer that is the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of <em>value</em> in the sorted <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if <em>value</em> is found; otherwise, a negative number, which is the bitwise complement of the index of the next element that is larger than <em>value</em> or, if there is no larger element, the bitwise complement of <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong> and neither <em>value</em> nor the elements of <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> implement the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> interface. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>\n<em>comparer</em> is <strong>null</strong> and <em>value</em> is not of the same type as the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Clear
  commentId: M:System.Collections.ArrayList.Clear
  id: Clear
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: ArrayList.Clear()
  fullName: System.Collections.ArrayList.Clear()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clear
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 264
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes all elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Clear()
    content.vb: Public Overridable Sub Clear
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.TrimToSize
    commentId: M:System.Collections.ArrayList.TrimToSize
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  - linkId: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  implements:
  - System.Collections.IList.Clear
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Clone
  commentId: M:System.Collections.ArrayList.Clone
  id: Clone
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Clone()
  nameWithType: ArrayList.Clone()
  fullName: System.Collections.ArrayList.Clone()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Clone
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 276
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Creates a shallow copy of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual object Clone()
    content.vb: Public Overridable Function Clone As Object
    return:
      type: System.Object
      description: "\n<p>A shallow copy of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Contains(System.Object)
  commentId: M:System.Collections.ArrayList.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Contains(Object)
  nameWithType: ArrayList.Contains(Object)
  fullName: System.Collections.ArrayList.Contains(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contains
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 291
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Determines whether an element is in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual bool Contains(object item)
    content.vb: Public Overridable Function Contains(item As Object) As Boolean
    parameters:
    - id: item
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>item</em> is found in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - linkId: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  implements:
  - System.Collections.IList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.CopyTo(System.Array)
  commentId: M:System.Collections.ArrayList.CopyTo(System.Array)
  id: CopyTo(System.Array)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: CopyTo(Array)
  nameWithType: ArrayList.CopyTo(Array)
  fullName: System.Collections.ArrayList.CopyTo(System.Array)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 309
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the beginning of the target array.</p>\n"
  syntax:
    content: public virtual void CopyTo(Array array)
    content.vb: Public Overridable Sub CopyTo(array As Array)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is greater than the number of elements that the destination <em>array</em> can contain. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ArrayList.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: CopyTo(Array, Int32)
  nameWithType: ArrayList.CopyTo(Array, Int32)
  fullName: System.Collections.ArrayList.CopyTo(System.Array, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 316
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  syntax:
    content: public virtual void CopyTo(Array array, int arrayIndex)
    content.vb: Public Overridable Sub CopyTo(array As Array, arrayIndex As Integer)
    parameters:
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>arrayIndex</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>The number of elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  implements:
  - System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  id: CopyTo(System.Int32,System.Array,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: CopyTo(Int32, Array, Int32, Int32)
  nameWithType: ArrayList.CopyTo(Int32, Array, Int32, Int32)
  fullName: System.Collections.ArrayList.CopyTo(System.Int32, System.Array, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CopyTo
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 328
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies a range of elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a compatible one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref>, starting at the specified index of the target array.</p>\n"
  syntax:
    content: public virtual void CopyTo(int index, Array array, int arrayIndex, int count)
    content.vb: Public Overridable Sub CopyTo(index As Integer, array As Array, arrayIndex As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> at which copying begins. </p>\n"
    - id: array
      type: System.Array
      description: "\n<p>The one-dimensional <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> that is the destination of the elements copied from <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The <xref href=\"System.Array\" data-throw-if-not-resolved=\"false\"></xref> must have zero-based indexing. </p>\n"
    - id: arrayIndex
      type: System.Int32
      description: "\n<p>The zero-based index in <em>array</em> at which copying begins. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to copy. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>array</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>arrayIndex</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>array</em> is multidimensional.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than the <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref> of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>The number of elements from <em>index</em> to the end of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is greater than the available space from <em>arrayIndex</em> to the end of the destination <em>array</em>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the type of the destination <em>array</em>. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  id: FixedSize(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: FixedSize(ArrayList)
  nameWithType: ArrayList.FixedSize(ArrayList)
  fullName: System.Collections.ArrayList.FixedSize(System.Collections.ArrayList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FixedSize
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 367
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  syntax:
    content: public static ArrayList FixedSize(ArrayList list)
    content.vb: Public Shared Function FixedSize(list As ArrayList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to wrap. </p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>An <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.FixedSize(System.Collections.IList)
  id: FixedSize(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: FixedSize(IList)
  nameWithType: ArrayList.FixedSize(IList)
  fullName: System.Collections.ArrayList.FixedSize(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: FixedSize
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 356
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  syntax:
    content: public static IList FixedSize(IList list)
    content.vb: Public Shared Function FixedSize(list As IList) As IList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to wrap. </p>\n"
    return:
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper with a fixed size.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.GetEnumerator
  commentId: M:System.Collections.ArrayList.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: ArrayList.GetEnumerator()
  fullName: System.Collections.ArrayList.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 380
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator for the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator()
    content.vb: Public Overridable Function GetEnumerator As IEnumerator
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.GetEnumerator(System.Int32,System.Int32)
  id: GetEnumerator(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: GetEnumerator(Int32, Int32)
  nameWithType: ArrayList.GetEnumerator(Int32, Int32)
  fullName: System.Collections.ArrayList.GetEnumerator(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetEnumerator
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 390
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an enumerator for a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual IEnumerator GetEnumerator(int index, int count)
    content.vb: Public Overridable Function GetEnumerator(index As Integer, count As Integer) As IEnumerator
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> section that the enumerator should refer to. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> section that the enumerator should refer to. </p>\n"
    return:
      type: System.Collections.IEnumerator
      description: "\n<p>An <xref href=\"System.Collections.IEnumerator\" data-throw-if-not-resolved=\"false\"></xref> for the specified range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.IEnumerator
    commentId: T:System.Collections.IEnumerator
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  id: GetRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: GetRange(Int32, Int32)
  nameWithType: ArrayList.GetRange(Int32, Int32)
  fullName: System.Collections.ArrayList.GetRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetRange
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 684
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual ArrayList GetRange(int index, int count)
    content.vb: Public Overridable Function GetRange(index As Integer, count As Integer) As ArrayList
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which the range starts. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the range. </p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>An <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> which represents a subset of the elements in the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.IndexOf(System.Object)
  commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  id: IndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IndexOf(Object)
  nameWithType: ArrayList.IndexOf(Object)
  fullName: System.Collections.ArrayList.IndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 411
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int IndexOf(object value)
    content.vb: Public Overridable Function IndexOf(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  - linkId: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  implements:
  - System.Collections.IList.IndexOf(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32)
  id: IndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IndexOf(Object, Int32)
  nameWithType: ArrayList.IndexOf(Object, Int32)
  fullName: System.Collections.ArrayList.IndexOf(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 425
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from the specified index to the last element.</p>\n"
  syntax:
    content: public virtual int IndexOf(object value, int startIndex)
    content.vb: Public Overridable Function IndexOf(value As Object, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from <em>startIndex</em> to the last element, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  - linkId: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.IndexOf(System.Object,System.Int32,System.Int32)
  id: IndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: IndexOf(Object, Int32, Int32)
  nameWithType: ArrayList.IndexOf(Object, Int32, Int32)
  fullName: System.Collections.ArrayList.IndexOf(System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: IndexOf
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 442
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the first occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that starts at the specified index and contains the specified number of elements.</p>\n"
  syntax:
    content: public virtual int IndexOf(object value, int startIndex, int count)
    content.vb: Public Overridable Function IndexOf(value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the search. 0 (zero) is valid in an empty list.</p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the first occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that starts at <em>startIndex</em> and contains <em>count</em> number of elements, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.LastIndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  - linkId: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  id: Insert(System.Int32,System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Insert(Int32, Object)
  nameWithType: ArrayList.Insert(Int32, Object)
  fullName: System.Collections.ArrayList.Insert(System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Insert
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 455
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Inserts an element into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  syntax:
    content: public virtual void Insert(int index, object value)
    content.vb: Public Overridable Sub Insert(index As Integer, value As Object)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which <em>value</em> should be inserted. </p>\n"
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to insert. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - linkId: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  implements:
  - System.Collections.IList.Insert(System.Int32,System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  id: InsertRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: InsertRange(Int32, ICollection)
  nameWithType: ArrayList.InsertRange(Int32, ICollection)
  fullName: System.Collections.ArrayList.InsertRange(System.Int32, System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: InsertRange
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 475
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Inserts the elements of a collection into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.</p>\n"
  syntax:
    content: public virtual void InsertRange(int index, ICollection c)
    content.vb: Public Overridable Sub InsertRange(index As Integer, c As ICollection)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index at which the new elements should be inserted. </p>\n"
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements should be inserted into the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  - linkId: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.LastIndexOf(System.Object)
  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object)
  id: LastIndexOf(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: LastIndexOf(Object)
  nameWithType: ArrayList.LastIndexOf(Object)
  fullName: System.Collections.ArrayList.LastIndexOf(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 506
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the last occurrence within the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(object value)
    content.vb: Public Overridable Function LastIndexOf(value As Object) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the entire the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>, if found; otherwise, -1.</p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - linkId: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32)
  id: LastIndexOf(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: LastIndexOf(Object, Int32)
  nameWithType: ArrayList.LastIndexOf(Object, Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 521
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to the specified index.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(object value, int startIndex)
    content.vb: Public Overridable Function LastIndexOf(value As Object, startIndex As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that extends from the first element to <em>startIndex</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - linkId: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.LastIndexOf(System.Object,System.Int32,System.Int32)
  id: LastIndexOf(System.Object,System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: LastIndexOf(Object, Int32, Int32)
  nameWithType: ArrayList.LastIndexOf(Object, Int32, Int32)
  fullName: System.Collections.ArrayList.LastIndexOf(System.Object, System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: LastIndexOf
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 539
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Searches for the specified <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> and returns the zero-based index of the last occurrence within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that contains the specified number of elements and ends at the specified index.</p>\n"
  syntax:
    content: public virtual int LastIndexOf(object value, int startIndex, int count)
    content.vb: Public Overridable Function LastIndexOf(value As Object, startIndex As Integer, count As Integer) As Integer
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to locate in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: startIndex
      type: System.Int32
      description: "\n<p>The zero-based starting index of the backward search. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the section to search. </p>\n"
    return:
      type: System.Int32
      description: "\n<p>The zero-based index of the last occurrence of <em>value</em> within the range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> that contains <em>count</em> number of elements and ends at <em>startIndex</em>, if found; otherwise, -1.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>startIndex</em> is outside the range of valid indexes for the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>startIndex</em> and <em>count</em> do not specify a valid section in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IndexOf(System.Object)
    commentId: M:System.Collections.ArrayList.IndexOf(System.Object)
  - linkId: System.Collections.ArrayList.Contains(System.Object)
    commentId: M:System.Collections.ArrayList.Contains(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  id: ReadOnly(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ReadOnly(ArrayList)
  nameWithType: ArrayList.ReadOnly(ArrayList)
  fullName: System.Collections.ArrayList.ReadOnly(System.Collections.ArrayList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadOnly
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 569
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a read-only <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper.</p>\n"
  syntax:
    content: public static ArrayList ReadOnly(ArrayList list)
    content.vb: Public Shared Function ReadOnly(list As ArrayList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to wrap. </p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>A read-only <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper around <em>list</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IsReadOnly
    commentId: P:System.Collections.ArrayList.IsReadOnly
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  id: ReadOnly(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ReadOnly(IList)
  nameWithType: ArrayList.ReadOnly(IList)
  fullName: System.Collections.ArrayList.ReadOnly(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ReadOnly
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 557
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns a read-only <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper.</p>\n"
  syntax:
    content: public static IList ReadOnly(IList list)
    content.vb: Public Shared Function ReadOnly(list As IList) As IList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to wrap. </p>\n"
    return:
      type: System.Collections.IList
      description: "\n<p>A read-only <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper around <em>list</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.IsReadOnly
    commentId: P:System.Collections.ArrayList.IsReadOnly
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Remove(System.Object)
  commentId: M:System.Collections.ArrayList.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Remove(Object)
  nameWithType: ArrayList.Remove(Object)
  fullName: System.Collections.ArrayList.Remove(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Remove
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 580
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the first occurrence of a specific object from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Remove(object obj)
    content.vb: Public Overridable Sub Remove(obj As Object)
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to remove from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.RemoveAt(System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)
  - linkId: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - linkId: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  implements:
  - System.Collections.IList.Remove(System.Object)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.RemoveAt(System.Int32)
  commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: ArrayList.RemoveAt(Int32)
  fullName: System.Collections.ArrayList.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveAt
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 592
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes the element at the specified index of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void RemoveAt(int index)
    content.vb: Public Overridable Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based index of the element to remove. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> is equal to or greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  - linkId: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.Add(System.Object)
    commentId: M:System.Collections.ArrayList.Add(System.Object)
  - linkId: System.Collections.ArrayList.Insert(System.Int32,System.Object)
    commentId: M:System.Collections.ArrayList.Insert(System.Int32,System.Object)
  implements:
  - System.Collections.IList.RemoveAt(System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  id: RemoveRange(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: RemoveRange(Int32, Int32)
  nameWithType: ArrayList.RemoveRange(Int32, Int32)
  fullName: System.Collections.ArrayList.RemoveRange(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: RemoveRange
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 608
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Removes a range of elements from the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void RemoveRange(int index, int count)
    content.vb: Public Overridable Sub RemoveRange(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range of elements to remove. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements to remove. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Remove(System.Object)
    commentId: M:System.Collections.ArrayList.Remove(System.Object)
  - linkId: System.Collections.ArrayList.RemoveAt(System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveAt(System.Int32)
  - linkId: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  commentId: M:System.Collections.ArrayList.Repeat(System.Object,System.Int32)
  id: Repeat(System.Object,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Repeat(Object, Int32)
  nameWithType: ArrayList.Repeat(Object, Int32)
  fullName: System.Collections.ArrayList.Repeat(System.Object, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Repeat
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 632
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> whose elements are copies of the specified value.</p>\n"
  syntax:
    content: public static ArrayList Repeat(object value, int count)
    content.vb: Public Shared Function Repeat(value As Object, count As Integer) As ArrayList
    parameters:
    - id: value
      type: System.Object
      description: "\n<p>The <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> to copy multiple times in the new <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The value can be <strong>null</strong>. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of times <em>value</em> should be copied. </p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>An <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> with <em>count</em> number of elements, all of which are copies of <em>value</em>.</p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>count</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Reverse
  commentId: M:System.Collections.ArrayList.Reverse
  id: Reverse
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Reverse()
  nameWithType: ArrayList.Reverse()
  fullName: System.Collections.ArrayList.Reverse()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 645
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Reverses the order of the elements in the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Reverse()
    content.vb: Public Overridable Sub Reverse
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  commentId: M:System.Collections.ArrayList.Reverse(System.Int32,System.Int32)
  id: Reverse(System.Int32,System.Int32)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Reverse(Int32, Int32)
  nameWithType: ArrayList.Reverse(Int32, Int32)
  fullName: System.Collections.ArrayList.Reverse(System.Int32, System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Reverse
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 657
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Reverses the order of the elements in the specified range.</p>\n"
  syntax:
    content: public virtual void Reverse(int index, int count)
    content.vb: Public Overridable Sub Reverse(index As Integer, count As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to reverse. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The number of elements in the range to reverse. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not denote a valid range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  commentId: M:System.Collections.ArrayList.SetRange(System.Int32,System.Collections.ICollection)
  id: SetRange(System.Int32,System.Collections.ICollection)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: SetRange(Int32, ICollection)
  nameWithType: ArrayList.SetRange(Int32, ICollection)
  fullName: System.Collections.ArrayList.SetRange(System.Int32, System.Collections.ICollection)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: SetRange
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 672
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the elements of a collection over a range of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void SetRange(int index, ICollection c)
    content.vb: Public Overridable Sub SetRange(index As Integer, c As ICollection)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> index at which to start copying the elements of <em>c</em>. </p>\n"
    - id: c
      type: System.Collections.ICollection
      description: "\n<p>The <xref href=\"System.Collections.ICollection\" data-throw-if-not-resolved=\"false\"></xref> whose elements to copy to the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. The collection itself cannot be <strong>null</strong>, but it can contain elements that are <strong>null</strong>. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>index</em> plus the number of elements in <em>c</em> is greater than <xref href=\"System.Collections.ArrayList.Count\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>c</em> is <strong>null</strong>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.AddRange(System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.AddRange(System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
    commentId: M:System.Collections.ArrayList.InsertRange(System.Int32,System.Collections.ICollection)
  - linkId: System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.GetRange(System.Int32,System.Int32)
  - linkId: System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
    commentId: M:System.Collections.ArrayList.RemoveRange(System.Int32,System.Int32)
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Sort
  commentId: M:System.Collections.ArrayList.Sort
  id: Sort
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Sort()
  nameWithType: ArrayList.Sort()
  fullName: System.Collections.ArrayList.Sort()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 696
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void Sort()
    content.vb: Public Overridable Sub Sort
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.Sort(System.Collections.IComparer)
  id: Sort(System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Sort(IComparer)
  nameWithType: ArrayList.Sort(IComparer)
  fullName: System.Collections.ArrayList.Sort(System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 703
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sorts the elements in the entire <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  syntax:
    content: public virtual void Sort(IComparer comparer)
    content.vb: Public Overridable Sub Sort(comparer As IComparer)
    parameters:
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred while comparing two elements.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<strong>null</strong> is passed for <em>comparer</em>, and the elements in the list do not implement <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  commentId: M:System.Collections.ArrayList.Sort(System.Int32,System.Int32,System.Collections.IComparer)
  id: Sort(System.Int32,System.Int32,System.Collections.IComparer)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Sort(Int32, Int32, IComparer)
  nameWithType: ArrayList.Sort(Int32, Int32, IComparer)
  fullName: System.Collections.ArrayList.Sort(System.Int32, System.Int32, System.Collections.IComparer)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Sort
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 716
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sorts the elements in a range of elements in <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> using the specified comparer.</p>\n"
  syntax:
    content: public virtual void Sort(int index, int count, IComparer comparer)
    content.vb: Public Overridable Sub Sort(index As Integer, count As Integer, comparer As IComparer)
    parameters:
    - id: index
      type: System.Int32
      description: "\n<p>The zero-based starting index of the range to sort. </p>\n"
    - id: count
      type: System.Int32
      description: "\n<p>The length of the range to sort. </p>\n"
    - id: comparer
      type: System.Collections.IComparer
      description: "\n<p>The <xref href=\"System.Collections.IComparer\" data-throw-if-not-resolved=\"false\"></xref> implementation to use when comparing elements.</p>\n<p>-or- </p>\n<p>A null reference (<strong>Nothing</strong> in Visual Basic) to use the <xref href=\"System.IComparable\" data-throw-if-not-resolved=\"false\"></xref> implementation of each element. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>index</em> is less than zero.</p>\n<p>-or- </p>\n<p>\n<em>count</em> is less than zero. </p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>index</em> and <em>count</em> do not specify a valid range in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>. </p>\n"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only. </p>\n"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "\n<p>An error occurred while comparing two elements.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  id: Synchronized(System.Collections.ArrayList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Synchronized(ArrayList)
  nameWithType: ArrayList.Synchronized(ArrayList)
  fullName: System.Collections.ArrayList.Synchronized(System.Collections.ArrayList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Synchronized
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 742
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true)]

      public static ArrayList Synchronized(ArrayList list)
    content.vb: >-
      <HostProtection(Synchronization:=True)>

      Public Shared Function Synchronized(list As ArrayList) As ArrayList
    parameters:
    - id: list
      type: System.Collections.ArrayList
      description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to synchronize. </p>\n"
    return:
      type: System.Collections.ArrayList
      description: "\n<p>An <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.SyncRoot
    commentId: P:System.Collections.ArrayList.SyncRoot
  - linkId: System.Collections.ArrayList.IsSynchronized
    commentId: P:System.Collections.ArrayList.IsSynchronized
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  commentId: M:System.Collections.ArrayList.Synchronized(System.Collections.IList)
  id: Synchronized(System.Collections.IList)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: Synchronized(IList)
  nameWithType: ArrayList.Synchronized(IList)
  fullName: System.Collections.ArrayList.Synchronized(System.Collections.IList)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Synchronized
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 731
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Returns an <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  syntax:
    content: >-
      [HostProtection(Synchronization = true)]

      public static IList Synchronized(IList list)
    content.vb: >-
      <HostProtection(Synchronization:=True)>

      Public Shared Function Synchronized(list As IList) As IList
    parameters:
    - id: list
      type: System.Collections.IList
      description: "\n<p>The <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> to synchronize. </p>\n"
    return:
      type: System.Collections.IList
      description: "\n<p>An <xref href=\"System.Collections.IList\" data-throw-if-not-resolved=\"false\"></xref> wrapper that is synchronized (thread safe).</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>list</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.SyncRoot
    commentId: P:System.Collections.ArrayList.SyncRoot
  - linkId: System.Collections.ArrayList.IsSynchronized
    commentId: P:System.Collections.ArrayList.IsSynchronized
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Collections.ArrayList.ToArray
  commentId: M:System.Collections.ArrayList.ToArray
  id: ToArray
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ToArray()
  nameWithType: ArrayList.ToArray()
  fullName: System.Collections.ArrayList.ToArray()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToArray
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 753
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a new <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array.</p>\n"
  syntax:
    content: public virtual object[] ToArray()
    content.vb: Public Overridable Function ToArray As Object()
    return:
      type: System.Object[]
      description: "\n<p>An <xref href=\"System.Object\" data-throw-if-not-resolved=\"false\"></xref> array containing copies of the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.ToArray(System.Type)
  commentId: M:System.Collections.ArrayList.ToArray(System.Type)
  id: ToArray(System.Type)
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: ToArray(Type)
  nameWithType: ArrayList.ToArray(Type)
  fullName: System.Collections.ArrayList.ToArray(System.Type)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToArray
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 766
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Copies the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> to a new array of the specified element type.</p>\n"
  syntax:
    content: >-
      [SecuritySafeCritical]

      public virtual Array ToArray(Type type)
    content.vb: >-
      <SecuritySafeCritical>

      Public Overridable Function ToArray(type As Type) As Array
    parameters:
    - id: type
      type: System.Type
      description: "\n<p>The element <xref href=\"System.Type\" data-throw-if-not-resolved=\"false\"></xref> of the destination array to create and copy elements to.</p>\n"
    return:
      type: System.Array
      description: "\n<p>An array of the specified element type containing copies of the elements of the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>type</em> is <strong>null</strong>. </p>\n"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "\n<p>The type of the source <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> cannot be cast automatically to the specified type. </p>\n"
  seealso:
  - linkId: System.Type
    commentId: T:System.Type
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: System.Collections.ArrayList.TrimToSize
  commentId: M:System.Collections.ArrayList.TrimToSize
  id: TrimToSize
  parent: System.Collections.ArrayList
  langs:
  - csharp
  - vb
  name: TrimToSize()
  nameWithType: ArrayList.TrimToSize()
  fullName: System.Collections.ArrayList.TrimToSize()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Collections/ArrayList.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TrimToSize
    path: src/mscorlib/src/System/Collections/ArrayList.cs
    startLine: 786
  assemblies:
  - System.Collections.NonGeneric
  namespace: System.Collections
  summary: "\n<p>Sets the capacity to the actual number of elements in the <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public virtual void TrimToSize()
    content.vb: Public Overridable Sub TrimToSize
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> is read-only.</p>\n<p>-or- </p>\n<p>The <xref href=\"System.Collections.ArrayList\" data-throw-if-not-resolved=\"false\"></xref> has a fixed size. </p>\n"
  seealso:
  - linkId: System.Collections.ArrayList.Clear
    commentId: M:System.Collections.ArrayList.Clear
  - linkId: System.Collections.ArrayList.Capacity
    commentId: P:System.Collections.ArrayList.Capacity
  - linkId: System.Collections.ArrayList.Count
    commentId: P:System.Collections.ArrayList.Count
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: System.Collections
  commentId: N:System.Collections
  isExternal: false
  name: System.Collections
  nameWithType: System.Collections
  fullName: System.Collections
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.IList
  commentId: T:System.Collections.IList
  parent: System.Collections
  isExternal: false
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Collections.ICollection
  commentId: T:System.Collections.ICollection
  parent: System.Collections
  isExternal: false
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.IEnumerable
  commentId: T:System.Collections.IEnumerable
  parent: System.Collections
  isExternal: false
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.Cast``1
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  name: Cast<TResult>()
  nameWithType: Enumerable.Cast<TResult>()
  fullName: System.Linq.Enumerable.Cast<TResult>()
  nameWithType.vb: Enumerable.Cast(Of TResult)()
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)()
  name.vb: Cast(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Enumerable.OfType``1
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  parent: System.Linq.Enumerable
  definition: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  name: OfType<TResult>()
  nameWithType: Enumerable.OfType<TResult>()
  fullName: System.Linq.Enumerable.OfType<TResult>()
  nameWithType.vb: Enumerable.OfType(Of TResult)()
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)()
  name.vb: OfType(Of TResult)()
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.Queryable.AsQueryable
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  parent: System.Linq.Queryable
  definition: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  name: AsQueryable()
  nameWithType: Queryable.AsQueryable()
  fullName: System.Linq.Queryable.AsQueryable()
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.System.Linq.ParallelEnumerable.AsParallel
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  parent: System.Linq.ParallelEnumerable
  definition: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  name: AsParallel()
  nameWithType: ParallelEnumerable.AsParallel()
  fullName: System.Linq.ParallelEnumerable.AsParallel()
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
  isExternal: true
  name: Cast<TResult>(IEnumerable)
  nameWithType: Enumerable.Cast<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.Cast<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.Cast(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.Cast(Of TResult)(System.Collections.IEnumerable)
  name.vb: Cast(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast<TResult>
    nameWithType: Enumerable.Cast<TResult>
    fullName: System.Linq.Enumerable.Cast<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)
    name: Cast(Of TResult)
    nameWithType: Enumerable.Cast(Of TResult)
    fullName: System.Linq.Enumerable.Cast(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Enumerable
  commentId: T:System.Linq.Enumerable
  parent: System.Linq
  isExternal: false
  name: Enumerable
  nameWithType: Enumerable
  fullName: System.Linq.Enumerable
- uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  commentId: M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
  isExternal: true
  name: OfType<TResult>(IEnumerable)
  nameWithType: Enumerable.OfType<TResult>(IEnumerable)
  fullName: System.Linq.Enumerable.OfType<TResult>(System.Collections.IEnumerable)
  nameWithType.vb: Enumerable.OfType(Of TResult)(IEnumerable)
  fullname.vb: System.Linq.Enumerable.OfType(Of TResult)(System.Collections.IEnumerable)
  name.vb: OfType(Of TResult)(IEnumerable)
  spec.csharp:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType<TResult>
    nameWithType: Enumerable.OfType<TResult>
    fullName: System.Linq.Enumerable.OfType<TResult>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)
    name: OfType(Of TResult)
    nameWithType: Enumerable.OfType(Of TResult)
    fullName: System.Linq.Enumerable.OfType(Of TResult)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  commentId: M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  isExternal: true
  name: AsQueryable(IEnumerable)
  nameWithType: Queryable.AsQueryable(IEnumerable)
  fullName: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)
    name: AsQueryable
    nameWithType: Queryable.AsQueryable
    fullName: System.Linq.Queryable.AsQueryable
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.Queryable
  commentId: T:System.Linq.Queryable
  parent: System.Linq
  isExternal: false
  name: Queryable
  nameWithType: Queryable
  fullName: System.Linq.Queryable
- uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  commentId: M:System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  isExternal: true
  name: AsParallel(IEnumerable)
  nameWithType: ParallelEnumerable.AsParallel(IEnumerable)
  fullName: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
  spec.csharp:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Linq.ParallelEnumerable.AsParallel(System.Collections.IEnumerable)
    name: AsParallel
    nameWithType: ParallelEnumerable.AsParallel
    fullName: System.Linq.ParallelEnumerable.AsParallel
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.IEnumerable
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.IEnumerable
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.ParallelEnumerable
  commentId: T:System.Linq.ParallelEnumerable
  parent: System.Linq
  isExternal: false
  name: ParallelEnumerable
  nameWithType: ParallelEnumerable
  fullName: System.Linq.ParallelEnumerable
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: false
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.ICollection.Count
  commentId: P:System.Collections.ICollection.Count
  parent: System.Collections.ICollection
  isExternal: false
  name: Count
  nameWithType: ICollection.Count
  fullName: System.Collections.ICollection.Count
- uid: System.Collections.IList.IsFixedSize
  commentId: P:System.Collections.IList.IsFixedSize
  parent: System.Collections.IList
  isExternal: false
  name: IsFixedSize
  nameWithType: IList.IsFixedSize
  fullName: System.Collections.IList.IsFixedSize
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.IList.IsReadOnly
  commentId: P:System.Collections.IList.IsReadOnly
  parent: System.Collections.IList
  isExternal: false
  name: IsReadOnly
  nameWithType: IList.IsReadOnly
  fullName: System.Collections.IList.IsReadOnly
- uid: System.Collections.ICollection.IsSynchronized
  commentId: P:System.Collections.ICollection.IsSynchronized
  parent: System.Collections.ICollection
  isExternal: false
  name: IsSynchronized
  nameWithType: ICollection.IsSynchronized
  fullName: System.Collections.ICollection.IsSynchronized
- uid: System.Collections.IList.Item(System.Int32)
  commentId: P:System.Collections.IList.Item(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: Item[Int32]
  nameWithType: IList.Item[Int32]
  fullName: System.Collections.IList.Item[System.Int32]
  nameWithType.vb: IList.Item(Int32)
  fullname.vb: System.Collections.IList.Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
  - name: '['
    nameWithType: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    nameWithType: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.IList.Item(System.Int32)
    name: Item
    nameWithType: IList.Item
    fullName: System.Collections.IList.Item
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.ICollection.SyncRoot
  commentId: P:System.Collections.ICollection.SyncRoot
  parent: System.Collections.ICollection
  isExternal: false
  name: SyncRoot
  nameWithType: ICollection.SyncRoot
  fullName: System.Collections.ICollection.SyncRoot
- uid: System.Collections.ArrayList
  commentId: T:System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Collections.IList.Add(System.Object)
  commentId: M:System.Collections.IList.Add(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Add(Object)
  nameWithType: IList.Add(Object)
  fullName: System.Collections.IList.Add(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Add(System.Object)
    name: Add
    nameWithType: IList.Add
    fullName: System.Collections.IList.Add
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IComparer
  commentId: T:System.Collections.IComparer
  parent: System.Collections
  isExternal: false
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.IList.Clear
  commentId: M:System.Collections.IList.Clear
  parent: System.Collections.IList
  isExternal: false
  name: Clear()
  nameWithType: IList.Clear()
  fullName: System.Collections.IList.Clear()
  spec.csharp:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Clear
    name: Clear
    nameWithType: IList.Clear
    fullName: System.Collections.IList.Clear
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Contains(System.Object)
  commentId: M:System.Collections.IList.Contains(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Contains(Object)
  nameWithType: IList.Contains(Object)
  fullName: System.Collections.IList.Contains(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Contains(System.Object)
    name: Contains
    nameWithType: IList.Contains
    fullName: System.Collections.IList.Contains
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Array
  commentId: T:System.Array
  parent: System
  isExternal: false
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  commentId: M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)
  parent: System.Collections.ICollection
  isExternal: true
  name: CopyTo(Array, Int32)
  nameWithType: ICollection.CopyTo(Array, Int32)
  fullName: System.Collections.ICollection.CopyTo(System.Array, System.Int32)
  spec.csharp:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.ICollection.CopyTo(System.Array,System.Int32)
    name: CopyTo
    nameWithType: ICollection.CopyTo
    fullName: System.Collections.ICollection.CopyTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Array
    name: Array
    nameWithType: Array
    fullName: System.Array
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  commentId: M:System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: false
  name: GetEnumerator()
  nameWithType: IEnumerable.GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    nameWithType: IEnumerable.GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IEnumerator
  commentId: T:System.Collections.IEnumerator
  parent: System.Collections
  isExternal: false
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.IList.IndexOf(System.Object)
  commentId: M:System.Collections.IList.IndexOf(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: IndexOf(Object)
  nameWithType: IList.IndexOf(Object)
  fullName: System.Collections.IList.IndexOf(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.IndexOf(System.Object)
    name: IndexOf
    nameWithType: IList.IndexOf
    fullName: System.Collections.IList.IndexOf
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Insert(System.Int32,System.Object)
  commentId: M:System.Collections.IList.Insert(System.Int32,System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Insert(Int32, Object)
  nameWithType: IList.Insert(Int32, Object)
  fullName: System.Collections.IList.Insert(System.Int32, System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Insert(System.Int32,System.Object)
    name: Insert
    nameWithType: IList.Insert
    fullName: System.Collections.IList.Insert
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.Remove(System.Object)
  commentId: M:System.Collections.IList.Remove(System.Object)
  parent: System.Collections.IList
  isExternal: true
  name: Remove(Object)
  nameWithType: IList.Remove(Object)
  fullName: System.Collections.IList.Remove(System.Object)
  spec.csharp:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.Remove(System.Object)
    name: Remove
    nameWithType: IList.Remove
    fullName: System.Collections.IList.Remove
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.IList.RemoveAt(System.Int32)
  commentId: M:System.Collections.IList.RemoveAt(System.Int32)
  parent: System.Collections.IList
  isExternal: true
  name: RemoveAt(Int32)
  nameWithType: IList.RemoveAt(Int32)
  fullName: System.Collections.IList.RemoveAt(System.Int32)
  spec.csharp:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IList.RemoveAt(System.Int32)
    name: RemoveAt
    nameWithType: IList.RemoveAt
    fullName: System.Collections.IList.RemoveAt
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object[]
  name: Object[]
  nameWithType: Object[]
  fullName: System.Object[]
  nameWithType.vb: Object()
  fullname.vb: System.Object()
  name.vb: Object()
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Type
  commentId: T:System.Type
  parent: System
  isExternal: false
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.OutOfMemoryException
  commentId: T:System.OutOfMemoryException
  isExternal: false
  name: OutOfMemoryException
  nameWithType: OutOfMemoryException
  fullName: System.OutOfMemoryException
- uid: System.NotSupportedException
  commentId: T:System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.InvalidCastException
  commentId: T:System.InvalidCastException
  isExternal: false
  name: InvalidCastException
  nameWithType: InvalidCastException
  fullName: System.InvalidCastException
