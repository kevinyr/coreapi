### YamlMime:ManagedReference
items:
- uid: System.Version
  commentId: T:System.Version
  id: Version
  parent: System
  children:
  - System.Version.#ctor(System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Version.#ctor(System.String)
  - System.Version.Build
  - System.Version.CompareTo(System.Version)
  - System.Version.Equals(System.Object)
  - System.Version.Equals(System.Version)
  - System.Version.GetHashCode
  - System.Version.Major
  - System.Version.MajorRevision
  - System.Version.Minor
  - System.Version.MinorRevision
  - System.Version.op_Equality(System.Version,System.Version)
  - System.Version.op_GreaterThan(System.Version,System.Version)
  - System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  - System.Version.op_Inequality(System.Version,System.Version)
  - System.Version.op_LessThan(System.Version,System.Version)
  - System.Version.op_LessThanOrEqual(System.Version,System.Version)
  - System.Version.Parse(System.String)
  - System.Version.Revision
  - System.Version.System#IComparable#CompareTo(System.Object)
  - System.Version.ToString
  - System.Version.ToString(System.Int32)
  - System.Version.TryParse(System.String,System.Version@)
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: Version
  fullName: System.Version
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Version
    path: src/mscorlib/src/System/Version.cs
    startLine: 25
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Represents the version number of an assembly, operating system, or the common language runtime. This class cannot be inherited.</p>\n"
  syntax:
    content: >-
      [Serializable]

      [ComVisible(true)]

      public sealed class Version : ICloneable, IComparable, IComparable<Version>, IEquatable<Version>
    content.vb: >-
      <Serializable>

      <ComVisible(True)>

      Public NotInheritable Class Version
          Implements ICloneable, IComparable, IComparable(Of Version), IEquatable(Of Version)
  inheritance:
  - System.Object
  implements:
  - System.IComparable
  - System.IComparable{System.Version}
  - System.IEquatable{System.Version}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Version.#ctor(System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32)
  nameWithType: Version.Version(Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 74
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class using the specified major and minor values.</p>\n"
  syntax:
    content: public Version(int major, int minor)
    content.vb: Public Sub New(major As Integer, minor As Integer)
    parameters:
    - id: major
      type: System.Int32
      description: "\n<p>The major version number. </p>\n"
    - id: minor
      type: System.Int32
      description: "\n<p>The minor version number. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>major</em> or <em>minor</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32, Int32)
  nameWithType: Version.Version(Int32, Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 57
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class using the specified major, minor, and build values.</p>\n"
  syntax:
    content: public Version(int major, int minor, int build)
    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer)
    parameters:
    - id: major
      type: System.Int32
      description: "\n<p>The major version number. </p>\n"
    - id: minor
      type: System.Int32
      description: "\n<p>The minor version number. </p>\n"
    - id: build
      type: System.Int32
      description: "\n<p>The build number. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>major</em>, <em>minor</em>, or <em>build</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  commentId: M:System.Version.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)
  id: '#ctor(System.Int32,System.Int32,System.Int32,System.Int32)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(Int32, Int32, Int32, Int32)
  nameWithType: Version.Version(Int32, Int32, Int32, Int32)
  fullName: System.Version.Version(System.Int32, System.Int32, System.Int32, System.Int32)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 37
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class with the specified major, minor, build, and revision numbers.</p>\n"
  syntax:
    content: public Version(int major, int minor, int build, int revision)
    content.vb: Public Sub New(major As Integer, minor As Integer, build As Integer, revision As Integer)
    parameters:
    - id: major
      type: System.Int32
      description: "\n<p>The major version number. </p>\n"
    - id: minor
      type: System.Int32
      description: "\n<p>The minor version number. </p>\n"
    - id: build
      type: System.Int32
      description: "\n<p>The build number. </p>\n"
    - id: revision
      type: System.Int32
      description: "\n<p>The revision number. </p>\n"
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>\n<em>major</em>, <em>minor</em>, <em>build</em>, or <em>revision</em> is less than zero. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.#ctor(System.String)
  commentId: M:System.Version.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Version(String)
  nameWithType: Version.Version(String)
  fullName: System.Version.Version(System.String)
  type: Constructor
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: .ctor
    path: src/mscorlib/src/System/Version.cs
    startLine: 86
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Initializes a new instance of the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> class using the specified string.</p>\n"
  syntax:
    content: public Version(string version)
    content.vb: Public Sub New(version As String)
    parameters:
    - id: version
      type: System.String
      description: "\n<p>A string containing the major, minor, build, and revision numbers, where each number is delimited with a period character ('.'). </p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>version</em> has fewer than two components or more than four components. </p>\n"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>version</em> is <strong>null</strong>. </p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>A major, minor, build, or revision component is less than zero. </p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>At least one component of <em>version</em> does not parse to an integer. </p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>At least one component of <em>version</em> represents a number greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.Build
  commentId: P:System.Version.Build
  id: Build
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Build
  nameWithType: Version.Build
  fullName: System.Version.Build
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Build
    path: src/mscorlib/src/System/Version.cs
    startLine: 109
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the build component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int Build { get; }
    content.vb: Public ReadOnly Property Build As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The build number, or -1 if the build number is undefined.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Major
  commentId: P:System.Version.Major
  id: Major
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Major
  nameWithType: Version.Major
  fullName: System.Version.Major
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Major
    path: src/mscorlib/src/System/Version.cs
    startLine: 101
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the major component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int Major { get; }
    content.vb: Public ReadOnly Property Major As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The major version number.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.MajorRevision
  commentId: P:System.Version.MajorRevision
  id: MajorRevision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: MajorRevision
  nameWithType: Version.MajorRevision
  fullName: System.Version.MajorRevision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MajorRevision
    path: src/mscorlib/src/System/Version.cs
    startLine: 117
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the high 16 bits of the revision number.</p>\n"
  syntax:
    content: public short MajorRevision { get; }
    content.vb: Public ReadOnly Property MajorRevision As Short
    parameters: []
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer.</p>\n"
  seealso:
  - linkId: System.Version.MinorRevision
    commentId: P:System.Version.MinorRevision
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Minor
  commentId: P:System.Version.Minor
  id: Minor
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Minor
  nameWithType: Version.Minor
  fullName: System.Version.Minor
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Minor
    path: src/mscorlib/src/System/Version.cs
    startLine: 105
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the minor component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int Minor { get; }
    content.vb: Public ReadOnly Property Minor As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The minor version number.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.MinorRevision
  commentId: P:System.Version.MinorRevision
  id: MinorRevision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: MinorRevision
  nameWithType: Version.MinorRevision
  fullName: System.Version.MinorRevision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: MinorRevision
    path: src/mscorlib/src/System/Version.cs
    startLine: 121
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the low 16 bits of the revision number.</p>\n"
  syntax:
    content: public short MinorRevision { get; }
    content.vb: Public ReadOnly Property MinorRevision As Short
    parameters: []
    return:
      type: System.Int16
      description: "\n<p>A 16-bit signed integer.</p>\n"
  seealso:
  - linkId: System.Version.MajorRevision
    commentId: P:System.Version.MajorRevision
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.Revision
  commentId: P:System.Version.Revision
  id: Revision
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Revision
  nameWithType: Version.Revision
  fullName: System.Version.Revision
  type: Property
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Revision
    path: src/mscorlib/src/System/Version.cs
    startLine: 113
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Gets the value of the revision component of the version number for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public int Revision { get; }
    content.vb: Public ReadOnly Property Revision As Integer
    parameters: []
    return:
      type: System.Int32
      description: "\n<p>The revision number, or -1 if the revision number is undefined.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Version.CompareTo(System.Version)
  commentId: M:System.Version.CompareTo(System.Version)
  id: CompareTo(System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: CompareTo(Version)
  nameWithType: Version.CompareTo(Version)
  fullName: System.Version.CompareTo(System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: CompareTo
    path: src/mscorlib/src/System/Version.cs
    startLine: 174
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Compares the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to a specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object and returns an indication of their relative values.</p>\n"
  syntax:
    content: public int CompareTo(Version value)
    content.vb: Public Function CompareTo(value As Version) As Integer
    parameters:
    - id: value
      type: System.Version
      description: "\n<p>A <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to compare to the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, or <strong>null</strong>.</p>\n"
    return:
      type: System.Int32
      description: "\n<p>A signed integer that indicates the relative values of the two objects, as shown in the following table.</p>\n<p>Return value </p>\n<p>Meaning </p>\n<table><tbody><tr><td>\n<p>Less than zero </p>\n</td><td>\n<p>The current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is a version before <em>value</em>. </p>\n</td></tr><tr><td>\n<p>Zero </p>\n</td><td>\n<p>The current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is the same version as <em>value</em>. </p>\n</td></tr><tr><td>\n<p>Greater than zero </p>\n</td><td>\n<p>The current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is a version subsequent to <em>value</em>. </p>\n<p>-or-</p>\n<p>\n<em>value</em> is <strong>null</strong>.</p>\n</td></tr></tbody></table>\n"
  implements:
  - System.IComparable{System.Version}.CompareTo(System.Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.Equals(System.Object)
  commentId: M:System.Version.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: Version.Equals(Object)
  fullName: System.Version.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Version.cs
    startLine: 206
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is equal to a specified object.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>An object to compare with the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, or <strong>null</strong>. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object and <em>obj</em> are both <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> objects, and every component of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object matches the corresponding component of <em>obj</em>; otherwise, <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  seealso:
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.Equals(System.Version)
  commentId: M:System.Version.Equals(System.Version)
  id: Equals(System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equals(Version)
  nameWithType: Version.Equals(Version)
  fullName: System.Version.Equals(System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Equals
    path: src/mscorlib/src/System/Version.cs
    startLine: 221
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a value indicating whether the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object and a specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object represent the same value.</p>\n"
  syntax:
    content: public bool Equals(Version obj)
    content.vb: Public Function Equals(obj As Version) As Boolean
    parameters:
    - id: obj
      type: System.Version
      description: "\n<p>A <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to compare to the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, or <strong>null</strong>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if every component of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object matches the corresponding component of the <em>obj</em> parameter; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Version)
    commentId: M:System.Version.CompareTo(System.Version)
  implements:
  - System.IEquatable{System.Version}.Equals(System.Version)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.GetHashCode
  commentId: M:System.Version.GetHashCode
  id: GetHashCode
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: Version.GetHashCode()
  fullName: System.Version.GetHashCode()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: GetHashCode
    path: src/mscorlib/src/System/Version.cs
    startLine: 236
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Returns a hash code for the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>A 32-bit signed integer hash code.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.op_Equality(System.Version,System.Version)
  commentId: M:System.Version.op_Equality(System.Version,System.Version)
  id: op_Equality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Equality(Version, Version)
  nameWithType: Version.Equality(Version, Version)
  fullName: System.Version.Equality(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Equality
    path: src/mscorlib/src/System/Version.cs
    startLine: 411
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> objects are equal.</p>\n"
  syntax:
    content: public static bool operator ==(Version v1, Version v2)
    content.vb: Public Shared Operator =(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: "\n<p>The first <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: v2
      type: System.Version
      description: "\n<p>The second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>v1</em> equals <em>v2</em>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_GreaterThan(System.Version,System.Version)
  commentId: M:System.Version.op_GreaterThan(System.Version,System.Version)
  id: op_GreaterThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GreaterThan(Version, Version)
  nameWithType: Version.GreaterThan(Version, Version)
  fullName: System.Version.GreaterThan(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThan
    path: src/mscorlib/src/System/Version.cs
    startLine: 437
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is greater than the second specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator>(Version v1, Version v2)
    content.vb: Public Shared Operator>(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: "\n<p>The first <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: v2
      type: System.Version
      description: "\n<p>The second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>v1</em> is greater than <em>v2</em>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  commentId: M:System.Version.op_GreaterThanOrEqual(System.Version,System.Version)
  id: op_GreaterThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: GreaterThanOrEqual(Version, Version)
  nameWithType: Version.GreaterThanOrEqual(Version, Version)
  fullName: System.Version.GreaterThanOrEqual(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_GreaterThanOrEqual
    path: src/mscorlib/src/System/Version.cs
    startLine: 441
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is greater than or equal to the second specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator >=(Version v1, Version v2)
    content.vb: Public Shared Operator >=(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: "\n<p>The first <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: v2
      type: System.Version
      description: "\n<p>The second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>v1</em> is greater than or equal to <em>v2</em>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_Inequality(System.Version,System.Version)
  commentId: M:System.Version.op_Inequality(System.Version,System.Version)
  id: op_Inequality(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Inequality(Version, Version)
  nameWithType: Version.Inequality(Version, Version)
  fullName: System.Version.Inequality(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_Inequality
    path: src/mscorlib/src/System/Version.cs
    startLine: 419
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether two specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> objects are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(Version v1, Version v2)
    content.vb: Public Shared Operator <>(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: "\n<p>The first <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: v2
      type: System.Version
      description: "\n<p>The second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>v1</em> does not equal <em>v2</em>; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_LessThan(System.Version,System.Version)
  commentId: M:System.Version.op_LessThan(System.Version,System.Version)
  id: op_LessThan(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: LessThan(Version, Version)
  nameWithType: Version.LessThan(Version, Version)
  fullName: System.Version.LessThan(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThan
    path: src/mscorlib/src/System/Version.cs
    startLine: 423
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is less than the second specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator <(Version v1, Version v2)
    content.vb: Public Shared Operator <(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: "\n<p>The first <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: v2
      type: System.Version
      description: "\n<p>The second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>v1</em> is less than <em>v2</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>v1</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.op_LessThanOrEqual(System.Version,System.Version)
  commentId: M:System.Version.op_LessThanOrEqual(System.Version,System.Version)
  id: op_LessThanOrEqual(System.Version,System.Version)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: LessThanOrEqual(Version, Version)
  nameWithType: Version.LessThanOrEqual(Version, Version)
  fullName: System.Version.LessThanOrEqual(System.Version, System.Version)
  type: Operator
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: op_LessThanOrEqual
    path: src/mscorlib/src/System/Version.cs
    startLine: 430
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Determines whether the first specified <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object is less than or equal to the second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static bool operator <=(Version v1, Version v2)
    content.vb: Public Shared Operator <=(v1 As Version, v2 As Version) As Boolean
    parameters:
    - id: v1
      type: System.Version
      description: "\n<p>The first <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    - id: v2
      type: System.Version
      description: "\n<p>The second <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>v1</em> is less than or equal to <em>v2</em>; otherwise, <strong>false</strong>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>v1</em> is <strong>null</strong>. </p>\n"
  seealso:
  - linkId: System.Version.Equals(System.Object)
    commentId: M:System.Version.Equals(System.Object)
  - linkId: System.Version.CompareTo(System.Object)
    commentId: M:System.Version.CompareTo(System.Object)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.Parse(System.String)
  commentId: M:System.Version.Parse(System.String)
  id: Parse(System.String)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: Parse(String)
  nameWithType: Version.Parse(String)
  fullName: System.Version.Parse(System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Parse
    path: src/mscorlib/src/System/Version.cs
    startLine: 327
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the string representation of a version number to an equivalent <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: public static Version Parse(string input)
    content.vb: Public Shared Function Parse(input As String) As Version
    parameters:
    - id: input
      type: System.String
      description: "\n<p>A string that contains a version number to convert.</p>\n"
    return:
      type: System.Version
      description: "\n<p>An object that is equivalent to the version number specified in the <em>input</em> parameter.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>input</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>input</em> has fewer than two or more than four version components.</p>\n"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "\n<p>At least one component in <em>input</em> is less than zero.</p>\n"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "\n<p>At least one component in <em>input</em> is not an integer.</p>\n"
  - type: System.OverflowException
    commentId: T:System.OverflowException
    description: "\n<p>At least one component in <em>input</em> represents a number that is greater than <xref href=\"System.Int32.MaxValue\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  seealso:
  - linkId: System.Version.ToString
    commentId: M:System.Version.ToString
  - linkId: System.Version.TryParse(System.String,System.Version@)
    commentId: M:System.Version.TryParse(System.String,System.Version@)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Version.System#IComparable#CompareTo(System.Object)
  commentId: M:System.Version.System#IComparable#CompareTo(System.Object)
  id: System#IComparable#CompareTo(System.Object)
  isEii: true
  parent: System.Version
  langs:
  - csharp
  - vb
  name: IComparable.CompareTo(Object)
  nameWithType: Version.IComparable.CompareTo(Object)
  fullName: System.Version.System.IComparable.CompareTo(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Runtime/ref/System.Runtime.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IComparable.CompareTo
    path: src/System.Runtime/ref/System.Runtime.cs
    startLine: 2256
  assemblies:
  - System.Runtime
  namespace: System
  syntax:
    content: int IComparable.CompareTo(object version)
    content.vb: Function System.IComparable.CompareTo(version As Object) As Integer Implements IComparable.CompareTo
    parameters:
    - id: version
      type: System.Object
    return:
      type: System.Int32
  implements:
  - System.IComparable.CompareTo(System.Object)
  nameWithType.vb: Version.System.IComparable.CompareTo(Object)
  name.vb: System.IComparable.CompareTo(Object)
- uid: System.Version.ToString
  commentId: M:System.Version.ToString
  id: ToString
  parent: System.Version
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Version.ToString()
  fullName: System.Version.ToString()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Version.cs
    startLine: 251
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, as depicted in the following format. Each component is separated by a period character ('.'). Square brackets ('[' and ']') indicate a component that will not appear in the return value if the component is not defined: </p>\n<p>major.minor[.build[.revision]] </p>\n<p>For example, if you create a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object using the constructor <code>Version(1,1)</code>, the returned string is \"1.1\". If you create a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object using the constructor <code>Version(1,3,4,2)</code>, the returned string is \"1.3.4.2\".</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Version.ToString(System.Int32)
  commentId: M:System.Version.ToString(System.Int32)
  id: ToString(System.Int32)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: ToString(Int32)
  nameWithType: Version.ToString(Int32)
  fullName: System.Version.ToString(System.Int32)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ToString
    path: src/mscorlib/src/System/Version.cs
    startLine: 257
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Converts the value of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object to its equivalent <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation. A specified count indicates the number of components to return.</p>\n"
  syntax:
    content: public string ToString(int fieldCount)
    content.vb: Public Function ToString(fieldCount As Integer) As String
    parameters:
    - id: fieldCount
      type: System.Int32
      description: "\n<p>The number of components to return. The <em>fieldCount</em> ranges from 0 to 4. </p>\n"
    return:
      type: System.String
      description: "\n<p>The <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> representation of the values of the major, minor, build, and revision components of the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, each separated by a period character ('.'). The <em>fieldCount</em> parameter determines how many components are returned.</p>\n<p>fieldCount </p>\n<p>Return Value </p>\n<table><tbody><tr><td>\n<p>0 </p>\n</td><td>\n<p>An empty string (\"\"). </p>\n</td></tr><tr><td>\n<p>1 </p>\n</td><td>\n<p>major </p>\n</td></tr><tr><td>\n<p>2 </p>\n</td><td>\n<p>major.minor </p>\n</td></tr><tr><td>\n<p>3 </p>\n</td><td>\n<p>major.minor.build </p>\n</td></tr><tr><td>\n<p>4 </p>\n</td><td>\n<p>major.minor.build.revision </p>\n</td></tr></tbody></table>\n<p>For example, if you create <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object using the constructor <code>Version(1,3,5)</code>, <code>ToString(2)</code> returns \"1.3\" and <code>ToString(4)</code> throws an exception.</p>\n"
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>fieldCount</em> is less than 0, or more than 4.</p>\n<p>-or- </p>\n<p>\n<em>fieldCount</em> is more than the number of components defined in the current <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object. </p>\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: System.Version.TryParse(System.String,System.Version@)
  commentId: M:System.Version.TryParse(System.String,System.Version@)
  id: TryParse(System.String,System.Version@)
  parent: System.Version
  langs:
  - csharp
  - vb
  name: TryParse(String, out Version)
  nameWithType: Version.TryParse(String, out Version)
  fullName: System.Version.TryParse(System.String, out System.Version)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Version.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: TryParse
    path: src/mscorlib/src/System/Version.cs
    startLine: 341
  assemblies:
  - System.Runtime
  namespace: System
  summary: "\n<p>Tries to convert the string representation of a version number to an equivalent <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object, and returns a value that indicates whether the conversion succeeded.</p>\n"
  syntax:
    content: public static bool TryParse(string input, out Version result)
    content.vb: Public Shared Function TryParse(input As String, ByRef result As Version) As Boolean
    parameters:
    - id: input
      type: System.String
      description: "\n<p>A string that contains a version number to convert.</p>\n"
    - id: result
      type: System.Version
      description: "\n<p>When this method returns, contains the <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> equivalent of the number that is contained in <em>input</em>, if the conversion succeeded, or a <xref href=\"System.Version\" data-throw-if-not-resolved=\"false\"></xref> object whose major and minor version numbers are 0 if the conversion failed. If <em>input</em> is <strong>null</strong> or <xref href=\"System.String.Empty\" data-throw-if-not-resolved=\"false\"></xref>, <em>result</em> is <strong>null</strong> when the method returns. </p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the <em>input</em> parameter was converted successfully; otherwise, <strong>false</strong>.</p>\n"
  seealso:
  - linkId: System.Version.Parse(System.String)
    commentId: M:System.Version.Parse(System.String)
  - linkId: System.Version.ToString
    commentId: M:System.Version.ToString
  nameWithType.vb: Version.TryParse(String, ByRef Version)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Version.TryParse(System.String, ByRef System.Version)
  name.vb: TryParse(String, ByRef Version)
references:
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IComparable
  commentId: T:System.IComparable
  parent: System
  isExternal: false
  name: IComparable
  nameWithType: IComparable
  fullName: System.IComparable
- uid: System.IComparable{System.Version}
  commentId: T:System.IComparable{System.Version}
  parent: System
  definition: System.IComparable`1
  name: IComparable<Version>
  nameWithType: IComparable<Version>
  fullName: System.IComparable<System.Version>
  nameWithType.vb: IComparable(Of Version)
  fullname.vb: System.IComparable(Of System.Version)
  name.vb: IComparable(Of Version)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable{System.Version}
  commentId: T:System.IEquatable{System.Version}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<Version>
  nameWithType: IEquatable<Version>
  fullName: System.IEquatable<System.Version>
  nameWithType.vb: IEquatable(Of Version)
  fullname.vb: System.IEquatable(Of System.Version)
  name.vb: IEquatable(Of Version)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable`1
  commentId: T:System.IComparable`1
  isExternal: false
  name: IComparable<T>
  nameWithType: IComparable<T>
  fullName: System.IComparable<T>
  nameWithType.vb: IComparable(Of T)
  fullname.vb: System.IComparable(Of T)
  name.vb: IComparable(Of T)
  spec.csharp:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IComparable`1
    name: IComparable
    nameWithType: IComparable
    fullName: System.IComparable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: false
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int16
  commentId: T:System.Int16
  parent: System
  isExternal: false
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.IComparable{System.Version}.CompareTo(System.Version)
  commentId: M:System.IComparable{System.Version}.CompareTo(System.Version)
  parent: System.IComparable{System.Version}
  definition: System.IComparable`1.CompareTo(`0)
  name: CompareTo(Version)
  nameWithType: IComparable<Version>.CompareTo(Version)
  fullName: System.IComparable<System.Version>.CompareTo(System.Version)
  nameWithType.vb: IComparable(Of Version).CompareTo(Version)
  fullname.vb: System.IComparable(Of System.Version).CompareTo(System.Version)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<Version>.CompareTo
    fullName: System.IComparable<System.Version>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of Version).CompareTo
    fullName: System.IComparable(Of System.Version).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Version
  commentId: T:System.Version
  parent: System
  isExternal: false
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.IComparable`1.CompareTo(`0)
  commentId: M:System.IComparable`1.CompareTo(`0)
  isExternal: false
  name: CompareTo(T)
  nameWithType: IComparable<T>.CompareTo(T)
  fullName: System.IComparable<T>.CompareTo(T)
  nameWithType.vb: IComparable(Of T).CompareTo(T)
  fullname.vb: System.IComparable(Of T).CompareTo(T)
  spec.csharp:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable<T>.CompareTo
    fullName: System.IComparable<T>.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable`1.CompareTo(`0)
    name: CompareTo
    nameWithType: IComparable(Of T).CompareTo
    fullName: System.IComparable(Of T).CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable{System.Version}.Equals(System.Version)
  commentId: M:System.IEquatable{System.Version}.Equals(System.Version)
  parent: System.IEquatable{System.Version}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(Version)
  nameWithType: IEquatable<Version>.Equals(Version)
  fullName: System.IEquatable<System.Version>.Equals(System.Version)
  nameWithType.vb: IEquatable(Of Version).Equals(Version)
  fullname.vb: System.IEquatable(Of System.Version).Equals(System.Version)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<Version>.Equals
    fullName: System.IEquatable<System.Version>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of Version).Equals
    fullName: System.IEquatable(Of System.Version).Equals
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Version
    name: Version
    nameWithType: Version
    fullName: System.Version
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: false
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IComparable.CompareTo(System.Object)
  commentId: M:System.IComparable.CompareTo(System.Object)
  parent: System.IComparable
  isExternal: true
  name: CompareTo(Object)
  nameWithType: IComparable.CompareTo(Object)
  fullName: System.IComparable.CompareTo(System.Object)
  spec.csharp:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IComparable.CompareTo(System.Object)
    name: CompareTo
    nameWithType: IComparable.CompareTo
    fullName: System.IComparable.CompareTo
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.FormatException
  commentId: T:System.FormatException
  parent: System
  isExternal: false
  name: FormatException
  nameWithType: FormatException
  fullName: System.FormatException
- uid: System.OverflowException
  commentId: T:System.OverflowException
  isExternal: false
  name: OverflowException
  nameWithType: OverflowException
  fullName: System.OverflowException
