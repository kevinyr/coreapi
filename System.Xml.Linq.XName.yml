### YamlMime:ManagedReference
items:
- uid: System.Xml.Linq.XName
  commentId: T:System.Xml.Linq.XName
  id: XName
  parent: System.Xml.Linq
  children:
  - System.Xml.Linq.XName.Equals(System.Object)
  - System.Xml.Linq.XName.Get(System.String)
  - System.Xml.Linq.XName.Get(System.String,System.String)
  - System.Xml.Linq.XName.GetHashCode
  - System.Xml.Linq.XName.LocalName
  - System.Xml.Linq.XName.Namespace
  - System.Xml.Linq.XName.NamespaceName
  - System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  - System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName
  - System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  - System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)
  - System.Xml.Linq.XName.ToString
  langs:
  - csharp
  - vb
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
  type: Class
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: XName
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 306
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Represents a name of an XML element or attribute. </p>\n"
  syntax:
    content: 'public sealed class XName : IEquatable<XName>'
    content.vb: >-
      Public NotInheritable Class XName
          Implements IEquatable(Of XName)
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{System.Xml.Linq.XName}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: System.Xml.Linq.XName.LocalName
  commentId: P:System.Xml.Linq.XName.LocalName
  id: LocalName
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: LocalName
  nameWithType: XName.LocalName
  fullName: System.Xml.Linq.XName.LocalName
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: LocalName
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 309
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the local (unqualified) part of the name.</p>\n"
  syntax:
    content: public string LocalName { get; }
    content.vb: Public ReadOnly Property LocalName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the local (unqualified) part of the name.</p>\n"
  seealso:
  - linkId: System.Xml.Linq.XName.Namespace
    commentId: P:System.Xml.Linq.XName.Namespace
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XName.Namespace
  commentId: P:System.Xml.Linq.XName.Namespace
  id: Namespace
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Namespace
  nameWithType: XName.Namespace
  fullName: System.Xml.Linq.XName.Namespace
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Namespace
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 310
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets the namespace part of the fully qualified name.</p>\n"
  syntax:
    content: public XNamespace Namespace { get; }
    content.vb: Public ReadOnly Property Namespace As XNamespace
    parameters: []
    return:
      type: System.Xml.Linq.XNamespace
      description: "\n<p>An <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> that contains the namespace part of the name.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XName.NamespaceName
  commentId: P:System.Xml.Linq.XName.NamespaceName
  id: NamespaceName
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: NamespaceName
  nameWithType: XName.NamespaceName
  fullName: System.Xml.Linq.XName.NamespaceName
  type: Property
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: NamespaceName
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 311
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns the URI of the <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> for this <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public string NamespaceName { get; }
    content.vb: Public ReadOnly Property NamespaceName As String
    parameters: []
    return:
      type: System.String
      description: "\n<p>The URI of the <xref href=\"System.Xml.Linq.XNamespace\" data-throw-if-not-resolved=\"false\"></xref> for this <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: System.Xml.Linq.XName.Equals(System.Object)
  commentId: M:System.Xml.Linq.XName.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: XName.Equals(Object)
  fullName: System.Xml.Linq.XName.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Equals
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 312
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Determines whether the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> is equal to this <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to compare to the current <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> is equal to the current <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>; otherwise <strong>false</strong>.</p>\n"
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.Linq.XName.Get(System.String)
  commentId: M:System.Xml.Linq.XName.Get(System.String)
  id: Get(System.String)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Get(String)
  nameWithType: XName.Get(String)
  fullName: System.Xml.Linq.XName.Get(System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 313
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object from an expanded name.</p>\n"
  syntax:
    content: public static XName Get(string expandedName)
    content.vb: Public Shared Function Get(expandedName As String) As XName
    parameters:
    - id: expandedName
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains an expanded XML name in the format <code>{namespace}localname</code>.</p>\n"
    return:
      type: System.Xml.Linq.XName
      description: "\n<p>An <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object constructed from the expanded name.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XName.Get(System.String,System.String)
  commentId: M:System.Xml.Linq.XName.Get(System.String,System.String)
  id: Get(System.String,System.String)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Get(String, String)
  nameWithType: XName.Get(String, String)
  fullName: System.Xml.Linq.XName.Get(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: Get
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 314
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object from a local name and a namespace.</p>\n"
  syntax:
    content: public static XName Get(string localName, string namespaceName)
    content.vb: Public Shared Function Get(localName As String, namespaceName As String) As XName
    parameters:
    - id: localName
      type: System.String
      description: "\n<p>A local (unqualified) name.</p>\n"
    - id: namespaceName
      type: System.String
      description: "\n<p>An XML namespace.</p>\n"
    return:
      type: System.Xml.Linq.XName
      description: "\n<p>An <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object created from the specified local name and namespace.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XName.GetHashCode
  commentId: M:System.Xml.Linq.XName.GetHashCode
  id: GetHashCode
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: XName.GetHashCode()
  fullName: System.Xml.Linq.XName.GetHashCode()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: GetHashCode
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 315
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Gets a hash code for this <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: "\n<p>An <xref href=\"System.Int32\" data-throw-if-not-resolved=\"false\"></xref> that contains the hash code for the <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XName.op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  id: op_Equality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Equality(XName, XName)
  nameWithType: XName.Equality(XName, XName)
  fullName: System.Xml.Linq.XName.Equality(System.Xml.Linq.XName, System.Xml.Linq.XName)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Equality
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 316
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are equal.</p>\n"
  syntax:
    content: public static bool operator ==(XName left, XName right)
    content.vb: Public Shared Operator =(left As XName, right As XName) As Boolean
    parameters:
    - id: left
      type: System.Xml.Linq.XName
      description: "\n<p>The first <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    - id: right
      type: System.Xml.Linq.XName
      description: "\n<p>The second <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are equal; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName
  commentId: M:System.Xml.Linq.XName.op_Implicit(System.String)~System.Xml.Linq.XName
  id: op_Implicit(System.String)~System.Xml.Linq.XName
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Implicit(String to XName)
  nameWithType: XName.Implicit(String to XName)
  fullName: System.Xml.Linq.XName.Implicit(System.String to System.Xml.Linq.XName)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Implicit
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 317
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Converts a string formatted as an expanded XML name (that is,<code>{namespace}localname</code>) to an <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object.</p>\n"
  syntax:
    content: >-
      [CLSCompliant(false)]

      public static implicit operator XName(string expandedName)
    content.vb: >-
      <CLSCompliant(False)>

      Public Shared Widening Operator CType(expandedName As String) As XName
    parameters:
    - id: expandedName
      type: System.String
      description: "\n<p>A string that contains an expanded XML name in the format <code>{namespace}localname</code>.</p>\n"
    return:
      type: System.Xml.Linq.XName
      description: "\n<p>An <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> object constructed from the expanded name.</p>\n"
  attributes:
  - type: System.CLSCompliantAttribute
    ctor: System.CLSCompliantAttribute.#ctor(System.Boolean)
    arguments:
    - type: System.Boolean
      value: false
  nameWithType.vb: XName.Widening(String to XName)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Xml.Linq.XName.Widening(System.String to System.Xml.Linq.XName)
  name.vb: Widening(String to XName)
- uid: System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XName.op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  id: op_Inequality(System.Xml.Linq.XName,System.Xml.Linq.XName)
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: Inequality(XName, XName)
  nameWithType: XName.Inequality(XName, XName)
  fullName: System.Xml.Linq.XName.Inequality(System.Xml.Linq.XName, System.Xml.Linq.XName)
  type: Operator
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: op_Inequality
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 319
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns a value indicating whether two instances of <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> are not equal.</p>\n"
  syntax:
    content: public static bool operator !=(XName left, XName right)
    content.vb: Public Shared Operator <>(left As XName, right As XName) As Boolean
    parameters:
    - id: left
      type: System.Xml.Linq.XName
      description: "\n<p>The first <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    - id: right
      type: System.Xml.Linq.XName
      description: "\n<p>The second <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to compare.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>left</em> and <em>right</em> are not equal; otherwise <strong>false</strong>.</p>\n"
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)
  commentId: M:System.Xml.Linq.XName.System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)
  id: System#IEquatable{System#Xml#Linq#XName}#Equals(System.Xml.Linq.XName)
  isEii: true
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: IEquatable<XName>.Equals(XName)
  nameWithType: XName.IEquatable<XName>.Equals(XName)
  fullName: System.Xml.Linq.XName.System.IEquatable<System.Xml.Linq.XName>.Equals(System.Xml.Linq.XName)
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: System.IEquatable<System.Xml.Linq.XName>.Equals
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 320
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Indicates whether the current <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
  syntax:
    content: bool IEquatable<XName>.Equals(XName other)
    content.vb: Function System.IEquatable<System.Xml.Linq.XName>.Equals(other As XName) As Boolean Implements IEquatable(Of XName).Equals
    parameters:
    - id: other
      type: System.Xml.Linq.XName
      description: "\n<p>The <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> to compare with this <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if this <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref> is equal to the specified <xref href=\"System.Xml.Linq.XName\" data-throw-if-not-resolved=\"false\"></xref>, otherwise <strong>false</strong>.</p>\n"
  implements:
  - System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)
  nameWithType.vb: XName.System.IEquatable<System.Xml.Linq.XName>.Equals(XName)
  name.vb: System.IEquatable<System.Xml.Linq.XName>.Equals(XName)
- uid: System.Xml.Linq.XName.ToString
  commentId: M:System.Xml.Linq.XName.ToString
  id: ToString
  parent: System.Xml.Linq.XName
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: XName.ToString()
  fullName: System.Xml.Linq.XName.ToString()
  type: Method
  source:
    remote:
      path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
      branch: master
      repo: https://github.com/dotnet/corefx.git
    id: ToString
    path: src/System.Xml.XDocument/ref/System.Xml.XDocument.cs
    startLine: 321
  assemblies:
  - System.Xml.XDocument
  namespace: System.Xml.Linq
  summary: "\n<p>Returns the expanded XML name in the format <code>{namespace}localname</code>.</p>\n"
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: "\n<p>A <xref href=\"System.String\" data-throw-if-not-resolved=\"false\"></xref> that contains the expanded XML name in the format <code>{namespace}localname</code>.</p>\n"
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
references:
- uid: System.Xml.Linq
  commentId: N:System.Xml.Linq
  isExternal: false
  name: System.Xml.Linq
  nameWithType: System.Xml.Linq
  fullName: System.Xml.Linq
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{System.Xml.Linq.XName}
  commentId: T:System.IEquatable{System.Xml.Linq.XName}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<XName>
  nameWithType: IEquatable<XName>
  fullName: System.IEquatable<System.Xml.Linq.XName>
  nameWithType.vb: IEquatable(Of XName)
  fullname.vb: System.IEquatable(Of System.Xml.Linq.XName)
  name.vb: IEquatable(Of XName)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: false
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Linq.XNamespace
  commentId: T:System.Xml.Linq.XNamespace
  parent: System.Xml.Linq
  isExternal: false
  name: XNamespace
  nameWithType: XNamespace
  fullName: System.Xml.Linq.XNamespace
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Linq.XName
  commentId: T:System.Xml.Linq.XName
  parent: System.Xml.Linq
  isExternal: false
  name: XName
  nameWithType: XName
  fullName: System.Xml.Linq.XName
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)
  commentId: M:System.IEquatable{System.Xml.Linq.XName}.Equals(System.Xml.Linq.XName)
  parent: System.IEquatable{System.Xml.Linq.XName}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(XName)
  nameWithType: IEquatable<XName>.Equals(XName)
  fullName: System.IEquatable<System.Xml.Linq.XName>.Equals(System.Xml.Linq.XName)
  nameWithType.vb: IEquatable(Of XName).Equals(XName)
  fullname.vb: System.IEquatable(Of System.Xml.Linq.XName).Equals(System.Xml.Linq.XName)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<XName>.Equals
    fullName: System.IEquatable<System.Xml.Linq.XName>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of XName).Equals
    fullName: System.IEquatable(Of System.Xml.Linq.XName).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: System.Xml.Linq.XName
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: false
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
