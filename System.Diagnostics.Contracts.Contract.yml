### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Contracts.Contract
  commentId: T:System.Diagnostics.Contracts.Contract
  id: Contract
  parent: System.Diagnostics.Contracts
  children:
  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.ContractFailed
  - System.Diagnostics.Contracts.Contract.EndContractBlock
  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)
  - System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  - System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  - System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.OldValue``1(``0)
  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)
  - System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)
  - System.Diagnostics.Contracts.Contract.Result``1
  - System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)
  langs:
  - csharp
  - vb
  name: Contract
  nameWithType: Contract
  fullName: System.Diagnostics.Contracts.Contract
  type: Class
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Contract
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 42
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.</p>\n"
  syntax:
    content: public static class Contract
    content.vb: Public Module Contract
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: System.Diagnostics.Contracts.Contract.ContractFailed
  commentId: E:System.Diagnostics.Contracts.Contract.ContractFailed
  id: ContractFailed
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ContractFailed
  nameWithType: Contract.ContractFailed
  fullName: System.Diagnostics.Contracts.Contract.ContractFailed
  type: Event
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ContractFailed
    path: src/mscorlib/src/System/Diagnostics/Contracts/ContractsBCL.cs
    startLine: 121
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Occurs when a contract fails.</p>\n"
  syntax:
    content: public static event EventHandler<ContractFailedEventArgs> ContractFailed
    content.vb: Public Shared Event ContractFailed As EventHandler(Of ContractFailedEventArgs)
    return:
      type: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}
  see:
  - linkId: System.Security.SecurityCriticalAttribute
    commentId: T:System.Security.SecurityCriticalAttribute
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  id: Assert(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assert(Boolean)
  nameWithType: Contract.Assert(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Assert(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assert
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 335
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Checks for a condition; if the condition is <strong>false</strong>, follows the escalation policy set for the analyzer.</p>\n"
  syntax:
    content: >-
      [Conditional("DEBUG")]

      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Assert(bool condition)
    content.vb: >-
      <Conditional("DEBUG")>

      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Assert(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)
  id: Assert(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assert(Boolean, String)
  nameWithType: Contract.Assert(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Assert(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assert
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 352
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Checks for a condition; if the condition is <strong>false</strong>, follows the escalation policy set by the analyzer and displays the specified message.</p>\n"
  syntax:
    content: >-
      [Conditional("DEBUG")]

      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Assert(bool condition, string userMessage)
    content.vb: >-
      <Conditional("DEBUG")>

      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Assert(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>A message to display if the condition is not met.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  id: Assume(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assume(Boolean)
  nameWithType: Contract.Assume(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Assume(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assume
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 293
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Instructs code analysis tools to assume that the specified condition is <strong>true</strong>, even if it cannot be statically proven to always be <strong>true</strong>.</p>\n"
  syntax:
    content: >-
      [Conditional("DEBUG")]

      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Assume(bool condition)
    content.vb: >-
      <Conditional("DEBUG")>

      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Assume(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to assume <strong>true</strong>.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)
  id: Assume(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Assume(Boolean, String)
  nameWithType: Contract.Assume(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Assume(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Assume
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 314
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Instructs code analysis tools to assume that a condition is <strong>true</strong>, even if it cannot be statically proven to always be <strong>true</strong>, and displays a message if the assumption fails.</p>\n"
  syntax:
    content: >-
      [Conditional("DEBUG")]

      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Assume(bool condition, string userMessage)
    content.vb: >-
      <Conditional("DEBUG")>

      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Assume(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to assume <strong>true</strong>.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to post if the assumption fails.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: DEBUG
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.EndContractBlock
  commentId: M:System.Diagnostics.Contracts.Contract.EndContractBlock
  id: EndContractBlock
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: EndContractBlock()
  nameWithType: Contract.EndContractBlock()
  fullName: System.Diagnostics.Contracts.Contract.EndContractBlock()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EndContractBlock
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 869
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Marks the end of the contract section when a method's contracts contain only preconditions in the <strong>if</strong>-<strong>then</strong>-<strong>throw</strong> form.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static void EndContractBlock()
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Sub
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  id: Ensures(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Ensures(Boolean)
  nameWithType: Contract.Ensures(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ensures
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 462
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract for the enclosing method or property.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Ensures(bool condition)
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Ensures(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\" data-throw-if-not-resolved=\"false\"></xref>, <xref href=\"System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)\" data-throw-if-not-resolved=\"false\"></xref>, and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)
  id: Ensures(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Ensures(Boolean, String)
  nameWithType: Contract.Ensures(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Ensures(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Ensures
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 482
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract for a provided exit condition and a message to display if the condition is <strong>false</strong>.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Ensures(bool condition, string userMessage)
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Ensures(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test. The expression may include <xref href=\"System.Diagnostics.Contracts.Contract.OldValue``1(``0)\" data-throw-if-not-resolved=\"false\"></xref> and <xref href=\"System.Diagnostics.Contracts.Contract.Result``1\" data-throw-if-not-resolved=\"false\"></xref> values. </p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the expression is not <strong>true</strong>.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)
  id: EnsuresOnThrow``1(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: EnsuresOnThrow<TException>(Boolean)
  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsuresOnThrow
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 502
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = "Exception type used in tools.")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void EnsuresOnThrow<TException>(bool condition)where TException : Exception
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification:="Exception type used in tools.")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub EnsuresOnThrow(Of TException As Exception)(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The type of exception that invokes the postcondition check.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  nameWithType.vb: Contract.EnsuresOnThrow(Of TException)(Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Of TException)(System.Boolean)
  name.vb: EnsuresOnThrow(Of TException)(Boolean)
- uid: System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)
  id: EnsuresOnThrow``1(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: EnsuresOnThrow<TException>(Boolean, String)
  nameWithType: Contract.EnsuresOnThrow<TException>(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.EnsuresOnThrow<TException>(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: EnsuresOnThrow
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 524
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a postcondition contract and a message to display if the condition is <strong>false</strong> for the enclosing method or property, based on the provided exception and condition.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = "Exception type used in tools.")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void EnsuresOnThrow<TException>(bool condition, string userMessage)where TException : Exception
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification:="Exception type used in tools.")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub EnsuresOnThrow(Of TException As Exception)(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the expression is <strong>false</strong>.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The type of exception that invokes the postcondition check.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  nameWithType.vb: Contract.EnsuresOnThrow(Of TException)(Boolean, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.EnsuresOnThrow(Of TException)(System.Boolean, System.String)
  name.vb: EnsuresOnThrow(Of TException)(Boolean, String)
- uid: System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  commentId: M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  id: Exists(System.Int32,System.Int32,System.Predicate{System.Int32})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Exists(Int32, Int32, Predicate<Int32>)
  nameWithType: Contract.Exists(Int32, Int32, Predicate<Int32>)
  fullName: System.Diagnostics.Contracts.Contract.Exists(System.Int32, System.Int32, System.Predicate<System.Int32>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 707
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether a specified test is true for any integer within a range of integers.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static bool Exists(int fromInclusive, int toExclusive, Predicate<int> predicate)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function Exists(fromInclusive As Integer, toExclusive As Integer, predicate As Predicate(Of Integer)) As Boolean
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: "\n<p>The first integer to pass to <em>predicate</em>.</p>\n"
    - id: toExclusive
      type: System.Int32
      description: "\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{System.Int32}
      description: "\n<p>The function to evaluate for any value of the integer in the specified range.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for any integer starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\n"
  nameWithType.vb: Contract.Exists(Int32, Int32, Predicate(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Exists(System.Int32, System.Int32, System.Predicate(Of System.Int32))
  name.vb: Exists(Int32, Int32, Predicate(Of Int32))
- uid: System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Exists<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: Contract.Exists<T>(IEnumerable<T>, Predicate<T>)
  fullName: System.Diagnostics.Contracts.Contract.Exists<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Exists
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 737
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether an element within a collection of elements exists within a function.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static bool Exists<T>(IEnumerable<T> collection, Predicate<T> predicate)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function Exists(Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{{T}}
      description: "\n<p>The function to evaluate for an element in <em>collection</em>.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that is contained in <em>collection</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for any element of type <em>T</em> in <em>collection</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.Generic.List`1.Exists(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})
  nameWithType.vb: Contract.Exists(Of T)(IEnumerable(Of T), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Exists(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: Exists(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  commentId: M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  id: ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ForAll(Int32, Int32, Predicate<Int32>)
  nameWithType: Contract.ForAll(Int32, Int32, Predicate<Int32>)
  fullName: System.Diagnostics.Contracts.Contract.ForAll(System.Int32, System.Int32, System.Predicate<System.Int32>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForAll
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 645
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether a particular condition is valid for all integers in a specified range.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static bool ForAll(int fromInclusive, int toExclusive, Predicate<int> predicate)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function ForAll(fromInclusive As Integer, toExclusive As Integer, predicate As Predicate(Of Integer)) As Boolean
    parameters:
    - id: fromInclusive
      type: System.Int32
      description: "\n<p>The first integer to pass to <em>predicate</em>.</p>\n"
    - id: toExclusive
      type: System.Int32
      description: "\n<p>One more than the last integer to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{System.Int32}
      description: "\n<p>The function to evaluate for the existence of the integers in the specified range.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if <em>predicate</em> returns <strong>true</strong> for all integers starting from <em>fromInclusive</em> to <em>toExclusive</em> - 1.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>predicate</em> is <strong>null</strong>.</p>\n"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "\n<p>\n<em>toExclusive </em>is less than <em>fromInclusive</em>.</p>\n"
  seealso:
  - linkId: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  nameWithType.vb: Contract.ForAll(Int32, Int32, Predicate(Of Int32))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.ForAll(System.Int32, System.Int32, System.Predicate(Of System.Int32))
  name.vb: ForAll(Int32, Int32, Predicate(Of Int32))
- uid: System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  commentId: M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  id: ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ForAll<T>(IEnumerable<T>, Predicate<T>)
  nameWithType: Contract.ForAll<T>(IEnumerable<T>, Predicate<T>)
  fullName: System.Diagnostics.Contracts.Contract.ForAll<T>(System.Collections.Generic.IEnumerable<T>, System.Predicate<T>)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ForAll
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 676
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Determines whether all the elements in a collection exist within a function.</p>\n"
  syntax:
    content: >-
      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static bool ForAll<T>(IEnumerable<T> collection, Predicate<T> predicate)
    content.vb: >-
      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Function ForAll(Of T)(collection As IEnumerable(Of T), predicate As Predicate(Of T)) As Boolean
    parameters:
    - id: collection
      type: System.Collections.Generic.IEnumerable{{T}}
      description: "\n<p>The collection from which elements of type <em>T</em> will be drawn to pass to <em>predicate</em>.</p>\n"
    - id: predicate
      type: System.Predicate{{T}}
      description: "\n<p>The function to evaluate for the existence of all the elements in <em>collection</em>.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type that is contained in <em>collection</em>.</p>\n"
    return:
      type: System.Boolean
      description: "\n<p>\n<strong>true</strong> if and only if <em>predicate</em> returns <strong>true</strong> for all elements of type <em>T</em> in <em>collection</em>.</p>\n"
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "\n<p>\n<em>collection</em> or <em>predicate</em> is <strong>null</strong>.</p>\n"
  seealso:
  - linkId: System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
    commentId: M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})
  nameWithType.vb: Contract.ForAll(Of T)(IEnumerable(Of T), Predicate(Of T))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.ForAll(Of T)(System.Collections.Generic.IEnumerable(Of T), System.Predicate(Of T))
  name.vb: ForAll(Of T)(IEnumerable(Of T), Predicate(Of T))
- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  id: Invariant(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Invariant(Boolean)
  nameWithType: Contract.Invariant(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invariant
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 599
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies an invariant contract for the enclosing method or property. </p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Invariant(bool condition)
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Invariant(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)
  id: Invariant(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Invariant(Boolean, String)
  nameWithType: Contract.Invariant(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Invariant(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Invariant
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 619
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Invariant(bool condition, string userMessage)
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Invariant(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the condition is <strong>false</strong>.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.OldValue``1(``0)
  commentId: M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)
  id: OldValue``1(``0)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: OldValue<T>(T)
  nameWithType: Contract.OldValue<T>(T)
  fullName: System.Diagnostics.Contracts.Contract.OldValue<T>(T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: OldValue
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 577
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Represents values as they were at the start of a method or property.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "value")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static T OldValue<T>(T value)
    content.vb: >-
      <SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId:="value")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function OldValue(Of T)(value As T) As T
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The value to represent (field or parameter).</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of value.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The value of the parameter or field at the start of a method or property.</p>\n"
  nameWithType.vb: Contract.OldValue(Of T)(T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.OldValue(Of T)(T)
  name.vb: OldValue(Of T)(T)
- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  id: Requires(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires(Boolean)
  nameWithType: Contract.Requires(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Requires(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Requires
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 377
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Requires(bool condition)
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Requires(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)
  id: Requires(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires(Boolean, String)
  nameWithType: Contract.Requires(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Requires(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Requires
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 397
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.</p>\n"
  syntax:
    content: >-
      [Conditional("CONTRACTS_FULL")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Requires(bool condition, string userMessage)
    content.vb: >-
      <Conditional("CONTRACTS_FULL")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Requires(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the condition is <strong>false</strong>.</p>\n"
  attributes:
  - type: System.Diagnostics.ConditionalAttribute
    ctor: System.Diagnostics.ConditionalAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: CONTRACTS_FULL
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)
  id: Requires``1(System.Boolean)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires<TException>(Boolean)
  nameWithType: Contract.Requires<TException>(Boolean)
  fullName: System.Diagnostics.Contracts.Contract.Requires<TException>(System.Boolean)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Requires
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 416
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "condition")]

      [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Requires<TException>(bool condition)where TException : Exception
    content.vb: >-
      <SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId:="condition")>

      <SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Requires(Of TException As Exception)(condition As Boolean)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\n"
  nameWithType.vb: Contract.Requires(Of TException)(Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Requires(Of TException)(System.Boolean)
  name.vb: Requires(Of TException)(Boolean)
- uid: System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)
  commentId: M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)
  id: Requires``1(System.Boolean,System.String)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Requires<TException>(Boolean, String)
  nameWithType: Contract.Requires<TException>(Boolean, String)
  fullName: System.Diagnostics.Contracts.Contract.Requires<TException>(System.Boolean, System.String)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Requires
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 437
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "userMessage")]

      [SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId = "condition")]

      [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)]

      public static void Requires<TException>(bool condition, string userMessage)where TException : Exception
    content.vb: >-
      <SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId:="userMessage")>

      <SuppressMessage("Microsoft.Usage", "CA1801:ReviewUnusedParameters", MessageId:="condition")>

      <SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.MayFail)>

      Public Shared Sub Requires(Of TException As Exception)(condition As Boolean, userMessage As String)
    parameters:
    - id: condition
      type: System.Boolean
      description: "\n<p>The conditional expression to test.</p>\n"
    - id: userMessage
      type: System.String
      description: "\n<p>The message to display if the condition is <strong>false</strong>.</p>\n"
    typeParameters:
    - id: TException
      description: "\n<p>The exception to throw if the condition is <strong>false</strong>.</p>\n"
  nameWithType.vb: Contract.Requires(Of TException)(Boolean, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Requires(Of TException)(System.Boolean, System.String)
  name.vb: Requires(Of TException)(Boolean, String)
- uid: System.Diagnostics.Contracts.Contract.Result``1
  commentId: M:System.Diagnostics.Contracts.Contract.Result``1
  id: Result``1
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: Result<T>()
  nameWithType: Contract.Result<T>()
  fullName: System.Diagnostics.Contracts.Contract.Result<T>()
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: Result
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 545
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Represents the return value of a method or property.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = "Not intended to be called at runtime.")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static T Result<T>()
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification:="Not intended to be called at runtime.")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function Result(Of T) As T
    typeParameters:
    - id: T
      description: "\n<p>Type of return value of the enclosing method or property.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>Return value of the enclosing method or property.</p>\n"
  nameWithType.vb: Contract.Result(Of T)()
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.Result(Of T)()
  name.vb: Result(Of T)()
- uid: System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)
  commentId: M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)
  id: ValueAtReturn``1(``0@)
  parent: System.Diagnostics.Contracts.Contract
  langs:
  - csharp
  - vb
  name: ValueAtReturn<T>(out T)
  nameWithType: Contract.ValueAtReturn<T>(out T)
  fullName: System.Diagnostics.Contracts.Contract.ValueAtReturn<T>(out T)
  type: Method
  source:
    remote:
      path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
      branch: master
      repo: https://github.com/dotnet/coreclr.git
    id: ValueAtReturn
    path: src/mscorlib/src/System/Diagnostics/Contracts/Contracts.cs
    startLine: 561
  assemblies:
  - System.Diagnostics.Contracts
  namespace: System.Diagnostics.Contracts
  summary: "\n<p>Represents the final (output) value of an <strong>out</strong> parameter when returning from a method.</p>\n"
  syntax:
    content: >-
      [SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId = "0#", Justification = "Not intended to be called at runtime.")]

      [ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)]

      public static T ValueAtReturn<T>(out T value)
    content.vb: >-
      <SuppressMessage("Microsoft.Design", "CA1021:AvoidOutParameters", MessageId:="0#", Justification:="Not intended to be called at runtime.")>

      <ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)>

      Public Shared Function ValueAtReturn(Of T)(ByRef value As T) As T
    parameters:
    - id: value
      type: '{T}'
      description: "\n<p>The <strong>out</strong> parameter.</p>\n"
    typeParameters:
    - id: T
      description: "\n<p>The type of the <strong>out</strong> parameter.</p>\n"
    return:
      type: '{T}'
      description: "\n<p>The output value of the <strong>out</strong> parameter.</p>\n"
  nameWithType.vb: Contract.ValueAtReturn(Of T)(ByRef T)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: System.Diagnostics.Contracts.Contract.ValueAtReturn(Of T)(ByRef T)
  name.vb: ValueAtReturn(Of T)(ByRef T)
references:
- uid: System.Diagnostics.Contracts
  commentId: N:System.Diagnostics.Contracts
  isExternal: false
  name: System.Diagnostics.Contracts
  nameWithType: System.Diagnostics.Contracts
  fullName: System.Diagnostics.Contracts
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}
  commentId: T:System.EventHandler{System.Diagnostics.Contracts.ContractFailedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<ContractFailedEventArgs>
  nameWithType: EventHandler<ContractFailedEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Contracts.ContractFailedEventArgs>
  nameWithType.vb: EventHandler(Of ContractFailedEventArgs)
  fullname.vb: System.EventHandler(Of System.Diagnostics.Contracts.ContractFailedEventArgs)
  name.vb: EventHandler(Of ContractFailedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs
    name: ContractFailedEventArgs
    nameWithType: ContractFailedEventArgs
    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Diagnostics.Contracts.ContractFailedEventArgs
    name: ContractFailedEventArgs
    nameWithType: ContractFailedEventArgs
    fullName: System.Diagnostics.Contracts.ContractFailedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: false
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Predicate{System.Int32}
  commentId: T:System.Predicate{System.Int32}
  parent: System
  definition: System.Predicate`1
  name: Predicate<Int32>
  nameWithType: Predicate<Int32>
  fullName: System.Predicate<System.Int32>
  nameWithType.vb: Predicate(Of Int32)
  fullname.vb: System.Predicate(Of System.Int32)
  name.vb: Predicate(Of Int32)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate`1
  commentId: T:System.Predicate`1
  isExternal: false
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  commentId: T:System.Collections.Generic.IEnumerable{`0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Predicate{{T}}
  commentId: T:System.Predicate{`0}
  parent: System
  definition: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
  nameWithType.vb: Predicate(Of T)
  fullname.vb: System.Predicate(Of T)
  name.vb: Predicate(Of T)
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
